using System.Collections;
using System.Collections.Generic; //Listに必要
using System.Linq;// evsからキー名指定でインデックス番号取り出すfor文に必要（Skipなど）
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.XR;
using DG.Tweening;//DOTween
using UnityEngine.PostProcessing; //Post-processing Stackをスクリプトでいじるために必要
using UnityEngine.Animations; // これがないと Constraintは使えない
using UnityEngine.Playables;//タイムラインを再生するコンポーネント
using UnityEngine.Timeline;//トラックやクリップの読み込みなど
using System.Text;//JSON形式に変換など？
using System.IO;//外部ファイル読み込みなど
using TMPro;//TextMeshPro

public partial class DataCounter
{
    void EvsLoad()//■■■■■■■■■■■イベント群（evsに追加していく）
    {
        //順番どおり追加していくことでイベント一覧とタイムラインも兼ねる
        //イベント名でも呼び出せるので、後から途中に追加できる
        evs.Clear();

        #region モーションチェック
        evs.Add("モーションチェック", () => //イベント名と実行するメソッド。()が引数指定で => がラムダ式によるdelegateで匿名メソッド直接作成
        {
            //初期化
            if (eventMoveFlag == true)
            {
                nowRunEvCoroutine = StartCoroutine(MotionCheck());//コルーチン実行と同時にストップかける用変数に代入
            }

        }
        );//evsへのAddがこれで終わる
        #endregion
        #region イベントテスト
        evs.Add("イベントテスト", () => //イベント名と実行するメソッド。()が引数指定で => がラムダ式によるdelegateで匿名メソッド直接作成
        {
            //初期化
            if (eventMoveFlag == true)
            {
                nowRunEvCoroutine = StartCoroutine(EventTest());//コルーチン実行と同時にストップかける用変数に代入
            }

        }
        );//evsへのAddがこれで終わる
        #endregion
        #region ユーザーデータチェックとロード
        evs.Add("ユーザーデータチェックとロード", () => //イベント名と実行するメソッド。()が引数指定で => がラムダ式によるdelegateで匿名メソッド直接作成
        {
            //初期化
            if (eventMoveFlag == true)
            {
                nowRunEvCoroutine = StartCoroutine(UserDataCheckLoad());//コルーチン実行と同時にストップかける用変数に代入
            }

        }
        );//evsへのAddがこれで終わる
        #endregion

        #region タイトル
        evs.Add("タイトル", () => //イベント名と実行するメソッド。()が引数指定で => がラムダ式によるdelegateで匿名メソッド直接作成
        {
            //初期化
            if (eventMoveFlag == true)
            {
                nowRunEvCoroutine = StartCoroutine(Title());//コルーチン実行と同時にストップかける用変数に代入
            }

        }

        );//evsへのAddがこれで終わる
        #endregion
        #region Bonus01
        evs.Add("おまけ01", () => //イベント名と実行するメソッド。()が引数指定で => がラムダ式によるdelegateで匿名メソッド直接作成
        {
            //初期化
            if (eventMoveFlag == true)
            {
                nowRunEvCoroutine = StartCoroutine(Bonus01());//コルーチン実行と同時にストップかける用変数に代入
            }

        }
        );//evsへのAddがこれで終わる
        #endregion
        #region 入室
        evs.Add("入室", () => //イベント名と実行するメソッド。()が引数指定で => がラムダ式によるdelegateで匿名メソッド直接作成
        {
            //初期化
            if (eventMoveFlag == true)
            {
                nowRunEvCoroutine = StartCoroutine(OP0100());//コルーチン実行と同時にストップかける用変数に代入
            }

        }

        );//evsへのAddがこれで終わる
        #endregion

        #region メガネの使い方
        evs.Add("メガネの使い方", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                nowRunEvCoroutine = StartCoroutine(T0000());//コルーチン実行と同時にストップかける用変数に代入
            }


        });
        #endregion
        #region チュートリアルそれじゃ説明するね
        evs.Add("チュートリアルそれじゃ説明するね", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                nowRunEvCoroutine = StartCoroutine(T0010());//コルーチン実行と同時にストップかける用変数に代入
            }

        });//evsへのAddがこれで終わる
        #endregion
        #region チュートリアル問題解いた
        evs.Add("チュートリアル問題解いた", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                nowRunEvCoroutine = StartCoroutine(T0030());//コルーチン実行と同時にストップかける用変数に代入
            }


        }
        );//evsへのAddがこれで終わる■■■■■■■■■■
        #endregion
        #region チュートリアル1ページ終えよう

        evs.Add("チュートリアル1ページ終えよう", () => //イベント名とActionメソッド。()が引数指定で => がラムダ式によるdelgate省略？
        {
            //初期化
            if (eventMoveFlag == true)
            {
                nowRunEvCoroutine = StartCoroutine(T0050());//コルーチン実行と同時にストップかける用変数に代入
            }

        }
        );//evsへのAddがこれで終わる

        #endregion
        #region チュートリアルもう終わりかな
        evs.Add("チュートリアルもう終わりかな", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = T0060();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);

                EventReset();
            }

        }
        );//evsへのAddがこれで終わる
        #endregion
        #region がんばろーね
        evs.Add("がんばろーね", () =>
        {
            if (eventMoveFlag == true)
            { nowRunEvCoroutine = StartCoroutine(T0070()); }

        }

        );

        #endregion

        #region //リニューアル前
        //#region 分岐C 宿題どうでもよくなっちゃった
        //evs.Add("分岐C 宿題どうでもよくなっちゃった", () =>
        //{
        //    //初期化
        //    if (eventMoveFlag == true)
        //    {
        //        nowRunEvCoroutine = StartCoroutine(C0010());//コルーチン実行と同時にストップかける用変数に代入
        //    }

        //}

        //);

        //#endregion
        //#region C はやる気持ち
        //evs.Add("C はやる気持ち", () =>
        //{
        //    //初期化
        //    if (eventMoveFlag == true)
        //    {
        //        nowRunEvCoroutine = StartCoroutine(C0020());//コルーチン実行と同時にストップかける用変数に代入
        //    }

        //}

        //);

        //#endregion
        //#region C 近づき再縮小
        //evs.Add("C 近づき再縮小", () =>
        //{
        //    //初期化
        //    if (eventMoveFlag == true)
        //    { nowRunEvCoroutine = StartCoroutine(C0030()); }
        //}
        //);

        //#endregion
        //#region C こんなにちっちゃくなっちゃいました
        //evs.Add("C こんなにちっちゃくなっちゃいました", () =>
        //{
        //    //初期化
        //    if (eventMoveFlag == true)
        //    { nowRunEvCoroutine = StartCoroutine(C0040()); }
        //}
        //);

        //#endregion
        //#region C 手乗せ
        //evs.Add("C 手乗せ", () =>
        //{
        //    //初期化
        //    if (eventMoveFlag == true)
        //    {
        //        //IEnumerator変数に入れて実行すると中断・再開できる。
        //        nowRunEvIEnumerator = C0050();
        //        nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);

        //        //手の範囲コリダーObj設置（なければ）
        //        if (GirlRHandTrs.Find(ResourceFiles.colliderDic["ZoneCollider_ChieriRHand"].name) == null)
        //        {
        //            GameObject tempZoneColliderObj = Instantiate(ResourceFiles.colliderDic["ZoneCollider_ChieriRHand"]);
        //            tempZoneColliderObj.transform.SetParent(GirlRHandTrs, false);
        //            tempZoneColliderObj.name = "ZoneCollider_ChieriRHand";
        //            DB.evDelObjList.Add(tempZoneColliderObj);

        //        }
        //    }

        //    //コリダーから外れたら落ちる発動
        //    if (playerTargetOnTriggerExitBool == true && bunkiTaikiBool01 == false)
        //    {
        //        if (playerTargetOnTriggerExitCol.gameObject.name == "ZoneCollider_ChieriRHand")
        //        {
        //            StopCoroutine(nowRunEvIEnumerator);
        //            StartCoroutine(C0050a());//落ちるイベント開始
        //            bunkiTaikiBool01 = true;
        //        }
        //    }

        //}
        //);

        //#endregion
        //#region C 手乗せ→つつき→●立ち上がり
        //evs.Add("C 手乗せ→つつき→●立ち上がり", () =>
        //{
        //    //初期化
        //    if (eventMoveFlag == true)
        //    {
        //        nowRunEvIEnumerator = C0056();
        //        nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
        //    }

        //    //コリダーから外れたら落ちる発動
        //    if (playerTargetOnTriggerExitBool == true && bunkiTaikiBool01 == false)
        //    {
        //        if (playerTargetOnTriggerExitCol.gameObject.name == "ZoneCollider_ChieriRHand")
        //        {
        //            StopCoroutine(nowRunEvIEnumerator);
        //            StartCoroutine(C0050a());//落ちるイベント開始
        //            bunkiTaikiBool01 = true;
        //        }
        //    }
        //}
        //);

        //#endregion
        //#region C 戻してほしい？
        //evs.Add("C 戻してほしい？", () =>
        //{
        //    //初期化
        //    if (eventMoveFlag == true)
        //    {
        //        //IEnumerator変数に入れて実行すると中断・再開できる。
        //        nowRunEvIEnumerator = C0070();
        //        nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
        //    }

        //}
        //);//evsへのAddがこれで終わる
        //#endregion
        //#region ゲーム選択
        //evs.Add("ゲーム選択", () =>
        //{
        //    //初期化
        //    if (eventMoveFlag == true)
        //    {
        //        //IEnumerator変数に入れて実行すると中断・再開できる。
        //        nowRunEvIEnumerator = C0080();
        //        nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
        //    }

        //}
        //);//evsへのAddがこれで終わる
        //#endregion

        //#region C かくれおに
        //evs.Add("C かくれおに", () =>
        //{
        //    //初期化
        //    if (eventMoveFlag == true)
        //    {
        //        //IEnumerator変数に入れて実行すると中断・再開できる。
        //        nowRunEvIEnumerator = C0100();
        //        nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
        //    }
        //}
        //);//evsへのAddがこれで終わる
        //#endregion
        //#region C 脚のぼり
        //evs.Add("C 脚のぼり", () =>
        //{
        //    //初期化
        //    if (eventMoveFlag == true)
        //    {
        //        //IEnumerator変数に入れて実行すると中断・再開できる。
        //        nowRunEvIEnumerator = C0200();
        //        nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
        //    }
        //}
        //);//evsへのAddがこれで終わる
        //#endregion
        //#region C 怪獣バトル
        //evs.Add("C 怪獣バトル", () =>
        //{
        //    //初期化
        //    if (eventMoveFlag == true)
        //    {
        //        //IEnumerator変数に入れて実行すると中断・再開できる。
        //        nowRunEvIEnumerator = C0300();
        //        nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
        //    }
        //}
        //);//evsへのAddがこれで終わる
        //#endregion
        //#region C チャイム
        //evs.Add("C チャイム", () =>
        //{
        //    //初期化
        //    if (eventMoveFlag == true)
        //    {
        //        //IEnumerator変数に入れて実行すると中断・再開できる。
        //        nowRunEvIEnumerator = C0500();
        //        nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
        //    }
        //}
        //);//evsへのAddがこれで終わる
        //#endregion
        #endregion

        #region 宿題開始
        evs.Add("宿題開始", () =>
        {
            if (eventMoveFlag == true)
            {
                nowRunEvCoroutine = StartCoroutine(A0010());//コルーチン実行と同時にストップかける用変数に代入
            }

            ////ランダムで消しゴム等のモーション（falseの間）
            //if (bunkiTaikiBool01 == false)
            //{ SyukudaiTaiki(); }

        }
        );

        #endregion
        #region ちょっと休憩
        evs.Add("ちょっと休憩", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            { nowRunEvCoroutine = StartCoroutine(B1000()); }
        }
        );
        #endregion
        #region 1-2ブリッジ 立ち上がり伸び近づき
        evs.Add("1-2ブリッジ 立ち上がり伸び近づき", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            { nowRunEvCoroutine = StartCoroutine(B1010()); }

        }
        );
        #endregion
        #region 1-2ブリッジ 立ち上がり待機
        evs.Add("1-2ブリッジ 立ち上がり待機", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = B1020();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);

                //中断用の変数群 初期化
                bunkiTaikiBool01 = false;//スカート覗いた時用（コルーチン切り替え）
                bunkiTaikiBool02 = false;//スカートイベント終了時用
                bunkiTaikiFloat01 = 0;//スカート覗いた回数用
            }

            //スカートを覗こうとしたらコルーチン切り替え（カメラX位置がスカート覗ける位置になったら）
            if (sentakuListNum == 99)//立ち上がり選択されたら止め
            {
                if (PlayerTargetTrs.position.x > -1f * GameObjectsTrs.localScale.z
                && bunkiTaikiBool01 == false)
                {
                    StopCoroutine(nowRunEvIEnumerator);
                    StartCoroutine(B1021a());//スカート抑えイベント開始
                    bunkiTaikiBool01 = true;
                }
            }


        }

        );
        #endregion
        #region 1-2ブリッジ 背比べ
        evs.Add("1-2ブリッジ 背比べ", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = B1030();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);

                EventReset();
            }

        });
        #endregion
        #region 1-2ブリッジ 隣に座り宿題手伝い
        evs.Add("1-2ブリッジ 隣に座り宿題手伝い", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                nowRunEvCoroutine = StartCoroutine(B1050());//コルーチン実行と同時にストップかける用変数に代入   
            }
        });
        #endregion

        #region 宿題進んだかな？
        evs.Add("宿題進んだかな？", () =>
        {

            //初期化
            if (eventMoveFlag == true)
            {
                nowRunEvCoroutine = StartCoroutine(B2000());//コルーチン実行と同時にストップかける用変数に代入
            }

        }
        );
        #endregion
        #region 気が散る！
        evs.Add("気が散る！", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                nowRunEvCoroutine = StartCoroutine(B2010());//コルーチン実行と同時に変数に代入
            }
        }
        );
        #endregion
        #region 持ち上げられそう
        evs.Add("持ち上げられそう", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                nowRunEvCoroutine = StartCoroutine(B2020());//コルーチン実行と同時に変数に代入
            }
        }
        );
        #endregion
        #region 本当に縮んでるよ
        evs.Add("本当に縮んでるよ", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = B2030();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 上見ちゃだめ
        evs.Add("上見ちゃだめ", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = B2040();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);

                EventReset();
            }
        }
        );
        #endregion
        #region どこまで縮むかな
        evs.Add("どこまで縮むかな", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = B2050();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);

                EventReset();
            }
        }
        );
        #endregion
        #region バジラ君だよ
        evs.Add("バジラ君だよ", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = B2060();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region バジラVSマコト
        evs.Add("バジラVSマコト", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = B2070();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 定規で測りながら
        evs.Add("定規で測りながら", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = B2080();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region エッフェル塔
        evs.Add("エッフェル塔", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = B2090();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 手の平の上
        evs.Add("手の平の上", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = B2100();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion

        #region チャイム
        evs.Add("チャイム", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = C1010();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );//evsへのAddがこれで終わる
        #endregion
        #region 少しだけ待っててね
        evs.Add("少しだけ待っててね", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = D1000();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion

        #region ToBeContinued
        evs.Add("ToBeContinued", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                nowRunEvCoroutine = StartCoroutine(ToBeContinued());//コルーチン実行と同時にストップかける用変数に代入              
            }

        });
        #endregion
        #region 予告 ペットボトル
        evs.Add("予告 ペットボトル", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                nowRunEvIEnumerator = yokokuPetBottle();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }

        });
        #endregion
        #region 予告 足親指攻め
        evs.Add("予告 足親指攻め", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                nowRunEvIEnumerator = yokokuAsioyayubiZeme();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }

        });
        #endregion
        #region 予告 転送都市1
        evs.Add("予告 転送都市1", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                nowRunEvIEnumerator = yokokuCity01();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }

        });
        #endregion

        //　　　　　Ver0.5以降
        #region 探索1
        evs.Add("探索1", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = D2000();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 椅子へ飛び降り
        evs.Add("椅子へ飛び降り", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = D2010();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 電気ケーブル降り
        evs.Add("電気ケーブル降り", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = D2020();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }


        }
        );
        #endregion
        #region 探索1_机裏
        evs.Add("探索1_机裏", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = D2100();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region ゴミ箱裏隠れ
        evs.Add("ゴミ箱裏隠れ", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = D2110();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region USBケーブル登り
        evs.Add("USBケーブル登り", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = D2130();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 引き出しの上
        evs.Add("引き出しの上", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = D2131();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region はい、ただいま
        evs.Add("はい、ただいま", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = D2132();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 降りて見せて
        evs.Add("降りて見せて", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = D2135();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 足親指攻め
        evs.Add("足親指攻め", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = D2137();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region ドアが開いたら
        evs.Add("ドアが開いたら", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = D2150();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 気づいていない
        evs.Add("気づいていない", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = D2200();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 摘み上げられ
        evs.Add("摘み上げられ", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = D2210();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 旧 摘み上げられ
        evs.Add("旧 摘み上げられ", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = D2215();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 摘んで運ばれ
        evs.Add("摘んで運ばれ", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = D2220();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 帰ろうとしてた？
        evs.Add("帰ろうとしてた？", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = E3000();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion

        //　　　　　Ver0.52以降
        #region ペットボトル
        evs.Add("ペットボトル", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = E3010();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 閉じ込められて一夜
        evs.Add("閉じ込められて一夜", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = E3020();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 閉じ込められたまま朝
        evs.Add("閉じ込められたまま朝", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = E3030();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 大事な日
        evs.Add("大事な日", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = E3040();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 指掴まり
        evs.Add("指掴まり", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = E3050();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region これからの事
        evs.Add("これからの事", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = E3060();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion

        #region 小さな家
        evs.Add("小さな家", () => //イベント名と実行するメソッド。()が引数指定で => がラムダ式によるdelegateで匿名メソッド直接作成
        {
            //初期化
            if (eventMoveFlag == true)
            {
                nowRunEvCoroutine = StartCoroutine(E3070UT());//コルーチン実行と同時にストップかける用変数に代入
            }

        }
        );//evsへのAddがこれで終わる
        #endregion
        #region ちえりの説明
        evs.Add("ちえりの説明", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = E3080();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 元の大きさ
        evs.Add("元の大きさ", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = E3090();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 街へ行く
        evs.Add("街へ行く", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = E4000UT();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 転送都市1
        evs.Add("転送都市1", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = E4010UT();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 転送都市2
        evs.Add("転送都市2", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = E4020UT();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 追う
        evs.Add("追う", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = E4030UT();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 追われる
        evs.Add("追われる", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = E4040UT();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 追われる2
        evs.Add("追われる2", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = E4045UT();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion

        #region 摘まむだけで
        evs.Add("摘まむだけで", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = F3000();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region パン
        evs.Add("パン", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = F3010();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion

        #region 食べられる？
        evs.Add("食べられる？", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = F3020();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 咥内
        evs.Add("咥内", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = F3030();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 食後
        evs.Add("食後", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = F3040();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region ハンカチのマット
        evs.Add("ハンカチのマット", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = F3050();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 就寝
        evs.Add("就寝", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = F3060();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 寝床探し
        evs.Add("寝床探し", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = F3070();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 床上起床
        evs.Add("床上起床", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = F3080();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion

        #region Ver0.以降

        #region //会話1
        //evs.Add("会話1", () =>
        //{
        //    //初期化
        //    if (eventMoveFlag == true)
        //    {
        //        //IEnumerator変数に入れて実行すると中断・再開できる。
        //        nowRunEvIEnumerator = D3000();
        //        nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
        //    }
        //}
        //);
        #endregion
        #region 会話1_宿題
        evs.Add("会話1_宿題", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = D3100();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }

            //ランダムで消しゴム等のモーション（falseの間）
            DeskSyukudaiTaiki();

        }
        );
        #endregion
        #region //会話2_食事
        //evs.Add("会話2_食事", () =>
        //{
        //    //初期化
        //    if (eventMoveFlag == true)
        //    {
        //        //IEnumerator変数に入れて実行すると中断・再開できる。
        //        nowRunEvIEnumerator = D3300();
        //        nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
        //    }
        //}
        //);
        #endregion
        #region //会話3_ハンカチベッド
        //evs.Add("会話3_ハンカチベッド", () =>
        //{
        //    //初期化
        //    if (eventMoveFlag == true)
        //    {
        //        //IEnumerator変数に入れて実行すると中断・再開できる。
        //        nowRunEvIEnumerator = D3400();
        //        nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
        //    }
        //}
        //);
        #endregion
        #region 探索2_風呂中
        evs.Add("探索2_風呂中", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = D3500();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region //会話4_就寝
        //evs.Add("会話4_就寝", () =>
        //{
        //    //初期化
        //    if (eventMoveFlag == true)
        //    {
        //        //IEnumerator変数に入れて実行すると中断・再開できる。
        //        nowRunEvIEnumerator = D3600();
        //        nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
        //    }
        //}
        //);
        #endregion
        #region 探索2_ベッドのスマホ
        evs.Add("探索2_ベッドのスマホ", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = E3700();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion

        #region //会話5_起床
        //evs.Add("会話5_起床", () =>
        //{
        //    //初期化
        //    if (eventMoveFlag == true)
        //    {
        //        //IEnumerator変数に入れて実行すると中断・再開できる。
        //        nowRunEvIEnumerator = D4000();
        //        nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
        //    }
        //}
        //);
        #endregion
        #region 監禁2_ペットボトル
        evs.Add("監禁2_ペットボトル", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = E4100();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion

        #region 監禁3_ペットボトル朝食
        evs.Add("監禁3_ペットボトル朝食", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = E4200();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion

        #region 練習1_朝
        evs.Add("練習1_朝", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = D4100();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion
        #region 練習2_朝地べた
        evs.Add("練習2_朝地べた", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = D4200();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );
        #endregion

        #region BAD010 埋め合わせできない
        evs.Add("BAD010 埋め合わせできない", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                nowRunEvCoroutine = StartCoroutine(BAD010());//コルーチン実行と同時にストップかける用変数に代入              
            }

        });
        #endregion

        #region ビル破壊テスト01
        evs.Add("ビル破壊テスト01", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = FracturingTest01();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );//evsへのAddがこれで終わる
        #endregion
        #region ビル破壊テスト02
        evs.Add("ビル破壊テスト02", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = FracturingTest02();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );//evsへのAddがこれで終わる
        #endregion
        #region 都市マップ並べテスト00
        evs.Add("都市マップ並べテスト00", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = CityMapTest00();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );//evsへのAddがこれで終わる
        #endregion

        #region 削除
        //#region 予告開始
        //evs.Add("予告開始", () =>
        //{
        //    //初期化
        //    if (eventMoveFlag == true)
        //    {
        //        nowRunEvIEnumerator = yokokuStart();
        //        nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
        //    }

        //});
        //#endregion
        //#region 予告 ベッドの下
        //evs.Add("予告 ベッドの下", () =>
        //{
        //    //初期化
        //    if (eventMoveFlag == true)
        //    {
        //        nowRunEvIEnumerator = yokokuBednoShita();
        //        nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
        //    }

        //});
        //#endregion
        //#region 予告 行ってきます
        //evs.Add("予告 行ってきます", () =>
        //{
        //    //初期化
        //    if (eventMoveFlag == true)
        //    {
        //        nowRunEvIEnumerator = yokokuIttekimasu();
        //        nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
        //    }

        //});
        //#endregion
        //#region 予告 転送都市
        //evs.Add("予告 転送都市", () =>
        //{
        //    //初期化
        //    if (eventMoveFlag == true)
        //    {
        //        nowRunEvIEnumerator = yokokuTensouToshi();
        //        nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
        //    }

        //});
        //#endregion

        //#region カラーテスト01
        //evs.Add("カラーテスト01", () =>
        //{
        //    //初期化
        //    if (eventMoveFlag == true)
        //    {
        //        nowRunEvIEnumerator = ColorTest01();
        //        nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
        //    }

        //});
        //#endregion
        //#region カラーテスト02
        //evs.Add("カラーテスト02", () =>
        //{
        //    //初期化
        //    if (eventMoveFlag == true)
        //    {
        //        nowRunEvIEnumerator = ColorTest02();
        //        nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
        //    }

        //});

        //#endregion

        //#region エディットモード
        //evs.Add("エディットモード", () => //イベント名と実行するメソッド。()が引数指定で => がラムダ式によるdelegateで匿名メソッド直接作成
        //{
        //    //初期化
        //    if (eventMoveFlag == true)
        //    {
        //        nowRunEvCoroutine = StartCoroutine(EditMode());//コルーチン実行と同時にストップかける用変数に代入
        //    }

        //}
        //);//evsへのAddがこれで終わる
        //#endregion

        #endregion
        #endregion

        #region UTLテスト
        evs.Add("UTLテスト", () =>
        {
            //初期化
            if (eventMoveFlag == true)
            {
                //IEnumerator変数に入れて実行すると中断・再開できる。
                nowRunEvIEnumerator = UTLTest();
                nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
            }
        }
        );//evsへのAddがこれで終わる
        #endregion


        #region ■コマデータに直接置かれたイベント取得

        #region フォルダ取得

        //まずフォルダ確保（あれば取得なければ生成）
        if (GameObject.Find("FlowChartKomaDataFolder") == null)
        {
            FlowChartKomaDataFolder = new GameObject();
            FlowChartKomaDataFolder.name = "FlowChartKomaDataFolder";
        }
        else { FlowChartKomaDataFolder = GameObject.Find("FlowChartKomaDataFolder"); }

        #endregion


        //手動追加コマをイベントに登録（コマデータを読み取り boolで判定）
        foreach (Transform ObjTrs in FlowChartKomaDataFolder.transform)
        {
            //取得
            var tmpKomaData = ObjTrs.GetComponent<FlowChartKoma>();
            //手動追加コマイベントなら
            if (tmpKomaData.isManualKomaData)
            {
                #region evs.Add （タイムラインデータを読み取ってAdd）
                evs.Add(tmpKomaData.eventName, () =>
                {
                    //初期化
                    if (eventMoveFlag == true)
                    {
                        //もしタイムラインあれば
                        if (tmpKomaData.playable != null)
                        {
                            //コマデータに登録されたタイムライン読み込み
                            KDEventPlayable = tmpKomaData.playable;

                            //Fogシーン読み込むならBoolオン
                            if (tmpKomaData.isFogSceneLoad) { isKDEventFogSceneLoad = true; }
                            else { isKDEventFogSceneLoad = false; }

                            //Bathシーン読み込むならBoolオン
                            if (tmpKomaData.isBathSceneLoad) { isKDEventBathSceneLoad = true; }
                            else { isKDEventBathSceneLoad = false; }

                        }
                        else //なかったら
                        {
                            Debug.Log("コマデータでタイムライン指定無し？");
                        }


                        //※デフォルトに沿ってコマデータイベント入れ
                        //IEnumerator変数に入れて実行すると中断・再開できる。
                        nowRunEvIEnumerator = KomaDataEvent();
                        nowRunEvCoroutine = StartCoroutine(nowRunEvIEnumerator);
                    }
                }
                );
                #endregion
            }

        }


        #endregion

        #region ■DBにイベント名一覧送信（デバッグ確認用）

        //■イベント名一覧送信
        DB.eventNamesList.Clear();
        for (int i = 0; i < evs.Count; i++)
        { DB.eventNamesList.Add(evs[i].Key); }

        #region // イベント名デバッグログ書き出し
        //int tmpi = 0;
        //string tmps = "";
        //DB.eventNamesList.Clear();
        //for (int i = 0; i < evs.Count; i++)
        //{
        //    DB.eventNamesList.Add(evs[i].Key);
        //    tmps += tmpi + " " + evs[i].Key + "\n";
        //    tmpi++;
        //}
        //Debug.Log(tmps);

        #endregion



        #endregion

        #region ■フローチャート更新

        #region フォルダ取得して コマデータObjリスト更新して(シリアルも取得) 古いフォルダクローン　前オブジェ削除してリストクリア

        //まずフォルダ確保（あれば取得なければ生成）
        if (GameObject.Find("FlowChartKomaDataFolder") == null)
        {
            FlowChartKomaDataFolder = new GameObject();
            FlowChartKomaDataFolder.name = "FlowChartKomaDataFolder";
        }
        else { FlowChartKomaDataFolder = GameObject.Find("FlowChartKomaDataFolder"); }


        //シリアル取得用変数
        List<string> tmpSerialList = new List<string>();

        //一旦Objリスト読み込みなおし（取得した場合、以前のリストと別物が並んでいる可能性大なため）
        flowChartKomaDataObjList.Clear();
        foreach (Transform ObjTrs in FlowChartKomaDataFolder.transform)
        {
            flowChartKomaDataObjList.Add(ObjTrs.gameObject);
            //■シリアル取得
            var tmpSerial = ObjTrs.GetComponent<FlowChartKoma>().staticSerialNumber;
            //シリアル空っぽならストップ
            if (tmpSerial == "")
            {
                Debug.Log("■イベントシリアルナンバー空っぽがあったのでロード強制終了");
                goto ロード終了;
            }
            //もし被りがあればここでストップ
            if (tmpSerialList.Contains(tmpSerial))
            {
                Debug.Log("■イベントシリアルナンバーに被りがあったのでロード強制終了" + tmpSerial);
                goto ロード終了;
            }
            else
            {
                tmpSerialList.Add(ObjTrs.GetComponent<FlowChartKoma>().staticSerialNumber);
            }

        }



        //以前のイベントObjクリア前に、以前のフォルダ一時クローン（最後に照らし合わせて、データサルベージするため）
        var oldFlowChartKomaDataFolder = Instantiate(FlowChartKomaDataFolder);
        oldFlowChartKomaDataFolder.name = "oldFlowChartKomaDataFolder";

        //前オブジェ削除とクリア
        for (int i = 0; i < flowChartKomaDataObjList.Count; i++)
        { DestroyImmediate(flowChartKomaDataObjList[i]); }
        flowChartKomaDataObjList.Clear();

        #endregion

        //イベントリストからコマデータObj生成 リストに追加
        for (int i = 0; i < DB.eventNamesList.Count; i++)
        {
            //■以前と同じシリアルナンバーがあれば保持していたデータからサルベージして終了
            foreach (Transform oldObjTrs in oldFlowChartKomaDataFolder.transform)
            {
                //古い方に、同じシリアルナンバーのものがあれば
                if (oldObjTrs.GetComponent<FlowChartKoma>().staticSerialNumber == tmpSerialList[i])
                {

                    //クローンして
                    GameObject tmpCopyObj = Instantiate(oldObjTrs.gameObject);
                    //名前を「index数字 イベント名」に
                    tmpCopyObj.name = i + " " + DB.eventNamesList[i];
                    //イベントナンバーをindex数字に
                    tmpCopyObj.GetComponent<FlowChartKoma>().eventNum = i;
                    //Objリストに追加 ペアレント
                    flowChartKomaDataObjList.Add(tmpCopyObj.gameObject);
                    tmpCopyObj.transform.SetParent(FlowChartKomaDataFolder.transform);

                    //サルベージした古いオブジェ消し
                    DestroyImmediate(oldObjTrs.gameObject);

                    goto コマデータ生成終了;

                }
                else//同じシリアルが無くて
                {
                    //もし手動追加コマデータイベントだったら（追加してからロードするのでありえないけど一応）
                    if (oldObjTrs.GetComponent<FlowChartKoma>().isManualKomaData)
                    {
                        Debug.Log("同じシリアルが無くて手動追加イベントコマデータを見つけたのでロード終了");
                        goto ロード終了;
                    }
                }
            }

            //■新規イベント（古い方に同じイベント名がない）だったら

            //新規コマデータObj作成
            GameObject obj = new GameObject();
            //名前を「index数字 イベント名」に
            obj.name =
                i + " " + DB.eventNamesList[i];

            //コマデータコンポーネント付与
            FlowChartKoma koma = obj.AddComponent<FlowChartKoma>();
            koma.eventNum = i;
            koma.eventName = DB.eventNamesList[i];

            //Objリストに追加 ペアレント
            flowChartKomaDataObjList.Add(obj.gameObject);
            obj.transform.SetParent(FlowChartKomaDataFolder.transform);

            コマデータ生成終了:;
        }
        //全てサルベージされて空なら古いフォルダ削除
        if (oldFlowChartKomaDataFolder.transform.childCount == 0)
        { DestroyImmediate(oldFlowChartKomaDataFolder); }
        //サルベージされず残留したObjがあるならDebugメッセージ出してそのまま残す
        else { Debug.Log("サルベージされなかったフローチャートコマがあるので要確認"); }


        ロード終了:;

        #endregion

    }

    //■TimeLineコルーチンでイベント進行■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
    //書式テンプレート群


    IEnumerator template()
    {
        #region////選択肢
        //「え？」「何言ってんの！」
        Sentakushi("■C0040a");
        Sentakushi("■C0040b");
        sentakuListNum = 99;//初期化
        //選択肢選ばれるまでループ
        while (sentakuListNum == 99) { yield return null; }
        yield return null;
        switch (sentakuListNum)
        {
            case 0://選択肢a
                break;

            case 1://選択肢b
                break;

            case -1://選択肢z 無言
                break;
        }
        #endregion

        //DOTWeenTO
        DOTween.To(() => testFloat01, (x) => testFloat01 = x
        , 30.5f
        , 1f);

        #region//Path例
        //Vector3[] paths = new[] {
        //        new Vector3(1, 2, 2),
        //        new Vector3(8, 0, 4),
        //        new Vector3(9, 2, 14),
        //        new Vector3(5, 4, 10),
        //        new Vector3(2, 4, 4)
        //        };
        //        // PathType.CatmullRomは滑らかな曲線を描いて移動します
        //        Tweener tween = IKRHandTargetTrs.DOPath(paths, 2.0f, PathType.CatmullRom);

        #endregion


        #region//VR環境別分岐

        if (XRSettings.enabled)
        { Debug.Log("VR"); }
        else
        { Debug.Log("NoVR"); }

        #endregion

        //サブタイトル
        subTitleTextObj = Instantiate(Resources.Load("EventSystem/Hukidashi/SubTitleText00") as GameObject
            , FadeCanvasObj.transform, false);
        DB.evMoveDelObjList.Add(subTitleTextObj);

        subTitleText = subTitleTextObj.GetComponent<Text>();
        subTitleText.text = serihuDict["S0050"];

        subTitleTween =
        DOTween.To(() => subTitleText.color, (x) => subTitleText.color = x,
                new Color(1, 1, 1, 1), 3f);


        subTitleTween.Kill();
        DOTween.To(() => subTitleText.color, (x) => subTitleText.color = x,
                        new Color(1, 1, 1, 0), 2f);
        if (subTitleTextObj != null) { Destroy(subTitleTextObj); }


    }

    IEnumerator MotionCheck()//モーションチェック
    {
        if (debugEventMoveFlag == true)
        {
            //デバッグ用アニメ直接再生
            ChieriMotion("座り待機", 0f, 0);

            //宿題システムスタート
            StartCoroutine(HomeworkSystem());
            //タイトルで消える小物ON
            HomeworkTrs.gameObject.SetActive(true);
            isHwVisLock = false;
            DrillTrs.gameObject.SetActive(true);
            Drill_chieriTrs.gameObject.SetActive(true);
            SharpenObj.gameObject.SetActive(true);
            KeshigomuObj.SetActive(true);
            GrasstableTrs.gameObject.SetActive(true);
            RoomTrs.gameObject.SetActive(true);
        }

        EventReset();

        //プレイヤー大きさ
        //nowPlayerLocalScale = new Vector3(0.05f, 0.05f, 0.05f);
        //nowPlayerLocalScale = new Vector3(0.03f, 0.03f, 0.03f);
        //nowPlayerLocalScale = new Vector3(0.015f, 0.015f, 0.015f);

        //智恵理スキンメッシュコリダー生成テスト
        ReloadSkinMeshColliderSystemCor = StartCoroutine(ReloadSkinMeshColliderSystemIEnum());

        #region 宿題を机の上へ
        //宿題 位置に
        Drill_chieriTrs.gameObject.SetActive(true);
        GameObject Drill_chieri_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/Drill_chieri_DeskPosObj") as GameObject;
        Drill_chieriTrs.localPosition = Drill_chieri_DeskPosObj.transform.localPosition;
        Drill_chieriTrs.localEulerAngles = Drill_chieri_DeskPosObj.transform.localEulerAngles;
        //一応主人公の宿題も
        HomeworkObjectsTrs.SetParent(DrillTrs);
        DrillTrs.localPosition = Drill_chieri_DeskPosObj.transform.localPosition;
        DrillTrs.localEulerAngles = Drill_chieri_DeskPosObj.transform.localEulerAngles;
        DrillTrs.gameObject.SetActive(false);

        #endregion
        //ボタンで切り替え用
        bool isChieriPlayerLookIK = true;

        yield return null;

        //サブタイトルで操作表示
        SubTitleVis(true, "F = テストモーション再生" + "\n" + "V = IKのONOFF" + "\n" + "J = 椅子基準位置に", 1f);

        while (true)
        {
            if (Input.GetKeyDown(KeyCode.F))
            {
                ChieriMotion("テストモーション", 0f, 0);
            }

            if (Input.GetKeyDown(KeyCode.V))
            {
                if (isChieriPlayerLookIK == false)
                {
                    isChieriPlayerLookIK = true;
                    //IKプレイヤー見る
                    FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                    FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
                    DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
                }
                else
                {
                    isChieriPlayerLookIK = false;
                    DOTweenToLAIKSEyes(LAIKEyeS, 0, 1);
                    DOTweenToLAIKSHead(LAIKHeadS, 0, 1);
                }
            }

            if (Input.GetKeyDown(KeyCode.J))
            {
                DB.isChieriPosLock = false;
                //椅子位置に
                GameObject Chieri_02Old2_DeskChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02Old2_DeskChairPosObj") as GameObject;
                GirlTrs.localPosition = Chieri_02Old2_DeskChairPosObj.transform.localPosition;
                GirlTrs.localEulerAngles = Chieri_02Old2_DeskChairPosObj.transform.localEulerAngles;
            }

            //BGMチェック
            if (Input.GetKeyDown(KeyCode.V))
            {
                EventMove("イベントテスト");
            }
            if (Input.GetKeyDown(KeyCode.B))
            {
                EventMove("イベントテスト", true, true);
            }

            yield return null;
        }

    }
    IEnumerator EventTest()//イベントテスト
    {
        if (debugEventMoveFlag == true)
        {
            ////宿題システムスタート
            //StartCoroutine(HomeworkSystem());
            //HomeworkTrs.gameObject.SetActive(true);

            ChieriMotion("T-pose", 0f, 0);//デバッグ用アニメ直接再生
                                          //タイトルで消した小物復活
            isHwVisLock = false;
            //DrillTrs.gameObject.SetActive(true);
            Drill_chieriTrs.gameObject.SetActive(true);
            SharpenObj.gameObject.SetActive(true);
            KeshigomuObj.SetActive(true);
            GrasstableTrs.gameObject.SetActive(true);
            RoomTrs.gameObject.SetActive(true);
        }

        EventReset();

        ChieriMotion("座り待機", 0f, 0);

        ////IKプレイヤー見る
        //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0));
        //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        //プレイヤー大きさ
        //nowPlayerLocalScale = new Vector3(0.05f, 0.05f, 0.05f);
        //nowPlayerLocalScale = new Vector3(0.03f, 0.03f, 0.03f);
        //nowPlayerLocalScale = new Vector3(0.015f, 0.015f, 0.015f);

        #region 智恵理スキンメッシュコリダー生成テスト

        //システム化
        StartCoroutine(ReloadSkinMeshColliderSystemIEnum());

        //AN_isInputToggleMode = false;
        //AN_isInputSwitchEasyMode = true;
        //AN_isInputSwitchHardMode = true;

        //AN_isGrapPowerMode = false;
        //AN_isClimbMode = true;

        //girlAnim.speed = 0.3f;


        //////■手動で単体スキン取得
        ////SkinnedMeshRenderer
        ////    tmpSMRenderer = GameObject.Find("Spats").GetComponent<SkinnedMeshRenderer>();
        ////Mesh
        ////    tmpMesh = new Mesh();
        ////GameObject
        ////    tmpMeshColliderObj = new GameObject(nameof(tmpMeshColliderObj));

        ////tmpMeshColliderObj.transform.SetParent(GirlTrs, false);
        ////tmpMeshColliderObj.transform.localEulerAngles = new Vector3(270, 0, 0);
        ////tmpMeshColliderObj.transform.localScale = new Vector3(0.01f, 0.01f, 0.01f);


        ////MeshCollider
        ////    tmpMeshCollider = tmpMeshColliderObj.AddComponent<MeshCollider>();

        #endregion

        #region 宿題を机の上へ
        //宿題 位置に
        Drill_chieriTrs.gameObject.SetActive(true);
        GameObject Drill_chieri_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/Drill_chieri_DeskPosObj") as GameObject;
        Drill_chieriTrs.localPosition = Drill_chieri_DeskPosObj.transform.localPosition;
        Drill_chieriTrs.localEulerAngles = Drill_chieri_DeskPosObj.transform.localEulerAngles;
        //一応主人公の宿題も
        //HomeworkObjectsTrs.SetParent(DrillTrs);
        //DrillTrs.localPosition = Drill_chieri_DeskPosObj.transform.localPosition;
        //DrillTrs.localEulerAngles = Drill_chieri_DeskPosObj.transform.localEulerAngles;
        //DrillTrs.gameObject.SetActive(false);

        #endregion


        //プレイヤー表示
        Dummy_Body.SetActive(true);
        Dummy_Hand.SetActive(true);


        DB.isChieriPosLock = false;

        #region //背比べテスト

        //ChieriMotion("背比べ01", 0f, 0);//デバッグ用アニメ直接再生

        //ChieriMotion("笑顔01口眉_目閉じない", 0.5f, 2);

        //yield return new WaitForSeconds(0.1f);

        //////「ちょっとじっとしてて」
        ////Hukidashi("AB0090");

        ////LookAtターゲットプレイヤーの顔へ
        //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0.2f);
        //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
        //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);

        //FollowDOMove(IKRHandTargetTrs, PlayerTargetTrs, new Vector3(0.2f, 0.55f, 0.3f), 0f);//事前に外回り動きするように

        ////プレイヤー アンカーカメラ立ち位置
        //CameraAnchorTrs.localPosition = DB.cameraStandAnchorDefLocalPos;

        ////■PosObjで読み込み
        ////プレイヤー 部屋ドア前立ち位置に
        //GameObject Player_00SekurabeStandPosObj = Resources.Load("_PosObj/02Sekurabe/Player_00SekurabeStandPosObj") as GameObject;
        //CameraObjectsTrs.localPosition = Player_00SekurabeStandPosObj.transform.localPosition;
        //CameraObjectsTrs.localEulerAngles = Player_00SekurabeStandPosObj.transform.localEulerAngles;

        //nowPlayerLocalScale = new Vector3(0.8f, 0.8f, 0.8f);
        ////CameraReset();

        ////スマホ片手いじりPosへ
        //GameObject ChieriSumaho_LHand_SekurabeKatatePosObj = Resources.Load("_PosObj/_ParentPoseObjs/ChieriSumaho_LHand_SekurabeKatatePosObj") as GameObject;
        //ChieriSumahoObj.transform.localPosition = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localPosition;
        //ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localEulerAngles;


        #endregion

        #region //ブツ音チェック　持ち上げ音出すためにプレイヤー頭にWindNoiseSoundObj設置

        ////WindnoiseSoundObj付与
        //GameObject PlayerHeadWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundPlayerObj") as GameObject
        //    , VRCameraTrs);//（頭）
        //DB.evDelObjList.Add(PlayerHeadWindnoiseSoundObj);
        //PlayerHeadWindnoiseSoundObj.transform.localPosition = new Vector3(0f, 0, 0);

        ////設定
        //WindnoiseSound tmpPlayerHeadWindnoiseSound = PlayerHeadWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        //tmpPlayerHeadWindnoiseSound.aSource.maxDistance = 50;
        //tmpPlayerHeadWindnoiseSound.pitchMax = 1f;
        //tmpPlayerHeadWindnoiseSound.pitchUpRateAdjustFloat = 6;
        //tmpPlayerHeadWindnoiseSound.pitchDownRateAdjustFloat = 1.00005f;

        //tmpPlayerHeadWindnoiseSound.aSource.volume = 0.2f;
        #endregion

        //キーチェックテストKで起動する用
        GameObject KeyCheckCanvas = null;

        ////宿題シンプルシステムスタート
        //StartCoroutine(HWSimpleSystemIEnum());

        DB.isUserInitialSetting = true;//メニュー閉じれるように

        while (true)
        {
            #region キーチェックテストKで起動
            if (Input.GetKeyDown(KeyCode.K) && KeyCheckCanvas == null)
            {
                KeyCheckCanvas = Instantiate(Resources.Load("Debug/KeyCheck/KeyCheckCanvas") as GameObject
                    , VRUICameraTrs
                    , false);

                isMenuLock = true;
            }
            else if (Input.GetKeyDown(KeyCode.K) && KeyCheckCanvas != null)
            {
                Destroy(KeyCheckCanvas);
                KeyCheckCanvas = null;

                isMenuLock = false;
            }

            #endregion

            #region //かくれおに歩きテスト
            //if (Input.GetKeyDown(KeyCode.V))
            //{
            //    ChieriMotion("かくれおに探し歩きroot開始", 0.4f, 0);
            //}

            //if (Input.GetKeyDown(KeyCode.B))
            //{
            //    ChieriMotion("かくれおに探し歩きroot終了", 0.4f, 0);
            //}

            //if (Input.GetKeyDown(KeyCode.N))
            //{
            //    ChieriMotion("かくれおに探し伏せ右開始", 0.4f, 0);
            //}

            //if (Input.GetKeyDown(KeyCode.M))
            //{
            //    ChieriMotion("かくれおに探し伏せ終了", 0.4f, 0);
            //}
            //if (Input.GetKeyDown(KeyCode.F))
            //{
            //    GirlTrs.position = Vector3.zero;
            //    ChieriMotion("ドアからデスク横ポーズ", 0f, 0);
            //}
            //if (Input.GetKeyDown(KeyCode.G))
            //{
            //    #region デスク横ポーズから原点モーションのゴミ箱探しに切り替え

            //    //智恵理 ボーンから現在位置読み取りルートChieriに Linearで（Yは0なので動かさない）
            //    GirlTrs.DOLocalMoveX(Bip001Trs.localPosition.x, 1 / girlAnim.speed)
            //        .SetEase(Ease.Linear);
            //    GirlTrs.DOLocalMoveZ(Bip001Trs.localPosition.z, 1 / girlAnim.speed)
            //        .SetEase(Ease.Linear);

            //    yield return null;//この1フレを挟むことでスムーズになった


            //    //■ゴミ箱持って置くまで開始
            //    ChieriMotion("デスク横探しゴミ箱持ち上げるまで原点", 1 / girlAnim.speed, 0);
            //    //"デスク横探しゴミ箱持ち"に切り替わるまで待ち
            //    StartCoroutine(GirlAnimReadSystem());
            //    while (nowAnimClipName != "デスク横探しゴミ箱持ち上げるまで原点") { yield return null; }

            //    //ゴミ箱の現在位置保持
            //    Vector3 tmpGomibakoDefPos = GomibakoTrs.position;
            //    Quaternion tmpGomibakoDefRot = GomibakoTrs.rotation;

            //    //ゴミ箱掴むフレームまで待ち
            //    StartCoroutine(GirlAnimReadSystem());
            //    while (girlAnimNomTime <= 0.940f) { yield return null; }

            //    //左手にペアレント
            //    GomibakoTrs.SetParent(Bip001_L_HandTrs);

            //    //ゴミ箱掴むモーション終わりまで待ち
            //    StartCoroutine(GirlAnimReadSystem());
            //    while (girlAnimNomTime <= 1f) { yield return null; }
            //    isGirlAnimReadSystem = false;

            //    //分岐点ウェイト
            //    yield return new WaitForSeconds(1);

            //    //■ゴミ箱降ろし開始
            //    ChieriMotion("デスク横探しゴミ箱置いて振り返る原点", 0 / girlAnim.speed, 0);
            //    yield return null;

            //    //ゴミ箱降ろすフレームまで待ち
            //    StartCoroutine(GirlAnimReadSystem());
            //    while (girlAnimNomTime <= 0.136f) { yield return null; }
            //    isGirlAnimReadSystem = false;//コルーチン終了

            //    //ペアレント戻し
            //    GomibakoTrs.SetParent(RoomTrs);

            //    //保持しておいた位置に戻し
            //    GomibakoTrs.position = tmpGomibakoDefPos;
            //    GomibakoTrs.rotation = tmpGomibakoDefRot;
            //    #endregion
            //}
            //if (Input.GetKeyDown(KeyCode.H))
            //{
            //    #region 入室からデスク横待機まで原点モーション化テスト
            //    //まずゼロ位置
            //    GirlTrs.position = Vector3.zero;
            //    //■オリジナルモーションからボーンの位置読み取り
            //    ChieriMotion("ドア入室", 0f, 0);
            //    yield return null;//アニメは1フレ後反映
            //    //ボーンから現在位置読み取り、GirlTrsに Linearで（Yは0なので動かさない）
            //    GirlTrs.DOLocalMoveX(Bip001Trs.localPosition.x, 0 / girlAnim.speed)
            //        .SetEase(Ease.Linear);
            //    GirlTrs.DOLocalMoveZ(Bip001Trs.localPosition.z, 0 / girlAnim.speed)
            //        .SetEase(Ease.Linear);
            //    yield return null;//この1フレを挟むことでスムーズになった

            //    //原点モーションの入室開始
            //    ChieriMotion("ドア入室原点", 0f, 0);
            //    doorAnim.CrossFadeInFixedTime("ドア開き閉じ", 0f, 0);
            //    yield return null;//アニメ反映は1フレーム後

            //    //■ポーズ状態まで待ち
            //    StartCoroutine(GirlAnimReadSystem());
            //    while (girlAnimNomTime <= 0.9f)
            //    { yield return null; }
            //    isGirlAnimReadSystem = false;

            //    ChieriMotion("ドアからデスク横へ歩く原点", 0f, 0);
            //    #endregion
            //}
            //if (Input.GetKeyDown(KeyCode.J))
            //{
            //    #region ゴミ箱探し即再生

            //    //■ゴミ箱持って置くまで開始
            //    ChieriMotion("デスク横探しゴミ箱持ち上げるまで原点", 0 / girlAnim.speed, 0);
            //    //"デスク横探しゴミ箱持ち"に切り替わるまで待ち
            //    StartCoroutine(GirlAnimReadSystem());
            //    while (nowAnimClipName != "デスク横探しゴミ箱持ち上げるまで原点") { yield return null; }

            //    //ゴミ箱の現在位置保持
            //    Vector3 tmpGomibakoDefPos = GomibakoTrs.position;
            //    Quaternion tmpGomibakoDefRot = GomibakoTrs.rotation;

            //    //ゴミ箱掴むフレームまで待ち
            //    StartCoroutine(GirlAnimReadSystem());
            //    while (girlAnimNomTime <= 0.940f) { yield return null; }

            //    //左手にペアレント
            //    GomibakoTrs.SetParent(Bip001_L_HandTrs);

            //    //ゴミ箱掴むモーション終わりまで待ち
            //    StartCoroutine(GirlAnimReadSystem());
            //    while (girlAnimNomTime <= 1f) { yield return null; }
            //    isGirlAnimReadSystem = false;

            //    //分岐点ウェイト
            //    yield return new WaitForSeconds(1);

            //    //■ゴミ箱降ろし開始
            //    ChieriMotion("デスク横探しゴミ箱置いて振り返る原点", 0 / girlAnim.speed, 0);
            //    yield return null;

            //    //ゴミ箱降ろすフレームまで待ち
            //    StartCoroutine(GirlAnimReadSystem());
            //    while (girlAnimNomTime <= 0.136f) { yield return null; }
            //    isGirlAnimReadSystem = false;//コルーチン終了

            //    //ペアレント戻し
            //    GomibakoTrs.SetParent(RoomTrs);

            //    //保持しておいた位置に戻し
            //    GomibakoTrs.position = tmpGomibakoDefPos;
            //    GomibakoTrs.rotation = tmpGomibakoDefRot;
            //    #endregion
            //}
            //if (Input.GetKeyDown(KeyCode.T))
            //{
            //    //智恵理 デスク横ポーズ位置に
            //    GameObject Chieri_20_DeskYokoPosePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_20_DeskYokoPosePosObj") as GameObject;
            //    GirlTrs.localPosition = Chieri_20_DeskYokoPosePosObj.transform.localPosition;

            //    ChieriMotion("デスク横探しゴミ箱置いて振り返る原点", 0 / girlAnim.speed, 0);

            //}
            //if (Input.GetKeyDown(KeyCode.Y))
            //{
            //    //Bip001のLocal前方0.1位置に空Obj設置
            //    GameObject tmpLookPointObj = new GameObject();
            //    tmpLookPointObj.transform.position = Bip001Trs.TransformPoint(new Vector3(-0.1f, 0, 0));
            //    //Yだけゼロ
            //    tmpLookPointObj.transform.position = new Vector3(tmpLookPointObj.transform.position.x, 0, tmpLookPointObj.transform.position.z);

            //    //智恵理その位置に向かせる
            //    GirlTrs.transform.LookAt(tmpLookPointObj.transform);
            //    //Obj削除
            //    Destroy(tmpLookPointObj);
            //    //同時に歩きモーション
            //    ChieriMotion("かくれおに探し歩きroot開始", 0 / girlAnim.speed, 0);
            //}
            #endregion
            #region//汗テスト

            //if (Input.GetKeyDown(KeyCode.LeftControl))
            //{
            //    AseTare(1);
            //}



            #endregion
            #region//人差し指テスト

            //if (Input.GetKeyDown(KeyCode.LeftControl))
            //{
            //    ChieriMotion("人差し指差し", 0.7f, 5);
            //}
            //if (Input.GetKeyDown(KeyCode.Z))
            //{
            //    ChieriMotion("_noData", 0.7f, 5);
            //}
            //if (Input.GetKeyDown(KeyCode.X))
            //{
            //    ChieriMotion("null", 0.7f, 5);
            //}

            #endregion
            #region//Tweenテスト

            ////DLL必要というのが若干怖いがDOTWeenがよさそう。

            //if (Input.GetKeyDown(KeyCode.LeftControl))
            //{
            //    //itweenは命令重複時がスムーズ（キャンセルされる）。重いらしい。ease指定がハッシュなのが冗長
            //    //iTween.MoveTo(IKRHandTargetTrs.gameObject, sharpenTrs.position, 2f);
            //    //iTween.MoveTo(IKRHandTargetObj, iTween.Hash(
            //    //    "position", sharpenTrs.position,
            //    //    "easeType", iTween.EaseType.easeOutCubic,
            //    //    "time", 2f));

            //    //LeanTweenは軽くて命令が簡素。命令重複時がダメ（キャンセルされずに直前の実行後にワープする）
            //    //LeanTween.move(IKRHandTargetTrs.gameObject, sharpenTrs.position, 2f).setEase(LeanTweenType.easeOutCubic);

            //    //DOtween　命令がtransformからできてわかりやすい？　重複キャンセルもある。
            //    IKRHandTargetTrs.DOMove(SharpenTrs.position, 2f).SetEase(Ease.OutCubic);

            //}


            //if (Input.GetKeyDown(KeyCode.Mouse0))
            //{
            //    //itweenもLeanTweenもローカル指定できる。（ターゲットを別オブジェクト（頭など動くもの）にペアレントした後移動など）
            //    //IKRHandTargetTrs.SetParent(HeadSphereTrs, true);

            //    //iTween.MoveTo(IKRHandTargetObj, iTween.Hash(
            //    //    "position", new Vector3(0.9f, 0, -1.16f),
            //    //    "easeType", iTween.EaseType.easeOutCubic,
            //    //    "time", 2f,
            //    //    "islocal", true));

            //    //LeanTween.moveLocal(IKRHandTargetTrs.gameObject, new Vector3(0.9f, 0, -1.16f), 2f).setEase(LeanTweenType.easeOutCubic);

            //    IKRHandTargetTrs.DOMove(HeadSphereTrs.position, 2f).SetEase(Ease.OutCubic);



            //}
            //if (Input.GetKeyDown(KeyCode.Mouse1))
            //{
            //    //Float値操作

            //    //iTween.ValueTo(gameObject, iTween.Hash(
            //    //    "from", IKRHandEf.positionWeight,
            //    //    "to", 0f,
            //    //    "time", 2f,
            //    //    "onupdate", "ValueChange"));
            //    /*
            //    void ValueChange(float value)
            //    { IKRHandEf.positionWeight = value; }
            //   */

            //    //LeanTween.value(gameObject, IKRHandEf.positionWeight, 0f, 2f).setEase(LeanTweenType.easeOutCubic).setOnUpdate((float val) =>
            //    //        { IKRHandEf.positionWeight = val; });

            //    //DOTweenはギリ一行でいける感ある
            //    DOTween.To(() => IKRHandEf.positionWeight, (x) => IKRHandEf.positionWeight = x, 0f, 2f).SetEase(Ease.OutCubic);

            //}

            //if (Input.GetKeyDown(KeyCode.Mouse2))
            //{
            //    //iTween.ValueTo(gameObject, iTween.Hash(
            //    //    "from", IKRHandEf.positionWeight,
            //    //    "to", 1f,
            //    //    "time", 2f,
            //    //    "onupdate", "ValueChange"));
            //    /*
            //    void ValueChange(float value)
            //    { IKRHandEf.positionWeight = value; }
            //   */

            //    //LeanTween.value(gameObject, IKRHandEf.positionWeight, 1f, 2f).setEase(LeanTweenType.easeOutCubic).setOnUpdate((float val) =>
            //    //        { IKRHandEf.positionWeight = val; });

            //    DOTween.To(() => IKRHandEf.positionWeight, (x) => IKRHandEf.positionWeight = x, 1f, 2f).SetEase(Ease.OutCubic);

            //}


            #endregion
            #region //衣装チェンジテスト
            //if (Input.GetKeyDown(KeyCode.H))
            //{
            //    if (Pony.activeSelf == true &&
            //        Mae_hair.activeSelf == false && Naka_hair.activeSelf == false && Ushiro_hair.activeSelf == false)
            //    {
            //        Pony.SetActive(false);
            //        Mae_hair.SetActive(true);
            //        Naka_hair.SetActive(true);
            //        Ushiro_hair.SetActive(true);
            //    }

            //    else if (Pony.activeSelf == false &&
            //        Mae_hair.activeSelf == true && Naka_hair.activeSelf == true && Ushiro_hair.activeSelf == true)
            //    {
            //        Pony.SetActive(true);
            //        Mae_hair.SetActive(false);
            //        Naka_hair.SetActive(false);
            //        Ushiro_hair.SetActive(false);
            //    }

            //}
            //if (Input.GetKeyDown(KeyCode.B))
            //{
            //    if (Body.activeSelf == true &&
            //        Body02.activeSelf == false)
            //    {
            //        Body.SetActive(false);
            //        Body02.SetActive(true);
            //    }

            //    else if (Body.activeSelf == false &&
            //        Body02.activeSelf == true)
            //    {
            //        Body.SetActive(true);
            //        Body02.SetActive(false);
            //    }
            //}
            #endregion 衣装チェンジテスト
            #region //フキダシ ノベル テスト
            //if (Input.GetKeyDown(KeyCode.F))
            //{
            //    NovelSetVis("D1010a");
            //}
            //if (Input.GetKeyDown(KeyCode.G))
            //{
            //    SHukidashi("OP0010");
            //}
            //if (Input.GetKeyDown(KeyCode.H))
            //{
            //    Hukidashi("OP0010");
            //}
            //if (Input.GetKeyDown(KeyCode.J))
            //{
            //    DelAll_Hukidashi();
            //}
            //if (Input.GetKeyDown(KeyCode.K))
            //{
            //    Hukidashi("OP0010");
            //    yield return KeyOrWait(3);
            //    Hukidashi("OP0020");
            //    yield return KeyOrWait(3);
            //    Hukidashi("OP0010");
            //    yield return KeyOrWait(3);
            //    Hukidashi("OP0020");
            //    yield return KeyOrWait(3);
            //}
            //if (Input.GetKeyDown(KeyCode.N))
            //{
            //    NovelSetVis("OP0010");
            //}
            //if (Input.GetKeyDown(KeyCode.M))
            //{
            //    isNovelFadeTween = isNovelSetVisIng = false;
            //}
            #endregion
            #region //PostProcessingテスト

            //if (Input.GetKeyDown(KeyCode.F))
            //{
            //    PPEffect_ZikanHosei();
            //}
            //if (Input.GetKeyDown(KeyCode.G))
            //{
            //    PPEffect_FadeToDef();
            //}
            //if (Input.GetKeyDown(KeyCode.H))
            //{
            //    isPPSyatem = false;
            //}
            #endregion
            #region //体力ゲージ
            //if (Input.GetKeyDown(KeyCode.V))
            //{
            //    PlayerHPAddSub(-200);
            //}
            //if (Input.GetKeyDown(KeyCode.B))
            //{
            //    PlayerHPAddSub(200);
            //}


            #endregion
            #region //椅子モーション原点確認用

            //#region 原点時の座り位置調整 HJKL
            //if (Input.GetKeyDown(KeyCode.H))
            //{
            //    DB.isChieriPosLock = false;
            //    //椅子位置に
            //    GameObject Chieri_02Old_DeskChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02Old_DeskChairPosObj") as GameObject;
            //    GirlTrs.localPosition = Chieri_02Old_DeskChairPosObj.transform.localPosition;
            //    GirlTrs.localEulerAngles = Chieri_02Old_DeskChairPosObj.transform.localEulerAngles;
            //}
            //if (Input.GetKeyDown(KeyCode.J))
            //{
            //    DB.isChieriPosLock = false;
            //    //椅子位置に
            //    GameObject Chieri_02Old2_DeskChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02Old2_DeskChairPosObj") as GameObject;
            //    GirlTrs.localPosition = Chieri_02Old2_DeskChairPosObj.transform.localPosition;
            //    GirlTrs.localEulerAngles = Chieri_02Old2_DeskChairPosObj.transform.localEulerAngles;
            //}
            //if (Input.GetKeyDown(KeyCode.K))
            //{
            //    DB.isChieriPosLock = false;
            //    //椅子位置に
            //    GameObject Chieri_02_DeskNyuusituChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02_DeskNyuusituChairPosObj") as GameObject;
            //    GirlTrs.localPosition = Chieri_02_DeskNyuusituChairPosObj.transform.localPosition;
            //    GirlTrs.localEulerAngles = Chieri_02_DeskNyuusituChairPosObj.transform.localEulerAngles;
            //}
            //if (Input.GetKeyDown(KeyCode.L))
            //{
            //    DB.isChieriPosLock = false;
            //    //椅子位置に
            //    GameObject Chieri_02_DeskChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02_DeskChairPosObj") as GameObject;
            //    GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
            //    GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;
            //}
            //#endregion


            //#region Test_入室後の座り位置 IO
            //if (Input.GetKeyDown(KeyCode.I))
            //{
            //    DB.isChieriPosLock = true;
            //    ChieriMotion("Test_入室後の座り位置", 0f, 0);
            //}
            //if (Input.GetKeyDown(KeyCode.O))
            //{
            //    ChieriMotion("Test_入室後の座り位置原点", 0f, 0);
            //}
            //#endregion

            //#region デスク宿題待機 デスク起き上がりポーズ TY
            //if (Input.GetKeyDown(KeyCode.T))
            //{
            //    ChieriMotion("デスク宿題待機", 0f, 0);
            //}
            //if (Input.GetKeyDown(KeyCode.Y))
            //{
            //    ChieriMotion("デスク起き上がりポーズ", 0f, 0);
            //}
            //#endregion

            //#region デスクペットボトル取り出し FG
            //if (Input.GetKeyDown(KeyCode.F))
            //{
            //    DB.isChieriPosLock = true;
            //    ChieriMotion("デスク肘つきポーズ", 0f, 0);
            //}
            //if (Input.GetKeyDown(KeyCode.G))
            //{
            //    ChieriMotion("デスク肘つきポーズ原点", 0f, 0);
            //}
            //#endregion

            //#region デスクペットボトル手伸ばし前の両手置き VB
            //if (Input.GetKeyDown(KeyCode.V))
            //{
            //    DB.isChieriPosLock = true;
            //    ChieriMotion("デスクペットボトル手伸ばし立てるため", 0f, 0);
            //}
            //if (Input.GetKeyDown(KeyCode.B))
            //{
            //    ChieriMotion("デスクペットボトル手伸ばし立てるため原点", 0f, 0);
            //}

            //#endregion

            //#region temp確認 NM
            //if (Input.GetKeyDown(KeyCode.N))
            //{
            //    ChieriMotion("デスク肘つきポーズ", 0f, 0);
            //}
            //if (Input.GetKeyDown(KeyCode.M))
            //{
            //    ChieriMotion("デスクうつ伏せポーズ", 0f, 0);
            //}

            //#endregion



            #endregion
            #region //地べた椅子イベントテスト
            //if (Input.GetKeyDown(KeyCode.L))
            //{
            //    DOTweenToIKEfPos(IKLFootEf, 0, 0);
            //    DOTweenToIKEfPos(IKRFootEf, 0, 0);
            //    DOTweenToIKEfRot(IKLFootEf, 0, 0);
            //    DOTweenToIKEfRot(IKRFootEf, 0, 0);
            //    ChieriMotion("ATL椅子脚組みやめ直後ポーズ", 0f, 0);
            //    //椅子ごと元の位置へ
            //    ChairTrs.DOLocalMove(Chair_03_ZibetaRensyuPosObj.transform.localPosition
            //        , 0f);
            //    ChairTrs.DOLocalRotateQuaternion(Chair_03_ZibetaRensyuPosObj.transform.rotation
            //        , 0f);

            //}

            //if (Input.GetKeyDown(KeyCode.F))
            //{
            //    #region 椅子ごと主人公へ近づく
            //    //まず初期位置でIKON
            //    IKLFootTargetTrs.localPosition = IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition;
            //    IKRFootTargetTrs.localPosition = IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition;
            //    IKLFootTargetTrs.localEulerAngles = IKLFoot_AsikumiYameTyokugoPosObj.transform.localEulerAngles;
            //    IKRFootTargetTrs.localEulerAngles = IKRFoot_AsikumiYameTyokugoPosObj.transform.localEulerAngles;
            //    DOTweenToIKEfPos(IKLFootEf, 1, 0);
            //    DOTweenToIKEfPos(IKRFootEf, 1, 0);
            //    DOTweenToIKEfRot(IKLFootEf, 1, 0);
            //    DOTweenToIKEfRot(IKRFootEf, 1, 0);

            //    yield return null;

            //    //進んだ位置に足位置移動
            //    float tmpDurTimeOne = 0.3f;
            //    IKLFootTargetTrs.DOLocalMoveX(IKLFoot_MaekagamiPosObj.transform.localPosition.x, tmpDurTimeOne / girlAnim.speed);
            //    IKLFootTargetTrs.DOLocalMoveZ(IKLFoot_MaekagamiPosObj.transform.localPosition.z, tmpDurTimeOne / girlAnim.speed);
            //    IKRFootTargetTrs.DOLocalMoveX(IKRFoot_MaekagamiPosObj.transform.localPosition.x, tmpDurTimeOne / girlAnim.speed);
            //    IKRFootTargetTrs.DOLocalMoveZ(IKRFoot_MaekagamiPosObj.transform.localPosition.z, tmpDurTimeOne / girlAnim.speed);
            //    IKLFootTargetTrs.DOLocalRotate(IKLFoot_MaekagamiPosObj.transform.localEulerAngles, tmpDurTimeOne / girlAnim.speed);
            //    IKRFootTargetTrs.DOLocalRotate(IKRFoot_MaekagamiPosObj.transform.localEulerAngles, tmpDurTimeOne / girlAnim.speed);

            //    //ついでにほんの少し浮かして降ろす
            //    IKLFootTargetTrs.DOLocalMoveY(IKLFoot_MaekagamiPosObj.transform.localPosition.y + 0.001f, (tmpDurTimeOne / 2) / girlAnim.speed)
            //        .OnComplete(() =>
            //        {
            //            IKLFootTargetTrs.DOLocalMoveY(IKLFoot_MaekagamiPosObj.transform.localPosition.y
            //                , (tmpDurTimeOne / 2) / girlAnim.speed)
            //                .SetEase(Ease.InSine);
            //        });
            //    IKRFootTargetTrs.DOLocalMoveY(IKRFoot_MaekagamiPosObj.transform.localPosition.y + 0.001f, (tmpDurTimeOne / 2) / girlAnim.speed)
            //        .OnComplete(() =>
            //        {
            //            IKRFootTargetTrs.DOLocalMoveY(IKRFoot_MaekagamiPosObj.transform.localPosition.y
            //                , (tmpDurTimeOne / 2) / girlAnim.speed)
            //                .SetEase(Ease.InSine);
            //        });

            //    yield return new WaitForSeconds((tmpDurTimeOne / 2) / girlAnim.speed);

            //    ChieriMotion("ATL椅子前かがみ", 1f, 0);

            //    //椅子ごと主人公へ近づく
            //    ChairTrs.DOLocalMove(Chair_04_ZensinPosObj.transform.localPosition
            //        , 1f / girlAnim.speed);
            //    ChairTrs.DOLocalRotateQuaternion(Chair_04_ZensinPosObj.transform.rotation
            //        , 1f / girlAnim.speed);

            //    SEPlay(ChairTrs.gameObject, "ChairMove01");
            //    #endregion
            //}

            //if (Input.GetKeyDown(KeyCode.G))
            //{
            //    #region 椅子ごと元の位置へ

            //    float tmpDurTimeTwo = 1f;
            //    //まず足IKそのままで動き始める（IKは前かがみ状態前提）
            //    ChieriMotion("ATL椅子脚組みやめ直後ポーズ", 1f, 0);
            //    //椅子ごと元の位置へ
            //    ChairTrs.DOLocalMove(Chair_03_ZibetaRensyuPosObj.transform.localPosition
            //        , tmpDurTimeTwo / girlAnim.speed);
            //    ChairTrs.DOLocalRotateQuaternion(Chair_03_ZibetaRensyuPosObj.transform.rotation
            //        , tmpDurTimeTwo / girlAnim.speed);

            //    SEPlay(ChairTrs.gameObject, "ChairMove01");

            //    yield return new WaitForSeconds((tmpDurTimeTwo / 3) / girlAnim.speed);

            //    //半分くらいでIKで足戻す
            //    //戻り位置に足移動
            //    IKLFootTargetTrs.DOLocalMoveX(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.x, (tmpDurTimeTwo / 2) / girlAnim.speed);
            //    IKLFootTargetTrs.DOLocalMoveZ(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.z, (tmpDurTimeTwo / 2) / girlAnim.speed);
            //    IKRFootTargetTrs.DOLocalMoveX(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.x, (tmpDurTimeTwo / 2) / girlAnim.speed);
            //    IKRFootTargetTrs.DOLocalMoveZ(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.z, (tmpDurTimeTwo / 2) / girlAnim.speed);
            //    IKLFootTargetTrs.DOLocalRotate(IKLFoot_AsikumiYameTyokugoPosObj.transform.localEulerAngles, (tmpDurTimeTwo / 2) / girlAnim.speed);
            //    IKRFootTargetTrs.DOLocalRotate(IKRFoot_AsikumiYameTyokugoPosObj.transform.localEulerAngles, (tmpDurTimeTwo / 2) / girlAnim.speed);

            //    //ついでにほんの少し浮かして降ろす
            //    IKLFootTargetTrs.DOLocalMoveY(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y + 0.001f, ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
            //        .OnComplete(() =>
            //        {
            //            IKLFootTargetTrs.DOLocalMoveY(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y
            //                , ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
            //                .SetEase(Ease.InSine);
            //        });
            //    IKRFootTargetTrs.DOLocalMoveY(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y + 0.001f, ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
            //        .OnComplete(() =>
            //        {
            //            IKRFootTargetTrs.DOLocalMoveY(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y
            //                , ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
            //                .SetEase(Ease.InSine);
            //        });

            //    yield return new WaitForSeconds((tmpDurTimeTwo / 2) / girlAnim.speed);


            //    #endregion
            //}

            //if (Input.GetKeyDown(KeyCode.H))
            //{
            //    //プレイヤ位置
            //    CameraObjectsTrs.localPosition = Player_02_ZibetaRensyuu2PosObj.transform.localPosition;
            //    CameraObjectsTrs.localEulerAngles = Player_02_ZibetaRensyuu2PosObj.transform.localEulerAngles;

            //    ChieriMotion("ATL椅子脚組み1ポーズ", 0f, 0);
            //    yield return null;

            //    AN_isGrapPowerMode = true;
            //    AN_isInputToggleMode = true;

            //    //■脚のぼりシステム コルーチン始動
            //    StartCoroutine(AsinoboriSystem());
            //    //rigid監視スタート
            //    yield return null;//Rigidbody付与待ち
            //    StartCoroutine(RigidReadSystem());

            //}
            //if (Input.GetKeyDown(KeyCode.V))
            //{
            //    ChieriMotion("椅子脚組みから立ち上がり", 0f, 0);
            //    //立ち上がりまで待機
            //    yield return null;
            //    StartCoroutine(GirlAnimReadSystem());
            //    while (girlAnimNomTime <= 1f) { yield return null; }
            //    isGirlAnimReadSystem = false;

            //    yield return KeyOrWait(0);

            //    ChieriMotion("椅子脚組みから立ち後覗き", 0f, 0);
            //    //覗き込むまで待機
            //    yield return null;
            //    StartCoroutine(GirlAnimReadSystem());
            //    while (girlAnimNomTime <= 1f) { yield return null; }
            //    isGirlAnimReadSystem = false;

            //    yield return KeyOrWait(0);

            //    ChieriMotion("椅子脚組みから立ち後覗き戻り", 0f, 0);
            //    //戻るまで待機
            //    yield return null;
            //    StartCoroutine(GirlAnimReadSystem());
            //    while (girlAnimNomTime <= 1f) { yield return null; }
            //    isGirlAnimReadSystem = false;

            //}
            //if (Input.GetKeyDown(KeyCode.B))
            //{
            //    GirlTrs.SetParent(GameObjectsTrs, true);
            //    yield return null;

            //    Vector3 tmpChieriPos = GirlTrs.localPosition;

            //    リセット:
            //    GirlTrs.localPosition = tmpChieriPos;

            //    ChieriMotion("椅子脚組みから立ち上がり後ポーズ", 0f, 0);
            //    //プレイヤ位置
            //    CameraObjectsTrs.localPosition = Player_02_ZibetaRensyuu2PosObj.transform.localPosition;
            //    CameraObjectsTrs.localEulerAngles = Player_02_ZibetaRensyuu2PosObj.transform.localEulerAngles;

            //    yield return KeyOrWait(0);

            //    ChieriMotion("かくれんぼ探し歩き開始", 0f, 0);


            //    //歩きループ4ループ待ち
            //    StartCoroutine(GirlAnimReadSystem());
            //    while (nowAnimClipName != "かくれんぼ探し歩き開始") { yield return null; }
            //    while (girlAnimNomTime <= 4) { yield return null; }
            //    isGirlAnimReadSystem = false;



            //    ChieriMotion("かくれんぼ探し歩き終了", 0.1f, 0);


            //    yield return KeyOrWait(0);
            //    goto リセット;

            //    ////歩き終了待ち
            //    //StartCoroutine(GirlAnimReadSystem());
            //    //while (nowAnimClipName != "かくれんぼ探し歩き終了") { yield return null; }
            //    //while (girlAnimNomTime <= 1) { yield return null; }
            //    //isGirlAnimReadSystem = false;
            //    //ChieriMotion("歩き終了余韻", 0f, 0);

            //}
            #endregion
            #region //XRSettingテスト

            //    if (Input.GetKeyDown(KeyCode.F))
            //{
            //    Debug.Log(UnityEngine.XR.XRSettings.enabled);
            //}
            //if (Input.GetKeyDown(KeyCode.G))
            //{
            //    Debug.Log(UnityEngine.XR.XRSettings.isDeviceActive);
            //}
            //if (Input.GetKeyDown(KeyCode.H))
            //{
            //    Debug.Log(UnityEngine.XR.XRSettings.loadedDeviceName);
            //}
            //if (Input.GetKeyDown(KeyCode.J))
            //{
            //}

            #endregion
            #region //フローチャート挙動テスト
            //if (Input.GetKeyDown(KeyCode.N))
            //{
            //    Debug.Log(Cursor.lockState);
            //}
            //if (Input.GetKeyDown(KeyCode.B))
            //{
            //    Debug.Log("キャプチャー保存");
            //    ScreenCapture.CaptureScreenshot("Assets/Resources/EventSystem/Menu/testCapture2.PNG");
            //}
            #endregion
            #region //アニメトリガー挙動テスト
            //if (Input.GetKeyDown(KeyCode.V))
            //{
            //    StartCoroutine(AnimEventSystemIEnum());
            //    ChieriMotion("t_歩きトリガーテスト", 0, 0);
            //}


            #endregion
            #region //プレイヤーモーション挙動テスト
            //if (Input.GetKeyDown(KeyCode.F))
            //{
            //    isPlayerUniqueMotion = true;

            //    PlayerMotion("liedown_00_Re", 0.2f, 0);

            //    //■ポーズ状態まで待ち
            //    StartCoroutine(PlayerAnimReadSystem());
            //    while (nowPlayerAnimClipName != "liedown_00_Re") { yield return null; }
            //    yield return new WaitForSeconds(1);
            //    isPlayerAnimReadSystem = false;

            //    isPlayerUniqueMotion = false;
            //}

            //if (Input.GetKeyDown(KeyCode.V))
            //{
            //    PlayerMotion("_noData", 0f, 0);
            //}
            //if (Input.GetKeyDown(KeyCode.B))
            //{
            //    PlayerMotion("tstance_00", 0f, 0);
            //}
            //if (Input.GetKeyDown(KeyCode.N))
            //{
            //    PlayerMotion("sit_06", 0f, 0);
            //}
            //#region //プレイヤーモーションデバッグ操作
            //if (Input.GetKeyDown(KeyCode.G))
            //{
            //    if (PlayerFBBIKtoHeadEffectorObj.GetComponent<FullBodyBipedIK>().enabled)
            //    {
            //        PlayerFBBIKtoHeadEffectorObj.GetComponent<FullBodyBipedIK>().enabled = false;
            //    }
            //    else
            //    {
            //        PlayerFBBIKtoHeadEffectorObj.GetComponent<FullBodyBipedIK>().enabled = true;
            //    }
            //}
            //if (Input.GetKeyDown(KeyCode.J))
            //{
            //    if (AN_PlayerHuseSphereCollider.enabled)
            //    {
            //        AN_PlayerHuseSphereCollider.enabled = false;
            //        AN_PlayerNormalCapsuleCollider.enabled = true;
            //    }
            //    else if (AN_PlayerNormalCapsuleCollider.enabled)
            //    {
            //        AN_PlayerHuseSphereCollider.enabled = true;
            //        AN_PlayerNormalCapsuleCollider.enabled = false;
            //    }
            //}
            //if (Input.GetKeyDown(KeyCode.K))
            //{
            //    if (playerAnim.enabled)
            //    { playerAnim.enabled = false; }
            //    else { playerAnim.enabled = true; }
            //}
            //if (Input.GetKeyDown(KeyCode.L))
            //{
            //    ChangeStand();
            //}


            //#endregion


            #endregion
            #region //選択肢表示、コマデータに保存テスト
            //if (Input.GetKeyDown(KeyCode.F))
            //{
            //    //「え？」「何言ってんの！」
            //    Sentakushi("■C0040a","テスト選択肢");
            //    Sentakushi("■C0040b");
            //    sentakuListNum = 99;//初期化
            //                        //選択肢選ばれるまでループ
            //    while (sentakuListNum == 99) { yield return null; }
            //    yield return null;
            //    switch (sentakuListNum)
            //    {
            //        case 0://選択肢a
            //            break;

            //        case 1://選択肢b
            //            break;

            //        case -1://選択肢z 無言
            //            break;
            //    }

            //}
            //if (Input.GetKeyDown(KeyCode.B))
            //{
            //    Debug.Log("キャプチャー保存");
            //    ScreenCapture.CaptureScreenshot("Assets/Resources/EventSystem/Menu/testCapture2.PNG");
            //}
            #endregion
            #region //PPv2エフェクトテスト
            //if (Input.GetKeyDown(KeyCode.F))
            //{
            //    PPv2Memai();

            //}
            //if (Input.GetKeyDown(KeyCode.G))
            //{
            //    PPv2Memai(false, 0);
            //}
            #endregion
            #region //モーフテスト
            //if (Input.GetKeyDown(KeyCode.F))
            //{
            //    TereHoho();
            //}
            //if (Input.GetKeyDown(KeyCode.V))
            //{
            //    TereHoho(false);
            //}

            #endregion
            #region //背比べテスト
            //if (Input.GetKeyDown(KeyCode.F))
            //{
            //    #region 背比べ
            //    //■背比べ時に手でAreaOutになるので、暫定で一時的にコリダーオフ（あとで手の位置自体調整）
            //    #region ■智恵理紐摘む手のコリダーオフ（ちゃんとあとで元に戻す）
            //    for (int i = 0; i < ChieriColliderObjs.Length; i++)
            //    {
            //        if (
            //            ChieriColliderObjs[i].name == "UpperArm_R_coll" ||
            //            ChieriColliderObjs[i].name == "Forearm_R_coll" ||
            //            ChieriColliderObjs[i].name == "Hand_R_coll" ||
            //            ChieriColliderObjs[i].name == "Hitosashi00_R_coll" ||
            //            ChieriColliderObjs[i].name == "Hitosashi01_R_coll" ||
            //            ChieriColliderObjs[i].name == "Hitosashi02_R_coll" ||
            //            ChieriColliderObjs[i].name == "Ko00_R_coll" ||
            //            ChieriColliderObjs[i].name == "Ko01_R_coll" ||
            //            ChieriColliderObjs[i].name == "Ko02_R_coll" ||
            //            ChieriColliderObjs[i].name == "Kusuri00_R_coll" ||
            //            ChieriColliderObjs[i].name == "Kusuri01_R_coll" ||
            //            ChieriColliderObjs[i].name == "Kusuri02_R_coll" ||
            //            ChieriColliderObjs[i].name == "Naka00_R_coll" ||
            //            ChieriColliderObjs[i].name == "Naka01_R_coll" ||
            //            ChieriColliderObjs[i].name == "Naka02_R_coll" ||
            //            ChieriColliderObjs[i].name == "Oya00_R_coll" ||
            //            ChieriColliderObjs[i].name == "Oya01_R_coll" ||
            //            ChieriColliderObjs[i].name == "Oya02_R_coll"
            //            )
            //        {
            //            ChieriColliderObjs[i].SetActive(false);
            //        }
            //    }
            //    #endregion

            //    #region ■右手プレイヤー頭の上
            //    //■VRCameraから少し離れた位置に追従しつつ、VRcameraが回転しても影響を受けないようにする

            //    //まず現在のCameraAdjustTrackingTrs位置に手乗せ位置Objペアレント（事前にVRCameraが回転していても大丈夫なように）
            //    GameObject IKRHand_PareVRCamera_SekurabePlayerPosObj
            //        = Instantiate(Resources.Load("_PosObj/02Sekurabe/IKRHand_PareVRCamera_SekurabePlayerPosObj") as GameObject
            //        , CameraAdjustTrackingTrs, false);

            //    //PosObj位置からCameraAdjustTrackingTrs位置を引いたPos生成（Adjust量となる）
            //    Vector3 tmpAdjustPos =
            //        (IKRHand_PareVRCamera_SekurabePlayerPosObj.transform.position
            //        - CameraAdjustTrackingTrs.position)
            //        / GameObjectsTrs.localScale.z;//メソッドでGameObjectsのサイズかけているので（メソッドでかける理由は、ほぼ全てのObjがGameObjectsに入っているため。今回は特別）

            //    //そして追いかけるのはVRカメラにAdjust量足した位置
            //    FollowDOMove(IKRHandTargetTrs, VRCameraTrs, tmpAdjustPos, 1.5f);
            //    //これでVRcameraの位置に少し離れて追従しつつ、回転の影響を受けない

            //    //■調整する場合は、一旦IKRHandTTargetを直接追いかけるようにしてから（↑のTweenを切る）
            //    //IKRHandTTargetを回転ゼロのVRCameraにペアレントして調整した後
            //    //PosObjのPrefab（IKRHand_PareVRCamera_SekurabePlayerPosObj）に値をいれる



            //    //手首の回転
            //    IKRHandTargetTrs.DORotateQuaternion(IKRHand_PareVRCamera_SekurabePlayerPosObj.transform.rotation, 1.5f);
            //    //Adjust位置、回転値読み取ったのでPosObj削除
            //    Destroy(IKRHand_PareVRCamera_SekurabePlayerPosObj);

            //    //IKON
            //    DOTweenToIKEfPos(IKRHandEf, 1, 3);
            //    DOTweenToIKEfRot(IKRHandEf, 1, 3);


            //    #endregion

            //    //手みる
            //    FollowDOMove(IKLookAtEyeTargetTrs, IKRHandTargetTrs, new Vector3(0, 0, -0.1f), 1.5f);

            //    yield return KeyOrWait(3);

            //    #region ■右手高さ保持で智恵理の体前へ

            //    //tempのターゲット生成（プレイヤーの背の高さ（現在のIKRHand高さ）取得　これにFollowDOMoveを指定し直す）
            //    GameObject tempTarget = Instantiate(IKRHandTargetTrs.gameObject);
            //    tempTarget.transform.SetParent(TargetsTrs, false);
            //    DB.evDelObjList.Add(tempTarget);

            //    //XとZだけ智恵理に移動（ChieriTrsにペアレント前提位置（ワールド座標なので一旦関係なし））
            //    GameObject IKRHand_PareChieri_SekurabeChieriPosObj
            //        = Resources.Load("_PosObj/02Sekurabe/IKRHand_PareChieri_SekurabeChieriPosObj") as GameObject;

            //    tempTarget.transform.DOLocalMoveX(IKRHand_PareChieri_SekurabeChieriPosObj.transform.position.x, 2);
            //    tempTarget.transform.DOLocalMoveZ(IKRHand_PareChieri_SekurabeChieriPosObj.transform.position.z, 2);

            //    //向かわせる
            //    FollowDOMove(IKRHandTargetTrs, tempTarget.transform);

            //    //手首の回転
            //    IKRHandTargetTrs.DORotateQuaternion(IKRHand_PareChieri_SekurabeChieriPosObj.transform.rotation, 1f);
            //    #endregion
            //    #endregion


            //}

            //if (Input.GetKeyDown(KeyCode.V))
            //{
            //    #region スマホ取り出しいじりしまう
            //    ChieriMotion("背比べ左手スマホ取り出し", 0f, 0);
            //    StartCoroutine(GirlAnimReadSystem());
            //    while (nowGirlAnimClipName != "背比べスマホ取り出し") { yield return null; }
            //    while (girlAnimNomTime <= 0.375f) { yield return null; }
            //    isGirlAnimReadSystem = false;
            //    //スマホObjオン（取り出し）
            //    ChieriSumahoObj.SetActive(true);
            //    //画面つける（画面更新も一緒に起動される）
            //    ChieriSumahoPower(true);

            //    yield return KeyOrWait(1);



            //    ChieriMotion("背比べ左手スマホいじり", 0f, 0);

            //    yield return KeyOrWait(1);


            //    ChieriMotion("背比べ左手スマホしまう", 0f, 0);
            //    StartCoroutine(GirlAnimReadSystem());
            //    while (nowGirlAnimClipName != "背比べスマホしまう") { yield return null; }
            //    while (girlAnimNomTime <= 0.55f) { yield return null; }
            //    isGirlAnimReadSystem = false;
            //    //スマホObjオフ（しまう）
            //    ChieriSumahoObj.SetActive(false);
            //    #endregion
            //}

            //if (Input.GetKeyDown(KeyCode.B))
            //{
            //    ChieriMotion("背比べ01", 0f, 0);//ベースモーション
            //    yield return KeyOrWait(1);
            //    string
            //        tmpBaseAnimStateName = "背比べ01";
            //    #region スマホ取り出しいじりしまうマスク版
            //    //スマホ片手いじりPosへ
            //    ChieriSumaho_LHand_SekurabeKatatePosObj = Resources.Load("_PosObj/_ParentPoseObjs/ChieriSumaho_LHand_SekurabeKatatePosObj") as GameObject;
            //    ChieriSumahoObj.transform.localPosition = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localPosition;
            //    ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localEulerAngles;

            //    StartCoroutine(GirlAnimReadSystem(11));

            //    //マスクのため、レイヤーのアニメを1フレでベースと同じモーション状態にする（ParameterでNormlizedTimeが指定できる（ただし指定し続けないと静止））
            //    ChieriMotion(tmpBaseAnimStateName, 0f, 11);//現在のベースアニメと同じアニメ指定
            //    girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeに

            //    yield return null;//↑適用に1フレ必要

            //    ChieriMotion("背比べ左手スマホ取り出し", 0.5f, 11);
            //    while (nowGirlAnimOtherLayerClipNameDict[11] != "背比べスマホ取り出し") { yield return null; }
            //    while (girlAnimOtherLayerNomTimeDict[11] <= 0.375f) { yield return null; }
            //    isGirlAnimReadSystem = false;
            //    //スマホObjオン（取り出し）
            //    ChieriSumahoObj.SetActive(true);
            //    //画面つける（画面更新も一緒に起動される）
            //    ChieriSumahoPower(true);

            //    yield return KeyOrWait(1);

            //    ChieriMotion("背比べ左手スマホいじり", 0f, 11);

            //    yield return KeyOrWait(1);

            //    ChieriMotion("背比べ左手スマホしまう", 0f, 11);
            //    StartCoroutine(GirlAnimReadSystem(11));
            //    while (nowGirlAnimOtherLayerClipNameDict[11] != "背比べスマホしまう") { yield return null; }
            //    while (girlAnimOtherLayerNomTimeDict[11] <= 0.5f) { yield return null; }
            //    //スマホObjオフ（しまう）
            //    ChieriSumahoObj.SetActive(false);

            //    //モーション終了まで待機
            //    while (girlAnimOtherLayerNomTimeDict[11] <= 0.65f) { yield return null; }

            //    //現在のベースと同じモーションになるまで待機してからnoData
            //    ChieriMotion(tmpBaseAnimStateName, 0.5f, 11);
            //    while (nowGirlAnimOtherLayerClipNameDict[11] != nowGirlAnimClipName)
            //    {
            //        girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeにセットし続ける
            //        yield return null;
            //    }
            //    ChieriMotion("_noData", 0f, 11);


            //    isGirlAnimReadSystem = false;

            //    #endregion
            //}
            //if (Input.GetKeyDown(KeyCode.N))
            //{
            //    ChieriMotion("座り待機", 0f, 0);
            //    yield return KeyOrWait(1);
            //    string
            //        tmpBaseAnimStateName = "座り待機";
            //    #region スマホ取り出しいじりしまうマスク版
            //    StartCoroutine(GirlAnimReadSystem(11));

            //    //マスクのため、レイヤーのアニメを1フレでベースと同じモーション状態にする（ParameterでNormlizedTimeが指定できる（ただし指定し続けないと静止））
            //    ChieriMotion(tmpBaseAnimStateName, 0f, 11);//現在のベースアニメと同じアニメ指定
            //    girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeに

            //    yield return null;//↑適用に1フレ必要

            //    ChieriMotion("背比べ左手スマホ取り出し", 0.5f, 11);
            //    while (nowGirlAnimOtherLayerClipNameDict[11] != "背比べスマホ取り出し") { yield return null; }
            //    while (girlAnimOtherLayerNomTimeDict[11] <= 0.375f) { yield return null; }
            //    isGirlAnimReadSystem = false;
            //    //スマホObjオン（取り出し）
            //    ChieriSumahoObj.SetActive(true);
            //    //画面つける（画面更新も一緒に起動される）
            //    ChieriSumahoPower(true);

            //    yield return KeyOrWait(1);

            //    ChieriMotion("背比べ左手スマホいじり", 0f, 11);

            //    yield return KeyOrWait(1);

            //    ChieriMotion("背比べ左手スマホしまう", 0f, 11);
            //    StartCoroutine(GirlAnimReadSystem(11));
            //    while (nowGirlAnimOtherLayerClipNameDict[11] != "背比べスマホしまう") { yield return null; }
            //    while (girlAnimOtherLayerNomTimeDict[11] <= 0.5f) { yield return null; }
            //    //スマホObjオフ（しまう）
            //    ChieriSumahoObj.SetActive(false);

            //    //モーション終了まで待機
            //    while (girlAnimOtherLayerNomTimeDict[11] <= 0.65f) { yield return null; }

            //    //現在のベースと同じモーションになるまで待機してからnoData
            //    ChieriMotion(tmpBaseAnimStateName, 0.5f, 11);
            //    while (nowGirlAnimOtherLayerClipNameDict[11] != nowGirlAnimClipName)
            //    {
            //        girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeにセットし続ける
            //        yield return null;
            //    }
            //    ChieriMotion("_noData", 0f, 11);


            //    isGirlAnimReadSystem = false;

            //    #endregion
            //}
            //if (Input.GetKeyDown(KeyCode.M))
            //{
            //    ChieriMotion("かくれんぼ探し歩きループ", 0f, 0);
            //    yield return KeyOrWait(1);
            //    string
            //        tmpBaseAnimStateName = "かくれんぼ探し歩きループ";
            //    #region スマホ取り出しいじりしまうマスク版
            //    StartCoroutine(GirlAnimReadSystem(11));

            //    //マスクのため、レイヤーのアニメを1フレでベースと同じモーション状態にする（ParameterでNormlizedTimeが指定できる（ただし指定し続けないと静止））
            //    ChieriMotion(tmpBaseAnimStateName, 0f, 11);//現在のベースアニメと同じアニメ指定
            //    girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeに

            //    yield return null;//↑適用に1フレ必要

            //    ChieriMotion("背比べ左手スマホ取り出し", 0.5f, 11);
            //    while (nowGirlAnimOtherLayerClipNameDict[11] != "背比べスマホ取り出し") { yield return null; }
            //    while (girlAnimOtherLayerNomTimeDict[11] <= 0.375f) { yield return null; }
            //    isGirlAnimReadSystem = false;
            //    //スマホObjオン（取り出し）
            //    ChieriSumahoObj.SetActive(true);
            //    //画面つける（画面更新も一緒に起動される）
            //    ChieriSumahoPower(true);

            //    yield return KeyOrWait(1);

            //    ChieriMotion("背比べ左手スマホいじり", 0f, 11);

            //    yield return KeyOrWait(1);

            //    ChieriMotion("背比べ左手スマホしまう", 0f, 11);
            //    StartCoroutine(GirlAnimReadSystem(11));
            //    while (nowGirlAnimOtherLayerClipNameDict[11] != "背比べスマホしまう") { yield return null; }
            //    while (girlAnimOtherLayerNomTimeDict[11] <= 0.5f) { yield return null; }
            //    //スマホObjオフ（しまう）
            //    ChieriSumahoObj.SetActive(false);

            //    //モーション終了まで待機
            //    while (girlAnimOtherLayerNomTimeDict[11] <= 0.65f) { yield return null; }

            //    //現在のベースと同じモーションになるまで待機してからnoData
            //    ChieriMotion(tmpBaseAnimStateName, 0.5f, 11);
            //    while (nowGirlAnimOtherLayerClipNameDict[11] != nowGirlAnimClipName)
            //    {
            //        girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeにセットし続ける
            //        yield return null;
            //    }
            //    ChieriMotion("_noData", 0f, 11);


            //    isGirlAnimReadSystem = false;

            //    #endregion
            //}

            #endregion
            #region //スマホバグ検証
            //if (Input.GetKeyDown(KeyCode.V))
            //{
            //    //パワーON
            //    ChieriSumahoPower();
            //}
            //if (Input.GetKeyDown(KeyCode.F))
            //{
            //    //更新コルーチン
            //    StartCoroutine(ChieriSumahoSeeSizeReloadCoroutine);
            //}
            //if (Input.GetKeyDown(KeyCode.G))
            //{
            //    //更新コルーチンストップ
            //    StopCoroutine(ChieriSumahoSeeSizeReloadCoroutine);
            //}

            #endregion
            #region //黒フェードはみだし具合確認
            //if (Input.GetKeyDown(KeyCode.F))
            //{
            //    FadeBlack(1, 0.5f);
            //}
            //if (Input.GetKeyDown(KeyCode.G))
            //{
            //    FadeBlack(0, 0.5f);
            //}


            #endregion
            #region //スキンメッシュコリダーテスト
            //if (Input.GetKeyDown(KeyCode.F))
            //{
            //    ////テストで取得したのを手動で更新
            //    //tmpSMRenderer.BakeMesh(tmpMesh);
            //    //tmpMeshCollider.sharedMesh = tmpMesh;

            //    if (isReloadSkinMeshColliderSystem) { isReloadSkinMeshColliderSystem = false; }
            //    else
            //    { StartCoroutine(ReloadSkinMeshColliderSystemIEnum()); }

            //    FixedMoveChieriColliderFollderObj.SetActive(true);
            //}
            //if (Input.GetKeyDown(KeyCode.G))
            //{
            //    ChieriMotion("片膝立ちミラーしゃがみ開始", 0f, 0);

            //    GirlMeshTrs.gameObject.SetActive(false);
            //    FixedMoveChieriColliderFollderObj.SetActive(false);
            //}
            //if (Input.GetKeyDown(KeyCode.V))
            //{
            //    ChieriMotion("ドアからデスク横へ歩く", 0f, 0);

            //    GirlMeshTrs.gameObject.SetActive(false);
            //    FixedMoveChieriColliderFollderObj.SetActive(false);
            //}
            //if (Input.GetKeyDown(KeyCode.B))
            //{
            //    ChieriMotion("ドアからデスク横へ歩く", 0f, 0);

            //    GirlMeshTrs.gameObject.SetActive(true);
            //}


            #endregion
            #region //BGMテスト
            //if (Input.GetKeyDown(KeyCode.F))
            //{
            //    BGMPlay();
            //}
            //if (Input.GetKeyDown(KeyCode.G))
            //{
            //    BGMPlay(true, "また明日");
            //}
            ////イベント移動BGMチェック
            //if (Input.GetKeyDown(KeyCode.V))
            //{
            //    EventMove("モーションチェック");
            //}
            //if (Input.GetKeyDown(KeyCode.B))
            //{
            //    EventMove("モーションチェック", true, true);
            //}
            #endregion
            #region //口パクと表情の切り替えテスト
            //if (Input.GetKeyDown(KeyCode.F))
            //{
            //    Hukidashi("OP0004");
            //}
            //if (Input.GetKeyDown(KeyCode.G))
            //{
            //    ChieriMotion("で、でしょ！", 0f, 2);

            //}


            #endregion
            #region //PostProcessingV1 DoFのみテスト

            //if (Input.GetKeyDown(KeyCode.F))
            //{
            //    //enable
            //    postPB.profile.depthOfField.enabled = true;
            //}
            //if (Input.GetKeyDown(KeyCode.G))
            //{
            //    //enable
            //    postPB.profile.depthOfField.enabled = false;
            //}
            //if (Input.GetKeyDown(KeyCode.H))
            //{
            //    //テスト値代入
            //    nowPPv1DepthOfFieldSetting.focusDistance = 2;
            //    postPB.profile.depthOfField.settings = nowPPv1DepthOfFieldSetting;
            //}
            //if (Input.GetKeyDown(KeyCode.J))
            //{
            //    //デフォルト戻し
            //    postPB.profile.depthOfField.settings = defPPv1DepthOfFieldSetting;

            //    //サブタイトルで操作表示
            //    SubTitleVis(true, "F = テストモーション再生" + "\n" + "V = IKのONOFF" + "\n" + "J = 椅子基準位置に", 1f);

            //}
            #endregion
            #region //ドア入室歩きテスト（足音確認
            //if (Input.GetKeyDown(KeyCode.F))
            //{
            //    ChieriMotion("ドア入室", 0f, 0);
            //    doorAnim.CrossFadeInFixedTime("ドア開き閉じ", 0f, 0);
            //}
            //if (Input.GetKeyDown(KeyCode.G))
            //{
            //    ChieriMotion("ドアからデスク横へ歩く", 0f, 0);
            //}

            #endregion
            #region //片膝立ちモーションテスト（スカート）
            //if (Input.GetKeyDown(KeyCode.F))
            //{
            //    ChieriMotion("片膝立ち宿題促し開始test", 0f, 0);
            //}

            #endregion
            #region //Unityタイムラインのコード書き出しテスト（書き出したコードをペーストして動き確認）
            if (Input.GetKeyDown(KeyCode.G))
            {
                //#region ChieriTimelineTest02Kakutyou1
                //ChieriTimelineTest02Kakutyou1:
                //#region フラグ処理用初期設定
                ////トラックのフラグ読み込んで生成
                //codeFlagBoolList = new List<bool>();
                //for (int i = 0; i < 0; i++)
                //{ codeFlagBoolList.Add(false); }

                ////クリップのフラグを取得する用Arrayを生成
                //clipFlagBoolArray = new bool[0];

                ////結果判定用のフラグ初期化
                //isThisCodeFlagJudge = false;
                //#endregion

                ////■ClipStart0
                ////clipStartTime 0.9
                ////clipDurationTime 0.433333333333333
                ////clipEndTime 1.33333333333333
                //yield return new WaitForSeconds(0.9f);//clipStartTime

                //#region Frac爆発設定コルーチン始動
                ////Frac爆発設定PosObj取得
                //GameObject ChieriDoorOpenPosObj0
                //    = Resources.Load("_PosObj/ChieriDoorOpenPosObj") as GameObject;

                ////Frac爆発設定コルーチン始動
                //UTLFracImpactSetting(true
                ////impactPosObj //コード読み込み用コメント
                //, ChieriDoorOpenPosObj0
                ////impactForce //コード読み込み用コメント
                //, 1f
                ////impactRadius //コード読み込み用コメント
                //, 2f
                ////bAlsoImpactFreeChunks //コード読み込み用コメント
                //, true);
                //#endregion


                //#region 指定オブジェの子オブジェ全削除
                ////Nullチェック
                //if (GameObject.Find("dddddd") != null)
                //{
                //    var tmpObj = GameObject.Find("dddddd");
                //    //子オブジェ全削除
                //    foreach (Transform trs in tmpObj.transform)
                //    { Destroy(trs.gameObject); }
                //}
                //else
                //{ Debug.Log("■ddddddがヒエラルキーにない？"); }
                //#endregion


                //#region カメラ揺れコルーチンスタート
                //StartCoroutine(UTLDOShakePosition
                ////durationDOShake //コード読み込み用コメント
                //(1f
                ////strengthDOShake //コード読み込み用コメント
                //, 0.05f
                ////vibratoDOShake //コード読み込み用コメント
                //, 20
                //, 90 //Randomness
                //, false //Snaping
                //        //fadeOutDOShake //コード読み込み用コメント
                //, true)
                //);
                //#endregion


                //#region Obj移動 回転 拡縮
                ////Nullチェック
                //if (GameObject.Find("Cubetestes") != null)
                //{
                //    var tmpObj = GameObject.Find("Cubetestes");

                //    GameObject tmpPosObj
                //        = Resources.Load("_Temporary/Cubetestes (1)") as GameObject;

                //    //Obj移動
                //    tmpObj.transform.DOLocalMove(
                //    tmpPosObj.transform.localPosition
                //    , 5f)
                //    .SetEase(Ease.OutQuad);
                //    //Obj回転
                //    tmpObj.transform.DOLocalRotate(
                //    tmpPosObj.transform.localEulerAngles
                //    , 5f)
                //    .SetEase(Ease.OutQuad);

                //    //Objスケール
                //    tmpObj.transform.DOScale(
                //    tmpPosObj.transform.localScale
                //    , 5f)
                //    .SetEase(Ease.OutQuad);

                //}
                //else
                //{ Debug.Log("■Cubetestesがヒエラルキーにない？"); }
                //#endregion

                ////■ClipEnd0


                //#endregion □ChieriTimelineTest02Kakutyou1

            }
            #endregion
            #region //FixedMoveCollider系の重複処理テスト
            //if (Input.GetKeyDown(KeyCode.F))
            //{
            //    #region ペットボトル取得
            //    //ペットボトル既に取得されていればなにもせず、なければリソースからクローン
            //    ObjSceneOrResouceLoad(ref PetBottleObj, "PetBottle", "Main/KomonoObj/PetBottle/PetBottle");

            //    //置くためにペアレント
            //    PetBottleObj.transform.SetParent(GameObjectsTrs, false);
            //    //位置
            //    GameObject PetBottle_010_DeskFirstPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_010_DeskFirstPosObj") as GameObject;
            //    PetBottleObj.transform.localPosition = PetBottle_010_DeskFirstPosObj.transform.localPosition;
            //    PetBottleObj.transform.localEulerAngles = PetBottle_010_DeskFirstPosObj.transform.localEulerAngles;


            //    //キャップ既に取得されていればなにもしない
            //    if (CapObj != null) { }
            //    else
            //    {
            //        //キャップ、クローンで取得(ペアレント変えるので、プレファブ上書きで消さないようにクローン)
            //        CapObj = Instantiate(PetBottleObj.transform.Find("Cap").gameObject);
            //        DB.evMoveDelObjList.Add(CapObj);
            //        //クローンON
            //        CapObj.transform.gameObject.SetActive(true);
            //        //ペアレント
            //        CapObj.transform.SetParent(GameObjectsTrs);
            //        //オリジナルをオフ
            //        PetBottleObj.transform.Find("Cap").gameObject.SetActive(false);
            //        //クローンキャップ机の上へ
            //        GameObject Cap_DeskUePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Cap_DeskUePosObj") as GameObject;
            //        CapObj.transform.localPosition = Cap_DeskUePosObj.transform.localPosition;
            //        CapObj.transform.localEulerAngles = Cap_DeskUePosObj.transform.localEulerAngles;
            //        CapObj.transform.localScale = Cap_DeskUePosObj.transform.localScale;
            //    }

            //    #endregion

            //}
            //if (Input.GetKeyDown(KeyCode.G))
            //{
            //    //ペットボトルコリダーをFixed追従動かし（智恵理のFixedColliderと同じ理屈）
            //    SetFixedRigidMoveColliders(PetBottleObj.transform.Find("Bottle/Bottle_MeshCollider").gameObject);
            //}
            #endregion
            #region //VR設定テスト（ミラーリングなど）
            //if (Input.GetKeyDown(KeyCode.F))
            //{
            //    //ミラー画面ONオフ
            //    XRSettings.showDeviceView = false;
            //    //FPS
            //    //Debug.Log(XRDevice.refreshRate);
            //}
            #endregion
            #region //隠れ鬼移動シンプル版テスト
            //if (Input.GetKeyDown(KeyCode.F))
            //{
            //    //移動Obj本体
            //    GameObject tmpMovePointObj
            //        = Instantiate(ResourceFiles.KO_SimplePointObj
            //        , GameObjectsTrs);
            //    //システム終了時削除するようにリストに入れ
            //    KO_SimpleKakurePosObjsList.Add(tmpMovePointObj);

            //    //移動Objの位置大きさ
            //    GameObject TempMovePointPosObj
            //        = Resources.Load("_Temporary/TempMovePointPosObj") as GameObject;
            //    tmpMovePointObj.transform.localPosition = TempMovePointPosObj.transform.localPosition;
            //    tmpMovePointObj.transform.localEulerAngles = TempMovePointPosObj.transform.localEulerAngles;
            //    tmpMovePointObj.transform.localScale = TempMovePointPosObj.transform.localScale;

            //    //シンプル移動システム起動
            //    StartCoroutine(KakureOniSimpleSystemLoad());
            //    //ポイント出現 演出
            //    KO_NewPosPointObjVis(tmpMovePointObj);

            //    //到着待ち
            //    while (isKO_SimplePointObj_Enter == false) { yield return null; }
            //    isKO_SimplePointObj_Enter = false;
            //    isKOSystem = false;//終了処理時にリストのObj削除

            //    //直後起動に2フレ必要
            //    yield return null;
            //    yield return null;

            //}
            #endregion


            #region //DOF強制処理テスト
            ////現在の値を保存し、変更できなくして、解除まで

            //if (Input.GetKeyDown(KeyCode.V))
            //{
            //    if (isForceDoF)
            //    {
            //        isForceDoF = false;

            //        //ユーザー設定値に戻す
            //        nowPPv1DepthOfFieldSetting.focusDistance
            //            = DB.userDepthOfFieldV1Float;
            //        nowPPv1DepthOfFieldSetting.aperture
            //            = 0.7f;
            //        nowPPv1DepthOfFieldSetting.useCameraFov
            //            = true;
            //        nowPPv1DepthOfFieldSetting.focalLength
            //            = 21f;
            //        nowPPv1DepthOfFieldSetting.kernelSize
            //            = DepthOfFieldModel.KernelSize.Small;

            //        postPB.profile.depthOfField.settings = nowPPv1DepthOfFieldSetting;

            //        postPB.profile.depthOfField.enabled = DB.isUserDepthOfFieldV1;
            //    }
            //    else
            //    {
            //        isForceDoF = true; SEPlay("UI_pin");

            //        //強制の値にする
            //        nowPPv1DepthOfFieldSetting.focusDistance
            //            = 2;
            //        nowPPv1DepthOfFieldSetting.aperture
            //            = 0.7f;
            //        nowPPv1DepthOfFieldSetting.useCameraFov
            //            = true;
            //        nowPPv1DepthOfFieldSetting.focalLength
            //            = 21f;
            //        nowPPv1DepthOfFieldSetting.kernelSize
            //            = DepthOfFieldModel.KernelSize.Small;

            //        postPB.profile.depthOfField.settings = nowPPv1DepthOfFieldSetting;

            //        postPB.profile.depthOfField.enabled = true;
            //    }
            //}


            #endregion
            #region //パーティクル一時停止テスト

            //if (Input.GetKeyDown(KeyCode.V))
            //{
            //    GameObject.Find("Particle_Dust")
            //        .GetComponent<ParticleSystem>().Pause();
            //}


            #endregion

            #region //シーン追加読み込みテスト

            if (Input.GetKeyDown(KeyCode.S))
            {
                //#region City用Fogシーンを読み込み

                //Debug.Log("□シーンをロード開始");
                //yield return null;

                //#region シーン読み込み

                //UnityEngine.SceneManagement.SceneManager.LoadSceneAsync("Bath", UnityEngine.SceneManagement.LoadSceneMode.Additive);

                //////FogVolume出てくるまで待機
                ////while (GameObject.Find("CitySKy/Fog Volume Data") == null)
                ////{
                ////    Debug.Log("Cityx100Fogシーンロード中");
                ////    yield return null;
                ////}


                //////カメラ削除
                ////if (GameObject.Find("CameraAll_Cityx100") != null) { Destroy(GameObject.Find("CameraAll_Cityx100")); }

                //////FogVolumeに割り当て
                ////GameObject.Find("CitySKy/Fog Volume Data").GetComponent<FogVolumeData>()
                ////    .GameCamera = VRCamera;

                //#endregion
                //////■GameObjects_Cityを取得（CityのPrefabを入れる入れ物）
                ////if (GameObject.Find("GameObjects_City"))
                ////{ GameObjects_City = GameObject.Find("GameObjects_City"); }
                ////else
                ////{ Debug.Log("■GameObjects_Cityがオフまたはない？"); }


                //Debug.Log("■シーンロード終了");


                //while (true) { yield return null; }

                //#endregion

            }



            #endregion

            #region 脚登りモードEasyとHard切り替え
            if (Input.GetKeyDown(KeyCode.C))
            {
                if (AN_isInputSwitchEasyMode)
                {
                    AN_isInputSwitchEasyMode = false;
                    AN_isInputSwitchHardMode = true;
                    Debug.Log("脚登りHard、手が外れる");
                }
                else
                {
                    AN_isInputSwitchEasyMode = true;
                    AN_isInputSwitchHardMode = false;
                    Debug.Log("脚登りEasy、手が外れない");
                }
            }
            #endregion

            yield return null;
        }

    }
    IEnumerator UserDataCheckLoad()//ユーザーデータチェックとロード
    {
        if (debugEventMoveFlag == true)
        {
            KankyouBGMVolumer(0, 0);
        }
        EventReset();

        //智恵理消し
        GirlMeshTrs.gameObject.SetActive(false);

        isMenuLock = true;


        FadeBlack(1, 0);//まず黒被せて
        yield return null;

        //シーン移動用のFadeオフ
        if (fadeBlackSceneMoveCanvasImageTweener != null)
        {

            fadeBlackSceneMoveCanvasImageTweener.Kill();
            GameObject.Find("FadeBlackSceneMoveCanvasImage").GetComponent<Image>()
                .color = new Color(0, 0, 0, 0);
        }

        StartCoroutine(LoadUserData());
        while (isNowSaveLoading) { yield return null; }

        yield return null;



        #region 初期設定ウィンドウ
        if (DB.isUserInitialSetting == false)
        {
            SubTitleVis(false);
            //メニューシステム初期起動で起動
            StartCoroutine(MenuSystemIEnum(true, true));
        }
        while (DB.isUserInitialSetting == false) { yield return null; }
        #endregion

        #region AssetBundle読み込み

        #region FontAssetフォントデータあればDBのデータ書き換え
        //ひとまずリソースロード直接（事前でもやってある）
        DB.hukidashiCanvasObj = Resources.Load("EventSystem/Hukidashi/Prefab/HukidashiCanvas") as GameObject;
        DB.novelSystem = Resources.Load("EventSystem/Novel/NovelSystem") as GameObject;


        //アセットバンドル有無チェック（Nullちぇっくできなかったのでエラー上等で読み込み）
        AssetBundle fontAB =
            AssetBundle.LoadFromFile("AssetBundleData/fontasset");

        if (fontAB != null)
        {
            //■HukidashiCanvas DBのデータ置き換え
            //リソースからPrefab交換（直接書き換えてもよいPrefabに）
            DB.hukidashiCanvasObj = Resources.Load("EventSystem/Hukidashi/Prefab/HukidashiCanvasReWrite") as GameObject;

            //フォント書き換え
            DB.hukidashiCanvasObj.transform.Find("HukidashiText").GetComponent<TextMeshProUGUI>().font
                = fontAB.LoadAsset<TMP_FontAsset>("NotoSansCJKtc-DemiLight SDF_8192_plusJpnRange");


            //■NovelSystem DBのデータ置き換え
            //リソースからPrefab交換（直接書き換えてもよいPrefabに）
            DB.novelSystem = Resources.Load("EventSystem/Novel/NovelSystemReWrite") as GameObject;

            //フォント書き換え
            DB.novelSystem.transform.Find("Canvas/NovelText").GetComponent<TextMeshProUGUI>().font
                = fontAB.LoadAsset<TMP_FontAsset>("NotoSansCJKtc-DemiLight SDF_8192_plusJpnRange");
            DB.novelSystem.transform.Find("Canvas/NovelLogText").GetComponent<TextMeshProUGUI>().font
                = fontAB.LoadAsset<TMP_FontAsset>("NotoSansCJKtc-DemiLight SDF_8192_plusJpnRange");

        }

        #endregion


        #endregion


        yield return new WaitForSeconds(0.2f);
        FadeWhite(1, 2, true);//trueで白被せた後（黒より前にする）

        #region 白フェードON待ち（ボタンスキップ化）
        float tmpTimer = 0;

        while (tmpTimer < 2f)
        {
            tmpTimer += 1 * Time.deltaTime;
            if (isMenuSystem == false &&
                isKetteiDown)
            { tmpTimer = 99; }
            yield return null;
        }
        #endregion

        FadeWhite(1, 0, true);//trueで白被せた後（黒より前にする）
        yield return null;
        FadeBlack(0, 0);//黒消して
        yield return null;
        FadeWhite(1, 0);//trueじゃなくして移動

        EventMove();
    }


    IEnumerator Title()//タイトル
    {
        if (debugEventMoveFlag == true)
        {
            //FadeWhite(1, 0.5f,true);
        }

        EventReset();

        //智恵理消し
        GirlMeshTrs.gameObject.SetActive(false);

        //環境音オフ
        KankyouBGMVolumer(0f, 0.5f);

        BGMPlay(true, "また明日", 1, 3);


        //タイトル用に小物消去■
        //HomeworkTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);
        Drill_chieriTrs.gameObject.SetActive(false);
        SharpenObj.SetActive(false);
        KeshigomuObj.SetActive(false);

        //宿題ロック
        isHwVisLock = true;
        //ゲーム開始時にスマホオブジェクトオフ
        PlayerSmartPhoneFolderTrs.gameObject.SetActive(false);

        #region //デバッグ コントローラー情報出力
        //string tmpStr = "コントローラー\n";
        //for (int i = 0; i < Input.GetJoystickNames().Length; i++)
        //{
        //    tmpStr += Input.GetJoystickNames()[i] + "\n";
        //}

        //Debug.Log(tmpStr);
        //SubTitleVis(true, tmpStr);

        //using (StreamWriter
        //    writer = new StreamWriter(Application.streamingAssetsPath + "/Controller.json"
        //    , false
        //    , Encoding.GetEncoding("utf-8")))
        //{
        //    writer.WriteLine(tmpStr);
        //}
        #endregion

        //プレイヤーTransform(後ろタンス上に0.1倍)
        CameraObjectsTrs.localPosition = new Vector3(-1.2f, 0.88f, 2.524f);
        CameraObjectsTrs.localEulerAngles = new Vector3(0f, -128f, 0f);
        nowPlayerLocalScale = new Vector3(0.1f, 0.1f, 0.1f);

        //カメラリセット値変更してリセット
        CameraReset(new Vector3(0f, -128f, 0f)
            , DB.cameraStandAnchorDefLocalPos //Anchorを立ちに
            , true);

        //タイトル設置前に1フレーム待機
        yield return null;

        //タイトルロゴ設置 (カメラにペアレントしてから配置してペアレント外す)
        #region 以前のObj型
        ////GameObject tempTitle_logoObj = Instantiate(ResourceFiles.Title_logoObj);
        //GameObject tempTitle_logoObj = Instantiate(Resources.Load("Main/UI/Title_logo/Title_logo") as GameObject);
        //tempTitle_logoObj.transform.SetParent(CameraAnchorTrs);
        //tempTitle_logoObj.transform.localPosition = new Vector3(0f, 0.2f, 1f);
        //tempTitle_logoObj.transform.localEulerAngles = new Vector3(0f, 180f, 90f);
        //tempTitle_logoObj.transform.localScale = new Vector3(2.9f, 2.9f, 2.9f);
        //tempTitle_logoObj.transform.SetParent(GameObjectsTrs);
        //DB.evDelObjList.Add(tempTitle_logoObj);//削除用にDBのリストへ登録
        #endregion

        GameObject tempTitle_logoCanvasObj = Instantiate(Resources.Load("Main/UI/Title_logo/TitleLogoCanvas") as GameObject
            , CameraObjectsTrs, false);
        DB.evMoveDelObjList.Add(tempTitle_logoCanvasObj);//削除用にDBのリストへ登録

        CanvasGroup tmpCanvasGroup = tempTitle_logoCanvasObj.GetComponent<CanvasGroup>();

        Tweener tmpTitleFadeTweener =
            DOTween.To(() => tmpCanvasGroup.alpha, (x) => tmpCanvasGroup.alpha = x,
            1, 4)
            .SetUpdate(true);

        #region タイトルフェード待ち ボタンスキップ可
        float tmpTimer = 0;

        while (tmpTimer < 3f)
        {
            tmpTimer += 1 * Time.deltaTime;
            if (isMenuSystem == false &&
                isKetteiDown)
            { tmpTimer = 99; }
            yield return null;
        }

        //オフフェード
        FadeWhite(0, 2);
        FadeBlack(0, 0);

        while (tmpTimer < 6)
        {
            tmpTimer += 1 * Time.deltaTime;
            if (isMenuSystem == false &&
                isKetteiDown)
            { tmpTimer = 99; }
            yield return null;
        }
        //フェード解除
        FadeWhite(0, 0);
        FadeBlack(0, 0);
        ////シーン移動用のFadeもオフ
        //if (fadeBlackSceneMoveCanvasImageTweener != null)
        //{

        //    fadeBlackSceneMoveCanvasImageTweener.Kill();
        //    GameObject.Find("FadeBlackSceneMoveCanvasImage").GetComponent<Image>()
        //        .color = new Color(0, 0, 0, 0);
        //}

        tmpTitleFadeTweener.Kill();
        tmpCanvasGroup.alpha = 1;

        #endregion

        #region //以前の視線ボタン
        ////スタートボタンレイ開始(コリダー追加と同時にそれを引数に)
        //ButtonColliderRay(0, tempStart_bottanObj.gameObject.AddComponent<BoxCollider>(), Color.red);

        ////選択待ち
        //while (sentakuListNum == 99) { yield return null; }
        //sentakuListNum = 99;//初期化

        //スタートボタンレイ終るまで待つ(同時に開始される)
        #endregion

        //キー説明設置
        GameObject KeySetumeiCanvas
            = Instantiate(Resources.Load("Main/UI/Start_bottan/KeySetumeiCanvas") as GameObject
            , CameraAnchorTrs
            , false);
        DB.evMoveDelObjList.Add(KeySetumeiCanvas);//削除用にDBのリストへ登録


        スタートコンティニュー選択:
        GameObject GameStart_SelectButtons;
        if (DB.isUserContinue)
        {
            //スタートボタン設置
            GameStart_SelectButtons
                = Instantiate(Resources.Load("Main/UI/Start_bottan/GameStart_SelectButtons") as GameObject
                , CameraAnchorTrs
                , false);
            DB.evMoveDelObjList.Add(GameStart_SelectButtons);//削除用にDBのリストへ登録

            StartCoroutine(SelectSystemIEnum(GameStart_SelectButtons, 1));
        }
        else
        {
            //スタートボタン設置(ニューゲーム)
            GameStart_SelectButtons
                = Instantiate(Resources.Load("Main/UI/Start_bottan/GameStart_SelectButtons_NewGame") as GameObject
                , CameraAnchorTrs
                , false);
            DB.evMoveDelObjList.Add(GameStart_SelectButtons);//削除用にDBのリストへ登録

            StartCoroutine(SelectSystemIEnum(GameStart_SelectButtons, 0));
        }

        while (sentakuListNum == 99) { yield return null; }

        switch (sentakuListNum)
        {
            case 0:
                sentakuListNum = 99;
                Destroy(GameStart_SelectButtons);

                break;
            case 1:
                sentakuListNum = 99;
                Destroy(GameStart_SelectButtons);

                //フローチャート移動してたら進まない。
                while (isFlowChartEventMove) { yield return null; }

                StartCoroutine(MenuSystemIEnum(true, false, true));

                //フローチャート移動してたら進まない。
                while (isFlowChartEventMove) { yield return null; }

                goto スタートコンティニュー選択;

                break;
        }



        //多重読み込みさせないようメニューロック
        isMenuLock = true;
        //フローチャート移動してたら進まない。
        while (isFlowChartEventMove) { yield return null; }


        //シーン移動音
        SEPlay(UISEObj, "UI_fuwa-", 0.4f);

        //BGMフェードアウト
        BGMPlay(false, null, 1, 0, 4);

        FadeBlack(1, 2, true, Ease.InOutQuad);

        yield return new WaitForSeconds(4);

        ////シーン移動前にDBデータ渡し
        //DB.nowFadeBlackEndColor = Color.black;
        //DB.nowFadeWhiteEndColor = new Color(1, 1, 1, 0);

        //フローチャートと同じロード方法にして強制シーンロード状態
        isFlowChartEventMove = true;

        EventMove("入室", false, true);

        yield break;



        ////セーブデータから読み込んでロードしていたときの

        //■イベント セーブデータからロードして移動（コマデータリストからセーブされてるナンバー読み取り、コマデータからメインイベントname参照）
        string tmpEvName
            = flowChartKomaDataObjList[int.Parse(DB.saveDataDict[nameof(DB.nowEventNum)])]
            .GetComponent<FlowChartKoma>().mainEventName;

        //mainEventNameなければそのままイベント番号で移動
        if (tmpEvName == "")
        { EventMove(int.Parse(DB.saveDataDict[nameof(DB.nowEventNum)]), false, true); }
        //あればその名前で
        else { EventMove(tmpEvName, false, true); }


    }
    public bool isPDStopped = false;//UTL終了検知（RME上で終了指定するようにしたため、public化）
    IEnumerator Bonus01()//おまけ01 足比べ
    {
        if (debugEventMoveFlag == true)
        {
        }

        EventReset();
        HukidashiNovelDistanceChange(0.5f, 0);

        FadeBlack(1, 0);
        #region 暗幕設定
        DB.isChieriPosLock = true;
        ChieriMotion("座り待機", 0f, 0);

        //プレイヤー大きさ
        nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;

        #region 宿題テーブル小物消し
        //宿題 位置に
        Drill_chieriTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);
        GrasstableTrs.gameObject.SetActive(false);
        SharpenObj.gameObject.SetActive(false);
        KeshigomuObj.SetActive(false);
        #endregion

        #endregion

        //サブタイトル
        if (DB.isEnglish)
        { SubTitleVis(true, "　　　Bonus 01", 0, true, 10, 2); }
        else
        { SubTitleVis(true, "　　　　おまけ 01", 0, true, 10, 2); }


        //環境音フェードイン
        KankyouBGMVolumer(1f, 3f);

        #region PD再生

        //Prefabにして取り出し（TimelineAssetをスクリプトのみで読み出して再生が難しかったので）
        GameObject Ashikurabe_TimelineObj
            = Instantiate(Resources.Load("Main/Timeline/Ashikurabe_TimelineObj") as GameObject);
        Ashikurabe_TimelineObj.name = nameof(Ashikurabe_TimelineObj);

        PlayableDirector ashikurabePD
            = Ashikurabe_TimelineObj.GetComponent<PlayableDirector>();

        //Stoppedで終了検知（Stoppedは、多分ストップ時に行うアクションを追加できるもの。 引数にPD指定必要。）
        isPDStopped = false;

        ashikurabePD.stopped += (PlayableDirector aDirector) =>
        { isPDStopped = true; };//終了したらtrue


        #endregion

        #region ちえり両足にWindnoiseSoundObj付与


        //WindnoiseSoundObj付与（左足）
        GameObject LFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlLFootTrs);
        DB.evMoveDelObjList.Add(LFootWindnoiseSoundObj);
        LFootWindnoiseSoundObj.name = nameof(LFootWindnoiseSoundObj);
        LFootWindnoiseSoundObj.transform.localPosition =
            LFootWindnoiseSoundObj.transform.localEulerAngles = Vector3.zero;

        //設定
        WindnoiseSound tmpLFootSound = LFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpLFootSound.aSource.maxDistance = 100;
        tmpLFootSound.pitchUpRateAdjustFloat = 2;
        tmpLFootSound.pitchDownRateAdjustFloat = 0.00004f;
        tmpLFootSound.pitchMax = 0.3f;

        tmpLFootSound.aSource.volume = 0;


        //WindnoiseSoundObj付与（右足）
        GameObject RFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRFootTrs);
        DB.evMoveDelObjList.Add(RFootWindnoiseSoundObj);
        RFootWindnoiseSoundObj.name = nameof(RFootWindnoiseSoundObj);
        RFootWindnoiseSoundObj.transform.localPosition =
            RFootWindnoiseSoundObj.transform.localEulerAngles = Vector3.zero;

        //設定
        WindnoiseSound tmpRFootSound = RFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpRFootSound.aSource.maxDistance = 100;
        tmpRFootSound.pitchUpRateAdjustFloat = 2;
        tmpRFootSound.pitchDownRateAdjustFloat = 0.00004f;
        tmpRFootSound.pitchMax = 0.3f;

        tmpRFootSound.aSource.volume = 0;



        #endregion


        yield return new WaitForSeconds(3);

        tmpLFootSound.aSource.DOFade(1, 2);
        tmpRFootSound.aSource.DOFade(1, 2);

        //開幕
        FadeBlack(0, 1);

        ashikurabePD.Play();

        //コードでやるならここ 　↑↓コメントアウト

        while (isPDStopped == false) { yield return null; }


        //暗幕
        FadeBlack(1, 1);
        yield return new WaitForSeconds(3);

        isFlowChartEventMove = true;
        EventMove("タイトル", true, true);


        yield break;
    }

    IEnumerator OP0100()//入室
    {
        if (debugEventMoveFlag == true)
        {
        }
        EventReset();

        //環境音フェードイン
        KankyouBGMVolumer(1f, 3f);

        //初プレイ開始（以降タイトルでコンティニューできる）
        DB.isUserContinue = true;

        yield return null;

        ////暗幕
        //FadeBlack(1, 1);
        //yield return new WaitForSeconds(1f);

        #region 設定
        nowPlayerLocalScale = Vector3.one;

        //小物消去■
        DrillTrs.gameObject.SetActive(false);
        Drill_chieriTrs.gameObject.SetActive(false);
        SharpenObj.SetActive(false);
        KeshigomuObj.SetActive(false);

        //智恵理オンして待機させてオフ
        GirlMeshTrs.gameObject.SetActive(true);
        yield return null;
        ChieriMotion("ドア入室前待機", 0f, 0);
        yield return null;
        GirlMeshTrs.gameObject.SetActive(false);
        //智恵理0位置ロック
        DB.isChieriPosLock = true;


        //プレイヤー アンカーカメラ立ち位置
        CameraAnchorTrs.localPosition = DB.cameraStandAnchorDefLocalPos;

        #region プレイヤー立ち位置に移動と回転設定

        //暗幕中に位置移動
        GameObject Player_01StartStandPosObj
            = Resources.Load("_PosObj/01OP/Player_01StartStandPosObj") as GameObject;

        CameraObjectsTrs.transform.localPosition = Player_01StartStandPosObj.transform.localPosition;
        //カメラリセット値変更してリセット
        CameraReset(Player_01StartStandPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos);//Anchorを立ちに

        #endregion


        #endregion 設定

        HukidashiNovelDistanceChange(0.7f);

        //開幕
        FadeBlack(0, 3);
        FadeBlack(0, 3, true);
        yield return new WaitForSeconds(4);

        //goto デバッグ移動;

        NovelSetVis("OP0010");//昔と変わってるなあ


        while (isNovelSetVisIng) { yield return null; }


        yield return new WaitForSeconds(1);

        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);

        SEPlay(DoorSEObj, "door-wood-knock1", DoorTrs.gameObject);
        yield return new WaitForSeconds(0.5f);
        Hukidashi("OP0002");//入るよー？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("OP0100");//「ああ、うん」
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);


        HukidashiNovelDistanceChange(0.6f);

        #region 智恵理入室

        ChieriMotion("ドア入室", 0f, 0);
        ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);
        doorAnim.CrossFadeInFixedTime("ドア開き閉じ", 0f, 0);

        yield return new WaitForSeconds(2f / girlAnim.speed);

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 1);


        yield return new WaitForSeconds(0.5f / girlAnim.speed);

        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        ChieriMotion("f_え？(軽驚)", 0.1f, 2);
        Hukidashi("OP0003");//わ、どうして立ってるの？
        yield return new WaitForSeconds(0.5f / girlAnim.speed);

        //まばたき
        ChieriMotion("まばたき", 0f, 4);
        blinkTime = 0;
        yield return new WaitForSeconds(0.2f / girlAnim.speed);
        ChieriMotion("まばたき", 0f, 4);
        blinkTime = 0;

        //■ポーズ状態まで待ち
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 0.9f) { yield return null; }
        isGirlAnimReadSystem = false;

        ChieriMotion("笑顔01口眉_目閉じない", 1f, 2);
        yield return KeyOrWait(3);
        #endregion

        #region 座って座って
        NovelSetVis("OP0110");//「懐かしいなって」
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        ChieriMotion("あはは・・・", 0.1f, 2);
        ChieriMotionDelay(1f, "f_あはは目開き", 0.1f, 2);//時間差表情戻し
        Hukidashi("OP0004");//何年ぶりだっけ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("笑顔01口眉_目閉じない", 0.5f, 2);
        Hukidashi("OP0005");//座って座って

        //目線変える前まばたき
        ChieriMotion("まばたき", 0f, 4);
        blinkTime = 0;
        //IK座り位置見る
        GameObject Chieri_01_LookIK_SitPosObj = Resources.Load("_PosObj/01OP/Chieri_01_LookIK_SitPosObj") as GameObject;
        FollowDOMove(IKLookAtEyeTargetTrs, Chieri_01_LookIK_SitPosObj.transform.position, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, Chieri_01_LookIK_SitPosObj.transform.position, 3f);

        //右上半身マスクで促し
        ChieriMotion("ドア入室直後ポーズから宿題促し", 0f, 10);
        yield return new WaitForSeconds(0.5f);

        //顔プレイヤーに戻し
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 4f);

        //目線変える前まばたき
        ChieriMotion("まばたき", 0f, 4);
        blinkTime = 0;
        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0);

        yield return KeyOrWait(3);

        NovelSetVis("OP0120");//「じゃあ遠慮なく」

        #endregion

        //暗幕開始
        FadeBlack(1, 3f);

        //目線変える前まばたき
        ChieriMotion("まばたき", 0f, 4);
        blinkTime = 0;
        //目線変え
        FollowDOMove(IKLookAtEyeTargetTrs, Chieri_01_LookIK_SitPosObj.transform.position, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0);

        //IK切り
        DOTweenToLAIKSEyes(LAIKEyeS, 0, 2f);
        DOTweenToLAIKSHead(LAIKHeadS, 0, 2f);
        yield return new WaitForSeconds(0.5f);
        ChieriMotion("ドアからデスク横へ歩く", 0f, 0);
        ChieriMotion("_noData", 0f, 10);

        yield return new WaitForSeconds(2.5f);

        //■テーブル前まで待ち
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 0.47f) { yield return null; }
        isGirlAnimReadSystem = false;

        ChieriMotion("座り待機", 1f, 0);



        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(3);

        デバッグ移動:

        #region 暗幕後モノローグ 画面つけるまで

        //プレイヤー 座り位置に
        GameObject Player_00StartSitPosObj = Resources.Load("_PosObj/01OP/Player_00StartSitPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_00StartSitPosObj.transform.localPosition;

        //プレイヤー座り位置デフォルトに
        CameraReset(Player_00StartSitPosObj.transform.localEulerAngles
            , DB.cameraSitAnchorDefLocalPos);

        //■音楽スタート
        BGMPlay(true, "CSG_BlueSky_Loop", 0.6f, 4);

        //speaker.audioSource.volume = 0f;
        //speakerHighPass.cutoffFrequency = 2500;
        //speakerHighPass.highpassResonanceQ = 1;
        //speaker.audioSource.clip = Resources.Load("Main/BGM/CSG_BlueSky_Loop") as AudioClip;
        //speaker.audioSource.Play();
        //DOTween.To(() => speaker.audioSource.volume, (x) => speaker.audioSource.volume = x, 1f, 4);

        //環境音フェードアウト
        KankyouBGMVolumer(0f, 3f);

        yield return new WaitForSeconds(3);

        Hukidashi("OP0008");//ちょっとじっとしててね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("OP0125");//お、おう

        //カチャ
        SEPlay("action_drop_plastic_cup_01", 0.6f);

        yield return new WaitForSeconds(4);


        NovelSetVis("OP0130");//『宿題がすぐ解けちゃうメガネがあるんだよ』

        //カチャ
        SEPlay("action_drop_plastic_cup_01", 0.6f);
        while (isNovelSetVisIng) { yield return null; }
        //カチャ
        SEPlay("action_drop_plastic_cup_01", 0.6f);
        yield return new WaitForSeconds(1);

        NovelSetVis("OP0140");//それにしても…
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        Hukidashi("OP0009");//脳波とか見るみたいだし
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //カチャ
        SEPlay("action_drop_plastic_cup_01", 0.6f);

        NovelSetVis("OP0150");//へ、へえ…
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(2);

        Hukidashi("OP0010");//画面つけるよ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        Hukidashi("OP0020");//気をつけてね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //カチャ
        SEPlay("action_drop_plastic_cup_01", 0.6f);
        yield return new WaitForSeconds(0.3f);
        //白フェード開始
        FadeWhite(1, 2);

        #region 横線（いらないかも）
        GameObject WhiteLineObj = GameObject.Find("WhiteLine");
        RectTransform WhiteLineRectTrs = WhiteLineObj.GetComponent<RectTransform>();
        Vector2 tmpDefSizeDelta = WhiteLineRectTrs.sizeDelta;
        Vector2 tmpSizeDelta = WhiteLineRectTrs.sizeDelta;

        DOTween.To(() => tmpSizeDelta.x, (x) => tmpSizeDelta.x = x, 1f, 0.3f)
            .OnUpdate(() =>
            { WhiteLineRectTrs.sizeDelta = tmpSizeDelta; });

        yield return new WaitForSeconds(2);
        WhiteLineRectTrs.sizeDelta = tmpDefSizeDelta;
        FadeBlack(0, 0);


        #endregion


        #endregion

        EventMove();

        #region デバッグ
        while (true)
        {
            //if (Input.GetKeyDown(KeyCode.F))
            //{
            //    //智恵理0位置ロック解除
            //    DB.isChieriPosLock = false;
            //    GameObject ChieriDoorOpenPosObj = Resources.Load("_PosObj/ChieriDoorOpenPosObj") as GameObject;
            //    GirlTrs.localPosition = ChieriDoorOpenPosObj.transform.localPosition;
            //    GirlTrs.localEulerAngles = ChieriDoorOpenPosObj.transform.localEulerAngles;
            //    ChieriMotion("ドア入室原点", 0f, 0);
            //}
            //if (Input.GetKeyDown(KeyCode.G))
            //{
            //    ChieriMotion("ドア入室直後ポーズから宿題促し", 0f, 10);
            //}
            //if (Input.GetKeyDown(KeyCode.B))
            //{
            //    ChieriMotion("ドアからデスク横へ歩く", 0f, 0);
            //}
            //if (Input.GetKeyDown(KeyCode.H))
            //{
            //    DB.isChieriPosLock = true;
            //    ChieriMotion("ドア入室", 0f,0);
            //}


            yield return null;
        }

        #endregion

    }
    IEnumerator T0000()//メガネの使い方
    {
        if (debugEventMoveFlag == true)
        {
            CameraObjectsTrs.localPosition = DB.cameraObjectsResetLocalPos;
            nowPlayerLocalScale = DB.cameraObjectsResetLocalScl;
            CameraObjectsTrs.localEulerAngles = DB.cameraObjectsResetLocalEul;

            #region プレイヤー宿題位置に移動と回転設定

            //暗幕中に位置移動
            GameObject Player_00StartSitPosObj
                = Resources.Load("_PosObj/01OP/Player_00StartSitPosObj") as GameObject;

            CameraObjectsTrs.transform.localPosition = Player_00StartSitPosObj.transform.localPosition;
            //カメラリセット値変更してリセット
            CameraReset(Player_00StartSitPosObj.transform.localEulerAngles
                , DB.cameraSitAnchorDefLocalPos);//Anchorを立ちに

            #endregion
            nowPlayerLocalScale = Vector3.one;
        }
        EventReset();

        #region 設定

        //宿題システムスタート
        #region 宿題初期値設定
        //攻撃力, 集中力, 集中力回復量, お金, 値段, 集中力減退量
        DB.HwPowFloat = 1;            //攻撃力
        DB.HwConcFloat = 20;          //集中力(スタミナ)
        DB.HwConcCureFloat = 0.5f;    //集中力回復量
        DB.HwConcDownFloat = 1;       //集中力減退量
        DB.HwMoneyFloat = 0;          //お金
        DB.HwPriceFloat = 10;         //値段（倍数）
        DB.HwConcCurRhythmFloat = 3;  //回復が始まるまでの時間
        DB.HwAttackRhythmMaxFloat = 1.0f;//攻撃の間隔スピード
        DB.HwPointLocalScale = new Vector3(0.01f, 0.0001f, 0.01f);

        DB.HwNowStageInt = 1;
        DB.HwStageClearCountInt = 0;
        DB.HwAllEnmKillCountInt = 0;
        #endregion
        StartCoroutine(HomeworkSystem());
        yield return null;
        isHwVisLock = true;//宿題できないように


        GirlMeshTrs.gameObject.SetActive(true);

        //プレイヤー位置デフォルトにしてトラッキングリセット（今のままではここで座ってないといけない）
        CameraReset(Vector3.zero
            , DB.cameraSitAnchorDefLocalPos
            , true);

        //幕中にアニメセット
        ChieriMotion("眼鏡外し", 0f, 0);

        //タイトルで消した小物復活
        HomeworkTrs.gameObject.SetActive(true);
        DrillTrs.gameObject.SetActive(true);
        Drill_chieriTrs.gameObject.SetActive(true);
        SharpenObj.SetActive(true);
        KeshigomuObj.SetActive(true);
        GrasstableTrs.gameObject.SetActive(true);
        RoomTrs.gameObject.SetActive(true);

        //右下テキスト出てたらフェードアウト
        if (RightUnderText.color != new Color(1, 1, 1, 0))
        {
            DOTween.To(() => RightUnderText.color, (x) => RightUnderText.color = x,
                            new Color(1, 1, 1, 0), 3f);
        }

        //タイトルロゴ設置 (カメラにペアレントしてから配置してペアレント外す)
        //GameObject tempTitle_logoObj = Instantiate(ResourceFiles.Title_logoObj);
        GameObject tempTitle_logoObj = Instantiate(Resources.Load("Main/UI/Title_logo/Title_logo") as GameObject);
        tempTitle_logoObj.transform.SetParent(CameraAnchorTrs);
        tempTitle_logoObj.transform.localPosition = new Vector3(0f, 0.25f, 1f);
        tempTitle_logoObj.transform.localEulerAngles = new Vector3(0f, 180f, 90f);
        tempTitle_logoObj.transform.localScale = new Vector3(1.6f, 1.6f, 1.6f);
        tempTitle_logoObj.transform.SetParent(GameObjectsTrs);
        DB.evMoveDelObjList.Add(tempTitle_logoObj);//削除用にDBのリストへ登録

        //マテリアル取得 //デフォルトカラー取得 //透明に
        Material tempTitle_logoMaterial = tempTitle_logoObj.GetComponent<Renderer>().material;
        Color tempTitle_logoDefColor = tempTitle_logoMaterial.color;
        tempTitle_logoDefColor.a = 0;
        tempTitle_logoMaterial.color = tempTitle_logoDefColor;


        //プレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        yield return new WaitForSeconds(0.5f);

        #endregion


        //フェードイン開幕
        FadeWhite(0, 3, Ease.InOutQuad);
        FadeBlack(0, 3);

        ////スピーカー音量UP
        //DOTween.To(() => speaker.audioSource.volume, (x) => speaker.audioSource.volume = x, 2f, 4);
        //DOTween.To(() => speakerHighPass.cutoffFrequency, (x) => speakerHighPass.cutoffFrequency = x, 1000f, 2);

        //■音楽スタート
        BGMPlay(true, "CSG_BlueSky_Loop", 1f, 3);


        yield return new WaitForSeconds(2.5f);

        //■智恵理見てる量計測システム コルーチン始動
        StartCoroutine(SeeGirlSystem());

        ////タイトルロゴフェードイン
        //tempTitle_logoDefColor.a = 1;
        //DOTween.To(() => tempTitle_logoMaterial.color, (x) => tempTitle_logoMaterial.color = x,
        //                tempTitle_logoDefColor, 2f);

        yield return new WaitForSeconds(3f);


        //「見えるかな」　モーション待機ループへ
        SHukidashi("A0010");
        ChieriMotion("座り待機", 1f, 0);
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        ////タイトルロゴフェードアウト
        //tempTitle_logoDefColor.a = 0;
        //DOTween.To(() => tempTitle_logoMaterial.color, (x) => tempTitle_logoMaterial.color = x,
        //                tempTitle_logoDefColor, 5f);

        yield return new WaitForSeconds(3);


        #region ■選択肢イベント開始
        無言の場合戻る:

        //二週目以降なら選択肢追加
        if (DB.storyLoopCountInt > 0)
        {
            Sentakushi("■A0010a", "ちゃんと見えるかな？");
            Sentakushi("■A0010b");
            Sentakushi("■A0010c");
        }
        else
        {
            Sentakushi("■A0010a", "ちゃんと見えるかな？");
            Sentakushi("■A0010b");
        }

        #region 選択キー説明表示
        GameObject SetumeiSentakushiSousaObj;

        if (DB.isEnglish)
        {
            SetumeiSentakushiSousaObj =
                Instantiate(Resources.Load("EventSystem/Hukidashi/SetumeiSentakushiSousaEnglish") as GameObject
                , MessageCanvasTrs
                , false);
        }
        else
        {
            SetumeiSentakushiSousaObj =
                Instantiate(Resources.Load("EventSystem/Hukidashi/SetumeiSentakushiSousa") as GameObject
                , MessageCanvasTrs
                , false);
        }

        CanvasGroup tmpCanvasGroup = SetumeiSentakushiSousaObj.GetComponent<CanvasGroup>();

        DOTween.To(() => tmpCanvasGroup.alpha, (x) => tmpCanvasGroup.alpha = x,
                1, 1)
                .SetUpdate(true);

        #endregion


        ぼやけてるで戻る:

        //選択肢選ばれるまでループ
        while (sentakuListNum == 99) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        #region 選択キー説明 消去
        DOTween.To(() => tmpCanvasGroup.alpha, (x) => tmpCanvasGroup.alpha = x,
            0, 1)
            .SetUpdate(true)
            .OnComplete(() =>
            {
                Destroy(SetumeiSentakushiSousaObj);
            });
        #endregion

        switch (sentakuListNum)
        {
            case 0://選択肢a「ぼやけてる？」「手で調整して」
                {
                    sentakuListNum = 99;
                    #region 選択肢a「ぼやけてる？」「手で調整して」

                    yield return new WaitForSeconds(0.5f);
                    Hukidashi("A0010a");//メガネがズレてたり？
                    //ChieriMotion("あはは・・・", 0.7f, 2);
                    ChieriMotion("f_え？？", 0.7f, 2);
                    AseTare();
                    ChieriMotionDelay(2, "_noData", 0.3f, 2);//時間差表情戻し
                    yield return new WaitForSeconds(1); yield return KeyOrWait(4);

                    Hukidashi("A0010a2");//もし文字が読めないくらいだったら
                    yield return new WaitForSeconds(0.5f); yield return KeyOrWait(2);

                    Hukidashi("A0010a3");//手で調整してみて
                    ChieriMotion("笑顔01口眉", 0.7f, 2);
                    ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.3f, 2);//時間差表情戻し

                    //試しにボディIK(顔なるべく動かないように)
                    //DOTweenToLAIKSBody(LAIKEyeS, 0.2f, 2f);

                    //顔にペアレント化(自身のパーツにIKやると釣られて動いた分どんどん行ってしまう)
                    IKLHandTargetTrs.SetParent(HeadSphereTrs);
                    IKRHandTargetTrs.SetParent(HeadSphereTrs);
                    //右手と左手目の前（オキュラス手で調整を促す）
                    FollowDOMove(IKLHandTargetTrs, new Vector3(-1.06f, 0.59f, 1.67f), 0f);
                    FollowDOMove(IKRHandTargetTrs, new Vector3(-1.31f, 0.6f, 1.67f), 0f);
                    IKLHandTargetTrs.DOLocalRotate(new Vector3(244, 153, -165), 0f);
                    IKRHandTargetTrs.DOLocalRotate(new Vector3(135, -90, -84), 0f);

                    //DOTweenToIKEfPos(IKLHandEf, 1f, 2f);
                    //DOTweenToIKEfRot(IKLHandEf, 1f, 2f);
                    //DOTweenToIKEfPos(IKRHandEf, 1f, 2f);
                    //DOTweenToIKEfRot(IKRHandEf, 1f, 2f);


                    yield return new WaitForSeconds(1f); yield return KeyOrWait(4);


                    //手おろし
                    //DOTweenToIKEfPos(IKLHandEf, 0f, 2f);
                    //DOTweenToIKEfRot(IKLHandEf, 0f, 2f);
                    //DOTweenToIKEfPos(IKRHandEf, 0f, 2f);
                    //DOTweenToIKEfRot(IKRHandEf, 0f, 2f);

                    //ボディIKOFF
                    DOTweenToLAIKSBody(LAIKEyeS, 0f, 2f);

                    yield return new WaitForSeconds(1);
                    ////ペアレント戻し
                    IKLHandTargetTrs.SetParent(GirlIKTargetsTrs);
                    IKRHandTargetTrs.SetParent(GirlIKTargetsTrs);


                    SHukidashi("A0010a4");//大丈夫かな？
                    ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 4f, 2);//時間差表情戻し

                    yield return new WaitForSeconds(2);

                    Sentakushi("■A0010a4a", "大丈夫そう？");
                    Sentakushi("■A0010b");

                    goto ぼやけてるで戻る;

                    #endregion
                }
                break;

            case 1://選択肢b「バッチリ」「オッケー説明するね」
                {
                    sentakuListNum = 99;
                    NovelSetVis("A0010");
                    while (isNovelSetVisIng) { yield return null; }

                    Hukidashi("A0010b");//おっけー
                    ChieriMotion("笑顔01口眉", 0.1f, 2);
                    ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

                    yield return new WaitForSeconds(1f); yield return KeyOrWait(2);

                    Hukidashi("A0010b2");//じゃあ宿題
                    //ぐっぐっ
                    ChieriMotion("ぐっぐっ", 0.5f, 0);
                    ChieriMotion("笑顔01口眉", 0.1f, 2);
                    ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                    yield return new WaitForSeconds(1f); yield return KeyOrWait(2);
                }
                break;

            case 2://選択肢c「いらない」「え？？」
                {
                    sentakuListNum = 99;
                    #region//選択肢c「いらない」「え？？」
                    Hukidashi("A0010c");
                    ChieriMotion("f_え？？", 0.7f, 2);
                    //ChieriMotion("つまんなそう", 0.7f, 2);

                    AseTare();
                    yield return KeyOrWait(4);
                    yield return new WaitForSeconds(1);

                    //「でも使い方知らないと宿題できなくない？」
                    SHukidashi("A1010");
                    ChieriMotion("やっぱり・・・？", 0.7f, 2);
                    yield return new WaitForSeconds(2);

                    Sentakushi("■A1010a", "知らないと宿題できなくない？");//それもそうだわ
                    Sentakushi("■A1010b");//なんとなくわかるんだ
                    sentakuListNum = 99;
                    while (sentakuListNum == 99) { yield return null; }
                    yield return new WaitForSeconds(0.5f);
                    switch (sentakuListNum)
                    {
                        case 0:
                            //「でしょー？」
                            Hukidashi("A1010a");
                            ChieriMotion("あはは・・・", 0.1f, 2);
                            AseTare();
                            ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                            yield return KeyOrWait(4);
                            yield return new WaitForSeconds(1);
                            EventMove("チュートリアルそれじゃ説明するね");
                            yield break;

                        case 1:
                            //「そ、そうなんだ・・・」
                            Hukidashi("A1010b1");

                            無視した場合は1と同じ:


                            ChieriMotion("あはは・・・", 0.7f, 2);
                            AseTare();
                            ChieriMotionDelay(2, "f_・・・（悲）", 0.4f, 2);//時間差表情戻し
                            yield return new WaitForSeconds(4);

                            //「うーん、と・・」
                            Hukidashi("A1010b2");
                            FollowDOMove(IKLookAtEyeTargetTrs, HeadSphereTrs, new Vector3(-0.15f, -0.20f, -1.0f));
                            FollowDOMove(IKLookAtHeadTargetTrs, HeadSphereTrs, new Vector3(-0.15f, -0.20f, -1.0f));

                            yield return KeyOrWait(4);

                            //「あ、でもね、解いてるとゲージがなくなるの」
                            SHukidashi("A1020");
                            ChieriMotion("あはは・・・", 0.7f, 2);

                            //宿題指さし
                            ChieriMotion("座り指差し", 1, 0);
                            //DOTweenToIKEfPos(IKRHandEf, 1, 2);
                            //DOTweenToIKEfRot(IKRHandEf, 1, 2);
                            FollowDOMove(IKRHandTargetTrs, HomeworkTrs, new Vector3(-0.1f, 0.15f, 0.3f), 1.5f);
                            //宿題見
                            FollowDOMove(IKLookAtEyeTargetTrs, HomeworkTrs);
                            FollowDOMove(IKLookAtHeadTargetTrs, HomeworkTrs);

                            #region 旧指差し
                            ////IK位置と回転 事前指定（宿題指差し）
                            ////机に当たらないように一旦後ろ目に
                            //FollowDOMove(IKRHandTargetTrs, HomeworkTrs, new Vector3(-0.05f, 0.15f, 1.2f), 0f);
                            //IKRHandTargetTrs.DORotate(new Vector3(190, -110, 0), 0f);

                            //yield return null;
                            ////宿題見
                            //FollowDOMove(IKLookAtEyeTargetTrs, HomeworkTrs);
                            //FollowDOMove(IKLookAtHeadTargetTrs, HomeworkTrs);
                            ////宿題指さし
                            //DOTweenToIKEfPos(IKRHandEf, 1, 2);
                            //DOTweenToIKEfRot(IKRHandEf, 1, 2);
                            //FollowDOMove(IKRHandTargetTrs, HomeworkTrs, new Vector3(-0.1f, 0.15f, 0.3f), 1.5f);
                            ////指差し
                            //ChieriMotion("人差し指差し", 1, 5);
                            #endregion 旧指差し

                            yield return new WaitForSeconds(1);

                            Sentakushi("■A1020a", "あ、でもね、解いてると・・");//いいからいいから
                            Sentakushi("■A1020b");//ふむふむ？
                            sentakuListNum = 99;
                            while (sentakuListNum == 99) { yield return null; }
                            yield return new WaitForSeconds(0.5f);
                            switch (sentakuListNum)
                            {
                                case 0://いいからいいから
                                    無視した場合は0と同じ:

                                    ChieriMotion("f_・・・（悲）", 0.3f, 2);

                                    #region 旧 手戻す
                                    ////机に当たらないように後ろへ動かしながら
                                    //FollowDOMove(IKRHandTargetTrs, HomeworkTrs, new Vector3(-0.15f, 0, 0.7f), 1);
                                    //DOTweenToIKEfPos(IKRHandEf, 0, 2, Ease.InOutQuad);
                                    //DOTweenToIKEfRot(IKRHandEf, 0, 2, Ease.InOutQuad);
                                    ////指差しやめ
                                    //ChieriMotion("_noData", 1, 5);
                                    #endregion 旧 手戻す

                                    yield return new WaitForSeconds(1f);

                                    bunkiHwSkipBool01 = true;

                                    //IK消し
                                    DOTweenToLAIKSEyes(LAIKEyeS, 0, 1);
                                    DOTweenToLAIKSHead(LAIKHeadS, 0f, 1);
                                    DOTweenToIKEfPos(IKRHandEf, 0, 1.5f);
                                    DOTweenToIKEfRot(IKRHandEf, 0, 1.5f);

                                    //デバッグ移動の持ってきた
                                    sentakuListNum = 99;//選択肢ナンバーデフォルトへ
                                                        //フキダシ消し
                                    DelAll_Hukidashi();
                                    //選択肢消し
                                    DelAll_Sentakushi();
                                    //一時保持選択肢Listクリア
                                    sentakushiTempLogList.Clear();

                                    //「・・・」
                                    Hukidashi("A0023");


                                    EventMove("チュートリアルもう終わりかな");

                                    yield break;

                                case 1:
                                    //「時々休憩してね」 顔プレイヤーへ
                                    Hukidashi("A0095");
                                    //顔見
                                    FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                                    FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
                                    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                                    DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

                                    yield return KeyOrWait(8);

                                    #region 旧 手戻す
                                    ////机に当たらないように後ろへ動かしながら
                                    //FollowDOMove(IKRHandTargetTrs, HomeworkTrs, new Vector3(-0.15f, 0, 0.7f), 1);
                                    //DOTweenToIKEfPos(IKRHandEf, 0, 2, Ease.InOutQuad);
                                    //DOTweenToIKEfRot(IKRHandEf, 0, 2, Ease.InOutQuad);
                                    #endregion 手戻す

                                    ChieriMotion("_noData", 1, 5);
                                    EventMove("チュートリアルもう終わりかな");
                                    bunkiGaugeTutorialFlagBool = true;//ゲージ説明したかどうか
                                    yield break;

                                case -1:
                                    goto 無視した場合は0と同じ;
                            }
                            //なんとなくわかるんだEND
                            yield break;

                        case -1:
                            goto 無視した場合は1と同じ;
                    }
                    #endregion
                    break;
                }

            case -1://選択肢z 無言「みえない？」
                {
                    #region//選択肢z 無言「みえない？」
                    yield return new WaitForSeconds(0.1f);
                    Hukidashi("A0010z1");
                    ChieriMotion("ん？", 0.7f, 2);
                    //見続け開始■■■■
                    FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                    //手目の前でふりふり(予定)
                    yield return KeyOrWait(4);

                    //「調整してね」
                    Hukidashi("A0010z2");
                    ChieriMotion("笑顔01口眉", 0.1f, 2);
                    ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                    yield return KeyOrWait(2);

                    //最初の選択肢に戻る
                    sentakuListNum = 99;
                    goto 無言の場合戻る;
                    #endregion
                }
        }
        #endregion

        //イベント終了処理
        EventMove();

    }
    IEnumerator T0010()//チュートリアルそれじゃ説明するね
    {
        if (debugEventMoveFlag == true)
        {
            ChieriMotion("座り待機", 0f, 0);//デバッグ用アニメ直接再生

            //デバッグ時飛ばすため 予め命令入れておく
            //顔見
            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 0f);
            DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);

            //宿題システムスタート
            StartCoroutine(HomeworkSystem());
        }
        EventReset();
        isHwVisLock = true;//宿題できないように

        yield return new WaitForSeconds(0.1f);

        ////サブタイトル
        //SubTitleVis(true, serihuDict["S0010"]);


        //顔見
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 1f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 1f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        EventReset();
        yield return new WaitForSeconds(0.1f);

        #region//IK位置と回転指定（宿題指差し）「宿題見てみて」　分岐待機開始■■■■■■■

        HukidashiNovelDistanceChange(0.3f, 3);
        SHukidashi("A0020");//宿題見て

        //宿題見
        FollowDOMove(IKLookAtEyeTargetTrs, HomeworkTrs);
        FollowDOMove(IKLookAtHeadTargetTrs, HomeworkTrs);

        //宿題指さし
        ChieriMotion("座り指差し", 1, 0);
        FollowDOMove(IKRHandTargetTrs, HomeworkTrs, new Vector3(-0.1f, 0.15f, 0.3f), 1.5f);


        yield return null;

        #region 宿題見るループ（フキダシゲージ）
        //宿題見るまで 智恵理こちらをチラ見ループコルーチン
        Coroutine tmpHWSeeWaitPlayerLookCor =
            StartCoroutine(HWSeeWaitPlayerLook());

        //Sフキダシのスライダー取得
        Slider tmpSHukidashiSlider =
            hukidasis[0].transform.GetChild(0).Find("SentakuOnSlider").GetComponent<Slider>();

        isHwVisLock = false;//宿題できるように

        //宿題解いた数取得（増えたら抜けるように）
        float preHwAllEnmKillCountInt = HwAllEnmKillCountInt;

        //宿題解くまでループ
        while (isHWSeeWaitPlayerLook)
        {
            //if (playerSeeHomeWorkRayHit.collider == HomeworkCollder)
            //{ tmpSHukidashiSlider.value += 0.1f * Time.deltaTime; }
            //else { tmpSHukidashiSlider.value = 0; }

            //どれかひとつ問題を解いたら分岐待機解除 手戻し 顔宿題へ戻す 終了へ飛ぶ
            if (preHwAllEnmKillCountInt < HwAllEnmKillCountInt)
            {
                //智恵理プレイヤーチラ見終了と共に抜け
                isHWSeeWaitPlayerLook = false;
                StopCoroutine(tmpHWSeeWaitPlayerLookCor);
            }

            yield return null;
        }


        #endregion


        //宿題見
        FollowDOMove(IKLookAtEyeTargetTrs, HomeworkTrs);
        FollowDOMove(IKLookAtHeadTargetTrs, HomeworkTrs);

        // IKControl.IKRHandToggle.isOn = false;
        //手戻す
        //机に当たらないように後ろへ動かしながら
        FollowDOMove(IKRHandTargetTrs, HomeworkTrs, new Vector3(-0.15f, 0, 0.7f), 1);
        DOTweenToIKEfPos(IKRHandEf, 0, 2, Ease.InOutQuad);


        EventMove("チュートリアル問題解いた");
        #endregion//分岐待機終了■■■■■■■■■■■

    }
    #region ┗■宿題解くまでこちら見ループコルーチン
    bool isHWSeeWaitPlayerLook = false;
    IEnumerator HWSeeWaitPlayerLook()
    {
        isHWSeeWaitPlayerLook = true;
        yield return new WaitForSeconds(2f);
        //目だけプレイヤー見
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.1f);
        yield return new WaitForSeconds(0.5f);
        //目だけ宿題見
        FollowDOMove(IKLookAtEyeTargetTrs, HomeworkTrs, 0.1f);
        yield return new WaitForSeconds(2.5f);

        while (isHWSeeWaitPlayerLook)
        {
            //目だけプレイヤー見
            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.1f);
            yield return new WaitForSeconds(0.5f);

            //目だけ宿題見
            FollowDOMove(IKLookAtEyeTargetTrs, HomeworkTrs, 0.1f);
            yield return new WaitForSeconds(5f);


            //顔プレイヤー見
            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 1f);
            yield return new WaitForSeconds(0.2f);
            //目プレイヤー見
            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.1f);
            yield return new WaitForSeconds(2f);


            //顔宿題見
            FollowDOMove(IKLookAtHeadTargetTrs, HomeworkTrs, 1f);
            yield return new WaitForSeconds(0.2f);
            //目宿題見
            FollowDOMove(IKLookAtEyeTargetTrs, HomeworkTrs, 0.1f);

            yield return new WaitForSeconds(3f);

            //目だけプレイヤー見
            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.1f);
            yield return new WaitForSeconds(0.5f);

            //目だけ宿題見
            FollowDOMove(IKLookAtEyeTargetTrs, HomeworkTrs, 0.1f);
            yield return new WaitForSeconds(2f);



            //顔プレイヤー見
            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 1f);
            yield return new WaitForSeconds(0.2f);
            //目プレイヤー見
            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.1f);
            yield return new WaitForSeconds(1f);

            //「目線だけじゃなくて」
            DelAll_Hukidashi();
            SHukidashi("Aa0020");

            yield return new WaitForSeconds(2f);

            //顔宿題見
            FollowDOMove(IKLookAtHeadTargetTrs, HomeworkTrs, 1f);
            yield return new WaitForSeconds(0.2f);
            //目宿題見
            FollowDOMove(IKLookAtEyeTargetTrs, HomeworkTrs, 0.1f);

            yield return new WaitForSeconds(3f);
        }

    }
    #endregion
    IEnumerator T0030()//チュートリアル問題解いた
    {
        if (debugEventMoveFlag == true)
        {
            ChieriMotion("座り待機", 0f, 0);//デバッグ用アニメ直接再生

            //宿題システムスタート
            StartCoroutine(HomeworkSystem());
        }
        EventReset();

        isHwVisLock = true;//宿題できないように

        DelAll_Hukidashi();

        yield return new WaitForSeconds(0.5f);

        NovelSetVis("A0020");//「答えが勝手に出てきた」
        while (isNovelSetVisIng) { yield return null; }

        //顔見
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 0.5f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        //ぐっぐっ
        ChieriMotion("ぐっぐっ", 0.5f, 0);
        Hukidashi("A0060");//「すごいでしょ」
        yield return new WaitForSeconds(0.5f);
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(0.5f);


        yield return KeyOrWait(4f);


        NovelSetVis("A0030");//一体どういう仕組みで
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);
        HukidashiNovelDistanceChange(0.5f, 3);

        Hukidashi("A0065");//「みるだけで」
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        //右上見る
        LAIKEye.solver.clampWeightEyes = 0.88f;
        GameObject ChieriIKEyeMigiue_HeadLocalPosObj
            = Resources.Load("_PosObj/_ParentPoseObjs/ChieriIKEyeMigiue_HeadLocalPosObj") as GameObject;
        FollowDOMove(IKLookAtEyeTargetTrs, Bip001HeadTrs.TransformPoint(ChieriIKEyeMigiue_HeadLocalPosObj.transform.localPosition), 0f);

        //頭指あて と 口当てでねじれるのでツイストオフ
        isKataTwistAuto = false;

        #region 頭に指あての右手IKpos
        ChieriMotion("ひとさし指差し", 0.5f, 5);

        //IKTargetをペアレントしてゆらゆらに追従
        IKRHandTargetTrs.SetParent(Bip001HeadTrs);

        GameObject KaoyokoYubiAte01_IKRHand_PareBip001HeadPosObj
            = Resources.Load("_PosObj/_ParentPoseObjs/KaoyokoYubiAte01_IKRHand_PareBip001HeadPosObj") as GameObject;
        IKRHandTargetTrs.localPosition = KaoyokoYubiAte01_IKRHand_PareBip001HeadPosObj.transform.localPosition;
        IKRHandTargetTrs.localEulerAngles = KaoyokoYubiAte01_IKRHand_PareBip001HeadPosObj.transform.localEulerAngles;

        yield return null;

        //右手IKON
        DOTweenToIKEfPos(IKRHandEf, 1, 1);
        DOTweenToIKEfRot(IKRHandEf, 1, 1);

        #endregion


        Hukidashi("A0067");//「脳にアクセスして・・」
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //右手IKOFF
        DOTweenToIKEfPos(IKRHandEf, 0, 2);
        DOTweenToIKEfRot(IKRHandEf, 0, 2);

        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        //プレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);




        NovelSetVis("A0040");//脳にアクセス……
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);



        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        //右上見る
        LAIKEye.solver.clampWeightEyes = 0.88f;
        FollowDOMove(IKLookAtEyeTargetTrs, Bip001HeadTrs.TransformPoint(ChieriIKEyeMigiue_HeadLocalPosObj.transform.localPosition), 0f);

        //指 口横にあて
        GameObject KutiyokoYubiAte01_IKRHand_PareBip001HeadPosObj
            = Resources.Load("_PosObj/_ParentPoseObjs/KutiyokoYubiAte01_IKRHand_PareBip001HeadPosObj") as GameObject;
        IKRHandTargetTrs.DOLocalMove(KutiyokoYubiAte01_IKRHand_PareBip001HeadPosObj.transform.localPosition, 1f);
        IKRHandTargetTrs.DOLocalRotate(KutiyokoYubiAte01_IKRHand_PareBip001HeadPosObj.transform.localEulerAngles, 1f);

        //右手IKON
        DOTweenToIKEfPos(IKRHandEf, 1, 2);
        DOTweenToIKEfRot(IKRHandEf, 1, 2);

        Hukidashi("A0069");//だから実際頭も疲れる
        ChieriMotion("f_あ！ほら！口閉じ", 0.7f, 2);
        yield return new WaitForSeconds(1f); yield return KeyOrWait(1);

        #region //なんていうかその……　を一旦やめ
        ////「なんていうか・・」顔そらす
        //SHukidashi("A0070");
        //ChieriMotion("いいのかな・・・", 0.7f, 2);
        //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        //FollowDOMove(IKLookAtEyeTargetTrs, new Vector3(-1.5f, 0.5f, 1.6f), 2f);
        //FollowDOMove(IKLookAtHeadTargetTrs, new Vector3(-1.5f, 0.5f, 1.6f), 2f);
        //yield return new WaitForSeconds(3);
        #endregion




        NovelSetVis("A0070a010");//突っ込み堪えつつすごいよこれ

        while (novelCurrentPageInt < 3) { yield return null; }

        //プレイヤーに視線
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        ChieriMotion("f_あはは目開き", 0.1f, 2);
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
        LAIKEye.solver.clampWeightEyes = DB.defLAIKEyeClamp;//目IKClamp戻し

        while (novelCurrentPageInt < 4) { yield return null; }

        Hukidashi("A0070a010");//ね、すごいよね！
        //右手IKOFF
        DOTweenToIKEfPos(IKRHandEf, 0, 2);
        DOTweenToIKEfRot(IKRHandEf, 0, 2);

        //ツイストON
        isKataTwistAuto = true;

        ChieriMotion("_noData", 0.5f, 5);
        ChieriMotion("ぐっぐっ", 0.5f, 0);
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        while (novelCurrentPageInt < 12) { yield return null; }

        Hukidashi("A0070a020");//喜んでもらえてよかったー
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        while (isNovelSetVisIng) { yield return null; }

        IKRHandTargetTrs.SetParent(GirlIKTargetsTrs);


        yield return new WaitForSeconds(2);

        //終了処理
        EventMove();


    }
    IEnumerator T0050()//チュートリアル1ページ終えよう
    {
        if (debugEventMoveFlag == true)
        {
            ChieriMotion("座り待機", 0f, 0);//デバッグ用アニメ直接再生
            //宿題システムスタート
            StartCoroutine(HomeworkSystem());
            isHwVisLock = true;//宿題できないように
        }
        EventReset();

        isHwVisLock = true;//宿題できないように


        yield return new WaitForSeconds(0.1f);

        //分岐
        if (HwAllEnmKillCountInt <= 3 && HwNowStageInt == 1)
        { goto まだ1ページ目解き終わってなかったら; }

        else if (HwAllEnmKillCountInt >= 4 && HwNowStageInt == 1)
        { goto めくっていないが1ページ目全問解いていた場合; }

        else if (HwAllEnmKillCountInt >= 4 && HwNowStageInt >= 2)
        { goto すでに次ページ以降だった場合; }

        #region ■まだ1ページ目解き終わってなかったら
        まだ1ページ目解き終わってなかったら:
        //「全問やってみようか」
        Hukidashi("A0100");
        ChieriMotion("キリッ", 0.7f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 4f, 2);//時間差表情戻し

        //顔見
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        HukidashiNovelDistanceChange(0.3f, 3);

        //「私見てるから」宿題見る
        SHukidashi("A0110");
        FollowDOMove(IKLookAtEyeTargetTrs, HomeworkTrs);
        FollowDOMove(IKLookAtHeadTargetTrs, HomeworkTrs);

        //Sフキダシのスライダー取得
        Slider tmpSHukidashiSlider =
            hukidasis[0].transform.GetChild(0).Find("SentakuOnSlider").GetComponent<Slider>();

        tmpSHukidashiSlider.maxValue = 4;

        isHwVisLock = false;//宿題できるように


        //■1ページ解き終わるまで待機とゲージ
        //待機
        while (HwAllEnmKillCountInt < 1) { yield return null; }

        //残り3
        if (HwAllEnmKillCountInt == 1)
        { tmpSHukidashiSlider.DOValue(1, 1f); }

        //待機
        while (HwAllEnmKillCountInt < 2) { yield return null; }

        //残り2
        if (HwAllEnmKillCountInt == 2)
        { tmpSHukidashiSlider.DOValue(2, 1f); }

        //待機
        while (HwAllEnmKillCountInt < 3) { yield return null; }

        //残り1
        if (HwAllEnmKillCountInt == 3)
        { tmpSHukidashiSlider.DOValue(3, 1f); }

        isTutorial = true;//全問後バー色変更させないため
        while (HwAllEnmKillCountInt < 4) { yield return null; }

        tmpSHukidashiSlider.DOValue(4, 1f);
        isHwVisLock = true;//宿題止め

        yield return new WaitForSeconds(1f);

        DelAll_Hukidashi();

        //「大丈夫そうだね」ページめくり待機に飛ぶ
        Hukidashi("A0140");
        //bunkiTaikiFloat01 = 4;
        //bunkiTaikiBool01 = false;
        //bunkiTaikiBool02 = true;


        //顔見
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        goto ページめくり待機;

        #endregion

        #region//■めくっていないが1ページ目全問解いていた場合

        めくっていないが1ページ目全問解いていた場合:

        //宿題見る
        FollowDOMove(IKLookAtEyeTargetTrs, HomeworkTrs);
        FollowDOMove(IKLookAtHeadTargetTrs, HomeworkTrs);

        yield return new WaitForSeconds(0.5f);

        //■順当にここに来てたら
        if (bunkiHwSkipBool02 == false)
        {
            //「もう1ページ終ったんだね」ページめくり待機に飛ぶ
            Hukidashi("A0153");
            bunkiTaikiBool01 = false;
            bunkiTaikiBool02 = true;
            yield return KeyOrWait(3);
            goto ページめくり待機;
        }

        //■飛ばされて来たら
        else if (bunkiHwSkipBool02 == true)
        {
            //「あれっ、全部解いちゃった」ページめくり待機に飛ぶ
            Hukidashi("A0055");
            bunkiTaikiBool01 = false;
            bunkiTaikiBool02 = true;
            yield return KeyOrWait(3);
            goto ページめくり待機;
        }


        #endregion

        #region//■すでに次ページ以降だった場合

        すでに次ページ以降だった場合:

        //宿題見る
        FollowDOMove(IKLookAtEyeTargetTrs, HomeworkTrs);
        FollowDOMove(IKLookAtHeadTargetTrs, HomeworkTrs);
        yield return new WaitForSeconds(0.5f);

        //「ってもう次々進めてる」
        Hukidashi("A0156");
        bunkiTaikiBool01 = false;
        yield return KeyOrWait(3);
        EventMove("チュートリアルもう終わりかな");


        #endregion




        #region ■ページめくり待機
        ページめくり待機:
        //顔見
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        yield return new WaitForSeconds(1.5f);

        HukidashiNovelDistanceChange(0.3f);
        //「ページめくって」
        SHukidashi("A0150");

        //Sフキダシのスライダー取得
        Slider tmpSHukidashiSliderTwo =
            hukidasis[0].transform.GetChild(0).Find("SentakuOnSlider").GetComponent<Slider>();

        isHwVisLock = false;
        isTutorial = false;//チュートリアル終了

        //宿題バー色つけ
        HwNextStgBarTrs.GetComponent<Renderer>().material.color = Color.blue;//次ステージバー色変更
        SEPlay(UISEObj, "ui_notification_05");

        //ページめくった（次ステージに行った）ら
        while (HwNowStageInt <= 1) { yield return null; }
        isHwVisLock = true;//宿題止め

        //フキダシゲージ
        tmpSHukidashiSliderTwo.DOValue(tmpSHukidashiSliderTwo.maxValue, 1f);
        yield return new WaitForSeconds(1f);

        DelAll_Hukidashi();
        yield return new WaitForSeconds(1f);

        HukidashiNovelDistanceChange(0.5f, 3);

        Hukidashi("A0160");//「大体伝えたから」
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        Hukidashi("A0165");//「私も宿題おわらせるかな」
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        NovelSetVis("A0080");//「ありがとう」午後には遊べるかも
        while (novelCurrentPageInt < 1) { yield return null; }

        Hukidashi("A0180");//「えへへ」
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);


        while (isNovelSetVisIng) { yield return null; }

        EventMove("がんばろーね");
        #endregion

    }
    IEnumerator T0060()//チュートリアルもう終わりかな
    {
        if (debugEventMoveFlag == true)
        {
            ChieriMotion("座り待機", 0f, 0);//デバッグ用アニメ直接再生
            //宿題システムスタート
            StartCoroutine(HomeworkSystem());
            //宿題2ページ目へ
            HwPageForceMove(2);
        }

        int tempSwitchInt = 0;

        //だいたい通って来た場合
        if (bunkiHwSkipBool01 == false && bunkiHwSkipBool02 == false)
        { tempSwitchInt = 0; }
        //眼鏡外しの段階で飛ばして来た場合
        else if (bunkiHwSkipBool01 == true)
        { tempSwitchInt = 1; }
        //「その、なんていうか・・」の段階で飛ばして来た場合
        else if (bunkiHwSkipBool02 == true)
        { tempSwitchInt = 2; }


        switch (tempSwitchInt)
        {
            case 0://だいたい通って来た場合
                #region//だいたい通って来た場合
                //顔見
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
                DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

                //「じゃあそんな感じで」
                Hukidashi("A0170");
                ChieriMotion("笑顔01口眉", 0.1f, 2);
                ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                yield return KeyOrWait(3);
                #endregion
                break;

            case 1://眼鏡外しの段階で飛ばして来た場合
                #region//眼鏡外しの段階で飛ばして来た場合
                if (bunkiHwSkipBool01 == true)
                {
                    yield return new WaitForSeconds(3);

                    //残念そう目そらし動き（「脳が勉強してる」シーン流用）
                    //頭止めて目だけにして　顔のすぐ右上見る
                    DOTweenToLAIKSHead(LAIKHeadS, 0, 1);

                    FollowDOMove(IKLookAtEyeTargetTrs, HeadSphereTrs, new Vector3(-0.45f, 0, -3.0f));

                    yield return new WaitForSeconds(1);

                    //「けど・・・」
                    FollowDOMove(IKLookAtEyeTargetTrs, HeadSphereTrs, new Vector3(-0.15f, -0.20f, -1.0f));

                    yield return new WaitForSeconds(1);

                    //「うーん・・じゃあそんな感じで」
                    Hukidashi("A0175");
                    //ChieriMotion("つまんなそう", 0.7f, 2);

                    yield return new WaitForSeconds(1);

                    DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
                    FollowDOMove(IKLookAtEyeTargetTrs, HeadSphereTrs, new Vector3(-0.15f, -0.40f, -1.0f));
                    FollowDOMove(IKLookAtHeadTargetTrs, HeadSphereTrs, new Vector3(-0.15f, -0.40f, -1.0f));

                    yield return new WaitForSeconds(4);
                    FollowDOMove(IKLookAtEyeTargetTrs, HeadSphereTrs, new Vector3(-0.35f, -0.70f, -1.0f));
                    FollowDOMove(IKLookAtHeadTargetTrs, HeadSphereTrs, new Vector3(-0.35f, -0.70f, -1.0f));
                    yield return new WaitForSeconds(4);

                    //応急処置で分岐へ
                    DOTweenToLAIKSEyes(LAIKEyeS, 0, 0.2f);
                    DOTweenToLAIKSHead(LAIKHeadS, 0, 1);

                    EventMove("分岐C 宿題どうでもよくなっちゃった");
                    yield break;
                }
                #endregion

                break;

            case 2://「その、なんていうか・・」の段階で飛ばして来た場合
                #region//「その、なんていうか・・」の段階で飛ばして来た場合

                yield return new WaitForSeconds(2);

                //「まあいっか気にしないで」
                Hukidashi("A0070z");
                ChieriMotion("あはは・・・", 0.7f, 2);

                // IKControl.IKLookAtTargetLeapTarget.transform.position = PlayerTargetTrs.position;
                //顔見
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
                DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
                yield return KeyOrWait(3);

                //「じゃあそんな感じで」
                Hukidashi("A0170");
                ChieriMotion("笑顔01口眉", 0.1f, 2);
                ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                yield return KeyOrWait(3);


                #endregion

                break;
        }

        #region//ゲージ説明受けてない場合
        if (bunkiGaugeTutorialFlagBool == false)
        {
            //「あ、あと解いてるとゲージがなくなるの」
            Hukidashi("A0080a");
            //IK位置と回転 事前指定（宿題指差し）
            //机に当たらないように一旦後ろ目に
            FollowDOMove(IKRHandTargetTrs, HomeworkTrs, new Vector3(-0.05f, 0.15f, 1.2f), 0f);
            IKRHandTargetTrs.DORotate(new Vector3(190, -110, 0), 0f);

            yield return null;
            //宿題見
            FollowDOMove(IKLookAtEyeTargetTrs, HomeworkTrs);
            FollowDOMove(IKLookAtHeadTargetTrs, HomeworkTrs);
            //宿題指さし
            DOTweenToIKEfPos(IKRHandEf, 1, 2);
            DOTweenToIKEfRot(IKRHandEf, 1, 2);
            FollowDOMove(IKRHandTargetTrs, HomeworkTrs, new Vector3(-0.1f, 0.15f, 0.3f), 1.5f);
            //指差し
            ChieriMotion("人差し指差し", 1, 5);
            yield return KeyOrWait(4);

            //手戻す
            //机に当たらないように後ろへ動かしながら
            FollowDOMove(IKRHandTargetTrs, HomeworkTrs, new Vector3(-0.15f, 0, 0.7f), 1);
            DOTweenToIKEfPos(IKRHandEf, 0, 2, Ease.InOutQuad);
            DOTweenToIKEfRot(IKRHandEf, 0, 2, Ease.InOutQuad);
            //指差しやめ
            ChieriMotion("_noData", 1, 5);

            //「時々休憩してね」 顔プレイヤーへ
            Hukidashi("A0095");
            //顔見
            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
            DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

            yield return KeyOrWait(8);



        }
        #endregion

        yield return new WaitForSeconds(2);

        //終了処理
        bunkiHwSkipBool01 = bunkiHwSkipBool02 = bunkiGaugeTutorialFlagBool = false;
        EventMove();

        yield break;
    }
    IEnumerator T0070()//がんばろーね
    {
        if (debugEventMoveFlag == true)
        {
            ChieriMotion("座り待機", 0f, 0);//デバッグ用アニメ直接再生

            //ペン置く
            SharpenObj.transform.SetParent(RoomTrs);
            SharpenObj.transform.localPosition = Sharpen_table_Room_ParameterTrs.localPosition;
            SharpenObj.transform.localEulerAngles = Sharpen_table_Room_ParameterTrs.localEulerAngles;
            //消しゴム置く
            KeshigomuObj.transform.SetParent(RoomTrs);
            KeshigomuObj.transform.localPosition = Keshigomu_table_Room_ParameterTrs.localPosition;
            KeshigomuObj.transform.localEulerAngles = Keshigomu_table_Room_ParameterTrs.localEulerAngles;

            //宿題システムスタート
            StartCoroutine(HomeworkSystem());
            //宿題2ページ目へ
            HwPageForceMove(2);

        }
        EventReset();
        isHwVisLock = true;

        yield return new WaitForSeconds(0.1f);

        //見続け開始■
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        DOTweenToLAIKSHead(LAIKHeadS, 0.4f, 1);


        Hukidashi("A0200");//「よーしそれじゃあ・・」
        ChieriMotion("キリッ", 0.1f, 2);
        yield return new WaitForSeconds(1f); yield return KeyOrWait(2);

        //おー！　の動き開始
        ChieriMotion("おー", 1f, 0);
        yield return new WaitForSeconds(0.5f);
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        yield return new WaitForSeconds(0.5f);

        //「がんばろーね！」
        Hukidashi("A0210");
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        StartCoroutine(GirlAnimReadSystem());

        while (nowGirlAnimClipName != "おー") { yield return null; }
        while (girlAnimNomTime <= 0.72f) { yield return null; }


        //宿題見る
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, Drill_chieriTrs, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, Drill_chieriTrs, 2);
        ChieriMotionDelay(2, "_noData", 0.1f, 2);//時間差表情戻し


        while (nowGirlAnimClipName != "syukudaiStart") { yield return null; }
        //while (girlAnimNomTime <= 0.1f) { yield return null; }
        isGirlAnimReadSystem = false;

        //ペン持つ
        SharpenObj.transform.SetParent(GirlRhitosashi02Trs, false);
        SharpenObj.transform.localPosition = Sharpen_syukudai_GirlRhitosashi02_ParameterTrs.localPosition;
        SharpenObj.transform.localEulerAngles = Sharpen_syukudai_GirlRhitosashi02_ParameterTrs.localEulerAngles;


        yield return KeyOrWait(2);


        //終了処理
        //bunkiHwSkipBool01 = bunkiHwSkipBool02 = false;
        EventMove("宿題開始");

    }

    #region //リニューアル前
    //IEnumerator C0010()//分岐C 宿題どうでもよくなっちゃった
    //{
    //    if (debugEventMoveFlag == true)
    //    { }
    //    EventReset();
    //    yield return null;

    //    //「はー」
    //    Hukidashi("C0010");
    //    ChieriMotion("後ろ手に倒れて待機", 1f, 0);
    //    ChieriMotion("f_はー・・", 0.7f, 2);
    //    yield return new WaitForSeconds(4);

    //    //「どうでもよくなっちゃった」
    //    ChieriMotion("f_なんだかどうでもよくなっちゃった", 0.7f, 2);
    //    Hukidashi("C0020");
    //    yield return new WaitForSeconds(2);

    //    //プレイヤーちらっと見る
    //    FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
    //    FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
    //    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
    //    yield return new WaitForSeconds(1);
    //    DOTweenToLAIKSHead(LAIKHeadS, 0.7f, 1);
    //    yield return new WaitForSeconds(1);
    //    DOTweenToLAIKSEyes(LAIKEyeS, 0, 1);
    //    DOTweenToLAIKSHead(LAIKHeadS, 0.3f, 2);
    //    yield return new WaitForSeconds(4);

    //    //「ね、」起きながら
    //    ChieriMotion("後ろ手倒れてループから起きる", 0f, 0);
    //    yield return new WaitForSeconds(1);
    //    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0.5f);//見る
    //    Hukidashi("C0030");
    //    ChieriMotion("キリッ", 0.7f, 2);

    //    //「宿題なんてやめちゃおうよ」
    //    yield return KeyOrWait(2);
    //    SHukidashi("C0040");
    //    //プレイヤー見る
    //    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
    //    DOTweenToLAIKSHead(LAIKHeadS, 0f, 1);

    //    yield return new WaitForSeconds(2);

    //    //選択肢「え？」「何言ってんの！」
    //    Sentakushi("■C0040a", "宿題なんてやめちゃおうよ");
    //    Sentakushi("■C0040b");

    //    //選択肢選ばれるまでループ
    //    while (sentakuListNum == 99)
    //    { yield return null; }

    //    //
    //    switch (sentakuListNum)
    //    {
    //        case 0://選択肢a
    //            {
    //                yield return new WaitForSeconds(0.5f);
    //                //「実はさ」
    //                Hukidashi("C0040a");

    //                yield return new WaitForSeconds(0.5f);
    //            }
    //            break;

    //        case 1://選択肢b
    //            {
    //                yield return new WaitForSeconds(0.5f);
    //                //「ちぇー」
    //                Hukidashi("C0040b1");
    //                ChieriMotion("f_ちぇー", 0.7f, 2);
    //                //少し右上見る感じ
    //                DOTweenToLAIKSHead(LAIKHeadS, 0.6f, 1);
    //                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, new Vector3(0.2f, 0.2f, 0), 2f);
    //                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0.2f, 0.2f, 0), 2f);
    //                yield return KeyOrWait(4);

    //                //「じゃーがんばってね」
    //                Hukidashi("C0040b2");
    //                DOTweenToLAIKSEyes(LAIKEyeS, 0, 1);
    //                DOTweenToLAIKSHead(LAIKHeadS, 0, 2);
    //                ChieriMotion("f_じゃーがんばってね", 0.5f, 2);
    //                yield return new WaitForSeconds(2);
    //                ChieriMotion("f_ちぇー", 0.3f, 2);
    //                yield return KeyOrWait(3);

    //                //「私もさっと終わらせようかな」
    //                Hukidashi("C0040b3");
    //                ChieriMotion("シャーペン取って宿題待機へ", 1f, 0);
    //                ChieriMotion("_noData", 3f, 2);
    //                yield return new WaitForSeconds(1);

    //                //シャーペン取り
    //                SharpenObj.transform.SetParent(GirlRhitosashi02Trs);
    //                yield return null;
    //                SharpenObj.transform.localPosition = Sharpen_syukudai_GirlRhitosashi02_ParameterTrs.localPosition;
    //                SharpenObj.transform.localEulerAngles = Sharpen_syukudai_GirlRhitosashi02_ParameterTrs.localEulerAngles;
    //                yield return new WaitForSeconds(1);
    //                ChieriMotion("08指トントン", 1f, 0);

    //                #region//フェードアウトで場面転換感
    //                FadeBlack(1, 2);
    //                DOTween.To(() => speaker.audioSource.volume, (x) => speaker.audioSource.volume = x, 0.0f, 4);
    //                DOTween.To(() => aircon.audioSource.volume, (x) => aircon.audioSource.volume = x, 0f, 4);
    //                yield return new WaitForSeconds(6);
    //                speaker.audioSource.clip = Instantiate(ResourceFiles.BGM["hinoataru"]);
    //                speaker.audioSource.Play();

    //                nowPlayerLocalScale = new Vector3(0.9f, 0.9f, 0.9f);

    //                FadeBlack(0, 3);
    //                DOTween.To(() => speaker.audioSource.volume, (x) => speaker.audioSource.volume = x, 0.5f, 3);
    //                DOTween.To(() => aircon.audioSource.volume, (x) => aircon.audioSource.volume = x, 1f, 3);
    //                yield return new WaitForSeconds(4);

    //                #endregion

    //                EventMove("宿題開始");
    //            }
    //            break;

    //        case -1://選択肢z 無言
    //            {
    //                yield return new WaitForSeconds(0.5f);
    //                //「ふーん・・」
    //                Hukidashi("C0040z");

    //                yield return new WaitForSeconds(0.5f);
    //            }
    //            break;
    //    }

    //    EventMove();
    //}
    //IEnumerator C0020()//C はやる気持ち
    //{
    //    if (debugEventMoveFlag == true)
    //    {
    //        ChieriMotion("C座りスマホ取り出し", 0f, 0);
    //        nowPlayerLocalScale = new Vector3(1f, 1f, 1f);
    //    }
    //    EventReset();
    //    yield return null;
    //    ChieriMotion("C座りスマホ取り出し", 1f, 0);

    //    ////サブタイトルで操作表示
    //    //SubTitleVis(true, "F = テストモーション再生" + "\n" + "V = IKでプレイヤー見るONOFF", 1f);

    //    //スマホ見
    //    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1f);
    //    DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 2f);
    //    FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform);
    //    FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform);
    //    yield return new WaitForSeconds(1.8f);
    //    //スマホON
    //    ChieriSumahoObj.SetActive(true);


    //    yield return new WaitForSeconds(3.2f);

    //    SubTitleVis(false, 2f);

    //    //「こうするとー」
    //    Hukidashi("C0050");
    //    ChieriMotion("f_こうするとー・・", 0.5f, 2);
    //    yield return new WaitForSeconds(2);
    //    ChieriMotion("座りスマホ眺めループ", 1f, 0);
    //    FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.2f);
    //    FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1.5f);

    //    yield return new WaitForSeconds(2);

    //    Destroy(subTitleText00Obj);

    //    //縮小
    //    FadeBlack(0.5f, 1f, false, Ease.InOutElastic, false);
    //    DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x,
    //        new Vector3(0.3f, 0.3f, 0.3f), 5f).SetEase(Ease.InBounce);
    //    SEPlay("magic-attack-darkness1", 0.3f);

    //    yield return new WaitForSeconds(1);

    //    //「あっほら」
    //    Hukidashi("C0060");
    //    ChieriMotion("f_あ！ほら！口あき", 0.2f, 2);
    //    FadeBlack(0f, 2f, false, Ease.OutQuad, false);
    //    yield return new WaitForSeconds(1f);
    //    SEPlay("magic-gravity2", 0.3f);
    //    //SEPlay("重力アタック", 0.3f);

    //    ChieriMotion("座りスマホしまい→身乗り出し→ループ", 1f, 0);
    //    yield return new WaitForSeconds(1f);
    //    //スマホOFF
    //    ChieriSumahoObj.SetActive(false);

    //    ChieriMotion("f_あ！ほら！口閉じ", 0.5f, 2);
    //    yield return new WaitForSeconds(1);
    //    ChieriMotion("f_あ！ほら！口あき", 0.5f, 2);
    //    yield return new WaitForSeconds(2);
    //    ChieriMotion("f_あ！ほら！口閉じ", 0.5f, 2);
    //    yield return new WaitForSeconds(1);

    //    //「すごいほんとに縮んじゃった」
    //    Hukidashi("C0070");
    //    yield return new WaitForSeconds(2.5f);
    //    ChieriMotion("f_あ！ほら！口あき", 0.5f, 2);
    //    yield return new WaitForSeconds(1f);
    //    ChieriMotion("f_あ！ほら！口閉じ", 0.5f, 2);
    //    yield return new WaitForSeconds(1f);

    //    EventMove();

    //    #region//応急処置で作ったその場で再縮小して終わるタイプ
    //    ////「じゃあ」
    //    //Hukidashi("C0080");
    //    //ChieriMotion("身乗り出し逆→スマホ取り出し→ループ", 1f, 0);
    //    //yield return new WaitForSeconds(2f);
    //    ////スマホON
    //    //Sumaho_chieriTrs.gameObject.SetActive(true);
    //    //yield return new WaitForSeconds(2f);


    //    //FadeBlack(0.5f, 1f, false, Ease.OutQuad, false);


    //    //DOTween.To(() => nowPlayerLocalScl, (x) => nowPlayerLocalScl = x,
    //    //    new Vector3(0.1f, 0.1f, 0.1f), 5f).SetEase(Ease.InBounce);
    //    //yield return new WaitForSeconds(1);
    //    //Hukidashi("C0090");

    //    //EventMove("ToBeContinued");
    //    //yield return new WaitForSeconds(Mathf.Infinity);

    //    //EventMove();
    //    #endregion

    //}
    //IEnumerator C0030()//C 近づき再縮小
    //{
    //    if (debugEventMoveFlag == true)
    //    {
    //        ChieriMotion("身乗り出し逆→四つん這い近づき→立ち", 0f, 0);
    //        nowPlayerLocalScale = new Vector3(0.3f, 0.3f, 0.3f);
    //    }
    //    EventReset();
    //    yield return null;
    //    //プレイヤー見る
    //    FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
    //    FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
    //    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
    //    DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);



    //    //「え、うそうそ」近づき
    //    Hukidashi("C0085");
    //    yield return new WaitForSeconds(0.3f);
    //    ChieriMotion("四つん這い近づき→立ち", 1f, 0);
    //    ChieriMotion("f_あ！ほら！口あき", 0.5f, 2);
    //    yield return new WaitForSeconds(1.5f);

    //    //アニメスピード変更
    //    girlAnim.speed = 2f;
    //    yield return new WaitForSeconds(3.5f);

    //    //「冗談だと」
    //    Hukidashi("C0087");
    //    ChieriMotion("f_あ！ほら！口閉じ", 0.5f, 2);

    //    //アニメスピード戻し
    //    girlAnim.speed = 1f;
    //    yield return new WaitForSeconds(6f);

    //    //「待って待って、じゃあ」
    //    Hukidashi("C0089");
    //    FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform);
    //    FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform);
    //    yield return new WaitForSeconds(2f);

    //    //スマホオン
    //    ChieriSumahoObj.SetActive(true);

    //    yield return new WaitForSeconds(2f);
    //    ChieriMotion("C 立ちスマホ操作触らずループ", 0.5f, 0);
    //    FollowDOMove(IKLookAtEyeTargetTrs, PlayerTargetTrs);
    //    FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs);

    //    //縮小開始
    //    FadeBlack(0.5f, 1f, false, Ease.InOutElastic, false);
    //    DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x,
    //        new Vector3(0.03f, 0.03f, 0.03f), 10f).SetEase(Ease.InOutQuad);
    //    SEPlay("magic-attack-darkness1", 0.3f);
    //    //SEPlay("重力アタック", 0.3f);

    //    yield return new WaitForSeconds(2);
    //    SEPlay("magic-gravity2", 0.3f);

    //    ChieriMotion("f_あ！ほら！口あき", 0.5f, 2);
    //    yield return new WaitForSeconds(1);

    //    ChieriMotion("f_あ！ほら！口閉じ", 0.5f, 2);
    //    //「やった！　まだまだ」
    //    Hukidashi("C0090");
    //    yield return new WaitForSeconds(1);
    //    SEPlay("magic-attack-darkness1", 0.3f);
    //    //SEPlay("重力アタック", 0.3f);

    //    ChieriMotion("C 立ちスマホ操作開始", 0.5f, 0);

    //    FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform);

    //    FadeBlack(0f, 2f, false, Ease.OutQuad, false);
    //    yield return new WaitForSeconds(1);
    //    SEPlay("magic-gravity2", 0.3f);

    //    FollowDOMove(IKLookAtEyeTargetTrs, PlayerTargetTrs);

    //    FadeBlack(1f, 3f, false, Ease.OutQuad, false);
    //    yield return new WaitForSeconds(6);
    //    EventMove();


    //}
    //IEnumerator C0040()//C こんなにちっちゃくなっちゃいました
    //{
    //    if (debugEventMoveFlag == true)
    //    {
    //        FadeBlack(1, 0);
    //    }
    //    EventReset();
    //    yield return null;

    //    //暗幕中設定

    //    //アニメスピード
    //    girlAnim.speed = 0.3f;

    //    //スマホオフ
    //    ChieriSumahoObj.SetActive(false);

    //    ////カーペットファー表示
    //    //Carpet02Trs.gameObject.SetActive(true);

    //    ChieriMotion("C 立ちループ", 0f, 0);

    //    nowPlayerLocalScale = new Vector3(0.03f, 0.03f, 0.03f);
    //    CameraObjectsTrs.localPosition = new Vector3(-0.9f, 0, 0.75f);
    //    //プレイヤー見る
    //    FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
    //    FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
    //    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
    //    DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);


    //    FadeBlack(0f, 5f, false, Ease.OutQuad, false);
    //    yield return new WaitForSeconds(3);

    //    //「ほーらこんなにちっちゃく」
    //    Hukidashi("C0100");
    //    ChieriMotion("笑顔01口眉", 0.1f, 2);
    //    ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.01f, 2);//時間差表情戻し
    //    ChieriMotion("C 片膝立ち開始", 0f, 0);

    //    yield return new WaitForSeconds(0);
    //    SEPlay("magic-quake1", 0.3f);


    //    yield return KeyOrWait(5);

    //    //「あはは、信じられないって顔」
    //    Hukidashi("C0110");
    //    yield return KeyOrWait(5);
    //    yield return new WaitForSeconds(0.1f);
    //    //「ほんとは宿題」
    //    Hukidashi("C0120");
    //    yield return KeyOrWait(5);
    //    yield return new WaitForSeconds(0.1f);

    //    //「はやく縮めたく」
    //    Hukidashi("C0130");
    //    ChieriMotion("笑顔01口眉", 0.1f, 2);
    //    ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
    //    yield return KeyOrWait(5);
    //    yield return new WaitForSeconds(0.1f);

    //    ////事前スカートボーン回転用取得
    //    //Transform sk10_base = GameObject.Find("sk10_base").transform;
    //    //Vector3 MJ_scriptTimingSkReadAngle = GameObject.Find("MJ_scriptTimingSkReadAngle")
    //    //    .GetComponent<SkirtAngleEvent>().sk_ReadLocalEulArray[10];

    //    //「だってさ」
    //    Hukidashi("C0140");
    //    ChieriMotion("f_余裕感笑顔", 0.7f, 2);
    //    SEPlay("swing41_12低い_長い");

    //    //右足おろし
    //    IKRFootTargetTrs.localPosition = new Vector3(-0.515f, 0.023f, 0.898f);
    //    IKRFootTargetTrs.localEulerAngles = new Vector3(0, 0, 233.824f);
    //    DOTweenToIKEfPos(IKRFootEf, 1, 2 / girlAnim.speed);
    //    DOTweenToIKEfRot(IKRFootEf, 1, 2 / girlAnim.speed);

    //    //右手あげ
    //    DOTweenToIKEfPos(IKRHandEf, 1, 1 / girlAnim.speed);
    //    IKRHandTargetTrs.localPosition = new Vector3(-0.9f, 0.24f, 0.888f);

    //    ////スカートボーン回転
    //    //DOTween.To(() => sk10_base.transform.localEulerAngles, (x) => sk10_base.transform.localEulerAngles = x,
    //    //    MJ_scriptTimingSkReadAngle, 2f);

    //    yield return KeyOrWait(5);
    //    yield return new WaitForSeconds(0.1f);

    //    //「・・こんなこと」
    //    Hukidashi("C0150");
    //    yield return new WaitForSeconds(0.5f);
    //    SEPlay("2000倍_ステーキ肉刺す等");//指定した場所から音出せるようにしたい

    //    //右手で主人公を掴もうと伸ばすIK
    //    GameObject IKRHand_SyagamiTenobasiPosObj
    //        = Resources.Load("_PosObj/C01_HayaruKimochi/IKRHand_SyagamiTenobasiPosObj") as GameObject;

    //    DOTweenToIKEfPos(IKRHandEf, 1, 2);
    //    FollowDOMove(IKRHandTargetTrs, IKRHand_SyagamiTenobasiPosObj.transform.localPosition, 2f);
    //    yield return new WaitForSeconds(0.5f);

    //    //暗転
    //    FadeBlack(1, 1.3f, false, Ease.OutQuad, false);

    //    //音量ダウン
    //    DOTween.To(() => speaker.audioSource.volume, (x) => speaker.audioSource.volume = x, 0.0f, 2);
    //    DOTween.To(() => aircon.audioSource.volume, (x) => aircon.audioSource.volume = x, 0f, 2);
    //    yield return new WaitForSeconds(2f);

    //    //IK切り
    //    DOTweenToIKEfPos(IKRHandEf, 0, 0);
    //    DOTweenToIKEfPos(IKRFootEf, 0, 0);
    //    DOTweenToIKEfRot(IKRFootEf, 0, 0);

    //    speaker.audioSource.Stop();
    //    yield return new WaitForSeconds(1f);
    //    DelAll_Hukidashi();

    //    yield return new WaitForSeconds(3f);




    //    killAll_FainalIK();
    //    DOTween.Clear();
    //    EventMove();


    //}
    //IEnumerator C0050()//C 手乗せ
    //{
    //    if (debugEventMoveFlag == true)
    //    {
    //        FadeBlack(1, 0);

    //        nowPlayerLocalScale = new Vector3(0.03f, 0.03f, 0.03f);

    //    }
    //    EventReset();

    //    #region 暗幕中設定
    //    //アニメスピード
    //    girlAnim.speed = 0.5f;

    //    ////hukipoint判定範囲
    //    //hukiPointMoveFaceWeightUpFloat = 5f;
    //    //hukiPointMoveFaceWeightDownFloat = 1f;

    //    //宿題ロック
    //    isHwVisLock = true;

    //    //エアコン音
    //    DOTween.To(() => aircon.audioSource.volume, (x) => aircon.audioSource.volume = x, 5f, 5);

    //    //消しゴムペアレント
    //    KeshigomuObj.transform.SetParent(GirlLhitosashi02Trs);
    //    KeshigomuObj.transform.localPosition = Keshigomu_syukudai_GirlRhitosashi02_ParameterTrs.localPosition;
    //    KeshigomuObj.transform.localEulerAngles = Keshigomu_syukudai_GirlRhitosashi02_ParameterTrs.localEulerAngles;
    //    KeshigomuObj.SetActive(false);


    //    ChieriMotion("手乗せ初期座り状態ループ", 0f, 0);

    //    //プレイヤーを智恵理右手にペアレント
    //    CameraObjectsTrs.SetParent(GirlRHandTrs);

    //    //手乗り初期位置
    //    GameObject Player_RhandPare_00_TenoseStartPosObj = Resources.Load("_PosObj/C01_HayaruKimochi/Tenose/Player_RhandPare_00_TenoseStartPosObj") as GameObject;
    //    CameraObjectsTrs.localPosition = Player_RhandPare_00_TenoseStartPosObj.transform.localPosition;
    //    CameraObjectsTrs.localEulerAngles = Vector3.zero;

    //    //プレイヤー見る　
    //    FollowDOMove(IKLookAtEyeTargetTrs, PlayerTargetTrs);
    //    FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0, -0.15f, 0));
    //    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
    //    DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
    //    #endregion




    //    //エアコン音先に出すため待ち
    //    yield return new WaitForSeconds(2f);


    //    //■■■■■■■開幕
    //    FadeBlack(0f, 10f, false, Ease.OutQuad, false);
    //    yield return new WaitForSeconds(3);

    //    //「あ、気が付いた？」
    //    Hukidashi("C0155");

    //    //顔をみるまで待機
    //    while (playerSeeHeadRayHit.collider != hitCircleHeadCollider) { yield return null; }
    //    yield return new WaitForSeconds(2);

    //    //「びっくりした？」
    //    SHukidashi("C0160");
    //    ChieriMotion("笑顔01口眉", 0.1f, 2);
    //    yield return new WaitForSeconds(2);
    //    ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);

    //    //選択肢「ここは・・」「戻せ戻せ」
    //    yield return new WaitForSeconds(1);
    //    Sentakushi("■C0160a");
    //    Sentakushi("■C0160b");
    //    while (sentakuListNum == 99) { yield return null; }
    //    yield return new WaitForSeconds(0.5f);


    //    switch (sentakuListNum)
    //    {
    //        case 0:

    //            #region //「そう手の上だよ」
    //            Hukidashi("C0160a1");
    //            yield return KeyOrWait(3);

    //            //「やってみたかった」
    //            Hukidashi("C0160a2");
    //            ChieriMotion("笑顔01口眉", 0.3f, 2, 0);
    //            ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.2f, 2);//時間差表情戻し

    //            yield return KeyOrWait(5);


    //            //「メルヘンな感じで」
    //            Hukidashi("C0160a3");
    //            FollowDOMove(2f, IKLookAtEyeTargetTrs, VRCameraTrs, new Vector3(0, 1, 0), 3f);
    //            FollowDOMove(3f, IKLookAtEyeTargetTrs, VRCameraTrs, 0.2f);
    //            FollowDOMove(IKLookAtHeadTargetTrs, VRCameraTrs, new Vector3(0.15f, -0.1f, 0), 2f);
    //            yield return KeyOrWait(2);

    //            //「ちっちゃい頃」
    //            SHukidashi("C0160a4");
    //            FollowDOMove(IKLookAtEyeTargetTrs, VRCameraTrs);
    //            FollowDOMove(IKLookAtHeadTargetTrs, VRCameraTrs, new Vector3(0.05f, -0.15f, 0), 0.5f);
    //            yield return new WaitForSeconds(3);

    //            #region////選択肢「僕は男の子」「お、俺は人形じゃない！」
    //            Sentakushi("■C0160a4a", Mathf.Infinity);
    //            Sentakushi("■C0160a4b", Mathf.Infinity);
    //            sentakuListNum = 99;//初期化
    //                                //選択肢選ばれるまでループ
    //            while (sentakuListNum == 99) { yield return null; }
    //            yield return null;
    //            switch (sentakuListNum)
    //            {
    //                case 0://選択肢a
    //                    yield return new WaitForSeconds(0.5f);
    //                    //「そ、そっか、男の子」
    //                    Hukidashi("C0160a4a1");
    //                    ChieriMotion("あはは・・・", 0.3f, 2, 0);
    //                    yield return KeyOrWait(3);

    //                    //「じゃあヒーローと怪獣」
    //                    SHukidashi("C0160a4a2");
    //                    ChieriMotion("笑顔01口眉_目閉じない", 0.3f, 2, 0);

    //                    yield return new WaitForSeconds(2);
    //                    Sentakushi("■C0160a4a2a", Mathf.Infinity);//うんうん
    //                    sentakuListNum = 99;//初期化
    //                                        //選択肢選ばれるまでループ
    //                    while (sentakuListNum == 99) { yield return null; }
    //                    yield return null;
    //                    switch (sentakuListNum)
    //                    {
    //                        case 0://選択肢a
    //                            yield return new WaitForSeconds(1f);
    //                            //「それで、自分が一番大きいって」
    //                            SHukidashi("C0160a4a2a1");
    //                            ChieriMotion("キリッ", 0.3f, 2, 0);
    //                            FollowDOMove(IKLookAtHeadTargetTrs, VRCameraTrs, new Vector3(0f, -0.15f, 0), 0.5f);

    //                            yield return new WaitForSeconds(2);
    //                            //■切り選択候補 ひとつでよさそう

    //                            Sentakushi("■C0160a4a2a1a", Mathf.Infinity);//うんう・・え？
    //                            Sentakushi("■C0160a4a2a1b", Mathf.Infinity);//あ～・・え？
    //                            sentakuListNum = 99;//初期化
    //                                                //選択肢選ばれるまでループ
    //                            while (sentakuListNum == 99) { yield return null; }
    //                            yield return null;
    //                            sentakuListNum = 99;

    //                            yield return new WaitForSeconds(1f);
    //                            ChieriMotion("f_あ！ほら！口閉じ", 0.3f, 2, 0);
    //                            yield return new WaitForSeconds(0.5f);

    //                            //「あ、いや、えーと・・まあいっか！」
    //                            Hukidashi("C0160a4a2a1ab1");
    //                            FollowDOMove(2f, IKLookAtEyeTargetTrs, VRCameraTrs, new Vector3(-1, 1, 0), 3f);
    //                            FollowDOMove(IKLookAtHeadTargetTrs, VRCameraTrs, new Vector3(-0.1f, -0.2f, 0), 0.5f);
    //                            yield return new WaitForSeconds(2);
    //                            ChieriMotion("f_あ！ほら！口閉じ", 0.3f, 2, 0);

    //                            //「降ろしてあげるね」
    //                            Hukidashi("C0160a4a2a1ab2");
    //                            FollowDOMove(0f, IKLookAtEyeTargetTrs, VRCameraTrs, 0.2f);
    //                            ChieriMotion("あはは・・・", 0.3f, 2, 0);
    //                            ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.2f, 2);//時間差表情戻し
    //                            FollowDOMove(IKLookAtEyeTargetTrs, VRCameraTrs);
    //                            FollowDOMove(IKLookAtHeadTargetTrs, VRCameraTrs, new Vector3(0, -0.15f, 0), 0.5f);
    //                            yield return KeyOrWait(5);

    //                            yield return new WaitForSeconds(1);
    //                            FollowDOMove(IKLookAtEyeTargetTrs, VRCameraTrs, new Vector3(1, 1, 0), 1f);
    //                            FollowDOMove(IKLookAtHeadTargetTrs, VRCameraTrs, new Vector3(0.25f, -0.1f, 0), 2f);

    //                            yield return new WaitForSeconds(2);
    //                            Hukidashi("C0160a4a2a1ab3");
    //                            ChieriMotion("f_私だけなのかな・・？", 0.5f, 2, 0);

    //                            yield return new WaitForSeconds(3);
    //                            #endregion
    //                            break;
    //                    }
    //                    break;

    //                case 1://選択肢b

    //                    yield return new WaitForSeconds(0.8f);
    //                    //「そんな恐がらないでよ～」
    //                    Hukidashi("C0160a4b1");
    //                    ChieriMotion("あはは・・・", 0.3f, 2, 0);
    //                    AseTare();
    //                    yield return KeyOrWait(3);
    //                    FollowDOMove(IKLookAtHeadTargetTrs, VRCameraTrs, new Vector3(0.05f, -0.15f, 0), 2f);
    //                    yield return new WaitForSeconds(0.5f);

    //                    //「いまおろしてあげるからね」
    //                    Hukidashi("C0160a4b2");
    //                    ChieriMotion("f_笑顔01口眉下がり_目閉じない", 0.3f, 2, 0);
    //                    yield return KeyOrWait(3);



    //                    break;

    //                case -1://選択肢z 無言
    //                    break;
    //            }
    //            #endregion

    //            break;
    //        case 1:

    //            #region//「あーそういう言い方」
    //            Hukidashi("C0160b1");
    //            ChieriMotion("_noData", 0.4f, 2);
    //            ChieriMotionDelay(2, "キリッ", 0.4f, 2);//時間差表情戻し
    //            yield return KeyOrWait(3);

    //            //「今君って」
    //            Hukidashi("C0160b2");
    //            girlAnim.CrossFade("ub_手乗せつつき", 2f, 1);
    //            yield return new WaitForSeconds(2);

    //            //つつかれる位置へカメラ移動
    //            GameObject Player_RhandPare_01_TsutsukarePosObj = Resources.Load("_PosObj/C01_HayaruKimochi/Tenose/Player_RhandPare_01_TsutsukarePosObj") as GameObject;

    //            DOTween.To(() => CameraObjectsTrs.transform.localPosition, (x) => CameraObjectsTrs.transform.localPosition = x,
    //               Player_RhandPare_01_TsutsukarePosObj.transform.localPosition, 0.7f).SetEase(Ease.OutBounce);
    //            yield return new WaitForSeconds(2);

    //            //「消しゴムみたいな大きさ」
    //            Hukidashi("C0160b3");
    //            yield return new WaitForSeconds(4);

    //            //「突っついちゃおうかな」
    //            Hukidashi("C0160b4");
    //            ChieriMotion("なんか変だよね～", 0.4f, 2);


    //            //つつき待ち(カメラ親と人差し指先の距離を測って判定)
    //            float tempDistanceFloat = 3;//最初は範囲外の値
    //            while (tempDistanceFloat > 2)
    //            {
    //                tempDistanceFloat = Vector3.Distance(CameraObjectsTrs.position, GirlLhitosashi02Trs.position);
    //                yield return null;
    //            }
    //            SEPlay("足音2_footsteps_shoe_grass_walk_04");
    //            //SEPlay("bosu00_water_mishi_close_湿った布押し当たり_音量大");

    //            //つつきによるカメラ回転
    //            DOTween.To(() => CameraObjectsTrs.transform.localEulerAngles, (x) => CameraObjectsTrs.transform.localEulerAngles = x,
    //               new Vector3(0, 150, 0), 0.2f).SetEase(Ease.InBounce);

    //            //二回目つつき待ち
    //            yield return new WaitForSeconds(0.5f);
    //            tempDistanceFloat = 3;//最初は範囲外の値
    //                                  //つつき待ち(カメラ親と人差し指先の距離を測って判定)
    //            while (tempDistanceFloat > 2.5f)
    //            {
    //                tempDistanceFloat = Vector3.Distance(CameraObjectsTrs.position, GirlLhitosashi02Trs.position);
    //                testFloat03 = tempDistanceFloat;
    //                yield return null;
    //            }
    //            SEPlay("足音2_footsteps_shoe_grass_walk_04");
    //            //SEPlay("bosu00_water_mishi_close_湿った布押し当たり_音量大");

    //            //カメラ回転と移動
    //            DOTween.To(() => CameraObjectsTrs.transform.localEulerAngles, (x) => CameraObjectsTrs.transform.localEulerAngles = x,
    //               new Vector3(0, 80, 0), 0.2f).SetEase(Ease.InBounce);
    //            DOTween.To(() => CameraObjectsTrs.transform.localPosition, (x) => CameraObjectsTrs.transform.localPosition = x,
    //              Player_RhandPare_00_TenoseStartPosObj.transform.localPosition, 0.2f).SetEase(Ease.InBounce);

    //            ChieriMotionDelay(2, "キリッ", 0.4f, 2);//時間差表情戻し
    //            yield return new WaitForSeconds(3);

    //            //「ごめんごめん」
    //            SHukidashi("C0160b5");
    //            ChieriMotion("f_笑顔眉下がり", 0.4f, 2);
    //            yield return new WaitForSeconds(3);

    //            //単独選択肢 「おろして」
    //            Sentakushi("■C0170a");
    //            sentakuListNum = 99;//入れ子選択肢なので戻し必要
    //            while (sentakuListNum == 99) { yield return null; }
    //            yield return new WaitForSeconds(0.5f);
    //            switch (sentakuListNum)
    //            {
    //                case 0:
    //                    EventMove("C 手乗せ→つつき→●立ち上がり");

    //                    yield break;

    //                case -1:
    //                    #region//「驚かせすぎちゃった？」
    //                    Hukidashi("C0160z1");
    //                    ChieriMotion("あはは・・・", 0.3f, 2, 0);
    //                    AseTare();
    //                    yield return KeyOrWait(3);
    //                    FollowDOMove(IKLookAtHeadTargetTrs, VRCameraTrs, new Vector3(0.05f, -0.15f, 0), 2f);
    //                    yield return new WaitForSeconds(0.5f);

    //                    //「いまおろしてあげるからね」
    //                    Hukidashi("C0160a4b2");
    //                    ChieriMotion("f_笑顔01口眉下がり_目閉じない", 0.3f, 2, 0);
    //                    yield return KeyOrWait(3);
    //                    #endregion
    //                    break;
    //            }
    //            #endregion
    //            break;

    //        case -1:
    //            yield return new WaitForSeconds(0.5f);
    //            #region//「驚かせすぎちゃった？」
    //            Hukidashi("C0160z");
    //            ChieriMotion("あはは・・・", 0.3f, 2, 0);
    //            AseTare();
    //            yield return KeyOrWait(3);
    //            FollowDOMove(IKLookAtHeadTargetTrs, VRCameraTrs, new Vector3(0.05f, -0.15f, 0), 2f);
    //            yield return new WaitForSeconds(0.5f);

    //            //「いまおろしてあげるからね」
    //            Hukidashi("C0160a4b2");
    //            ChieriMotion("f_笑顔01口眉下がり_目閉じない", 0.3f, 2, 0);
    //            yield return KeyOrWait(3);
    //            #endregion
    //            break;


    //    }


    //    #region//フェードアウトで場面転換感
    //    FadeBlack(1, 3);
    //    DOTween.To(() => speaker.audioSource.volume, (x) => speaker.audioSource.volume = x, 0.0f, 4);
    //    DOTween.To(() => aircon.audioSource.volume, (x) => aircon.audioSource.volume = x, 0f, 4);

    //    yield return new WaitForSeconds(4);
    //    speaker.audioSource.clip = Instantiate(ResourceFiles.BGM["hinoataru"]);
    //    speaker.audioSource.Play();


    //    #endregion

    //    EventMove("C 戻してほしい？");


    //}
    //IEnumerator C0056()//C 手乗せ→つつき→●立ち上がり
    //{
    //    if (debugEventMoveFlag == true)
    //    {
    //        ChieriMotion("手乗せ初期座り状態ループ", 0f, 0, 0);

    //        //手へペアレント
    //        CameraObjectsTrs.SetParent(GirlRHandTrs);
    //        //手乗り初期位置
    //        GameObject Player_RhandPare_00_TenoseStartPosObj = Resources.Load("_PosObj/C01_HayaruKimochi/Tenose/Player_RhandPare_00_TenoseStartPosObj") as GameObject;
    //        CameraObjectsTrs.localPosition = Player_RhandPare_00_TenoseStartPosObj.transform.localPosition;
    //        CameraObjectsTrs.localEulerAngles = Vector3.zero;

    //        //アニメスピード
    //        girlAnim.speed = 0.5f;
    //        //大きさ
    //        nowPlayerLocalScale = new Vector3(0.03f, 0.03f, 0.03f);

    //        //プレイヤー見る　（なぜかワールドでFollowDOMoveはあらぬ方向を向く。Leapでもスケール1でも直接position指定でも同じ場所にペアレントしても）
    //        //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
    //        //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);

    //        //プレイヤー見る　
    //        FollowDOMove(IKLookAtEyeTargetTrs, PlayerTargetTrs);
    //        FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0.05f, -0.15f, 0));
    //        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
    //        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

    //        //消しゴムペアレント
    //        KeshigomuObj.transform.SetParent(GirlLhitosashi02Trs);
    //        KeshigomuObj.transform.localPosition = Keshigomu_syukudai_GirlRhitosashi02_ParameterTrs.localPosition;
    //        KeshigomuObj.transform.localEulerAngles = Keshigomu_syukudai_GirlRhitosashi02_ParameterTrs.localEulerAngles;
    //        KeshigomuObj.SetActive(false);

    //    }
    //    EventReset();
    //    yield return null;

    //    //「え？おろして？」
    //    Hukidashi("C0170a1");
    //    ChieriMotion("ん？", 0.4f, 2, 0);
    //    yield return KeyOrWait(3);

    //    //「あそっか」
    //    Hukidashi("C0170a2");
    //    ChieriMotion("f_あ！ほら！口閉じ", 0.4f, 2);
    //    yield return KeyOrWait(2);

    //    //「高くて怖いんだ？」
    //    Hukidashi("C0170a3");
    //    ChieriMotion("キリッ", 0.4f, 2);
    //    FollowDOMove(IKLookAtHeadTargetTrs, VRCameraTrs, new Vector3(0.2f, -0.20f, 0), 3f);
    //    yield return KeyOrWait(3);

    //    //「私座ってるから」
    //    Hukidashi("C0170a4");
    //    ChieriMotion("f_笑顔眉下がり", 0.4f, 2);
    //    FollowDOMove(IKLookAtHeadTargetTrs, VRCameraTrs, new Vector3(0.05f, -0.15f, 0), 3f);
    //    yield return KeyOrWait(4);

    //    //「じゃー私が」
    //    Hukidashi("C0170a5");
    //    ChieriMotion("キリッ", 0.4f, 2);
    //    yield return new WaitForSeconds(2);
    //    ChieriMotion("手乗せ座り→手乗せしゃがみ", 2f, 0);

    //    //立ち上がる時LookAtうまく動かないのでLookAtTargetペアレント（最終手段）※
    //    //顔はIK切る
    //    DOTween.Clear();
    //    IKLookAtEyeTargetTrs.SetParent(VRCameraTrs); IKLookAtEyeTargetTrs.localPosition = Vector3.zero;
    //    DOTweenToLAIKSEyes(LAIKEyeS, 1, 0);
    //    DOTweenToLAIKSHead(LAIKHeadS, 0, 4);

    //    yield return new WaitForSeconds(1);

    //    SEPlay("don22_8低い_ゴォオォ");
    //    yield return new WaitForSeconds(7);

    //    //「まだしゃがんでるだけ」
    //    Hukidashi("C0170a6");
    //    ChieriMotion("キリッ", 0.4f, 2);
    //    yield return new WaitForSeconds(4);

    //    girlAnim.CrossFade("手乗せしゃがみ→手乗せ立ち上がり", 2f, 0);
    //    yield return new WaitForSeconds(1);
    //    //「ほーらどんどん高くなってー」
    //    Hukidashi("C0170a7");
    //    SEPlay("2000倍_gooo");

    //    yield return new WaitForSeconds(3);

    //    //プレイヤー見る（特殊）
    //    IKLookAtEyeTargetTrs.SetParent(TargetsTrs);
    //    FollowDOMove(IKLookAtEyeTargetTrs, PlayerTargetTrs);
    //    FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0.05f, -0.15f, 0));
    //    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
    //    DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
    //    yield return new WaitForSeconds(3);

    //    //「はいこれで私と同じ高さ」
    //    Hukidashi("C0170a8");
    //    ChieriMotion("笑顔01口眉", 0.1f, 2);
    //    ChieriMotionDelay(2, "キリッ", 0.1f, 2);//時間差表情戻し
    //    yield return KeyOrWait(5);

    //    //「ちょっと下覗いてみる？」
    //    Hukidashi("C0170a85");
    //    yield return KeyOrWait(3);

    //    //■暗幕
    //    FadeBlack(1, 0.5f);

    //    yield return new WaitForSeconds(0.5f);


    //    //なんかおかしいのでもう一度リセット
    //    DOTween.Clear();
    //    IKLookAtEyeTargetTrs.SetParent(TargetsTrs);
    //    IKLookAtHeadTargetTrs.SetParent(TargetsTrs);
    //    IKLookAtEyeTargetTrs.localPosition = Vector3.zero;
    //    IKLookAtHeadTargetTrs.localPosition = Vector3.zero;
    //    DOTweenToLAIKSEyes(LAIKEyeS, 0, 0);
    //    DOTweenToLAIKSHead(LAIKHeadS, 0, 0);
    //    yield return null;
    //    FollowDOMove(IKLookAtEyeTargetTrs, PlayerTargetTrs);
    //    FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0.05f, -0.15f, 0));
    //    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
    //    DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

    //    //消しゴム眺め位置へ
    //    GameObject Player_RhandPare_02_KeshigomuNagamePosObj = Resources.Load("_PosObj/C01_HayaruKimochi/Tenose/Player_RhandPare_02_KeshigomuNagamePosObj") as GameObject;
    //    CameraObjectsTrs.transform.localPosition = Player_RhandPare_02_KeshigomuNagamePosObj.transform.localPosition;


    //    yield return new WaitForSeconds(1f);

    //    //開幕
    //    FadeBlack(0, 0.5f);

    //    yield return new WaitForSeconds(3);

    //    テストプレイ:

    //    //「やっぱり怖い？　足なんてつかないもんね」
    //    Hukidashi("C0170a9");
    //    ChieriMotionDelay(2, "キリッ", 0.1f, 2);//時間差表情戻し

    //    yield return KeyOrWait(5);

    //    //「大変だね」
    //    Hukidashi("C0170a10");
    //    ChieriMotion("f_余裕感笑顔", 0.4f, 2);
    //    FollowDOMove(IKLookAtEyeTargetTrs, VRCameraTrs, 0.2f);
    //    FollowDOMove(IKLookAtHeadTargetTrs, VRCameraTrs, new Vector3(0.2f, -0.20f, 0), 3f);
    //    yield return KeyOrWait(5);


    //    //消しゴム構え
    //    ChieriMotion("手乗せ立ち消しゴム構え開始", 2f, 0, 0);
    //    KeshigomuObj.SetActive(true);

    //    FollowDOMove(IKLookAtEyeTargetTrs, KeshigomuObj.transform, 0.2f);
    //    yield return new WaitForSeconds(2);

    //    FollowDOMove(2f, IKLookAtHeadTargetTrs, KeshigomuObj.transform, new Vector3(0.05f, -0.201407f, 0), 1f);

    //    //「ほら見て」
    //    ChieriMotion("笑顔01口眉_目閉じない", 2f, 2);

    //    Hukidashi("C0170a13");
    //    //消しゴムもって向く
    //    yield return KeyOrWait(5);

    //    //「見える？」
    //    Hukidashi("C0170a14");
    //    FollowDOMove(IKLookAtEyeTargetTrs, VRCameraTrs, 0.2f);
    //    yield return KeyOrWait(4);

    //    //「君より大きいかな？」
    //    Hukidashi("C0170a15");
    //    ChieriMotion("笑顔01口眉_目閉じない", 1f, 2);
    //    FollowDOMove(IKLookAtEyeTargetTrs, KeshigomuObj.transform, 0.2f);
    //    FollowDOMove(IKLookAtHeadTargetTrs, VRCameraTrs, new Vector3(0.2f, -0.20f, 0), 3f);
    //    yield return KeyOrWait(5);

    //    //「押し倒されそうでしょ」
    //    Hukidashi("C0170a16");
    //    ChieriMotion("笑顔01口眉", 0.1f, 2);
    //    ChieriMotionDelay(1.5f, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
    //    FollowDOMove(IKLookAtEyeTargetTrs, VRCameraTrs, 0.2f);
    //    yield return KeyOrWait(4);

    //    //「でも・・」
    //    Hukidashi("C0170a17");
    //    ChieriMotion("f_余裕感笑顔", 1f, 2);
    //    FollowDOMove(IKLookAtEyeTargetTrs, KeshigomuObj.transform, 1f);
    //    yield return KeyOrWait(4);
    //    FollowDOMove(IKLookAtEyeTargetTrs, KeshigomuObj.transform, 0.2f);
    //    ChieriMotion("手乗せ立ち消しゴム落とし", 1f, 0, 0);
    //    yield return new WaitForSeconds(1.5f);

    //    ////消しゴム落とす前にペアレント外し 
    //    KeshigomuObj.transform.SetParent(GameObjectsTrs);
    //    //ペアレント外す際にずれるので直接修正
    //    KeshigomuObj.transform.localPosition += new Vector3(0, -0.045f, 0);
    //    //物理コンポーネント追加
    //    Rigidbody tempKeshigomuRigidbody = KeshigomuObj.AddComponent<Rigidbody>();
    //    Collider tempKeshigomuCollider = KeshigomuObj.AddComponent<BoxCollider>();
    //    tempKeshigomuCollider.material = ResourceFiles.keshigomuPMat;
    //    //手やスカートのコリダー通過するまでTrigger化
    //    tempKeshigomuCollider.isTrigger = true;
    //    yield return new WaitForSeconds(1.2f);
    //    tempKeshigomuCollider.isTrigger = false;

    //    yield return new WaitForSeconds(3.5f);



    //    //「見えてる？」
    //    Hukidashi("C0170a18");
    //    ChieriMotion("手乗せ立ち消しゴム落とし終了", 1f, 0, 0);
    //    yield return KeyOrWait(5);
    //    yield return new WaitForSeconds(0.5f);

    //    //「今君が私にどう見えてるか」
    //    Hukidashi("C0170a19");
    //    FollowDOMove(2f, IKLookAtEyeTargetTrs, VRCameraTrs, 1f);
    //    ChieriMotion("f_余裕感笑顔", 2f, 2);
    //    FollowDOMove(IKLookAtHeadTargetTrs, VRCameraTrs, new Vector3(0.05f, -0.20f, 0), 6f);
    //    yield return KeyOrWait(3);
    //    yield return new WaitForSeconds(5);
    //    //「それに脆いから」
    //    Hukidashi("C0170a20");
    //    ChieriMotion("笑顔01口眉_目閉じない", 1f, 2);
    //    yield return KeyOrWait(3);

    //    //「怪我しちゃうかも」
    //    SHukidashi("C0170a21");
    //    ChieriMotion("キリッ", 1f, 2);
    //    FollowDOMove(IKLookAtHeadTargetTrs, VRCameraTrs, new Vector3(-0.1f, -0.20f, 0), 6f);
    //    yield return new WaitForSeconds(3);

    //    #region////選択肢「わかった・・」「癇癪」

    //    //■切り選択候補

    //    Sentakushi("■C0180a");
    //    Sentakushi("■C0180b");
    //    sentakuListNum = 99;//初期化
    //                        //選択肢選ばれるまでループ
    //    while (sentakuListNum == 99) { yield return null; }
    //    yield return null;
    //    switch (sentakuListNum)
    //    {
    //        case 0://選択肢a
    //            yield return new WaitForSeconds(0.5f);
    //            //「よしよしおろしてあげる」
    //            Hukidashi("C0180a1");
    //            ChieriMotion("笑顔01口眉_目閉じない", 0.3f, 2, 0);
    //            FollowDOMove(IKLookAtEyeTargetTrs, VRCameraTrs, 0.2f);
    //            FollowDOMove(IKLookAtHeadTargetTrs, VRCameraTrs, new Vector3(0f, -0.20f, 0), 1f);
    //            ChieriMotionDelay(1, "笑顔01口眉", 0.2f, 2);//時間差表情戻し
    //            ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.2f, 2);//時間差表情戻し

    //            yield return KeyOrWait(3);
    //            break;

    //        case 1:
    //            #region 選択肢b 癇癪
    //            yield return new WaitForSeconds(0.5f);

    //            //「も～落ち着いてもらわないと困るのに」
    //            Hukidashi("C0180b1");
    //            ChieriMotion("f_私だけなのかな・・？", 2f, 2);
    //            FollowDOMove(IKLookAtEyeTargetTrs, VRCameraTrs, 0.2f);
    //            FollowDOMove(IKLookAtHeadTargetTrs, VRCameraTrs, new Vector3(0f, -0.15f, 0), 1f);
    //            yield return KeyOrWait(5);
    //            ChieriMotion("手乗せ立ち手かぶせ", 1f, 0, 0);

    //            //スマホロック
    //            SmartPhoneVisLockBool = true;

    //            //「それにね～　危ないよ」
    //            Hukidashi("C0180b2");
    //            yield return new WaitForSeconds(1);

    //            //■かぶされる位置へカメラ移動
    //            GameObject Player_RhandPare_03_TeKabusarePosObj = Resources.Load("_PosObj/C01_HayaruKimochi/Tenose/Player_RhandPare_03_TeKabusarePosObj") as GameObject;
    //            DOTween.To(() => CameraObjectsTrs.transform.localPosition, (x) => CameraObjectsTrs.transform.localPosition = x,
    //               Player_RhandPare_03_TeKabusarePosObj.transform.localPosition, 0.7f).SetEase(Ease.OutBounce);


    //            yield return new WaitForSeconds(2f);
    //            //■手出現
    //            SEPlay("swing41_12低い_長い");
    //            yield return new WaitForSeconds(0.5f);

    //            sentakushiEndHukidashiEraseBool = false;
    //            Sentakushi("■C0180b2a");

    //            yield return new WaitForSeconds(2.5f);

    //            //「落ち着くまで」
    //            Hukidashi("C0180b3");
    //            yield return new WaitForSeconds(1.5f);



    //            //■手接近
    //            SEPlay("don22_8低い_ゴォオォ");
    //            DelAll_Sentakushi(); yield return null;
    //            yield return new WaitForSeconds(0.5f);
    //            Sentakushi("■C0180b3a");

    //            //立ってた場合指にぶつかった体で下げ
    //            if (PlayerTargetTrs.position.y > PlayerStandFeetCubeTrs.position.y)
    //            {
    //                GameObject Player_RhandPare_05_StandKabusaretaPosObj = Resources.Load("_PosObj/C01_HayaruKimochi/Tenose/Player_RhandPare_05_StandKabusaretaPosObj") as GameObject;
    //                DOTween.To(() => CameraObjectsTrs.transform.localPosition, (x) => CameraObjectsTrs.transform.localPosition = x,
    //                  Player_RhandPare_05_StandKabusaretaPosObj.transform.localPosition, 0.5f).SetEase(Ease.InOutBounce);
    //            }


    //            yield return new WaitForSeconds(3f);

    //            //暗く
    //            FadeBlack(0.7f, 1.5f, false, Ease.InOutBounce, false);


    //            //■かぶされた位置へカメラ移動
    //            GameObject Player_RhandPare_04_SitKabusaretaPosObj = Resources.Load("_PosObj/C01_HayaruKimochi/Tenose/Player_RhandPare_04_SitKabusaretaPosObj") as GameObject;
    //            //もし立ってたらもっと降ろすためにtemp宣言して取得
    //            Vector3 tempV3 = Player_RhandPare_04_SitKabusaretaPosObj.transform.localPosition;
    //            tempV3.y -= 1.2f / GameObjectsTrs.localScale.z;
    //            if (PlayerTargetTrs.position.y > PlayerStandFeetCubeTrs.position.y)
    //            {
    //                DOTween.To(() => CameraObjectsTrs.transform.localPosition, (x) => CameraObjectsTrs.transform.localPosition = x,
    //                 tempV3, 0.7f).SetEase(Ease.OutBounce);
    //            }
    //            else//座ってれば座ってる高さそのまま
    //            {
    //                DOTween.To(() => CameraObjectsTrs.transform.localPosition, (x) => CameraObjectsTrs.transform.localPosition = x,
    //                   Player_RhandPare_04_SitKabusaretaPosObj.transform.localPosition, 1.5f).SetEase(Ease.InOutBounce);
    //            }



    //            yield return new WaitForSeconds(1);

    //            //カメラ回転
    //            DOTween.To(() => CameraObjectsTrs.transform.localEulerAngles, (x) => CameraObjectsTrs.transform.localEulerAngles = x,
    //               new Vector3(0, 0, 0), 0.4f).SetEase(Ease.InOutBounce);

    //            //真っ暗へ
    //            FadeBlack(1, 2f);
    //            //エアコン音
    //            DOTween.To(() => aircon.audioSource.volume, (x) => aircon.audioSource.volume = x, 0f, 5);

    //            yield return new WaitForSeconds(2);
    //            DelAll_Sentakushi();

    //            Hukidashi("C0180b4");


    //            yield return new WaitForSeconds(3);
    //            //スマホロック解除
    //            SmartPhoneVisLockBool = false;
    //            //選択肢消さない設定戻し
    //            sentakushiEndHukidashiEraseBool = true;

    //            #endregion 選択肢b 癇癪
    //            break;

    //        case -1://選択肢z 無言
    //            #region//「驚かせすぎちゃった？」
    //            Hukidashi("C0180z1");
    //            ChieriMotion("あはは・・・", 0.3f, 2, 0);
    //            AseTare();
    //            yield return KeyOrWait(3);
    //            FollowDOMove(IKLookAtHeadTargetTrs, VRCameraTrs, new Vector3(0.05f, -0.15f, 0), 2f);
    //            yield return new WaitForSeconds(0.5f);

    //            //「いまおろしてあげるからね」
    //            Hukidashi("C0160a4b2");
    //            ChieriMotion("f_笑顔01口眉下がり_目閉じない", 0.3f, 2, 0);
    //            yield return KeyOrWait(3);
    //            #endregion
    //            break;
    //    }
    //    #endregion

    //    #region//フェードアウトで場面転換感
    //    FadeBlack(1, 3);
    //    DOTween.To(() => speaker.audioSource.volume, (x) => speaker.audioSource.volume = x, 0.0f, 4);
    //    DOTween.To(() => aircon.audioSource.volume, (x) => aircon.audioSource.volume = x, 0f, 4);

    //    yield return new WaitForSeconds(5);
    //    speaker.audioSource.clip = Instantiate(ResourceFiles.BGM["hinoataru"]);
    //    speaker.audioSource.Play();

    //    #endregion

    //    EventMove("C 戻してほしい？");
    //}
    //IEnumerator C0050a()//プレイヤー落ちる
    //{
    //    DelAll_Hukidashi(); yield return null;
    //    Hukidashi("C0165");

    //    SEPlay("swing41_12低い_長い");

    //    ////消しゴム落とす前にペアレント外し 
    //    CameraObjectsTrs.SetParent(GameObjectsTrs);
    //    //ペアレント外す際にずれるので直接修正
    //    CameraObjectsTrs.localPosition += new Vector3(0, -0.045f, 0);
    //    //物理コンポーネント追加
    //    Rigidbody tempCameraRigidbody = CameraObjectsTrs.gameObject.AddComponent<Rigidbody>();
    //    tempCameraRigidbody.drag = 0;
    //    Collider tempCameraCollider = CameraObjectsTrs.gameObject.AddComponent<BoxCollider>();
    //    tempCameraCollider.material = ResourceFiles.keshigomuPMat;
    //    //手やスカートのコリダー通過するまでTrigger化
    //    tempCameraCollider.isTrigger = true;
    //    yield return new WaitForSeconds(1);
    //    tempCameraCollider.isTrigger = false;


    //    //ぶつかり待ち
    //    while (CameraObjectsTrs.localPosition.y > 0.33f)
    //    {
    //        yield return null;
    //    }
    //    FadeBlack(0.9999f, 0.5f);

    //    yield return new WaitForSeconds(3);

    //    EventMove("タイトル");

    //    //シーン移動前にDBデータ渡し
    //    DB.nowFadeBlackEndColor = new Color(0, 0, 0, 0);
    //    DB.nowFadeWhiteEndColor = new Color(1, 1, 1, 1);
    //    DB.storyLoopCountInt++;

    //    //Obj消し
    //    EvDelObjListClear();

    //    //シーン移動
    //    SceneManager.LoadScene("karimodel01");

    //    yield break;
    //}

    //IEnumerator C0070()//C 戻してほしい？
    //{
    //    if (debugEventMoveFlag == true)
    //    {
    //        #region かくれおに
    //        isHwVisLock = false;//宿題ロック解除
    //                            //かくれんぼで消す小物群
    //        MeshTrs.gameObject.SetActive(true);
    //        GrasstableTrs.gameObject.SetActive(true);
    //        DrillTrs.gameObject.SetActive(true);
    //        Drill_chieriTrs.gameObject.SetActive(true);
    //        SharpenObj.SetActive(true);
    //        KeshigomuObj.SetActive(true);
    //        //かくれんぼで智恵理ゼロ位置解除とアニメスピード変わる
    //        DB.isChieriPosLock = true;
    //        girlAnim.speed = 1;
    //        #endregion
    //    }
    //    EventReset();
    //    yield return null;

    //    #region 暗幕中設定
    //    ChieriMotion("座り待機", 0f, 0, 0);
    //    ChieriMotion("笑顔01口眉_目閉じない", 0f, 2, 0);

    //    //カメラ位置
    //    GameObject Player_01_StartPosObj = Resources.Load("_PosObj/C01_HayaruKimochi/Modositehosii/Player_01_StartPosObj") as GameObject;
    //    CameraObjectsTrs.SetParent(GameObjectsTrs);
    //    CameraObjectsTrs.localPosition = Player_01_StartPosObj.transform.localPosition;
    //    CameraObjectsTrs.localEulerAngles = Vector3.zero;

    //    //アニメスピード
    //    float tmpDefgirlAnimSpeed = 0.5f;
    //    girlAnim.speed = tmpDefgirlAnimSpeed;
    //    //大きさ
    //    nowPlayerLocalScale = new Vector3(0.03f, 0.03f, 0.03f);

    //    //プレイヤー見る　
    //    FollowDOMove(IKLookAtEyeTargetTrs, PlayerTargetTrs);
    //    FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0.05f, -0.15f, 0));
    //    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
    //    DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

    //    //消しゴムペアレント
    //    KeshigomuObj.transform.SetParent(RoomTrs);
    //    KeshigomuObj.transform.localPosition = Keshigomu_C_Modositehosii_table_Room_ParameterTrs.localPosition;
    //    KeshigomuObj.transform.localEulerAngles = Keshigomu_C_Modositehosii_table_Room_ParameterTrs.localEulerAngles;
    //    KeshigomuObj.SetActive(true);

    //    //ドリルどうするか
    //    Drill_chieriTrs.gameObject.SetActive(false);

    //    #endregion 暗幕中設定

    //    yield return new WaitForSeconds(3);

    //    //開幕
    //    FadeBlack(0, 3);
    //    DOTween.To(() => speaker.audioSource.volume, (x) => speaker.audioSource.volume = x, 0.5f, 3);
    //    DOTween.To(() => aircon.audioSource.volume, (x) => aircon.audioSource.volume = x, 1f, 3);
    //    yield return new WaitForSeconds(2);

    //    //■切り選択候補（会話自体変える）

    //    //「ね、戻してほしい？」
    //    SHukidashi("C0200");
    //    yield return new WaitForSeconds(2);

    //    //選択肢「戻して！」「宿題したい」
    //    Sentakushi("■C0200a", Mathf.Infinity);
    //    //Sentakushi("■C0200b", Mathf.Infinity);
    //    sentakuListNum = 99;//初期化
    //                        //選択肢選ばれるまでループ
    //    while (sentakuListNum == 99) { yield return null; }
    //    yield return null;
    //    switch (sentakuListNum)
    //    {
    //        case 0://選択肢a
    //            #region そうだよね　でも縮めておいてなんだけど ～ 遊ぶ
    //            yield return new WaitForSeconds(1f);
    //            //「そうだよね戻りたいよね～」
    //            Hukidashi("C0200a1");
    //            ChieriMotion("笑顔01口眉", 0.1f, 2);
    //            ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
    //            yield return KeyOrWait(4);
    //            yield return new WaitForSeconds(1);

    //            //「縮めておいてなんだけど」
    //            Hukidashi("C0200a2");
    //            ChieriMotion("f_あ！ほら！口普通キョトン", 0.1f, 2);

    //            //ちょい右上見
    //            FollowDOMove(1f, IKLookAtEyeTargetTrs, HeadSphereTrs, new Vector3(0.3f, 0.3f, 0), 1f);
    //            FollowDOMove(IKLookAtHeadTargetTrs, VRCameraTrs, new Vector3(0.2f, -0.20f, 0), 1f);
    //            yield return KeyOrWait(4);
    //            yield return new WaitForSeconds(1);

    //            //「戻したら怒って帰っちゃいそう」
    //            SHukidashi("C0200a3");
    //            ChieriMotion("f_あ！ほら！口普通キョトン眉下がり", 3f, 2);
    //            FollowDOMove(1f, IKLookAtEyeTargetTrs, PlayerTargetTrs, 0.6f);
    //            yield return new WaitForSeconds(3);

    //            //選択肢「怒ってない」「そんなわけ・・」
    //            Sentakushi("■C0200a3a", Mathf.Infinity);
    //            Sentakushi("■C0200a3b", Mathf.Infinity);
    //            sentakuListNum = 99;//初期化
    //            while (sentakuListNum == 99) { yield return null; }//選択肢選ばれるまでループ
    //            yield return new WaitForSeconds(1f);

    //            if (sentakuListNum == 0) { Hukidashi("C0200a3a1"); }//ほんとに？
    //            if (sentakuListNum == 1) { Hukidashi("C0200a3b1"); }//そう簡単に

    //            ChieriMotion("笑顔01口眉", 0.1f, 2);
    //            ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.1f, 2);
    //            yield return KeyOrWait(4);
    //            yield return new WaitForSeconds(1);


    //            //プレイヤー見る　
    //            FollowDOMove(IKLookAtEyeTargetTrs, PlayerTargetTrs);
    //            FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0.05f, -0.15f, 0));
    //            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
    //            DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

    //            if (sentakuListNum == 0) { SHukidashi("C0200a3a2"); }//じゃあちょっとだけ遊ぼう
    //            if (sentakuListNum == 1) { SHukidashi("C0200a3b2"); }//遊んでくれたら
    //            yield return new WaitForSeconds(3);


    //            //選択肢「遊ぶ・・？」
    //            Sentakushi("■C0200a3a2");
    //            sentakuListNum = 99;//初期化
    //            while (sentakuListNum == 99) { yield return null; }//選択肢選ばれるまでループ
    //            yield return null;
    //            yield return new WaitForSeconds(1);

    //            #endregion //縮めておいてなんだけど ～ 遊ぶ

    //            #region 小人と遊ぶの夢だった ～ うぅ・・
    //            Hukidashi("C0220");//うん、私ね
    //            ChieriMotion("笑顔01口眉", 0.1f, 2);
    //            ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
    //            yield return KeyOrWait(4);
    //            yield return new WaitForSeconds(1);

    //            SHukidashi("C0230");//一人二役じゃ
    //            ChieriMotion("あはは・・・", 0.1f, 2);
    //            ChieriMotionDelay(1f, "f_あはは目開き", 0.1f, 2);//時間差表情戻し
    //            yield return new WaitForSeconds(3);


    //            //選択肢「そんな趣味が」「その歳で」
    //            Sentakushi("■C0230a", Mathf.Infinity);
    //            Sentakushi("■C0230b", Mathf.Infinity);
    //            sentakuListNum = 99;//初期化
    //            while (sentakuListNum == 99) { yield return null; }//選択肢選ばれるまでループ
    //            yield return null;
    //            yield return new WaitForSeconds(1);

    //            girlAnim.speed = 2;
    //            yield return new WaitForSeconds(0.07f);
    //            girlAnim.speed = tmpDefgirlAnimSpeed;
    //            yield return new WaitForSeconds(0.07f);
    //            girlAnim.speed = 2;
    //            yield return new WaitForSeconds(0.07f);
    //            girlAnim.speed = tmpDefgirlAnimSpeed;

    //            Hukidashi("C0240");//・・・！
    //            ChieriMotion("f_笑顔目開き", 0.2f, 2);
    //            AseTare();
    //            TereHoho();
    //            yield return KeyOrWait(3);

    //            if (sentakuListNum == 0) { Hukidashi("C0250a"); }//な、内緒にしてたけど
    //            if (sentakuListNum == 1) { Hukidashi("C0250b"); }//い、いいでしょ！

    //            AseTare();
    //            if (sentakuListNum == 0) { ChieriMotion("キリッ", 0.5f, 2); }
    //            if (sentakuListNum == 1) { ChieriMotion("angry", 0.5f, 2); }
    //            //右見
    //            FollowDOMove(1f, IKLookAtEyeTargetTrs, HeadSphereTrs, new Vector3(0.8f, 0.3f, 0), 1f);
    //            FollowDOMove(IKLookAtHeadTargetTrs, VRCameraTrs, new Vector3(0.8f, -0.2f, 0), 2f);
    //            yield return KeyOrWait(4);
    //            yield return new WaitForSeconds(1);

    //            if (sentakuListNum == 0) { SHukidashi("C0260a"); }//恥ずかしいかな・・
    //            if (sentakuListNum == 1) { Hukidashi("C0260b"); }//今でもしてたって・・
    //            AseTare();
    //            if (sentakuListNum == 0) { ChieriMotion("f_あ！ほら！口普通キョトン眉下がり", 0.5f, 2); }

    //            //右下見
    //            FollowDOMove(1f, IKLookAtEyeTargetTrs, HeadSphereTrs, new Vector3(0.8f, 0f, 0), 1f);
    //            FollowDOMove(IKLookAtHeadTargetTrs, VRCameraTrs, new Vector3(0.8f, -0.4f, 0), 2f);
    //            //yield return KeyOrWait(4);
    //            yield return new WaitForSeconds(4);

    //            //下見
    //            FollowDOMove(1f, IKLookAtEyeTargetTrs, HeadSphereTrs, new Vector3(0.8f, 0f, 0), 1f);
    //            FollowDOMove(IKLookAtHeadTargetTrs, VRCameraTrs, new Vector3(0.3f, -0.5f, 0), 2f);

    //            if (sentakuListNum == 1)
    //            {
    //                SHukidashi("C0270");//う、うう・・
    //                AseTare();
    //                ChieriMotion("f_・・・（悲）", 1f, 2);
    //                yield return new WaitForSeconds(3);
    //            }


    //            bool isTmpFlag = true;

    //            //選択肢「いいと思う」「かわいいと思う」
    //            if (sentakuListNum == 0)
    //            {
    //                Sentakushi("■C0270aa", Mathf.Infinity);
    //                Sentakushi("■C0270ab", Mathf.Infinity);
    //                isTmpFlag = true;
    //            }

    //            //■切り選択候補 （反応ひとつなのでどっちか削る（かわいいを削る））

    //            //選択肢「ごめんごめん」「かわいい」
    //            if (sentakuListNum == 1)
    //            {
    //                Sentakushi("■C0270ba", Mathf.Infinity);
    //                Sentakushi("■C0270bb", Mathf.Infinity);
    //                isTmpFlag = false;
    //            }
    //            sentakuListNum = 99;//初期化

    //            #region 選択肢選ばれるまでループ ちら見
    //            while (sentakuListNum == 99) //選択肢選ばれるまでループ ちら見
    //            {
    //                if (UnityEngine.Random.value > 0.992)
    //                {
    //                    FollowDOMove(IKLookAtEyeTargetTrs, PlayerTargetTrs, 0.1f);
    //                    yield return new WaitForSeconds(0.7f);
    //                }
    //                else if (UnityEngine.Random.value > 0.99)
    //                {
    //                    FollowDOMove(IKLookAtEyeTargetTrs, HeadSphereTrs, new Vector3(0.8f, 0f, 0), 0.1f);
    //                    yield return new WaitForSeconds(1);
    //                }

    //                //まばたきEye30
    //                blinkTime += 1 * Time.deltaTime;
    //                if (UnityEngine.Random.value > 0.999)
    //                {
    //                    ChieriMotion("まばたきEye30", 0f, 4);
    //                    blinkTime = 0;
    //                }
    //                //4秒経ったら高確率で
    //                if (UnityEngine.Random.value > 0.99 && blinkTime > 4)
    //                {
    //                    ChieriMotion("まばたきEye30", 0f, 4);
    //                    blinkTime = 0;
    //                }
    //                yield return null;
    //            }
    //            #endregion

    //            yield return new WaitForSeconds(1);

    //            #endregion //小人と遊ぶの夢だった ～ うぅ・・

    //            #region いいと思う ごめんごめん かわいい ～ 吹っ切れたし
    //            if (isTmpFlag)// いいと思う かわいいと思う
    //            {
    //                if (sentakuListNum == 0)
    //                {
    //                    Hukidashi("C0280aa");//そ、そうだよね！
    //                    ChieriMotion("f_あ！ほら！口閉じ", 0.4f, 2);
    //                }
    //                if (sentakuListNum == 1)
    //                {
    //                    Hukidashi("C0280ab");//無理に誉めてない？
    //                    ChieriMotion("あはは・・・", 0.1f, 2);
    //                    ChieriMotionDelay(1f, "f_あはは目開き", 0.1f, 2);//時間差表情戻し
    //                }
    //            }
    //            else// ごめんごめん　かわいいかわいい
    //            {
    //                Hukidashi("C0280b");//む～
    //                AseTare();
    //                ChieriMotion("f_む～", 0.5f, 2);
    //            }

    //            //プレイヤー見る　
    //            FollowDOMove(IKLookAtEyeTargetTrs, PlayerTargetTrs);
    //            FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0.05f, -0.15f, 0));
    //            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
    //            DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
    //            yield return KeyOrWait(4);
    //            yield return new WaitForSeconds(1);

    //            if (isTmpFlag == false)// ごめんごめん かわいい
    //            {
    //                ChieriMotion("f_あ！ほら！口普通キョトン眉下がり", 0.4f, 2);
    //                yield return new WaitForSeconds(2);
    //            }


    //            ChieriMotion("身乗り出し", 0.2f / girlAnim.speed, 0);

    //            if (isTmpFlag == true && sentakuListNum == 0) { Hukidashi("C0290a"); }//うん！
    //            else { Hukidashi("C0290b"); }//まあ、でも

    //            ChieriMotionDelay(1f, "f_あ！ほら！口閉じ", 0.2f, 2);//時間差表情戻し
    //            FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0.05f, -0.55f, 0));
    //            yield return new WaitForSeconds(2);
    //            FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0.05f, -0.55f, 0.5f));
    //            yield return KeyOrWait(2);

    //            if (isTmpFlag == true) { Hukidashi("C0300a"); }//おかげで吹っ切れたし
    //            if (isTmpFlag == false) { Hukidashi("C0300b"); }//もう吹っ切れたし

    //            ChieriMotion("笑顔01口眉", 0.1f, 2);
    //            ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
    //            yield return KeyOrWait(4);


    //            #endregion //いいと思う ごめんごめん かわいい ～ 吹っ切れたし


    //            break;

    //        case 1://選択肢b
    //            #region 予告時の「宿題なんて忘れようよ」の流れ
    //            yield return new WaitForSeconds(0.5f);

    //            //「えー本気で言ってるー？！うそでしょー・・もー・・」
    //            Hukidashi("C0200a3a2b1");
    //            ChieriMotion("f_わ～こんなとこばっか見てる", 0.6f, 2);
    //            ChieriMotionDelay(2.5f, "f_はー・・", 0.1f, 2);//時間差表情戻し
    //            ChieriMotionDelay(2f, "後ろ手に倒れて待機", 0.2f, 0);//時間差モーション
    //            yield return new WaitForSeconds(2);
    //            DOTweenToLAIKSEyes(LAIKEyeS, 0, 2);
    //            DOTweenToLAIKSHead(LAIKHeadS, 0, 2);

    //            Hukidashi("C0200a3a2b2");
    //            EventMove("ToBeContinued");

    //            break;
    //            #endregion

    //    }

    //    //暗幕
    //    FadeBlack(1, 1);
    //    yield return new WaitForSeconds(1f);
    //    EventMove();

    //    yield break;
    //}
    //IEnumerator C0080()//ゲーム選択
    //{
    //    if (debugEventMoveFlag == true)
    //    {
    //        #region 暗幕中設定
    //        ChieriMotion("座り待機", 0f, 0, 0);
    //        ChieriMotion("笑顔01口眉_目閉じない", 0f, 2, 0);

    //        //カメラ位置
    //        GameObject Player_01_StartPosObj = Resources.Load("_PosObj/C01_HayaruKimochi/Modositehosii/Player_01_StartPosObj") as GameObject;
    //        CameraObjectsTrs.SetParent(GameObjectsTrs);
    //        CameraObjectsTrs.localPosition = Player_01_StartPosObj.transform.localPosition;
    //        CameraObjectsTrs.localEulerAngles = Vector3.zero;

    //        //アニメスピード
    //        float tmpDefgirlAnimSpeed = 0.5f;
    //        girlAnim.speed = tmpDefgirlAnimSpeed;
    //        //大きさ
    //        nowPlayerLocalScale = new Vector3(0.03f, 0.03f, 0.03f);

    //        //プレイヤー見る　
    //        FollowDOMove(IKLookAtEyeTargetTrs, PlayerTargetTrs);
    //        FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0.05f, -0.15f, 0));
    //        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
    //        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

    //        //消しゴムペアレント
    //        KeshigomuObj.transform.SetParent(RoomTrs);
    //        KeshigomuObj.transform.localPosition = Keshigomu_C_Modositehosii_table_Room_ParameterTrs.localPosition;
    //        KeshigomuObj.transform.localEulerAngles = Keshigomu_C_Modositehosii_table_Room_ParameterTrs.localEulerAngles;
    //        KeshigomuObj.SetActive(true);

    //        //ドリルどうするか
    //        Drill_chieriTrs.gameObject.SetActive(false);

    //        #endregion 暗幕中設定
    //    }
    //    EventReset();
    //    yield return null;
    //    FadeBlack(1, 0);

    //    GameObject tmpGameSelectObj
    //        = Instantiate(Resources.Load("EventSystem/GameSelect/GameSelectText")
    //        , FadeCanvasObj.transform
    //        , false) as GameObject;
    //    DB.evDelObjList.Add(tmpGameSelectObj);

    //    //デバッグ
    //    Debug.Log("ゲーム選択デバッグ操作開始");
    //    while (true)
    //    {
    //        if (Input.GetKeyDown(KeyCode.V))
    //        {
    //            //EventMove("C かくれおに");
    //            Destroy(tmpGameSelectObj);
    //            goto 選んだ;
    //        }
    //        if (Input.GetKeyDown(KeyCode.B))
    //        {
    //            //EventMove("C 脚のぼり");
    //            Destroy(tmpGameSelectObj);
    //            goto 選んだ;
    //        }
    //        if (Input.GetKeyDown(KeyCode.N))
    //        {
    //            //EventMove("C 怪獣バトル");
    //            Destroy(tmpGameSelectObj);
    //            goto 選んだ;
    //        }
    //        yield return null;
    //    }

    //    選んだ:
    //    NovelSetVis("tmpミニゲーム選択");
    //    while (isNovelSetVisIng) { yield return null; }

    //    EventMove("C チャイム");


    //    yield break;
    //}
    //IEnumerator C0100()//C かくれおに
    //{
    //    if (debugEventMoveFlag == true)
    //    {
    //        #region 脚登りの小物など消し
    //        //■オブジェクト群と事前設定　戻し
    //        isHwVisLock = false;//宿題ロック
    //                            //小物戻し
    //        GrasstableTrs.gameObject.SetActive(true);
    //        DrillTrs.gameObject.SetActive(true);
    //        Drill_chieriTrs.gameObject.SetActive(true);
    //        SharpenObj.SetActive(true);
    //        KeshigomuObj.SetActive(true);
    //        HomeworkObjectsTrs.gameObject.SetActive(true);
    //        //智恵理ゼロ位置とアニメスピード
    //        DB.isChieriPosLock = true;
    //        girlAnim.speed = 1f;



    //        #endregion
    //    }
    //    EventReset();
    //    yield return new WaitForSeconds(0.1f);

    //    //暗幕
    //    FadeBlack(1, 2);
    //    yield return new WaitForSeconds(2f);


    //    //暗幕中設定
    //    isHwVisLock = true;//宿題ロック
    //                       //小物消し
    //    MeshTrs.gameObject.SetActive(false);
    //    GrasstableTrs.gameObject.SetActive(false);
    //    DrillTrs.gameObject.SetActive(false);
    //    Drill_chieriTrs.gameObject.SetActive(false);
    //    SharpenObj.SetActive(false);
    //    KeshigomuObj.SetActive(false);
    //    HomeworkObjectsTrs.gameObject.SetActive(false);
    //    //智恵理ゼロ位置解除とアニメスピード
    //    DB.isChieriPosLock = false;
    //    girlAnim.speed = 0.3f;

    //    //大きさ
    //    nowPlayerLocalScale = new Vector3(0.03f, 0.03f, 0.03f);

    //    #region //初期化（変数群リセット）
    //    KO_ChieriPosTrssList.Clear();
    //    KO_KakurePosObjsList.Clear();

    //    KO_isChieriSightColOnTriggerStay =
    //    KO_ChieriMatagiColOnTriggerStayBool = false;

    //    //コルーチン重複防止・終了用
    //    isKOSystem =
    //    KO_chieriSerchCorBool =
    //    //以下は入れ子コルーチン
    //    KO_isChieriEyeRayColSystem =
    //    KO_ChieriWalkColBool =
    //    KO_ChieriHuseColBool =
    //    KO_ChieriKidukiColBool =
    //    KO_ChieriNayamuColBool = false;

    //    //智恵理視線ヒット判定用
    //    KO_isEyeHit =
    //    KO_isEyeRHit =
    //    KO_isEyeLHit =
    //    KO_HuseTansakuBool =
    //    KO_HakkenBool = false;

    //    //新ルーチン用
    //    nowTaskBool =
    //    GreenBool =
    //    YellowBool =
    //    RedBool =
    //    walkBool =
    //    huseBool =
    //    kidukiBool =
    //    kidukiWalkBool =
    //    kidukiHuseStartBool =
    //    kidukiHuseBool =
    //    kidukiHuseEndBool = false;


    //    KO_EyeHitCountFloat = 0;

    //    KO_NowChieriTaskInt = 1;

    //    KO_KakurePointSerchCorCoroutine =
    //    KO_ChieriSerchCorCoroutine = null;
    //    KO_NowChieriKakurenboEyeRayIEnum =
    //    KO_NowChieriKakurenboWalkIEnum =
    //    KO_NowChieriKakurenboHuseIEnum = null;
    //    #endregion //初期化（変数群リセット）

    //    //かくれおに プレイヤー移動システム コルーチン始動
    //    KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());

    //    #region システムロード後設定
    //    //プレイヤー位置と回転
    //    GameObject KO_PlayerStartPos00Obj = Resources.Load("_PosObj/C_KakureOni/KO_PlayerStartPos00Obj") as GameObject;
    //    CameraObjectsTrs.localPosition = KO_PlayerStartPos00Obj.transform.localPosition;
    //    CameraObjectsTrs.localRotation = KO_PlayerStartPos00Obj.transform.localRotation;

    //    //移動場所00オン
    //    KO_KakurePosObjsList[0].SetActive(true);
    //    #endregion


    //    //開幕
    //    FadeBlack(0, 2);
    //    yield return new WaitForSeconds(2f);


    //    goto テストスキップ;//■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

    //    yield return new WaitForSeconds(8f);

    //    //暗幕
    //    FadeBlack(1, 2);
    //    yield return new WaitForSeconds(2f);


    //    テストスキップ://■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

    //    //暗幕中設定
    //    MeshTrs.gameObject.SetActive(true);
    //    ChieriMotion("かくれおに探し歩きrootポーズ", 0f, 0);

    //    //■智恵理用ポジションリスト読み込み(00_KakurOni00を読みこむ)
    //    foreach (Transform x in EV_C_KakureOni.transform.Find("KO_ChieriPosTrss").transform
    //        .GetChild(0).transform)
    //    { KO_ChieriPosTrssList.Add(x); }
    //    //■ポジションリスト読み込んだので
    //    //かくれおに 智恵理行動システム コルーチン始動
    //    KO_ChieriSerchCorCoroutine = StartCoroutine(KO_ChieriSerchCor());

    //    //智恵理posリストアクティブON（※デバッグなので後で消す）
    //    EV_C_KakureOni.transform.Find("KO_ChieriPosTrss").transform
    //        .GetChild(0).gameObject.SetActive(true);

    //    //開幕
    //    FadeBlack(0, 2);
    //    yield return new WaitForSeconds(3f);

    //    Debug.Log("かくれおにメインイベントコルーチン終了");

    //    yield return new WaitForSeconds(Mathf.Infinity);

    //    //終了処理
    //    EventMove();

    //}
    //IEnumerator C0200()//C 脚のぼり
    //{
    //    if (debugEventMoveFlag == true)
    //    {
    //    }
    //    EventReset();
    //    yield return new WaitForSeconds(0.1f);

    //    //暗幕
    //    FadeBlack(1, 1);
    //    yield return new WaitForSeconds(1f);

    //    #region 脚登りシステムロード前設定
    //    //■オブジェクト群と事前設定
    //    isHwVisLock = true;//宿題ロック
    //                       //小物消し
    //    GrasstableTrs.gameObject.SetActive(false);
    //    DrillTrs.gameObject.SetActive(false);
    //    Drill_chieriTrs.gameObject.SetActive(false);
    //    SharpenObj.SetActive(false);
    //    KeshigomuObj.SetActive(false);
    //    HomeworkObjectsTrs.gameObject.SetActive(false);
    //    //智恵理ゼロ位置解除とアニメスピード
    //    DB.isChieriPosLock = false;
    //    girlAnim.speed = 0.1f;

    //    //大きさ
    //    ANstartPrevPlayerSize = nowPlayerLocalScale;
    //    nowPlayerLocalScale = new Vector3(0.05f, 0.05f, 0.05f);
    //    //智恵理モーション
    //    ChieriMotion("脚のぼり後ろ手", 0f, 0);
    //    #endregion

    //    //■脚のぼりシステム コルーチン始動
    //    StartCoroutine(AsinoboriSystem());
    //    #region 脚登りシステムロード後設定
    //    yield return null;
    //    //■ポジションセット
    //    //プレイヤー
    //    GameObject Player_01StartPosObj = Resources.Load("_PosObj/C_Asinobori/Player_01StartPosObj") as GameObject;
    //    CameraObjectsTrs.localPosition = Player_01StartPosObj.transform.localPosition;
    //    CameraObjectsTrs.localEulerAngles = Player_01StartPosObj.transform.localEulerAngles;

    //    //智恵理
    //    GameObject Chieri_01StartPosObj = Resources.Load("_PosObj/C_Asinobori/Chieri_01StartPosObj") as GameObject;
    //    GirlTrs.localPosition = Chieri_01StartPosObj.transform.localPosition;
    //    GirlTrs.localEulerAngles = Chieri_01StartPosObj.transform.localEulerAngles;

    //    //智恵理 プレイヤー顔見
    //    //顔見
    //    FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
    //    FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
    //    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
    //    DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

    //    //プレイヤー手半開き
    //    PlayerMotion("登り通常ループ", 0f, 2);
    //    PlayerMotion("登り通常ループ", 0f, 3);
    //    #endregion

    //    //智恵理スキンメッシュコリダー生成
    //    ReloadSkinMeshColliderSystemCor = StartCoroutine(ReloadSkinMeshColliderSystemIEnum());

    //    //開幕
    //    FadeBlack(0, 1);
    //    yield return new WaitForSeconds(1f);


    //    Debug.Log("脚のぼりメインイベントコルーチン終了");
    //    yield return new WaitForSeconds(Mathf.Infinity);

    //    //終了処理
    //    //大きさ
    //    nowPlayerLocalScale = ANstartPrevPlayerSize;

    //    EventMove();

    //}
    //IEnumerator C0300()//C 怪獣バトル
    //{
    //    if (debugEventMoveFlag == true)
    //    {
    //    }
    //    EventReset();
    //    yield return new WaitForSeconds(0.1f);

    //    //暗幕
    //    FadeBlack(1, 1);
    //    yield return new WaitForSeconds(1f);

    //    #region 怪獣バトルシステムロード前設定
    //    //■オブジェクト群と事前設定
    //    isHwVisLock = true;//宿題ロック
    //                       //小物消し
    //    GrasstableTrs.gameObject.SetActive(false);
    //    DrillTrs.gameObject.SetActive(false);
    //    Drill_chieriTrs.gameObject.SetActive(false);
    //    SharpenObj.SetActive(false);
    //    KeshigomuObj.SetActive(false);
    //    HomeworkObjectsTrs.gameObject.SetActive(false);
    //    //智恵理ゼロ位置解除とアニメスピード
    //    DB.isChieriPosLock = false;
    //    girlAnim.speed = 0.4f;

    //    //小物（箱オブジェ）なければ設置
    //    if (GameObject.Find("KB_KomonoObjs") == null)
    //    { KB_KomonoObjs = Instantiate(Resources.Load("EventSystem/KaijuBattle/Prefab/KB_KomonoObjs") as GameObject, GameObjectsTrs, false); }
    //    else { KB_KomonoObjs = GameObject.Find("KB_KomonoObjs"); }
    //    DB.evDelObjList.Add(KB_KomonoObjs);

    //    //大きさ
    //    KBstartPrevPlayerSize = nowPlayerLocalScale;
    //    nowPlayerLocalScale = new Vector3(0.2f, 0.2f, 0.2f);

    //    #endregion

    //    //■怪獣バトルシステム コルーチン始動
    //    KBSystemLoadIEnum = KaijuBattleSystemLoad();
    //    StartCoroutine(KBSystemLoadIEnum);

    //    #region 怪獣バトルシステムロード後設定

    //    //■ポジションとサイズセット(どうもちょいちょい変わるのでウェイト挟む)
    //    yield return new WaitForSeconds(0.1f);
    //    GirlTrs.position = KB_ChieriStartPosTrssList[0].position;
    //    GirlTrs.rotation = KB_ChieriStartPosTrssList[0].rotation;
    //    yield return new WaitForSeconds(0.1f);
    //    CameraObjectsTrs.position = KB_PlayerPosTrssList[0].position;
    //    CameraObjectsTrs.rotation = KB_PlayerPosTrssList[0].rotation;
    //    nowPlayerLocalScale = KB_PlayerPosTrssList[0].localScale;

    //    //智恵理のバトルIKパスのルート位置は智恵理の位置基準 （手の位置基準だと、アニメーター？の影響で変な位置になる）
    //    KB_ChieriBattlePathsTrs.position = GirlTrs.position;
    //    KB_ChieriBattlePathsTrs.rotation = GirlTrs.rotation;

    //    //智恵理 プレイヤー顔見
    //    FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
    //    FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
    //    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
    //    DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

    //    //プレイヤー手グー
    //    PlayerMotion("登りグーループ", 0f, 2);
    //    PlayerMotion("登りグーループ", 0f, 3);

    //    #region このイベントでの小物（怪獣・ぬいぐるみ）
    //    //■ポニーぬいぐるみ 智恵理の手になければ追加
    //    if (GirlLHandTrs.Find("BattlePony") == null)
    //    {
    //        KB_PonyObj = Instantiate(Resources.Load("EventSystem/KaijuBattle/Prefab/BattlePony") as GameObject);
    //        DB.evDelObjList.Add(KB_PonyObj);
    //        KB_PonyObj.transform.SetParent(GirlLHandTrs, false);
    //    }
    //    //編集用にすでに配置してある場合
    //    else { KB_PonyObj = GirlLHandTrs.Find("BattlePony").gameObject; }

    //    KB_ponyRenderer = KB_PonyObj.GetComponent<Renderer>();
    //    KB_ponyDefMaterial = KB_ponyRenderer.material;
    //    KB_ponyHPSlider = KB_PonyObj.transform.Find("HPSlider").GetComponent<Slider>();

    //    //■怪獣人形 智恵理の手になければ追加
    //    if (GirlLHandTrs.Find("Kaiju") == null)
    //    {
    //        KB_KaijuObj = Instantiate(Resources.Load("EventSystem/KaijuBattle/Prefab/Kaiju") as GameObject);
    //        DB.evDelObjList.Add(KB_KaijuObj);
    //        KB_KaijuObj.transform.SetParent(GirlLHandTrs, false);
    //    }
    //    //編集用にすでに配置してある場合
    //    else { KB_KaijuObj = GirlLHandTrs.Find("Kaiju").gameObject; }

    //    KB_kaijuRenderer = KB_KaijuObj.GetComponent<Renderer>();
    //    KB_kaijuDefMaterial = KB_kaijuRenderer.material;
    //    KB_kaijuHPSlider = KB_KaijuObj.transform.Find("HPSlider").GetComponent<Slider>();

    //    #endregion //このイベントでの小物（怪獣・ぬいぐるみ）



    //    #endregion //怪獣バトルシステムロード後設定

    //    //■1戦目 ポニー
    //    KB_KaijuObj.SetActive(false);
    //    KB_PonyObj.SetActive(true);
    //    //智恵理モーション
    //    ChieriMotion("ポニーバトルポーズ", 0f, 0);
    //    ChieriMotion("キリッ", 0.3f, 2, 0);

    //    Debug.Log("ポニーバトル準備完了");


    //    //開幕
    //    FadeBlack(0, 1);
    //    yield return new WaitForSeconds(1f);

    //    #region ■ループ
    //    while (Input.GetKeyDown(KeyCode.G) == false)
    //    {
    //        #region 戦闘デバッグ
    //        //タックル
    //        if (Input.GetKeyDown(KeyCode.V))
    //        {
    //            //PathTrsを名前からロードして
    //            KB_NowChieriPathLoad("PonyTacklePaths");
    //            //キャンセル用変数入れて再生
    //            StartCoroutine(KB_nowChieriPathMotionIEnum = KB_PonyTackleCor());
    //        }
    //        //引っかき
    //        if (Input.GetKeyDown(KeyCode.B))
    //        {
    //            KB_NowChieriPathLoad("PonyRTacklePaths");
    //            StartCoroutine(KB_nowChieriPathMotionIEnum = KB_PonyRTackleCor());
    //        }
    //        //挑発
    //        if (Input.GetKeyDown(KeyCode.F))
    //        {
    //            KB_NowChieriPathLoad("KaijuRHikkakiPaths");
    //            StartCoroutine(KB_nowChieriPathMotionIEnum = KB_KaijuRHikkakiCor());
    //        }

    //        //ダメージ
    //        if (ponyDamageBool == true)
    //        {
    //            ponyDamageBool = false;
    //            KB_NowChieriPathLoad("PonyDamagePaths");
    //            StartCoroutine(KB_nowChieriPathMotionIEnum = KB_PonyDamageCor());
    //        }

    //        //サイズ調整
    //        if (Input.GetKeyDown(KeyCode.N))
    //        {
    //            Vector3 tmpScale = nowPlayerLocalScale / 1.5f;
    //            DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x, tmpScale, 3f);
    //        }
    //        if (Input.GetKeyDown(KeyCode.M))
    //        {
    //            Vector3 tmpScale = nowPlayerLocalScale * 1.5f;
    //            DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x, tmpScale, 3f);
    //        }

    //        //パンチ操作ONOFF (押し合いOFFON)
    //        if (KB_punchEnabled == true && Input.GetKeyDown(KeyCode.X))
    //        {
    //            KB_punchEnabled = false;
    //            BattleOshiai(KB_PonyOshiaiPivotTrs, IKLHandTargetTrs);
    //        }
    //        else if (KB_punchEnabled == false && Input.GetKeyDown(KeyCode.X))
    //        {
    //            KB_punchEnabled = true;
    //            KB_BattleOshiaiBool = false;
    //        }
    //        #endregion //戦闘デバッグ

    //        yield return null;

    //    }
    //    #endregion //ループ

    //    //暗幕
    //    FadeBlack(1, 1);
    //    yield return new WaitForSeconds(1f);

    //    //■2戦目 バジラ
    //    KB_KaijuObj.SetActive(true);
    //    KB_PonyObj.SetActive(false);
    //    //智恵理モーション
    //    ChieriMotion("怪獣バトルポーズ", 0f, 0);
    //    ChieriMotion("キリッ", 0.3f, 2, 0);

    //    Debug.Log("バジラバトル準備完了");
    //    //開幕
    //    FadeBlack(0, 1);
    //    yield return new WaitForSeconds(1f);

    //    #region ■ループ
    //    while (Input.GetKeyDown(KeyCode.G) == false)
    //    {
    //        //タックル
    //        if (Input.GetKeyDown(KeyCode.V))
    //        {
    //            //PathTrsを名前からロードして
    //            KB_NowChieriPathLoad("KaijuTacklePaths");
    //            //キャンセル用変数入れて再生
    //            StartCoroutine(KB_nowChieriPathMotionIEnum = KB_KaijuTackleCor());
    //        }
    //        if (Input.GetKeyDown(KeyCode.B))
    //        {
    //            KB_NowChieriPathLoad("KaijuChouhatu00Paths");
    //            StartCoroutine(KB_nowChieriPathMotionIEnum = KB_KaijuChouhatu00Cor());
    //        }
    //        if (Input.GetKeyDown(KeyCode.F))
    //        {
    //            KB_NowChieriPathLoad("KaijuRHikkakiPaths");
    //            StartCoroutine(KB_nowChieriPathMotionIEnum = KB_KaijuRHikkakiCor());
    //        }

    //        //サイズ調整
    //        if (Input.GetKeyDown(KeyCode.N))
    //        {
    //            Vector3 tmpScale = nowPlayerLocalScale / 1.5f;
    //            DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x, tmpScale, 3f);
    //        }
    //        if (Input.GetKeyDown(KeyCode.M))
    //        {
    //            Vector3 tmpScale = nowPlayerLocalScale * 1.5f;
    //            DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x, tmpScale, 3f);
    //        }

    //        //パンチ操作ONOFF (押し合いOFFON)
    //        if (KB_punchEnabled == true && Input.GetKeyDown(KeyCode.X))
    //        {
    //            KB_punchEnabled = false;
    //            BattleOshiai(KB_KaijuOshiaiPivotTrs, IKLHandTargetTrs);
    //        }
    //        else if (KB_punchEnabled == false && Input.GetKeyDown(KeyCode.X))
    //        {
    //            KB_punchEnabled = true;
    //            KB_BattleOshiaiBool = false;
    //        }
    //        yield return null;
    //    }
    //    #endregion //ループ


    //    #region ■智恵理立ち上がり開始
    //    Debug.Log("智恵理立ち上がり開始");
    //    girlAnim.speed = 0.5f;

    //    //■智恵理右足コリダーObj生成
    //    if (GirlRFootTrs.Find("Tsumasaki_R_coll") == null)
    //    { KB_Tsumasaki_R_collObj = Instantiate(Resources.Load("Main/Prefab/ChieriCollider/Tsumasaki_R_coll") as GameObject, GirlRFootTrs, false); }
    //    //編集用にすでに配置してある場合
    //    else { KB_Tsumasaki_R_collObj = GirlRFootTrs.Find("Tsumasaki_R_coll").gameObject; }
    //    DB.evDelObjList.Add(KB_Tsumasaki_R_collObj);

    //    //コリダー
    //    KB_Tsumasaki_R_Collider = KB_Tsumasaki_R_collObj.GetComponent<Collider>();
    //    //無闇に箱飛ばさないようにコリダーをオフ
    //    KB_Tsumasaki_R_Collider.enabled = false;

    //    while (Input.GetKeyDown(KeyCode.G) == false)
    //    { yield return null; }

    //    //「ふふん・・・バジラくん」
    //    ChieriMotion("f_む～", 0.3f, 2, 0);
    //    Hukidashi("C3310");


    //    yield return new WaitForSeconds(1.6f / girlAnim.speed);
    //    ChieriMotion("キリッ", 0.3f, 2, 0);


    //    ChieriMotion("怪獣バトル立ち上がり", 0.4f, 0);

    //    //「こうなったらもう」
    //    Hukidashi("C3320");
    //    yield return new WaitForSeconds(1.2f / girlAnim.speed);

    //    //怪獣手放し
    //    KB_KaijuTebanashiBool = true;
    //    while (KB_KaijuTebanashiBool)
    //    { yield return null; }
    //    yield return new WaitForSeconds(0.8f / girlAnim.speed);

    //    //「私が直接」
    //    Hukidashi("C3330");
    //    yield return new WaitForSeconds(4 / girlAnim.speed);

    //    //「覚悟はいい？」
    //    ChieriMotion("f_こうするとー・・", 0.5f, 2);
    //    Hukidashi("C3340");
    //    yield return new WaitForSeconds(2.8f / girlAnim.speed);

    //    //「仇！」
    //    ChieriMotion("f_口開き笑顔", 0.3f, 2, 0);
    //    Hukidashi("C3350");
    //    yield return new WaitForSeconds(0.4f / girlAnim.speed);
    //    ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2, 0);
    //    yield return new WaitForSeconds(1f / girlAnim.speed);

    //    //なぐれる・蹴飛ばされるようにコリダーON
    //    KB_Tsumasaki_R_Collider.enabled = true;
    //    //コリダーのレイヤー変更
    //    KB_Tsumasaki_R_collObj.layer = LayerMask.NameToLayer("seeRayBlock");

    //    //■揺れ1
    //    Vector3
    //        tmpDefCameraPos = CameraAnchorTrs.localPosition,
    //        tmpFlowCameraPos = new Vector3(0, 1.2f, 0);
    //    SEPlay("足音1_footsteps_shoe_grass_walk_03");

    //    CameraAnchorTrs.DOLocalMove(tmpFlowCameraPos, 0.05f);
    //    yield return new WaitForSeconds(0.05f);
    //    CameraAnchorTrs.DOLocalMove(tmpDefCameraPos, 0.5f).SetEase(Ease.OutBounce);

    //    yield return new WaitForSeconds(4f / girlAnim.speed);

    //    //「そろそろ私の番かな」
    //    Hukidashi("C3400");
    //    //コリダーのレイヤー変更（押し合い用）
    //    KB_Tsumasaki_R_collObj.layer = LayerMask.NameToLayer("OshiaiColl");
    //    //蹴られ待ち
    //    while (KB_HeadEnterBool == false) { yield return null; }
    //    Debug.Log("けられた");
    //    KB_punchEnabled = false;
    //    //倒れ位置読み取り
    //    Transform tmpKerareTrs = KB_PlayerPosTrssList[1];

    //    CameraAnchorTrs.localPosition = CameraAnchorTrs.localEulerAngles = Vector3.zero;
    //    //エフェクト付移動
    //    SEPlay("足音1_footsteps_shoe_grass_walk_03");
    //    CameraObjectsTrs.position = tmpKerareTrs.position;
    //    CameraObjectsTrs.rotation = tmpKerareTrs.rotation;

    //    yield return new WaitForSeconds(1.4f / girlAnim.speed);

    //    //「おもちゃと変わんない」
    //    ChieriMotion("f_玩具と変わんないね", 0.3f, 2, 0);
    //    TereHoho(true, 4f / girlAnim.speed);
    //    Hukidashi("C3420");

    //    //押し合いコルーチンスタート
    //    BattleAshiuraOshiai();

    //    #region //IK足裏押しあい（やめた）
    //    ////■足裏と押し合い
    //    ////押し合いピボットの位置を足裏コリダーの子のピボット位置に
    //    //KB_ChieriRFootOshiaiPivotTrs.position = KB_Tsumasaki_R_collObj.transform.GetChild(0).position;

    //    ////■IKターゲット初期位置へ移動
    //    //IKRFootTargetTrs.position = KB_ChieriRFootOshiaiPivotTrs.GetChild(0).transform.position;
    //    //IKRFootTargetTrs.rotation = KB_ChieriRFootOshiaiPivotTrs.GetChild(0).transform.rotation;

    //    ////FinalIK事前に一瞬でON（フェードインすると足が移動してしまうので）
    //    //DOTweenToIKEfPos(IKRFootEf, 1, 0);
    //    //DOTweenToIKEfRot(IKRFootEf, 1, 0);

    //    ////コルーチン開始
    //    //BattleOshiai(KB_ChieriRFootOshiaiPivotTrs, IKRFootTargetTrs);
    //    #endregion

    //    yield return new WaitForSeconds(3.2f / girlAnim.speed);


    //    Debug.Log("智恵理立ち上がりイベント終了");
    //    #endregion


    //    yield return new WaitForSeconds(Mathf.Infinity);

    //    //終了処理
    //    //大きさ
    //    nowPlayerLocalScale = ANstartPrevPlayerSize;

    //    Destroy(KB_KomonoObjs);

    //    EventMove();
    //}
    //IEnumerator C0500()//C チャイム
    //{
    //    if (debugEventMoveFlag == true)
    //    {
    //    }
    //    EventReset();
    //    yield return null;

    //    #region 暗幕中設定
    //    ChieriMotion("座り待機", 0f, 0, 0);
    //    ChieriMotion("笑顔01口眉_目閉じない", 0f, 2, 0);

    //    //カメラ位置
    //    GameObject Player_01_StartPosObj = Resources.Load("_PosObj/C01_HayaruKimochi/Modositehosii/Player_01_StartPosObj") as GameObject;
    //    CameraObjectsTrs.SetParent(GameObjectsTrs);
    //    CameraObjectsTrs.localPosition = Player_01_StartPosObj.transform.localPosition;
    //    CameraObjectsTrs.localEulerAngles = Vector3.zero;

    //    //アニメスピード
    //    girlAnim.speed = 0.5f;
    //    //大きさ
    //    nowPlayerLocalScale = new Vector3(0.03f, 0.03f, 0.03f);

    //    //プレイヤー見る　
    //    FollowDOMove(IKLookAtEyeTargetTrs, PlayerTargetTrs);
    //    FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0.05f, -0.15f, 0));
    //    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
    //    DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

    //    //消しゴムペアレント
    //    KeshigomuObj.transform.SetParent(RoomTrs);
    //    KeshigomuObj.transform.localPosition = Keshigomu_C_Modositehosii_table_Room_ParameterTrs.localPosition;
    //    KeshigomuObj.transform.localEulerAngles = Keshigomu_C_Modositehosii_table_Room_ParameterTrs.localEulerAngles;
    //    KeshigomuObj.SetActive(true);

    //    //ドリルどうするか
    //    Drill_chieriTrs.gameObject.SetActive(false);

    //    //■ライトマッピング 夕暮れに


    //    //■PosObj事前読み込み
    //    GameObject ChieriLookTargetPos_00_MadoYokomeObj = Resources.Load("_PosObj/C_Chime/ChieriLookTargetPos_00_MadoYokomeObj") as GameObject;
    //    GameObject ChieriLookTargetPos_01_MadoMiruObj = Resources.Load("_PosObj/C_Chime/ChieriLookTargetPos_01_MadoMiruObj") as GameObject;
    //    GameObject ChieriLookTargetPos_02_NanameUtsumukiObj = Resources.Load("_PosObj/C_Chime/ChieriLookTargetPos_02_NanameUtsumukiObj") as GameObject;


    //    #endregion 暗幕中設定

    //    //開幕
    //    FadeBlack(0, 3);
    //    DOTween.To(() => speaker.audioSource.volume, (x) => speaker.audioSource.volume = x, 0.5f, 3);
    //    DOTween.To(() => aircon.audioSource.volume, (x) => aircon.audioSource.volume = x, 1f, 3);
    //    yield return new WaitForSeconds(3);

    //    //「じゃあ次はね」
    //    Hukidashi("C5010");
    //    ChieriMotion("笑顔01口眉", 0.05f, 2);
    //    ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
    //    yield return new WaitForSeconds(5);

    //    //■チャイム
    //    SEPlay(ChimeSEObj, "tooki", GameObject.Find("ChimeSpeaker"), 0.4f);

    //    //窓の方へ向くアクション
    //    yield return new WaitForSeconds(1);
    //    FollowDOMove(IKLookAtEyeTargetTrs, ChieriLookTargetPos_00_MadoYokomeObj.transform.localPosition, 0.5f);
    //    ChieriMotion("_noData", 1f, 2);
    //    yield return new WaitForSeconds(1);
    //    FollowDOMove(IKLookAtHeadTargetTrs, ChieriLookTargetPos_00_MadoYokomeObj.transform.localPosition + new Vector3(0.05f, -0.15f, 0), 1f);

    //    //まばたき単品
    //    ChieriMotion("まばたき", 0f, 4);
    //    blinkTime = 0;

    //    yield return new WaitForSeconds(1);
    //    FollowDOMove(IKLookAtEyeTargetTrs, ChieriLookTargetPos_01_MadoMiruObj.transform.localPosition, 8f);
    //    FollowDOMove(IKLookAtHeadTargetTrs, ChieriLookTargetPos_01_MadoMiruObj.transform.localPosition, 8f);
    //    ChieriMotion("f_私だけなのかな・・？", 4f, 2);

    //    //「・・・あ」
    //    Hukidashi("C5020");
    //    yield return KeyOrWait(5);

    //    //「もうこんな時間」
    //    Hukidashi("C5030");
    //    yield return KeyOrWait(5);


    //    //■■ここで転送都市か大大偏愛か分岐



    //    yield return new WaitForSeconds(3);
    //    //「・・・」
    //    Hukidashi("C5040");
    //    //斜めうつむき
    //    FollowDOMove(IKLookAtEyeTargetTrs, ChieriLookTargetPos_02_NanameUtsumukiObj.transform.localPosition, 8f);
    //    FollowDOMove(IKLookAtHeadTargetTrs, ChieriLookTargetPos_02_NanameUtsumukiObj.transform.localPosition, 8f);
    //    ChieriMotion("宿題うーん・・", 8f, 2);
    //    yield return KeyOrWait(5);

    //    yield return new WaitForSeconds(5);


    //    //■切り選択候補 （ひとつ選択肢にしておく）

    //    //「どうしたの？」「宿題しないと・・」
    //    Sentakushi("■C5050a");
    //    Sentakushi("■C5050b");
    //    sentakuListNum = 99;//初期化
    //                        //選択肢選ばれるまでループ
    //    while (sentakuListNum == 99) { yield return null; }
    //    yield return null;
    //    switch (sentakuListNum)
    //    {
    //        case 0://選択肢a
    //            break;
    //        case 1://選択肢b
    //            break;
    //        case -1://選択肢z 無言
    //            break;
    //    }

    //    //プレイヤーをゆっくり見る　目だけ早めで
    //    FollowDOMove(IKLookAtEyeTargetTrs, PlayerTargetTrs, 3f);
    //    FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0.05f, -0.15f, 0), 12f);

    //    yield return new WaitForSeconds(5);
    //    ChieriMotion("笑顔02アルカイック口眉", 8f, 2);

    //    //■切り選択候補 ひとつ

    //    //「・・・ん？」「もしもーし」
    //    Sentakushi("■C5060a");
    //    Sentakushi("■C5060b");
    //    sentakuListNum = 99;//初期化
    //                        //選択肢選ばれるまでループ
    //    while (sentakuListNum == 99) { yield return null; }
    //    yield return null;
    //    switch (sentakuListNum)
    //    {
    //        case 0://選択肢a
    //            break;
    //        case 1://選択肢b
    //            break;
    //        case -1://選択肢z 無言
    //            break;
    //    }

    //    yield return new WaitForSeconds(5);

    //    ChieriMotion("笑顔01口眉", 0.1f, 2);
    //    ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

    //    yield return new WaitForSeconds(1f);


    //    //暗幕
    //    FadeBlack(1, 1);
    //    yield return new WaitForSeconds(1f);

    //    EventMove("大大偏愛");

    //}
    #endregion

    IEnumerator A0010()//宿題開始
    {
        if (debugEventMoveFlag == true)
        {
            #region デバッグ移動設定
            //宿題システムスタート
            #region 宿題初期値設定
            //攻撃力, 集中力, 集中力回復量, お金, 値段, 集中力減退量
            DB.HwPowFloat = 1;            //攻撃力
            DB.HwConcFloat = 20;          //集中力(スタミナ)
            DB.HwConcCureFloat = 0.5f;    //集中力回復量
            DB.HwConcDownFloat = 1;       //集中力減退量
            DB.HwMoneyFloat = 24;          //お金
            DB.HwPriceFloat = 10;         //値段（倍数）
            DB.HwConcCurRhythmFloat = 3;  //回復が始まるまでの時間
            DB.HwAttackRhythmMaxFloat = 1.0f;//攻撃の間隔スピード
            DB.HwPointLocalScale = new Vector3(0.01f, 0.0001f, 0.01f);

            DB.HwStageClearCountInt = 0;
            DB.HwAllEnmKillCountInt = 0;
            #endregion
            StartCoroutine(HomeworkSystem());
            //宿題2ページ目へ
            HwPageForceMove(2);

            ChieriMotion("08宿題しながら待機", 0f, 0);//デバッグ用アニメ直接再生

            //デバッグなのでいきなりペン持つ
            SharpenObj.transform.SetParent(GirlRhitosashi02Trs);
            SharpenObj.transform.localPosition = Sharpen_syukudai_GirlRhitosashi02_ParameterTrs.localPosition;
            SharpenObj.transform.localEulerAngles = Sharpen_syukudai_GirlRhitosashi02_ParameterTrs.localEulerAngles;

            //アニメスピードとターゲットペアレント
            girlAnim.speed = 1;
            CameraObjectsTrs.SetParent(GameObjectsTrs);
            IKRHandTargetTrs.SetParent(GirlIKTargetsTrs);
            IKLookAtEyeTargetTrs.SetParent(GirlIKTargetsTrs);
            IKLookAtHeadTargetTrs.SetParent(GirlIKTargetsTrs);

            //宿題見る
            FollowDOMove(IKLookAtEyeTargetTrs, Drill_chieriTrs, 0f);
            FollowDOMove(IKLookAtHeadTargetTrs, Drill_chieriTrs, 0f);
            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
            DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0f);

            CameraReset();

            #endregion
        }
        EventReset();
        yield return new WaitForSeconds(0.1f);

        #region 設定と宿題イベント初期化
        //智恵理見てる量計測システム起動
        StartCoroutine(SeeGirlSystem());

        //IK宿題見る
        FollowDOMove(IKLookAtEyeTargetTrs, Drill_chieriTrs, 2);
        FollowDOMove(IKLookAtHeadTargetTrs, Drill_chieriTrs, 2);
        DOTweenToLAIKSEyes(LAIKEyeS, chieriLookDrillEyeWeight, 1);
        DOTweenToLAIKSHead(LAIKHeadS, chieriLookDrillHeadWeight, 1);
        ChieriMotionDelay(2, "_noData", 2f, 2);//時間差表情戻し

        //通常待機モーション開始
        NowA0010ChieriCor = StartCoroutine(ChieriHWTaiki());

        //見つめ段階初期化
        ChieriHWPlayerLookDankaiInt = 0;

        //イベントトリガーHwEnm取得
        HwEnmD_EvSumahoZero_8Obj = HwStageTrs.Find("HwStage02").Find("HwEnmD_EvSumahoZero_8").gameObject;
        HwEnmC_EvSumahoOne_12Obj = HwStageTrs.Find("HwStage03").Find("HwEnmC_EvSumahoOne_12").gameObject;
        HwEnmB_EvSumahoTwo_20Obj = HwStageTrs.Find("HwStage04").Find("HwEnmB_EvSumahoTwo_20").gameObject;

        bool //↑それぞれイベント待機中かどうか
            isSumahoIziriMatiZero = true,
            isSumahoIziriMatiOne = false,
            isSumahoIziriMatiTwo = false,
            isHwStageClearDeKyuukei = false;//最後に智恵理見なかったら、宿題進めたら休憩に入る用フラグ

        //ひとまずプレイヤーが智恵理を見てるカウンタ（これが増えると智恵理もこっち見る）
        float tmpPlayerChieriLookTime = 0;

        //2段階目まで縮小済んで、そのままページめくったら休憩に入る判定用
        int tmpPrevHwStageClearCountInt = 4;
        #endregion

        //リズムアップアイテム設置
        Instantiate(Resources.Load("EventSystem/Homework/EnemyGimic/ItemRhythmUp") as GameObject
            , HwStagesTrsList[HwNowStageInt].transform
            , false);

        isHwVisLock = false;

        while (true)
        {
            #region 見つめあいイベ（通常時（スマホ弄り も こっち見 も ノベル表示 も 休憩フラグ も していない時）智恵理見てると、智恵理もこっち見てくる）
            if (isNovelSetVisIng == false
                && ChieriHWPlayerLookCor == null
                && isHwStageClearDeKyuukei == false
                || (DB.isDebugMode && Input.GetKeyDown(KeyCode.V)))
            {
                //顔を見たらカウントアップ 
                if (seeHeadNomFlt > evA0010seeHeadRangeFloat)
                { tmpPlayerChieriLookTime += 1 * Time.deltaTime; }
                else //見てなくても僅かにカウントアップ
                { tmpPlayerChieriLookTime += 0.3f * Time.deltaTime; }
                //↑合計5になったら智恵理こっち見てリセット
                if (tmpPlayerChieriLookTime > 5)
                {
                    Debug.Log("智恵理見はじめた");
                    ChieriHWPlayerLookCor = StartCoroutine(ChieriHWPlayerLook());
                    tmpPlayerChieriLookTime = 0;
                }
            }
            #endregion

            //特定のページでレベルアップアイテム出現

            //特定の宿題の敵ダメージリストに入ったら（ダメージ与えたら）スマホ弄りスタート 0 1 2
            #region 0
            if (isSumahoIziriMatiZero
                && HwColDmgList.Contains(HwEnmD_EvSumahoZero_8Obj)
                || (DB.isDebugMode && Input.GetKeyDown(KeyCode.F)))
            {
                //0段階目終了 1段階目待ち開始
                isSumahoIziriMatiZero = false;
                isSumahoIziriMatiOne = true;

                //通常待機モーションストップ
                StopCoroutine(NowA0010ChieriCor); NowA0010ChieriCor = null;
                //智恵理見中だったら終わるまで待機
                while (ChieriHWPlayerLookCor != null)
                { yield return null; }

                Debug.Log("智恵理スマホいじりはじめた");

                //スマホ弄りイベント開始し、終了まで待機
                yield return NowA0010ChieriCor = StartCoroutine(ChieriHWKakureSumaho(0));
                //通常待機モーション開始
                NowA0010ChieriCor = StartCoroutine(ChieriHWTaiki());
                //智恵理見カウントリセット
                tmpPlayerChieriLookTime = 0;
            }
            #endregion
            #region 1
            if (isSumahoIziriMatiOne
                && HwColDmgList.Contains(HwEnmC_EvSumahoOne_12Obj)
                || (DB.isDebugMode && Input.GetKeyDown(KeyCode.G)))
            {
                //1段階目終了 2段階目待ち開始
                isSumahoIziriMatiOne = false;
                isSumahoIziriMatiTwo = true;

                //通常待機モーションストップ
                StopCoroutine(NowA0010ChieriCor); NowA0010ChieriCor = null;
                //智恵理見中だったら終わるまで待機
                while (ChieriHWPlayerLookCor != null)
                { yield return null; }

                Debug.Log("智恵理スマホいじりはじめた");

                //スマホ弄りイベント開始し、終了まで待機
                yield return NowA0010ChieriCor = StartCoroutine(ChieriHWKakureSumaho(1));
                //通常待機モーション開始
                NowA0010ChieriCor = StartCoroutine(ChieriHWTaiki());
                //智恵理見カウントリセット
                tmpPlayerChieriLookTime = 0;
            }
            #endregion
            #region 2
            if (isSumahoIziriMatiTwo
                && HwColDmgList.Contains(HwEnmB_EvSumahoTwo_20Obj)
                || (DB.isDebugMode && Input.GetKeyDown(KeyCode.H)))
            {
                //2段階目終了
                isSumahoIziriMatiTwo = false;

                //宿題そのページクリア時に自動で止まるBool ON
                isHwClearEventWait = true;

                //■宿題そのページ全問解いたら休憩に入るフラグ立て
                tmpPrevHwStageClearCountInt = HwStageClearCountInt;
                isHwStageClearDeKyuukei = true;
                Debug.Log("休憩フラグ");

                //通常待機モーションストップ
                StopCoroutine(NowA0010ChieriCor); NowA0010ChieriCor = null;
                //智恵理見中だったら終わるまで待機
                while (ChieriHWPlayerLookCor != null)
                { yield return null; }

                Debug.Log("智恵理スマホいじりはじめた");


                //スマホ弄りイベント開始し、終了まで待機
                yield return NowA0010ChieriCor = StartCoroutine(ChieriHWKakureSumaho(2));
                //通常待機モーション開始
                NowA0010ChieriCor = StartCoroutine(ChieriHWTaiki());
                //智恵理見カウントリセット
                tmpPlayerChieriLookTime = 0;
            }
            #endregion

            #region 2段階目まで縮小済んで、智恵理に気づかず、宿題解いたら自分から休憩に入る

            if (isHwStageClearDeKyuukei
                && HwStageClearCountInt > tmpPrevHwStageClearCountInt)//ページ終わった（クリアステージ数増えた）ら
            {
                //宿題待機ループ終了
                StopCoroutine(NowA0010ChieriCor);

                EventMove();
                yield break;
            }
            #endregion


            #region //参考書イベント

            //if (Input.GetKeyDown(KeyCode.M))
            //{

            //    //ランダムモーション停止
            //    bunkiTaikiBool01 = true;
            //    //うーん・・
            //    Hukidashi("A0300");
            //    ChieriMotion("宿題うーん・・", 1.7f, 2);

            //    yield return KeyOrWait(5);

            //    //本棚見る動き
            //    FollowDOMove(IKLookAtHeadTargetTrs, new Vector3(-2.2f, 0.4f, 2.7f));
            //    FollowDOMove(IKLookAtEyeTargetTrs, new Vector3(-2.2f, 0.4f, 2.7f));
            //    DOTweenToLAIKSEyes(LAIKEyeS, 1, 1);
            //    DOTweenToLAIKSHead(LAIKHeadS, 0.8f, 1);
            //    yield return new WaitForSeconds(0.3f);

            //    //「えーと参考書」参考書取りに行く
            //    ChieriMotion("参考書取りに行く", 1f, 0);//デバッグ用アニメ直接再生
            //    Hukidashi("A0310");


            //    yield return new WaitForSeconds(5);
            //    DOTweenToLAIKSEyes(LAIKEyeS, 0, 1);
            //    DOTweenToLAIKSHead(LAIKHeadS, 0f, 1);

            //    //「数学の」
            //    Hukidashi("A0320");
            //    yield return new WaitForSeconds(5);
            //    //「あれ？」
            //    Hukidashi("A0330");
            //    yield return new WaitForSeconds(1);
            //    //「ない？」
            //    Hukidashi("A0340");
            //    yield return new WaitForSeconds(3);
            //    //「確かここに・・」
            //    Hukidashi("A0350");
            //    yield return new WaitForSeconds(4);

            //    //18秒後「あったあった」
            //    Hukidashi("A0400");
            //    ChieriMotion("笑顔01口眉", 1.7f, 2);

            //    yield return new WaitForSeconds(5);

            //    ChieriMotion("_noData", 0.4f, 2);

            //}

            #endregion
            yield return null;
        }


        //終了処理
        EventMove();

    }
    #region ┗■宿題時に縮めたり目が合ったり等のコルーチン群

    Coroutine //Nowはスマホ弄りと通常待機を入れ替えて使ってる
        NowA0010ChieriCor = null,
        ChieriHWPlayerLookCor = null;

    GameObject //イベントトリガーになっているHWEnemy
        HwEnmD_EvSumahoZero_8Obj,
        HwEnmC_EvSumahoOne_12Obj,
        HwEnmB_EvSumahoTwo_20Obj;

    float //顔見てる判定のしきい値
        evA0010seeHeadRangeFloat = 4;

    float //智恵理IK宿題見るウェイト
        chieriLookDrillEyeWeight = 1,
        chieriLookDrillHeadWeight = 0;

    //隠れてスマホいじって縮小するイベント
    IEnumerator ChieriHWKakureSumaho(int evDankai = 0)
    {
        ChieriMotion("宿題待機からスマホ取り出しループ", 0.4f, 0);

        #region スマホ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, 2f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.55f, 2);
        #endregion

        #region ■ペン消しゴム置くまで待機して 置く
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "宿題待機からペン消しゴム置く") { yield return null; }
        while (girlAnimNomTime <= 0.4f) { yield return null; }
        isGirlAnimReadSystem = false;

        //ペン置く
        SharpenObj.transform.SetParent(RoomTrs);
        SharpenObj.transform.localPosition = Sharpen_table_Room_ParameterTrs.localPosition;
        SharpenObj.transform.localEulerAngles = Sharpen_table_Room_ParameterTrs.localEulerAngles;
        //消しゴム置く
        KeshigomuObj.transform.SetParent(RoomTrs);
        KeshigomuObj.transform.localPosition = Keshigomu_table_Room_ParameterTrs.localPosition;
        KeshigomuObj.transform.localEulerAngles = Keshigomu_table_Room_ParameterTrs.localEulerAngles;

        #endregion

        #region ■スマホ取り出しまで待機して スマホON スマホ見る
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "座りスマホ取り出し") { yield return null; }
        while (girlAnimNomTime <= 0.6f) { yield return null; }
        isGirlAnimReadSystem = false;

        //スマホObjオン（取り出し）
        ChieriSumahoObj.SetActive(true);
        //画面つける（画面更新も一緒に起動される）
        ChieriSumahoPower(true);
        #endregion

        yield return new WaitForSeconds(2);

        #region ■目眩リトルとDOTWeenTOでプレイヤーサイズ縮小

        //段階別で目眩具合と縮小度変更して縮小


        Vector3 tmpScale = DB.playerScale_HwZero;
        float tmpMemai = 0.2f;

        if (evDankai == 0)
        {
            tmpScale = DB.playerScale_HwZero;
            tmpMemai = 0.2f;
        }
        else if (evDankai == 1)
        {
            tmpScale = DB.playerScale_HwOne;
            tmpMemai = 0.4f;
        }
        else if (evDankai == 2)
        {
            tmpScale = DB.playerScale_HwTwo;
            tmpMemai = 1f;
        }


        PPv2MemaiLittle(tmpMemai);

        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
        , tmpScale, 20f);
        SEPlay("magic-attack-darkness1", 0.02f);
        #endregion

        #region プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 4f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.55f, 4);
        #endregion

        #region ■■様子見ループ（目（顔）視線合えば目合いへ）(3秒見なければスマホゆっくり戻し)
        float tmpTiramiTime = 0;
        while (tmpTiramiTime < 3)
        {
            //顔を見たらイベント
            if (seeHeadNomFlt > evA0010seeHeadRangeFloat)
            { goto 目合いスマホ時; }
            //顔見てない場合はチラ見タイム増
            else
            { tmpTiramiTime += 1 * Time.deltaTime; }

            yield return null;
        }
        goto スマホゆっくり戻し;
        #endregion


        目合いスマホ時:
        #region 照れながら急いでスマホ戻し■イベント段階で変わる部分
        #region プレイヤー急いでがん見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0.3f);
        DOTweenToLAIKSHead(LAIKHeadS, 1f, 0.3f);
        #endregion

        #region animパラメータ4倍速（慌てて）
        float tmpSpeed = 0;
        //DOTWeenTO
        DOTween.To(() => tmpSpeed, (x) => tmpSpeed = x, 4f, 0.3f)
            .OnUpdate(() =>//更新
                    { girlAnim.SetFloat("テーブル宿題スピード", tmpSpeed); });
        #endregion

        #region リアクション 段階別にifがある
        ChieriMotion("f_え？？", 0.7f, 2);
        ChieriMotionDelay(2, "f_笑顔目開き", 0.1f, 2);//時間差表情戻し
        AseTare(Mathf.Infinity);
        TereHohoAlphaChange(0.5f);
        TereHoho(1);


        #region ■■■■■イベント段階で台詞変え 　「！　ん？　なになになに？」
        if (evDankai == 0) { Hukidashi("A0530"); }//ん？なになになに？
        else if (evDankai == 1) { Hukidashi("A0550"); }//！　どうしたの？
        else if (evDankai == 2) { NovelSetVis("□A0560"); }//画面にノイズ
        #endregion

        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        yield return new WaitForSeconds(0.1f);
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;


        ChieriMotion("座りスマホしまいから宿題待機", 1f, 0);

        #region ■スマホしまいまで待機して スマホOFF
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "座りスマホしまい") { yield return null; }
        while (girlAnimNomTime <= 0.5f) { yield return null; }
        isGirlAnimReadSystem = false;

        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        yield return new WaitForSeconds(0.1f);
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        //スマホ消し
        ChieriSumahoObj.SetActive(false);
        #endregion

        #region animパラメータ4倍速（慌てて戻る）
        tmpSpeed = 4;
        //DOTWeenTO
        DOTween.To(() => tmpSpeed, (x) => tmpSpeed = x, 1.5f, 0.3f)
            .OnUpdate(() =>//更新
                    { girlAnim.SetFloat("テーブル宿題スピード", tmpSpeed); });
        #endregion

        #region ■ペン消しゴム持ちまで待機して 持つ
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "おー") { yield return null; }
        while (girlAnimNomTime <= 0.95f) { yield return null; }
        isGirlAnimReadSystem = false;

        //ペン持つ
        SharpenObj.transform.SetParent(GirlRhitosashi02Trs);
        SharpenObj.transform.localPosition = Sharpen_syukudai_GirlRhitosashi02_ParameterTrs.localPosition;
        SharpenObj.transform.localEulerAngles = Sharpen_syukudai_GirlRhitosashi02_ParameterTrs.localEulerAngles;

        #endregion

        #region 宿題モーションとめ
        tmpSpeed = 1.5f;
        //DOTWeenTO
        DOTween.To(() => tmpSpeed, (x) => tmpSpeed = x, 0, 2f)
            .OnUpdate(() =>//更新
                    { girlAnim.SetFloat("テーブル宿題スピード", tmpSpeed); });

        #endregion

        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        yield return new WaitForSeconds(0.1f);
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        yield return new WaitForSeconds(1);
        ChieriMotion("笑顔01口眉", 0.7f, 2);
        ChieriMotionDelay(5, "f_笑顔目開き", 0.1f, 2);//時間差表情戻し

        #region ■■■■■イベント段階で変え  「え、いや……（慌ててる？）」
        DelAll_Hukidashi();//ここでセリフでないことがあるのでためしに消して1フレ待ち
        yield return null;

        if (evDankai == 0)
        { NovelSetVis("A0540"); }//え、いや　（慌ててる？）
        else if (evDankai == 1)
        { NovelSetVis("A0550"); }//なにかいじってるように見えた
        else if (evDankai == 2)
        {
            Hukidashi("A0570");//え？　あ、画面が変？
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            NovelSetVis("□A0565");//いや、なおったかな？
            while (isNovelSetVisIng) { yield return null; }
            yield return new WaitForSeconds(1);

            Hukidashi("A0580");//頭が疲れてきてるのかも？
            ChieriMotion("f_あ、えっとー・・", 0.7f, 2);

            //ツイストOFF 
            isKataTwistAuto = false;
            #region 指（シャーペン）顔右下たて
            ChieriMotion("ひとさし指差し", 0.5f, 5);

            //IKTargetをペアレントしてゆらゆらに追従
            IKRHandTargetTrs.SetParent(Bip001HeadTrs);

            GameObject KaoMigishitaYubitate01_IKRHand_PareBip001HeadPosObj
                = Resources.Load("_PosObj/_ParentPoseObjs/KaoMigishitaYubitate01_IKRHand_PareBip001HeadPosObj") as GameObject;
            IKRHandTargetTrs.localPosition = KaoMigishitaYubitate01_IKRHand_PareBip001HeadPosObj.transform.localPosition;
            IKRHandTargetTrs.localEulerAngles = KaoMigishitaYubitate01_IKRHand_PareBip001HeadPosObj.transform.localEulerAngles;

            yield return null;

            //右手IKON
            DOTweenToIKEfPos(IKRHandEf, 1, 1.5f);
            DOTweenToIKEfRot(IKRHandEf, 1, 1.5f);

            #endregion

            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            ChieriMotion("笑顔01口眉", 0.7f, 2);
            ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

            //右手IKOFF 指差しやめ
            DOTweenToIKEfPos(IKRHandEf, 0, 1.5f);
            DOTweenToIKEfRot(IKRHandEf, 0, 1.5f);
            ChieriMotion("_noData", 0.5f, 5);

            AseTare(5f, false);
            TereHoho(false, 10f);


            NovelSetVis("□A0570");//ああそっか
        }
        #endregion



        yield return new WaitForSeconds(2);

        //「頭が疲れてきてるのかも」でオフにしたツイストON
        isKataTwistAuto = true;

        #region 宿題見る
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, Drill_chieriTrs, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, Drill_chieriTrs, 2f);
        DOTweenToLAIKSEyes(LAIKEyeS, chieriLookDrillEyeWeight, 1);
        DOTweenToLAIKSHead(LAIKHeadS, chieriLookDrillHeadWeight, 1);
        ChieriMotionDelay(3, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        #endregion
        #region 宿題モーション普通スピード
        tmpSpeed = 0f;
        //DOTWeenTO
        DOTween.To(() => tmpSpeed, (x) => tmpSpeed = x, 1, 2f)
            .OnUpdate(() =>//更新
                    { girlAnim.SetFloat("テーブル宿題スピード", tmpSpeed); });

        #endregion

        #region ■■■■■イベント段階で変え

        if (evDankai == 0) { Hukidashi("A0540"); }//ほら集中集中
        else if (evDankai == 1) { Hukidashi("A0560"); }//集中しなきゃね
        else if (evDankai == 2)
        {
            while (isNovelSetVisIng) { yield return null; }
            yield return new WaitForSeconds(1);

            Hukidashi("A0590");//うん、そろそろ休憩
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            NovelSetVis("A0580");//ああうん
            while (novelCurrentPageInt < 1) { yield return null; }
            yield return new WaitForSeconds(1);

            Hukidashi("A0595");//おっけー
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            while (isNovelSetVisIng) { yield return null; }
        }
        #endregion

        yield return new WaitForSeconds(1);

        AseTare(5f, false);
        TereHoho(false, 10f);
        #endregion

        goto おわり;
        #endregion



        スマホゆっくり戻し:
        #region スマホゆっくり戻し
        //最後なら主人公が目眩に気づく
        if (evDankai == 2)
        { NovelSetVis("A0600"); }//ん？　なんか目眩が……

        #region スマホ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, 2f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.55f, 2);
        #endregion

        ChieriMotion("座りスマホしまいから宿題待機", 1f, 0);

        #region ■スマホしまいまで待機して スマホOFF
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "座りスマホしまい") { yield return null; }
        while (girlAnimNomTime <= 0.55f) { yield return null; }
        isGirlAnimReadSystem = false;

        //スマホ消し
        ChieriSumahoObj.SetActive(false);
        #endregion
        #region 宿題見る
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, Drill_chieriTrs, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, Drill_chieriTrs, 2f);
        DOTweenToLAIKSEyes(LAIKEyeS, chieriLookDrillEyeWeight, 1);
        DOTweenToLAIKSHead(LAIKHeadS, chieriLookDrillHeadWeight, 1);
        #endregion
        #region ■ペン消しゴム持ちまで待機して 持つ

        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "おー") { yield return null; }
        while (girlAnimNomTime <= 0.95f) { yield return null; }
        isGirlAnimReadSystem = false;

        //ペン持つ
        SharpenObj.transform.SetParent(GirlRhitosashi02Trs);
        SharpenObj.transform.localPosition = Sharpen_syukudai_GirlRhitosashi02_ParameterTrs.localPosition;
        SharpenObj.transform.localEulerAngles = Sharpen_syukudai_GirlRhitosashi02_ParameterTrs.localEulerAngles;

        #endregion


        //最後なら主人公から休憩申し出
        if (evDankai == 2)
        {
            while (isNovelSetVisIng) { yield return null; }

            NovelSetVis("A0610");//ん～すまん、このページ終わりでオレちょっと休憩していいかな
            while (novelCurrentPageInt < 1) { yield return null; }
            yield return new WaitForSeconds(1f);

            Hukidashi("A0600");//あ、おっけー、じゃあ私も
            yield return new WaitForSeconds(1); KeyOrWait(3);

            while (isNovelSetVisIng) { yield return null; }
        }

        #endregion

        おわり:


        yield break;
    }

    //ただ見詰め合うイベント
    int ChieriHWPlayerLookDankaiInt = 0;//見つめ段階
    IEnumerator ChieriHWPlayerLook()
    {
        #region 智恵理プレイヤー見て様子見ループ
        #region プレイヤーちら見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 2f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.6f, 4);
        #endregion

        #region ■様子見ループ（目（顔）視線合えば目合いへ）(合わなければデフォへ戻り)
        float tmpTiramiTime = 0;
        float tmpMeaiTime = 0;
        while (tmpTiramiTime < 4)
        {
            //顔を1秒以上見たらイベント
            if (seeHeadNomFlt > evA0010seeHeadRangeFloat)
            { tmpMeaiTime += 1 * Time.deltaTime; }
            //顔見てない場合はチラ見タイム増
            else
            { tmpTiramiTime += 1 * Time.deltaTime; }

            //顔1秒以上見た
            if (tmpMeaiTime > 1)
            { goto 目合い01; }

            //Debug.Log(seeHeadNormzdFloat);

            yield return null;
        }
        goto おわり;
        #endregion

        #endregion

        目合い01:
        #region プレイヤーがん見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 1f, 1);
        #endregion
        #region ん？ まばたきと宿題止め ■■■■段階わけあり

        if (ChieriHWPlayerLookDankaiInt == 0)
        {
            Hukidashi("A0500");//ん？
            ChieriMotion("f_あ！ほら！口閉じ", 0.7f, 2);
        }
        else if (ChieriHWPlayerLookDankaiInt == 1)
        {
            Hukidashi("A0505");//？
            ChieriMotion("f_あ！ほら！口閉じ", 0.2f, 2);
        }
        else if (ChieriHWPlayerLookDankaiInt == 2)
        {
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            yield return new WaitForSeconds(0.1f);
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            TereHohoAlphaChange(0.6f);
            TereHoho(1f);
            ChieriMotion("f_え？？", 0.7f, 2);
        }

        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        yield return new WaitForSeconds(0.1f);
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        #region ■宿題モーションだけフェードでポーズ（animatorのParametersでスピード変更（ステート毎に設定できるので、表情が遅くならない））
        float tmpSpeed = 1;
        //DOTWeenTO
        DOTween.To(() => tmpSpeed, (x) => tmpSpeed = x, 0, 2f)
            .OnUpdate(() =>//更新
                    { girlAnim.SetFloat("テーブル宿題スピード", tmpSpeed); });

        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        yield return new WaitForSeconds(0.1f);
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        #endregion

        #endregion

        #region ■目合いループ（視線外すか見続けるか）
        float tmpMeaiTimeTwo = 0;
        while (tmpMeaiTimeTwo < 3)
        {
            //顔を見てたら
            if (seeHeadNomFlt > evA0010seeHeadRangeFloat)
            { tmpMeaiTimeTwo += 1 * Time.deltaTime; }
            //顔外した
            else { goto プレイヤー照れ; }

            //Debug.Log(seeHeadNormzdFloat);

            yield return null;
        }

        goto 智恵理照れ;

        #endregion

        プレイヤー照れ:
        #region 目外した（プレイヤーが照れる）

        #region ■■■■段階わけ　「あ、いや、なんでも……！」
        if (ChieriHWPlayerLookDankaiInt == 0)
        { NovelSetVis("A0500"); }//あ、いや、なんでも……！
        else if (ChieriHWPlayerLookDankaiInt == 1)
        { NovelSetVis("A0505"); }//いやいや、なんでもない
        else if (ChieriHWPlayerLookDankaiInt == 2)
        { }
        #endregion

        TereHohoAlphaChange(0.4f);
        TereHoho(2f);
        yield return new WaitForSeconds(1);

        ChieriMotion("笑顔01口眉", 0.7f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        //IK宿題へ
        FollowDOMove(IKLookAtEyeTargetTrs, Drill_chieriTrs, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, Drill_chieriTrs, 2f);
        DOTweenToLAIKSEyes(LAIKEyeS, chieriLookDrillEyeWeight, 1);
        DOTweenToLAIKSHead(LAIKHeadS, chieriLookDrillHeadWeight, 1);

        //animパラメータ1倍速（元に戻る）
        tmpSpeed = 0;
        //DOTWeenTO
        DOTween.To(() => tmpSpeed, (x) => tmpSpeed = x, 1f, 1f);
        while (tmpSpeed != 1f) //代入し続ける
        { girlAnim.SetFloat("テーブル宿題スピード", tmpSpeed); yield return null; }

        yield return new WaitForSeconds(1);

        #region ■■■■段階わけ　「えー　なになにもー」
        if (ChieriHWPlayerLookDankaiInt == 0)
        { Hukidashi("A0510"); }//えーなになにもー
        else if (ChieriHWPlayerLookDankaiInt == 1)
        { Hukidashi("A0515"); }//・・えへへ
        else if (ChieriHWPlayerLookDankaiInt == 2)
        {
            Hukidashi("A0517");//照れちゃうね
            yield return new WaitForSeconds(2);
            NovelSetVis("A0507");//そ、そうだな
        }
        #endregion
        TereHoho(false, 4);
        yield return new WaitForSeconds(4);

        TereHoho(false, 10f);
        goto おわり;
        #endregion

        智恵理照れ:
        #region 目合い続けた（智恵理が照れる）

        Hukidashi("・・・");
        TereHohoAlphaChange(0.6f);
        TereHoho(1f);
        if (ChieriHWPlayerLookDankaiInt == 2)
        {
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            yield return new WaitForSeconds(0.1f);
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            ChieriMotion("f_怒ってる・・？", 0.7f, 2);
        }
        else
        { ChieriMotion("f_え？？", 0.7f, 2); }
        yield return new WaitForSeconds(2);

        DelAll_Hukidashi(); yield return null;

        #region ■■■■段階わけ　「集中して！」　「えっとぉ・・・」
        if (ChieriHWPlayerLookDankaiInt == 0)
        { Hukidashi("A0520"); }//集中して！
        else if (ChieriHWPlayerLookDankaiInt == 1)
        { Hukidashi("A0525"); }//・・な、なんか
        else if (ChieriHWPlayerLookDankaiInt == 2)
        {
            Hukidashi("A0527");//・・えっとぉ・・
            yield return new WaitForSeconds(0.5f);

            //IK斜め下へ
            GameObject Chieri_02_LookIK_NanameShitaPosObj = Resources.Load("_PosObj/01OP/Chieri_02_LookIK_NanameShitaPosObj") as GameObject;
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            FollowDOMove(IKLookAtEyeTargetTrs, Chieri_02_LookIK_NanameShitaPosObj.transform.position, 0f);
            FollowDOMove(IKLookAtHeadTargetTrs, Chieri_02_LookIK_NanameShitaPosObj.transform.position, 3f);
            DOTweenToLAIKSEyes(LAIKEyeS, 1, 0);
            DOTweenToLAIKSHead(LAIKHeadS, 1f, 3f);
            yield return new WaitForSeconds(2f);

            //IK目プレイヤーへ
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
            DOTweenToLAIKSEyes(LAIKEyeS, 1, 0);
            yield return new WaitForSeconds(2f);
            DelAll_Hukidashi(); yield return null;
            Hukidashi("A0528");//見つめすぎじゃない？

            ChieriMotion("あはは・・・", 0.2f, 2);
            ChieriMotionDelay(1f, "f_けど・・・", 0.2f, 2);
            yield return new WaitForSeconds(2);
            NovelSetVis("A0517");//ご、ごめん、そうだよな
            yield return new WaitForSeconds(1);

        }
        #endregion

        yield return new WaitForSeconds(0.5f);

        //IK宿題へ
        FollowDOMove(IKLookAtEyeTargetTrs, Drill_chieriTrs, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, Drill_chieriTrs, 2f);
        DOTweenToLAIKSEyes(LAIKEyeS, chieriLookDrillEyeWeight, 1);
        DOTweenToLAIKSHead(LAIKHeadS, chieriLookDrillHeadWeight, 2);

        yield return new WaitForSeconds(0.5f);

        //animパラメータ1倍速（照れて早くなる予定だったけど、一旦やめ）
        tmpSpeed = 0;
        //DOTWeenTO
        DOTween.To(() => tmpSpeed, (x) => tmpSpeed = x, 1f, 1f)
            .OnUpdate(() =>//更新
                    { girlAnim.SetFloat("テーブル宿題スピード", tmpSpeed); });
        yield return new WaitForSeconds(2f);

        #region ■■■■段階わけ
        if (ChieriHWPlayerLookDankaiInt == 0)
        { NovelSetVis("A0510"); }//ああ、うん
        else if (ChieriHWPlayerLookDankaiInt == 1)
        { NovelSetVis("A0515"); }//（見つめすぎたかもしれない）
        else if (ChieriHWPlayerLookDankaiInt == 2)
        {
            yield return new WaitForSeconds(2f);
            DelAll_Hukidashi(); yield return null;
            Hukidashi("A0515");//・・えへへ
        }
        #endregion
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "f_眉高い笑顔", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1);
        ChieriMotionDelay(3, "笑顔01口眉_目閉じない", 0.4f, 2);//時間差表情戻し

        #region 照れながらチラ見して、まだ見てたらすぐ戻す（今はとりあえずすぐ戻る）
        yield return new WaitForSeconds(5);

        //animパラメータ1倍速（元に戻る）
        tmpSpeed = 0;
        //DOTWeenTO
        DOTween.To(() => tmpSpeed, (x) => tmpSpeed = x, 1f, 1f);
        while (tmpSpeed != 1f) //スピード1.5になるまで代入し続ける
        { girlAnim.SetFloat("テーブル宿題スピード", tmpSpeed); yield return null; }

        TereHoho(false, 1f);


        #endregion

        #endregion

        //見詰め合ったなら 段階カウントアップ(2まで)
        ChieriHWPlayerLookDankaiInt++;
        if (ChieriHWPlayerLookDankaiInt == 3) { ChieriHWPlayerLookDankaiInt = 2; }






        おわり:


        #region 宿題見る
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, Drill_chieriTrs, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, Drill_chieriTrs, 2f);
        DOTweenToLAIKSEyes(LAIKEyeS, chieriLookDrillEyeWeight, 1);
        DOTweenToLAIKSHead(LAIKHeadS, chieriLookDrillHeadWeight, 1);
        #endregion


        //このコルーチン消去
        ChieriHWPlayerLookCor = null;

        yield break;
    }

    //宿題モーション中消しゴム 悩む 指トンなど
    IEnumerator ChieriHWTaiki()
    {

        while (true)
        {
            //ランダムで消しゴムモーション発動 //デバッグXキー発動
            if (UnityEngine.Random.value > 0.9995 || (DB.isDebugMode && Input.GetKeyDown(KeyCode.X)))
            {
                #region 消しゴムモーションと フレーム指定ペアレント
                ChieriMotion("08消しゴム", 0.5f, 0);

                //消しゴムモーション読み取り待機
                StartCoroutine(GirlAnimReadSystem());
                while (nowGirlAnimClipName != "keshigom00") { yield return null; }

                //ペン置く
                while (girlAnimNomTime <= 0.26f) { yield return null; }
                SharpenObj.transform.SetParent(RoomTrs);
                SharpenObj.transform.localPosition = Sharpen_table_Room_ParameterTrs.localPosition;
                SharpenObj.transform.localEulerAngles = Sharpen_table_Room_ParameterTrs.localEulerAngles;

                //消しゴム持つ
                while (girlAnimNomTime <= 0.392f) { yield return null; }
                KeshigomuObj.transform.SetParent(GirlRhitosashi02Trs);
                KeshigomuObj.transform.localPosition = Keshigomu_syukudai_GirlRhitosashi02_ParameterTrs.localPosition;
                KeshigomuObj.transform.localEulerAngles = Keshigomu_syukudai_GirlRhitosashi02_ParameterTrs.localEulerAngles;

                //消しゴム離す
                while (girlAnimNomTime <= 0.742f) { yield return null; }
                KeshigomuObj.transform.SetParent(RoomTrs);
                KeshigomuObj.transform.localPosition = Keshigomu_table_Room_ParameterTrs.localPosition;
                KeshigomuObj.transform.localEulerAngles = Keshigomu_table_Room_ParameterTrs.localEulerAngles;

                //ペン持つ
                while (girlAnimNomTime <= 0.82f) { yield return null; }
                SharpenObj.transform.SetParent(GirlRhitosashi02Trs);
                SharpenObj.transform.localPosition = Sharpen_syukudai_GirlRhitosashi02_ParameterTrs.localPosition;
                SharpenObj.transform.localEulerAngles = Sharpen_syukudai_GirlRhitosashi02_ParameterTrs.localEulerAngles;

                isGirlAnimReadSystem = false;
                #endregion
            }

            //宿題モーション時にランダムで悩みモーション発動 //デバッグZキー発動
            if (UnityEngine.Random.value > 0.9995 || (DB.isDebugMode && Input.GetKeyDown(KeyCode.Z)))
            {
                ChieriMotion("08悩む", 0.5f, 0);
                StartCoroutine(GirlAnimReadSystem());
                while (nowGirlAnimClipName != "syukudai_nayamu") { yield return null; }
                while (girlAnimNomTime <= 1f) { yield return null; }
            }

            //宿題モーション時にランダムで指トントンモーション発動 //デバッグCキー発動
            if (UnityEngine.Random.value > 0.9995 || (DB.isDebugMode && Input.GetKeyDown(KeyCode.C)))
            {
                ChieriMotion("08指トントン", 0.5f, 0);
                StartCoroutine(GirlAnimReadSystem());
                while (nowGirlAnimClipName != "syukudai_yubiton") { yield return null; }
                while (girlAnimNomTime <= 1f) { yield return null; }
            }

            yield return null;
        }
    }


    #endregion
    IEnumerator B1000()//ちょっと休憩
    {
        if (debugEventMoveFlag == true)
        {
            ChieriMotion("08宿題しながら待機", 0f, 0);//デバッグ用アニメ直接再生

            //デバッグなのでいきなりペン持つ
            SharpenObj.transform.SetParent(GirlRhitosashi02Trs);
            SharpenObj.transform.localPosition = Sharpen_syukudai_GirlRhitosashi02_ParameterTrs.localPosition;
            SharpenObj.transform.localEulerAngles = Sharpen_syukudai_GirlRhitosashi02_ParameterTrs.localEulerAngles;

            nowPlayerLocalScale = DB.playerScale_HwTwo;

            #region 宿題
            //宿題システムスタート
            #region 宿題初期値設定
            //攻撃力, 集中力, 集中力回復量, お金, 値段, 集中力減退量
            DB.HwPowFloat = 2;            //攻撃力
            DB.HwConcFloat = 20;          //集中力(スタミナ)
            DB.HwConcCureFloat = 0.5f;    //集中力回復量
            DB.HwConcDownFloat = 1;       //集中力減退量
            DB.HwMoneyFloat = 180;          //お金
            DB.HwPriceFloat = 10;         //値段（倍数）
            DB.HwConcCurRhythmFloat = 3;  //回復が始まるまでの時間
            DB.HwAttackRhythmMaxFloat = 0.5f;//攻撃の間隔スピード
            DB.HwPointLocalScale = new Vector3(0.01f, 0.0001f, 0.01f);

            DB.HwStageClearCountInt = 4;
            DB.HwAllEnmKillCountInt = 0;
            #endregion
            StartCoroutine(HomeworkSystem());
            //宿題4ページ目へ
            HwPageForceMove(4);
            //宿題4ページ目Objオフ（クリアした状態を仮定）
            foreach (Transform k in HwStagesTrsList[4].transform)
            { k.gameObject.SetActive(false); }
            //宿題ロック
            isHwVisLock = true;
            #endregion
        }
        EventReset();
        yield return new WaitForSeconds(0.1f);



        NovelSetVis("B1000010");//ふう～～～
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        #region 智恵理後ろ手倒れ
        //倒れる前にIKオフ
        DOTweenToLAIKSEyes(LAIKEyeS, 0, 1);
        DOTweenToLAIKSHead(LAIKHeadS, 0f, 1);

        yield return new WaitForSeconds(0.7f);

        //倒れて起きる
        ChieriMotion("後ろ手に倒れて起きる", 0.5f, 0);
        yield return new WaitForSeconds(0.2f);

        #endregion
        HukidashiNovelDistanceChange(0.8f, 3);

        Hukidashi("B1000010");//「はー終った」
        ChieriMotion("はー終った", 0.2f, 2);

        #region ペン置き
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "後ろ手に倒れて起きる") { yield return null; }
        while (girlAnimNomTime <= 0.1f) { yield return null; }
        isGirlAnimReadSystem = false;
        //ペン置く
        SharpenObj.transform.SetParent(RoomTrs);
        SharpenObj.transform.localPosition = Sharpen_table_Room_ParameterTrs.localPosition;
        SharpenObj.transform.localEulerAngles = Sharpen_table_Room_ParameterTrs.localEulerAngles;

        //できれば消しゴムは持ってない状態でここに来たい　が、一応
        //消しゴム置く
        KeshigomuObj.transform.SetParent(RoomTrs);
        KeshigomuObj.transform.localPosition = Keshigomu_table_Room_ParameterTrs.localPosition;
        KeshigomuObj.transform.localEulerAngles = Keshigomu_table_Room_ParameterTrs.localEulerAngles;
        #endregion
        yield return new WaitForSeconds(2f);

        //事前視点配置プレイヤー
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
        yield return new WaitForSeconds(2.5f);

        ChieriMotion("笑顔01口眉_目閉じない", 1, 2);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        yield return new WaitForSeconds(1);

        Hukidashi("B1000020");//「へへ～　もう全部終わっちゃった」
        ChieriMotion("笑顔01口眉", 0.7f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(2f);

        NovelSetVis("B1000020");//え、もう？
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B1000030");//「ふふん、毎日ちゃんとやったからね」
        ChieriMotion("キリッ", 0.7f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(2f);

        NovelSetVis("B1000030");//まじか・・写させて
        while (novelCurrentPageInt < 1) { yield return null; }
        ChieriMotion("あはは・・・", 0.2f, 2);
        ChieriMotionDelay(1f, "f_あはは目開き", 0.1f, 2);
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("B1000040");//えー、だーめ！　メガネでやるの！
        ChieriMotion("f_本当に小さいね～", 0.2f, 2);
        yield return new WaitForSeconds(1f);
        ChieriMotion("f_怒り目つむり", 0.1f, 2);
        ChieriMotionDelay(2.5f, "f_どうして逃げたの", 0.2f, 2);
        yield return new WaitForSeconds(0.5f); yield return KeyOrWait(3f);

        NovelSetVis("B1000040");//ちょっと疲れるんだよな・・・贅沢言ってられないか
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("・・・");
        ChieriMotion("f_あはは目開き", 0.5f, 2);
        //右上見る
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        LAIKEye.solver.clampWeightEyes = 0.88f;
        GameObject ChieriIKEyeMigiue_HeadLocalPosObj
            = Resources.Load("_PosObj/_ParentPoseObjs/ChieriIKEyeMigiue_HeadLocalPosObj") as GameObject;
        FollowDOMove(IKLookAtEyeTargetTrs, Bip001HeadTrs.TransformPoint(ChieriIKEyeMigiue_HeadLocalPosObj.transform.localPosition), 0f);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3f);

        yield return new WaitForSeconds(1);

        LAIKEye.solver.clampWeightEyes = DB.defLAIKEyeClamp;//戻し
        //プレイヤー見る
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);

        Hukidashi("B1000050");//それにねー・・
        yield return new WaitForSeconds(1); yield return KeyOrWait(3f);

        NovelSetVis("B1000050");//うん？
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        Hukidashi("B1000060");//えへへ・・
        ChieriMotion("笑顔01口眉", 0.7f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3f);

        NovelSetVis("B1000060");//なんだ一体・・
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        //終了処理
        EventMove();

    }
    IEnumerator B1010()//1-2ブリッジ 立ち上がり伸び近づき
    {
        if (debugEventMoveFlag == true)
        {
            ChieriMotion("立ち上がり伸び近づき", 0f, 0);//デバッグ用アニメ直接再生

            //ペン置く
            SharpenObj.transform.SetParent(RoomTrs);
            SharpenObj.transform.localPosition = Sharpen_table_Room_ParameterTrs.localPosition;
            SharpenObj.transform.localEulerAngles = Sharpen_table_Room_ParameterTrs.localEulerAngles;
            //消しゴム置く
            KeshigomuObj.transform.SetParent(RoomTrs);
            KeshigomuObj.transform.localPosition = Keshigomu_table_Room_ParameterTrs.localPosition;
            KeshigomuObj.transform.localEulerAngles = Keshigomu_table_Room_ParameterTrs.localEulerAngles;

            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
            DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);
            nowPlayerLocalScale = DB.playerScale_HwTwo;

            //宿題システムスタート
            StartCoroutine(HomeworkSystem());
        }
        EventReset();

        StartCoroutine(GirlAnimReadSystem());

        //たちあがり
        ChieriMotion("立ち上がり伸び近づき", 0.5f, 0);
        while (nowGirlAnimClipName != "立ち上がり伸び近づき") { yield return null; }

        //テーブルに手を置く音
        while (girlAnimNomTime <= 0.025f) { yield return null; }
        SEPlay(Other3DSEObj, "机・叩く03_ピッチ-7", GrasstableTrs.gameObject, 1f);

        while (girlAnimNomTime <= 0.04f) { yield return null; }
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        while (girlAnimNomTime <= 0.07f) { yield return null; }
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;


        while (girlAnimNomTime <= 0.08f) { yield return null; }
        //視線OFF
        DOTweenToLAIKSHead(LAIKHeadS, 0f, 1);
        DOTweenToLAIKSEyes(LAIKEyeS, 0, 0.2f);

        while (girlAnimNomTime <= 0.13f) { yield return null; }
        Hukidashi("B1010010");//んー
        ChieriMotion("ん～", 0f, 2);

        while (girlAnimNomTime <= 0.2f) { yield return null; }
        #region 伸びをスローに
        float tmpSpeed = 1;
        //DOTWeenTO
        DOTween.To(() => tmpSpeed, (x) => tmpSpeed = x, 0.2f, 1f)
            .OnUpdate(() =>//更新
            { girlAnim.SetFloat("立ち上がり伸び近づきSpeed", tmpSpeed); });
        #endregion

        while (girlAnimNomTime <= 0.25f) { yield return null; }
        #region 伸びスローやめ
        //DOTWeenTO
        DOTween.To(() => tmpSpeed, (x) => tmpSpeed = x, 1f, 0.2f)
            .OnUpdate(() =>//更新
            { girlAnim.SetFloat("立ち上がり伸び近づきSpeed", tmpSpeed); });
        #endregion
        ChieriMotion("笑顔01口眉_目閉じない", 1f, 2);

        while (girlAnimNomTime <= 0.3f) { yield return null; }
        #region 近づきをスローに
        //DOTWeenTO
        DOTween.To(() => tmpSpeed, (x) => tmpSpeed = x, 0.4f, 4f)
            .OnUpdate(() =>//更新
            { girlAnim.SetFloat("立ち上がり伸び近づきSpeed", tmpSpeed); });
        #endregion
        HukidashiNovelDistanceChange(0.55f, 3);


        #region VRカメラ回転説明表示
        GameObject SetumeiVRCameraLRObj;
        if (DB.isEnglish)
        {
            SetumeiVRCameraLRObj =
                Instantiate(Resources.Load("EventSystem/Hukidashi/SetumeiVRCameraLREnglish") as GameObject
                , MessageCanvasTrs
                , false);
        }
        else
        {
            SetumeiVRCameraLRObj =
                Instantiate(Resources.Load("EventSystem/Hukidashi/SetumeiVRCameraLR") as GameObject
                , MessageCanvasTrs
                , false);
        }

        CanvasGroup tmpCanvasGroup = SetumeiVRCameraLRObj.GetComponent<CanvasGroup>();

        if (XRSettings.enabled)
        {
            DOTween.To(() => tmpCanvasGroup.alpha, (x) => tmpCanvasGroup.alpha = x,
                    1, 1)
                    .SetUpdate(true);
        }

        #endregion



        Hukidashi("B1010020");//ところでさー
        //目ON頭ON
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0.2f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 2);
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerHeadTargetTrs, 0.2f);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 2);

        while (girlAnimNomTime <= 0.4f) { yield return null; }
        #region 近づきスロー元に戻す
        tmpSpeed = 0.5f;
        //DOTWeenTO
        DOTween.To(() => tmpSpeed, (x) => tmpSpeed = x, 1f, 7f)
            .OnUpdate(() =>//更新
            { girlAnim.SetFloat("立ち上がり伸び近づきSpeed", tmpSpeed); });
        #endregion


        yield return KeyOrWait(3f);

        Hukidashi("B1010030");//「背伸びたと思わない？」
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3f);

        #region VRカメラ回転説明 消去
        DOTween.To(() => tmpCanvasGroup.alpha, (x) => tmpCanvasGroup.alpha = x,
            0, 1)
            .SetUpdate(true)
            .OnComplete(() =>
            {
                Destroy(SetumeiVRCameraLRObj);
            });
        #endregion

        yield return new WaitForSeconds(0.5f);
        NovelSetVis("B1010010");//へ？　背？（気がかりだ・・）
        while (isNovelSetVisIng)
        {
            //足音テスト
            //if (Input.GetKeyDown(KeyCode.F))
            //{
            //    ChieriMotion("立ち上がり伸び近づき", 0.5f, 0);
            //}
            yield return null;
        }
        yield return new WaitForSeconds(0.5f);


        Hukidashi("B1020010");//「背比べしようよ」
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し


        yield return new WaitForSeconds(1); yield return KeyOrWait(3f);

        yield return new WaitForSeconds(0.5f);
        NovelSetVis("B1020010");//相変わらず背比べすきなのか！？
        while (novelCurrentPageInt < 1) { yield return null; }
        Hukidashi("B1020020");//「いいからいいから」
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        AseTare();

        yield return new WaitForSeconds(0.5f); yield return KeyOrWait(3f);
        while (isNovelSetVisIng) { yield return null; }


        //終了処理
        EventMove();
    }
    IEnumerator B1020()//1-2ブリッジ 立ち上がり待機
    {
        if (debugEventMoveFlag == true)
        {
            ChieriMotion("背比べ待機02", 0f, 0);//デバッグ用アニメ直接再生

            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
            DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);
            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
            nowPlayerLocalScale = DB.playerScale_HwTwo;

            //宿題システムスタート
            StartCoroutine(HomeworkSystem());
        }
        EventReset(); yield return null;


        #region 選択肢「立ち上がる」or VRで立ち上がる

        //■切り選択候補 立ち上がりませんいらない

        Sentakushi("■B1020010a", Mathf.Infinity, "ほら、立ち上がってみて");
        //Sentakushi("■AB0070b", Mathf.Infinity);

        //■プレイヤー立ち上がり待ち用変数
        float tempFloat = 0;
        float tempPrevFloat = 0;


        //Sフキダシのスライダー取得
        Slider tmpSentakushiSlider =
            GameObject.Find("■B1020010a").transform.Find("HukidashiText").Find("SentakuOnSlider").GetComponent<Slider>();

        tmpSentakushiSlider.maxValue = PlayerStandFeetCubeTrs.position.y;
        tmpSentakushiSlider.minValue = PlayerTargetTrs.position.y;

        //■■選択肢選ばれるまでループ（VRだと実際に立ち上がることができる）
        if (XRSettings.enabled)
        {
            ////サブタイトルで操作表示
            //SubTitleVis(true, "VR時は実際に\n立ち上がれます", 1f);
            //コントローラーどうするか
        }

        while (sentakuListNum == 99
            //&& PlayerTargetTrs.position.y < PlayerStandFeetCubeTrs.position.y //実際に立ち上がり機能オフ
            )
        {
            #region //スカートのぞき処理残骸
            ////スカート抑え帰りならカウンターリセット(フキダシ消えてるため)
            //if (bunkiTaikiBool02 == true) { tempFloat = -4; bunkiTaikiBool02 = false; }
            //tempPrevFloat = tempFloat;
            //tempFloat += Time.deltaTime;

            //if (tempPrevFloat < 1 && tempFloat >= 1)
            //{
            //    //「ほら立ち上がってみて」
            //    SHukidashi("AB0065");
            //}
            #endregion

            //実際に立ち上がり機能オフ
            //tmpSentakushiSlider.value = PlayerTargetTrs.position.y;

            yield return null;
        }

        yield return null;

        switch (sentakuListNum)
        {
            case 0:
                #region 選択肢a立ち上がる

                //フェードアウトで場面転換感
                FadeBlack(1, 0.5f);
                yield return new WaitForSeconds(1);

                //VR誘導表示消し
                SubTitleVis(false);

                NovelSetVis("B1020020");//そういや小5の時・・・見せ付けてやる

                while (isNovelSetVisIng) { yield return null; }
                sentakuListNum = 99;

                EventMove("1-2ブリッジ 背比べ");

                yield break;
            #endregion

            case 1:
                #region//選択肢b立ち上がりません
                yield return new WaitForSeconds(1);
                Hukidashi("AB0070b");
                ChieriMotion("あはは・・・", 0.7f, 2);
                AseTare();
                ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.3f, 2);//時間差表情戻し

                yield return KeyOrWait(4);

                EventMove("1-2ブリッジ 隣に座り宿題手伝い");
                yield break;
            #endregion

            case 99:

                #region VRで実際に立ち上がった
                sentakuListNum = 99;

                DelAll_Hukidashi();
                isSekurabeRealStand = true;

                //VR誘導表示消し
                SubTitleVis(false, 1f);

                #region 選択肢消す処理
                //一時保持選択肢Listクリア
                sentakushiTempLogList.Clear();
                //智恵理フキダシ消し
                if (sentakushiEndHukidashiEraseBool == true) { DelAll_Hukidashi(); }

                //ポインタ外し
                SeePointTrs.position = Vector3.zero;

                //スキップロック解除
                isSkipLock = false;
                //ノベルログロック解除
                isNovelLogLock = false; yield return DelAll_SentakushisCor();
                #endregion


                EventMove("1-2ブリッジ 背比べ");

                #endregion

                yield break;
        }
        #endregion




    }
    IEnumerator B1021a()//※保留 ↑待機中 スカートを覗こうとしたら（カメラX位置がスカート覗ける位置になったら）
    {
        bunkiTaikiFloat01++;//スカート覗き回数プラス

        //フキダシ消し
        DelAll_Hukidashi(); yield return null;
        //ツイストOFF 
        isKataTwistAuto = false;

        //三回目ならイベントスキップ（ひとまずなし）
        if (
            //bunkiTaikiFloat01 >= 3
            false
            )
        {
            //「もういい！」
            Hukidashi("AB0100b");
            ChieriMotion("怒01もうちょっと下がって", 0.3f, 2);
            TereHoho();


            DelAll_Sentakushi();
            bunkiTaikiFloat01 = 0;
            isSkirtAngry01 = true;//怒ってるフラグ
            EventMove("1-2ブリッジ 隣に座り宿題手伝い");
            yield break;
        }

        //スカート抑え 「もっとさがって！」
        SHukidashi("B1020030");
        ChieriMotion("背比べ待機時スカート抑えスタート", 0.5f, 0);
        ChieriMotion("怒01もうちょっと下がって", 0.3f, 2);
        TereHoho();

        #region スカート覗き抵抗のモーション、IKで微修正(手)

        GameObject IKLHand_SkirtNozokiTeikouPosObj
            = Resources.Load("_PosObj/02Sekurabe/IKLHand_SkirtNozokiTeikouPosObj") as GameObject;
        IKLHandTargetTrs.localPosition = IKLHand_SkirtNozokiTeikouPosObj.transform.localPosition;
        IKLHandTargetTrs.localEulerAngles = IKLHand_SkirtNozokiTeikouPosObj.transform.localEulerAngles;

        GameObject IKRHand_SkirtNozokiTeikouPosObj
            = Resources.Load("_PosObj/02Sekurabe/IKRHand_SkirtNozokiTeikouPosObj") as GameObject;
        IKRHandTargetTrs.localPosition = IKRHand_SkirtNozokiTeikouPosObj.transform.localPosition;


        DOTweenToIKEfPos(IKLHandEf, 0.499f, 1f);
        DOTweenToIKEfRot(IKLHandEf, 0.271f, 1f);
        FBBIK.solver.leftArmChain.bendConstraint.weight = 0;
        DOTweenToIKEfPos(IKRHandEf, 0.171f, 1f);

        #endregion


        yield return new WaitForSeconds(2);

        #region スカート覗き抵抗のモーション、IKで微修正(足)

        GameObject IKLFoot_SkirtNozokiTeikouPosObj
            = Resources.Load("_PosObj/02Sekurabe/IKLFoot_SkirtNozokiTeikouPosObj") as GameObject;
        IKLFootTargetTrs.localPosition = IKLFoot_SkirtNozokiTeikouPosObj.transform.localPosition;

        GameObject IKRFoot_SkirtNozokiTeikouPosObj
            = Resources.Load("_PosObj/02Sekurabe/IKRFoot_SkirtNozokiTeikouPosObj") as GameObject;
        IKRFootTargetTrs.localPosition = IKRFoot_SkirtNozokiTeikouPosObj.transform.localPosition;

        DOTweenToIKEfPos(IKLFootEf, 1, 0.5f);
        DOTweenToIKEfPos(IKRFootEf, 1, 0.5f);

        #endregion

        //下がるまで or 選択するまでループ
        while (
            PlayerTargetTrs.position.x > -1.1f * GameObjectsTrs.localScale.z
            && sentakuListNum != 0)
        { yield return null; }

        //メイン再開
        StartCoroutine(nowRunEvIEnumerator);

        //選択した場合1秒待ち
        if (sentakuListNum == 0) { yield return new WaitForSeconds(1); }

        //■スカート抑え終了
        ChieriMotion("_noData", 2f, 2);
        ChieriMotion("背比べ待機時スカート抑えエンド", 0.5f, 0);
        TereHoho(false);
        bunkiTaikiBool01 = false;//また覗ける用
        bunkiTaikiBool02 = true;//再度「立ってみて」フキダシ出す用


        //IKオフ
        DOTweenToIKEfPos(IKLHandEf, 0, 1f);
        DOTweenToIKEfRot(IKLHandEf, 0, 1f);

        DOTweenToIKEfPos(IKRHandEf, 0, 1f);

        DOTweenToIKEfPos(IKLFootEf, 0, 0.5f);
        DOTweenToIKEfPos(IKRFootEf, 0, 0.5f);


        //フキダシ消し
        DelAll_Hukidashi();
        yield return null;

        //ツイストON 
        isKataTwistAuto = true;

        yield break;
    }
    bool isSekurabeRealStand = false; //背比べで実際に立ったかどうかBool
    IEnumerator B1030()//1-2ブリッジ 背比べ
    {
        if (debugEventMoveFlag == true)
        {
            FadeBlack(1, 0);

            ChieriMotion("背比べ直前", 0f, 0);//デバッグ用アニメ直接再生

            //プレイヤー見
            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
            DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);
            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);

            nowPlayerLocalScale = DB.playerScale_HwTwo;

            //宿題システムスタート
            StartCoroutine(HomeworkSystem());
        }
        //■背比べ時に手でAreaOutになるので、暫定で一時的にコリダーオフ（あとで手の位置自体調整か元に戻す）
        #region ■智恵理手のコリダーオフ（ちゃんとあとで元に戻す）
        for (int i = 0; i < ChieriColliderObjs.Length; i++)
        {
            if (
                ChieriColliderObjs[i].name == "UpperArm_R_coll" ||
                ChieriColliderObjs[i].name == "Forearm_R_coll" ||
                ChieriColliderObjs[i].name == "Hand_R_coll" ||
                ChieriColliderObjs[i].name == "Hitosashi00_R_coll" ||
                ChieriColliderObjs[i].name == "Hitosashi01_R_coll" ||
                ChieriColliderObjs[i].name == "Hitosashi02_R_coll" ||
                ChieriColliderObjs[i].name == "Ko00_R_coll" ||
                ChieriColliderObjs[i].name == "Ko01_R_coll" ||
                ChieriColliderObjs[i].name == "Ko02_R_coll" ||
                ChieriColliderObjs[i].name == "Kusuri00_R_coll" ||
                ChieriColliderObjs[i].name == "Kusuri01_R_coll" ||
                ChieriColliderObjs[i].name == "Kusuri02_R_coll" ||
                ChieriColliderObjs[i].name == "Naka00_R_coll" ||
                ChieriColliderObjs[i].name == "Naka01_R_coll" ||
                ChieriColliderObjs[i].name == "Naka02_R_coll" ||
                ChieriColliderObjs[i].name == "Oya00_R_coll" ||
                ChieriColliderObjs[i].name == "Oya01_R_coll" ||
                ChieriColliderObjs[i].name == "Oya02_R_coll"
                )
            {
                ChieriColliderObjs[i].SetActive(false);
            }
        }
        #endregion

        #region 暗幕中設定

        //フキダシノベル近くに

        #region プレイヤー背比べ位置に移動と回転設定

        //暗幕中に位置移動
        GameObject Player_00SekurabeStandPosObj
            = Resources.Load("_PosObj/02Sekurabe/Player_00SekurabeStandPosObj") as GameObject;

        if (isSekurabeRealStand == false)
        {
            CameraObjectsTrs.transform.localPosition = Player_00SekurabeStandPosObj.transform.localPosition;
            //カメラリセット値変更してリセット
            CameraReset(Player_00SekurabeStandPosObj.transform.localEulerAngles
                , DB.cameraStandAnchorDefLocalPos);//Anchorを立ちに
        }
        else //VR立ちしてたら、手動で回転のリセット値更新して、同じ分アンカー回転 
        {
            //cameraobjectsのリセット回転値と回転を90（指定）にし
            DB.cameraObjectsResetLocalEul =
            CameraObjectsTrs.transform.localEulerAngles = Player_00SekurabeStandPosObj.transform.localEulerAngles;


            //アンカー回転を、現在のアンカー回転から90（指定）を引いた数に
            CameraAnchorTrs.localEulerAngles =
                -(Player_00SekurabeStandPosObj.transform.localEulerAngles
                - CameraAnchorTrs.localEulerAngles);
            nowPlayerStand = true;
        }
        #endregion

        //スマホ片手いじりPosへ
        GameObject ChieriSumaho_LHand_SekurabeKatatePosObj = Resources.Load("_PosObj/_ParentPoseObjs/ChieriSumaho_LHand_SekurabeKatatePosObj") as GameObject;
        ChieriSumahoObj.transform.localPosition = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localEulerAngles;

        #endregion

        while (isNovelSetVisIng) { yield return null; }
        ChieriMotion("背比べ直前", 0.5f, 0);
        yield return new WaitForSeconds(0.5f);

        #region ■エクストラモード
        if (DB.isEXTRAEnter)
        {
            FadeBlack(0, 1);

            #region 初期化
            #region ■右手プレイヤー頭の上 事前設定
            //■VRCameraから少し離れた位置に追従しつつ、VRcameraが回転しても影響を受けないようにする

            //まず現在のCameraAnchorTrs位置に手乗せ位置Objペアレント（事前にVRCameraが回転していても大丈夫なように）
            GameObject SM_IKRHand_PareVRCamera_SekurabePlayerPosObj
                = Instantiate(Resources.Load("_PosObj/02Sekurabe/IKRHand_PareVRCamera_SekurabePlayerPosObj") as GameObject
                , CameraAnchorTrs, false);

            //PosObj位置からCameraAdjustTrackingTrs位置を引いたPos生成（Adjust量となる）
            Vector3 SM_tmpAdjustPos =
                (SM_IKRHand_PareVRCamera_SekurabePlayerPosObj.transform.position
                - CameraAdjustTrackingTrs.position)
                / GameObjectsTrs.localScale.z;//メソッドでGameObjectsのサイズかけているので（メソッドでかける理由は、ほぼ全てのObjがGameObjectsに入っているため。今回は特別）

            //そして追いかけるのはVRカメラにAdjust量足した位置
            FollowDOMove(IKRHandTargetTrs, VRCameraTrs, SM_tmpAdjustPos, 1.5f);
            //これでVRcameraの位置に少し離れて追従しつつ、回転の影響を受けない

            //■調整する場合は、一旦IKRHandTTargetを直接追いかけるようにしてから（↑のTweenを切る）
            //IKRHandTargetを回転ゼロのVRCameraにペアレントして調整した後
            //PosObjのPrefab（IKRHand_PareVRCamera_SekurabePlayerPosObj）に値をいれる



            //手首の回転
            IKRHandTargetTrs.DORotate(SM_IKRHand_PareVRCamera_SekurabePlayerPosObj.transform.eulerAngles, 1.5f);
            //Adjust位置、回転値読み取ったのでPosObj削除
            Destroy(SM_IKRHand_PareVRCamera_SekurabePlayerPosObj);


            ////IKON
            //DOTweenToIKEfPos(IKRHandEf, 1, 3);
            //DOTweenToIKEfRot(IKRHandEf, 1, 3);


            #endregion

            #endregion
            bool
                isSekurabeHand = false,
                isPlayerLook = true;

            while (true)
            {
                if (Input.GetKeyDown(KeyCode.F))
                {
                    if (isSekurabeHand)
                    {
                        isSekurabeHand = false;
                        #region ■右手高さ保持で智恵理の体前へ

                        //tempのターゲット生成（プレイヤーの背の高さ（現在のIKRHand高さ）取得　これにFollowDOMoveを指定し直す）
                        GameObject SM_tempTarget = Instantiate(IKRHandTargetTrs.gameObject);
                        SM_tempTarget.transform.SetParent(TargetsTrs, false);
                        DB.evMoveDelObjList.Add(SM_tempTarget);

                        //XとZだけ智恵理に移動（ChieriTrsにペアレント前提位置（ワールド座標なので一旦関係なし））
                        GameObject SM_IKRHand_PareChieri_SekurabeChieriPosObj
                            = Resources.Load("_PosObj/02Sekurabe/IKRHand_PareChieri_SekurabeChieriPosObj") as GameObject;

                        SM_tempTarget.transform.DOLocalMoveX(SM_IKRHand_PareChieri_SekurabeChieriPosObj.transform.position.x, 1);
                        SM_tempTarget.transform.DOLocalMoveZ(SM_IKRHand_PareChieri_SekurabeChieriPosObj.transform.position.z, 1);

                        //向かわせる
                        FollowDOMove(IKRHandTargetTrs, SM_tempTarget.transform, 1f);

                        //手首の回転
                        IKRHandTargetTrs.DOLocalRotate(SM_IKRHand_PareChieri_SekurabeChieriPosObj.transform.localEulerAngles, 1f);
                        #endregion
                    }
                    else
                    {
                        isSekurabeHand = true;
                        #region ■右手プレイヤー頭の上
                        //■VRCameraから少し離れた位置に追従しつつ、VRcameraが回転しても影響を受けないようにする

                        //まず現在のCameraAnchorTrs位置に手乗せ位置Objペアレント（事前にVRCameraが回転していても大丈夫なように）
                        SM_IKRHand_PareVRCamera_SekurabePlayerPosObj
                            = Instantiate(Resources.Load("_PosObj/02Sekurabe/IKRHand_PareVRCamera_SekurabePlayerPosObj") as GameObject
                            , CameraAnchorTrs, false);

                        //PosObj位置からCameraAdjustTrackingTrs位置を引いたPos生成（Adjust量となる）
                        SM_tmpAdjustPos =
                            (SM_IKRHand_PareVRCamera_SekurabePlayerPosObj.transform.position
                            - CameraAdjustTrackingTrs.position)
                            / GameObjectsTrs.localScale.z;//メソッドでGameObjectsのサイズかけているので（メソッドでかける理由は、ほぼ全てのObjがGameObjectsに入っているため。今回は特別）

                        //そして追いかけるのはVRカメラにAdjust量足した位置
                        FollowDOMove(IKRHandTargetTrs, VRCameraTrs, SM_tmpAdjustPos, 1.5f);
                        //これでVRcameraの位置に少し離れて追従しつつ、回転の影響を受けない

                        //■調整する場合は、一旦IKRHandTTargetを直接追いかけるようにしてから（↑のTweenを切る）
                        //IKRHandTargetを回転ゼロのVRCameraにペアレントして調整した後
                        //PosObjのPrefab（IKRHand_PareVRCamera_SekurabePlayerPosObj）に値をいれる



                        //手首の回転
                        IKRHandTargetTrs.DORotate(SM_IKRHand_PareVRCamera_SekurabePlayerPosObj.transform.eulerAngles, 1.5f);
                        //Adjust位置、回転値読み取ったのでPosObj削除
                        Destroy(SM_IKRHand_PareVRCamera_SekurabePlayerPosObj);


                        //IKON
                        DOTweenToIKEfPos(IKRHandEf, 1, 3);
                        DOTweenToIKEfRot(IKRHandEf, 1, 3);


                        #endregion
                    }
                }
                else if (Input.GetKeyDown(KeyCode.G))
                {
                    isSekurabeHand = false;
                    //IKOFF
                    DOTweenToIKEfPos(IKRHandEf, 0, 3);
                    DOTweenToIKEfRot(IKRHandEf, 0, 3);
                }

                if (Input.GetKeyDown(KeyCode.Alpha1))
                {
                    #region ■目眩リトルとDOTWeenTOでプレイヤーサイズ縮小(縮小完了bool付き)
                    bool SM_isShrinkComplete = false;
                    //段階別で目眩具合と縮小度変更して縮小
                    PPv2MemaiLittle(0.8f);

                    DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
                    , nowPlayerLocalScale / 1.1f, 3f)
                    .OnComplete(() => { SM_isShrinkComplete = true; });

                    #endregion
                }

                if (Input.GetKeyDown(KeyCode.L))
                {
                    if (isPlayerLook)
                    {
                        isPlayerLook = false;
                        //プレイヤー見ない
                        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
                        DOTweenToLAIKSEyes(LAIKEyeS, 0, 0);
                        DOTweenToLAIKSHead(LAIKHeadS, 0, 2);
                    }
                    else
                    {
                        isPlayerLook = true;
                        //プレイヤー見
                        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
                        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
                        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 2);
                        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
                        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                    }

                }

                yield return null;
            }

            yield break;
        }
        #endregion

        //開幕
        FadeBlack(0, 1);
        yield return new WaitForSeconds(2);

        HukidashiNovelDistanceChange(0.35f);


        #region ってあれ？　ね、結構大きいでしょ
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        //LookAtターゲットプレイヤーの顔へ
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);

        NovelSetVis("B1030010");//ってあれ？
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B1030010");//ね、結構大きいでしょ
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        #endregion

        yield return new WaitForSeconds(1f);

        #region 智恵理 手を自分のでこらへんに
        GameObject IKRHand_Chieri_SekurabeZyunbi01PosObj
            = Resources.Load("_PosObj/02Sekurabe/IKRHand_Chieri_SekurabeZyunbi01PosObj") as GameObject;
        IKRHandTargetTrs.localPosition = IKRHand_Chieri_SekurabeZyunbi01PosObj.transform.localPosition;
        IKRHandTargetTrs.localEulerAngles = IKRHand_Chieri_SekurabeZyunbi01PosObj.transform.localEulerAngles;

        ChieriMotion("背比べ01", 1f, 0);
        yield return new WaitForSeconds(0.5f);
        //IKON
        DOTweenToIKEfPos(IKRHandEf, 1, 1.5f);
        DOTweenToIKEfRot(IKRHandEf, 1, 1.5f);

        #endregion
        yield return KeyOrWait(3);

        #region いくら見ても不正はなく　ほらほら、じっとして
        NovelSetVis("B1030020");//いくら見ても不正はなく
        while (isNovelSetVisIng) { yield return null; }

        NovelSetVis("B1030030");//おかしいって！
        ChieriMotion("f_本当に小さいね～", 0.2f, 2);
        yield return new WaitForSeconds(0.5f);
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("B1030020");//ほらほら、じっとして
        #endregion

        #region 智恵理 手を自分の頭に
        GameObject IKRHand_Chieri_SekurabeZyunbi02PosObj
            = Resources.Load("_PosObj/02Sekurabe/IKRHand_Chieri_SekurabeZyunbi02PosObj") as GameObject;
        IKRHandTargetTrs.DOLocalMove(IKRHand_Chieri_SekurabeZyunbi02PosObj.transform.localPosition, 2f);
        IKRHandTargetTrs.DOLocalRotate(IKRHand_Chieri_SekurabeZyunbi02PosObj.transform.localEulerAngles, 2f);

        #endregion

        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        #region 智恵理 手を少しプレイヤー側へ（追従なし）
        GameObject IKRHand_Chieri_SekurabeChieriToPlayer00PosObj
            = Resources.Load("_PosObj/02Sekurabe/IKRHand_Chieri_SekurabeChieriToPlayer00PosObj") as GameObject;
        IKRHandTargetTrs.DOLocalMove(IKRHand_Chieri_SekurabeChieriToPlayer00PosObj.transform.localPosition, 1f);
        IKRHandTargetTrs.DOLocalRotate(IKRHand_Chieri_SekurabeChieriToPlayer00PosObj.transform.localEulerAngles, 1f);
        //同じ高さにするのを注意
        #endregion
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        Hukidashi("B1030030");//ほらほとんど変わらない
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        #region 智恵理 手を自分の頭と少し前を往復
        IKRHandTargetTrs.DOLocalMove(IKRHand_Chieri_SekurabeZyunbi02PosObj.transform.localPosition, 1f);
        IKRHandTargetTrs.DOLocalRotate(IKRHand_Chieri_SekurabeZyunbi02PosObj.transform.localEulerAngles, 1f)
            .OnComplete(() =>
            {
                IKRHandTargetTrs.DOLocalMove(IKRHand_Chieri_SekurabeChieriToPlayer00PosObj.transform.localPosition, 1f);
                IKRHandTargetTrs.DOLocalRotate(IKRHand_Chieri_SekurabeChieriToPlayer00PosObj.transform.localEulerAngles, 1f);
            });
        #endregion

        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);
        NovelSetVis("B1030040");//手を受け入れる。
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        #region 智恵理 手を自分の頭と少し前を往復
        IKRHandTargetTrs.DOLocalMove(IKRHand_Chieri_SekurabeZyunbi02PosObj.transform.localPosition, 1f);
        IKRHandTargetTrs.DOLocalRotate(IKRHand_Chieri_SekurabeZyunbi02PosObj.transform.localEulerAngles, 1f)
            .OnComplete(() =>
            {
                IKRHandTargetTrs.DOLocalMove(IKRHand_Chieri_SekurabeChieriToPlayer00PosObj.transform.localPosition, 1f);
                IKRHandTargetTrs.DOLocalRotate(IKRHand_Chieri_SekurabeChieriToPlayer00PosObj.transform.localEulerAngles, 1f);
            });
        #endregion
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);

        Hukidashi("B1030040");//思いっきり追い抜いちゃお

        #region 手 でこらへんより少し前にゆっくり
        GameObject IKRHand_Chieri_SekurabeZyunbi03PosObj
           = Resources.Load("_PosObj/02Sekurabe/IKRHand_Chieri_SekurabeZyunbi03PosObj") as GameObject;
        IKRHandTargetTrs.DOLocalMove(IKRHand_Chieri_SekurabeZyunbi03PosObj.transform.localPosition, 5f);
        IKRHandTargetTrs.DOLocalRotate(IKRHand_Chieri_SekurabeZyunbi03PosObj.transform.localEulerAngles, 5f);
        #endregion

        #region ■スマホいじりはじめ

        #region スマホ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, 2f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.55f, 2);
        #endregion

        #region スマホ取り出し
        ChieriMotion("背比べ左手スマホ取り出し", 0f, 0);
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "背比べスマホ取り出し") { yield return null; }
        while (girlAnimNomTime <= 0.375f) { yield return null; }

        //スマホObjオン（取り出し）
        ChieriSumahoObj.SetActive(true);
        //画面つける（画面更新も一緒に起動される）
        ChieriSumahoPower(true);

        while (girlAnimNomTime <= 1f) { yield return null; }
        isGirlAnimReadSystem = false;
        #endregion

        yield return new WaitForSeconds(1);
        NovelSetVis("B1030050");//へ？
        yield return KeyOrWait(1);

        while (isNovelSetVisIng) { yield return null; }

        #region ■スマホいじって縮小
        ChieriMotion("背比べ左手スマホいじり", 0f, 0);

        yield return new WaitForSeconds(1);

        NovelSetVis("B1030060");//・・・？！
        while (novelCurrentPageInt < 1) { yield return null; }


        #region ■目眩リトルとDOTWeenTOでプレイヤーサイズ縮小(縮小完了bool付き)
        bool isShrinkComplete = false;
        //段階別で目眩具合と縮小度変更して縮小
        PPv2MemaiLittle(0.8f);

        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
        , DB.playerScale_SekurabeZero, 10f)
        .OnComplete(() => { isShrinkComplete = true; });

        #endregion


        yield return new WaitForSeconds(1);
        SEPlay("magic-attack-darkness1_long(-12)", 0.3f);

        #region プレイヤーちら見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 4f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.55f, 4);
        #endregion

        yield return new WaitForSeconds(1);


        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        #region プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
        #endregion

        #endregion


        #endregion
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);
        //縮小完了まで待機
        while (isShrinkComplete == false) { yield return null; }


        Hukidashi("B1030050");//びっくりした？　大丈夫だよ
        ChieriMotion("あはは・・・", 0.2f, 2);
        ChieriMotionDelay(1f, "f_あはは目開き", 0.1f, 2);
        yield return new WaitForSeconds(0.5f);


        NovelSetVis("B1030070");//い、いやでも

        #region ■■プレイヤー頭追従背比べ

        #region ■右手プレイヤー頭の上
        //■VRCameraから少し離れた位置に追従しつつ、VRcameraが回転しても影響を受けないようにする

        //まず現在のCameraAnchorTrs位置に手乗せ位置Objペアレント（事前にVRCameraが回転していても大丈夫なように）
        GameObject IKRHand_PareVRCamera_SekurabePlayerPosObj
            = Instantiate(Resources.Load("_PosObj/02Sekurabe/IKRHand_PareVRCamera_SekurabePlayerPosObj") as GameObject
            , CameraAnchorTrs, false);

        //PosObj位置からCameraAdjustTrackingTrs位置を引いたPos生成（Adjust量となる）
        Vector3 tmpAdjustPos =
            (IKRHand_PareVRCamera_SekurabePlayerPosObj.transform.position
            - CameraAdjustTrackingTrs.position)
            / GameObjectsTrs.localScale.z;//メソッドでGameObjectsのサイズかけているので（メソッドでかける理由は、ほぼ全てのObjがGameObjectsに入っているため。今回は特別）

        //そして追いかけるのはVRカメラにAdjust量足した位置
        FollowDOMove(IKRHandTargetTrs, VRCameraTrs, tmpAdjustPos, 1.5f);
        //これでVRcameraの位置に少し離れて追従しつつ、回転の影響を受けない

        //■調整する場合は、一旦IKRHandTTargetを直接追いかけるようにしてから（↑のTweenを切る）
        //IKRHandTargetを回転ゼロのVRCameraにペアレントして調整した後
        //PosObjのPrefab（IKRHand_PareVRCamera_SekurabePlayerPosObj）に値をいれる



        //手首の回転
        IKRHandTargetTrs.DORotate(IKRHand_PareVRCamera_SekurabePlayerPosObj.transform.eulerAngles, 1.5f);
        //Adjust位置、回転値読み取ったのでPosObj削除
        Destroy(IKRHand_PareVRCamera_SekurabePlayerPosObj);


        //IKON
        DOTweenToIKEfPos(IKRHandEf, 1, 3);
        DOTweenToIKEfRot(IKRHandEf, 1, 3);


        #endregion

        yield return new WaitForSeconds(1);
        ChieriMotion("笑顔01口眉_目閉じない", 0.2f, 2);
        yield return new WaitForSeconds(0.5f); yield return KeyOrWait(3);

        #region IK手前に寄せる手見る感（場所直接指定なので動かせない）
        GameObject IKLookAt_Chieri_SekurabeTemaeLookPosObj
            = Resources.Load("_PosObj/02Sekurabe/IKLookAt_Chieri_SekurabeTemaeLookPosObj") as GameObject;

        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        DOTweenToLAIKSHead(LAIKHeadS, 1, 1.5f);
        FollowDOMove(IKLookAtHeadTargetTrs, IKLookAt_Chieri_SekurabeTemaeLookPosObj.transform.localPosition, 1.5f);

        //目はワンテンポ遅らせる
        #endregion

        #region ■右手高さ保持で智恵理の体前へ

        //tempのターゲット生成（プレイヤーの背の高さ（現在のIKRHand高さ）取得　これにFollowDOMoveを指定し直す）
        GameObject tempTarget = Instantiate(IKRHandTargetTrs.gameObject);
        tempTarget.transform.SetParent(TargetsTrs, false);
        DB.evMoveDelObjList.Add(tempTarget);

        //XとZだけ智恵理に移動（ChieriTrsにペアレント前提位置（ワールド座標なので一旦関係なし））
        GameObject IKRHand_PareChieri_SekurabeChieriPosObj
            = Resources.Load("_PosObj/02Sekurabe/IKRHand_PareChieri_SekurabeChieriPosObj") as GameObject;

        tempTarget.transform.DOLocalMoveX(IKRHand_PareChieri_SekurabeChieriPosObj.transform.position.x, 1);
        tempTarget.transform.DOLocalMoveZ(IKRHand_PareChieri_SekurabeChieriPosObj.transform.position.z, 1);

        //向かわせる
        FollowDOMove(IKRHandTargetTrs, tempTarget.transform, 1f);

        //手首の回転
        IKRHandTargetTrs.DOLocalRotate(IKRHand_PareChieri_SekurabeChieriPosObj.transform.localEulerAngles, 1f);
        #endregion

        #endregion

        yield return new WaitForSeconds(1f);

        //目IKはワンテンポ遅らせる（智恵理が自分の手見るやつ）
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        FollowDOMove(IKLookAtEyeTargetTrs, IKLookAt_Chieri_SekurabeTemaeLookPosObj.transform.localPosition, 0f);
        yield return new WaitForSeconds(1f);

        //プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B1030060");//ほーら ○○くらい
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        #region 智恵理 手を少しプレイヤー側へ01と往復（追従なし）(Y保持してXZだけ)
        GameObject IKRHand_Chieri_SekurabeChieriToPlayer01PosObj
            = Resources.Load("_PosObj/02Sekurabe/IKRHand_Chieri_SekurabeChieriToPlayer01PosObj") as GameObject;

        IKRHandTargetTrs.DOLocalMoveX(IKRHand_Chieri_SekurabeChieriToPlayer01PosObj.transform.localPosition.x, 1f);
        IKRHandTargetTrs.DOLocalMoveZ(IKRHand_Chieri_SekurabeChieriToPlayer01PosObj.transform.localPosition.z, 1f);
        IKRHandTargetTrs.DOLocalRotate(IKRHand_Chieri_SekurabeChieriToPlayer01PosObj.transform.localEulerAngles, 1f)
            .OnComplete(() =>
            {
                FollowDOMove(IKRHandTargetTrs, tempTarget.transform, 1f);
                IKRHandTargetTrs.DOLocalRotate(IKRHand_PareChieri_SekurabeChieriPosObj.transform.localEulerAngles, 1f);
            });
        #endregion

        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);
        NovelSetVis("B1030080");//手品・・？

        #region プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 2);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 2);
        #endregion
        #region ■■右手プレイヤー頭の上追従
        //■VRCameraから少し離れた位置に追従しつつ、VRcameraが回転しても影響を受けないようにする

        //まず現在のCameraAnchorTrs位置に手乗せ位置Objペアレント（事前にVRCameraが回転していても大丈夫なように）
        IKRHand_PareVRCamera_SekurabePlayerPosObj
            = Instantiate(Resources.Load("_PosObj/02Sekurabe/IKRHand_PareVRCamera_SekurabePlayerPosObj") as GameObject
            , CameraAnchorTrs, false);

        //PosObj位置からCameraAdjustTrackingTrs位置を引いたPos生成（Adjust量となる）
        tmpAdjustPos =
            (IKRHand_PareVRCamera_SekurabePlayerPosObj.transform.position
            - CameraAdjustTrackingTrs.position)
            / GameObjectsTrs.localScale.z;//メソッドでGameObjectsのサイズかけているので（メソッドでかける理由は、ほぼ全てのObjがGameObjectsに入っているため。今回は特別）

        //そして追いかけるのはVRカメラにAdjust量足した位置
        FollowDOMove(IKRHandTargetTrs, VRCameraTrs, tmpAdjustPos, 1.5f);
        //これでVRcameraの位置に少し離れて追従しつつ、回転の影響を受けない

        //■調整する場合は、一旦IKRHandTTargetを直接追いかけるようにしてから（↑のTweenを切る）
        //IKRHandTargetを回転ゼロのVRCameraにペアレントして調整した後
        //PosObjのPrefab（IKRHand_PareVRCamera_SekurabePlayerPosObj）に値をいれる



        //手首の回転
        IKRHandTargetTrs.DORotate(IKRHand_PareVRCamera_SekurabePlayerPosObj.transform.eulerAngles, 1.5f);
        //Adjust位置、回転値読み取ったのでPosObj削除
        Destroy(IKRHand_PareVRCamera_SekurabePlayerPosObj);

        #endregion

        #region ■スマホいじって縮小

        yield return new WaitForSeconds(1);

        while (isNovelSetVisIng) { yield return null; }

        #region スマホ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.8f, 1);
        #endregion

        Hukidashi("B1030070");//じゃあもう一回
        yield return new WaitForSeconds(1); KeyOrWait(3);

        #region ■目眩リトルとDOTWeenTOでプレイヤーサイズ縮小(縮小完了bool付き)
        ChieriMotion("背比べ左手スマホいじり", 0f, 0);
        yield return new WaitForSeconds(1);

        isShrinkComplete = false;
        //段階別で目眩具合と縮小度変更して縮小
        PPv2MemaiLittle(0.8f);

        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
        , DB.playerScale_SekurabeOne, 10f)
        .OnComplete(() => { isShrinkComplete = true; });

        #endregion
        yield return new WaitForSeconds(1);
        SEPlay("magic-attack-darkness1_long(-12)", 0.4f);

        #region プレイヤーちら見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 4f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.55f, 4);
        #endregion

        yield return new WaitForSeconds(1);


        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        #region プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
        #endregion

        #endregion

        NovelSetVis("B1030090");//わかった！！
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("B1030080");//気づいちゃった？
        ChieriMotion("あはは・・・", 0.2f, 2);
        ChieriMotionDelay(1f, "f_あはは目開き", 0.1f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        //縮小完了まで待機
        while (isShrinkComplete == false) { yield return null; }


        #region ■右手高さ保持で智恵理の体前へ

        //tempのターゲット生成（プレイヤーの背の高さ（現在のIKRHand高さ）取得　これにFollowDOMoveを指定し直す）
        tempTarget = Instantiate(IKRHandTargetTrs.gameObject);
        tempTarget.transform.SetParent(TargetsTrs, false);
        DB.evMoveDelObjList.Add(tempTarget);

        //XとZだけ智恵理に移動（ChieriTrsにペアレント前提位置（ワールド座標なので一旦関係なし））
        IKRHand_PareChieri_SekurabeChieriPosObj
            = Resources.Load("_PosObj/02Sekurabe/IKRHand_PareChieri_SekurabeChieriPosObj") as GameObject;

        tempTarget.transform.DOLocalMoveX(IKRHand_PareChieri_SekurabeChieriPosObj.transform.position.x, 1);
        tempTarget.transform.DOLocalMoveZ(IKRHand_PareChieri_SekurabeChieriPosObj.transform.position.z, 1);

        //向かわせる
        FollowDOMove(IKRHandTargetTrs, tempTarget.transform, 1f);

        //手首の回転
        IKRHandTargetTrs.DOLocalRotate(IKRHand_PareChieri_SekurabeChieriPosObj.transform.localEulerAngles, 1f);
        #endregion

        yield return new WaitForSeconds(1f);

        //IK手前に寄せる手見る感 目だけ（場所直接指定なので動かせない）
        //目はワンテンポ遅らせる
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        FollowDOMove(IKLookAtEyeTargetTrs, IKLookAt_Chieri_SekurabeTemaeLookPosObj.transform.localPosition, 0f);
        yield return new WaitForSeconds(1f);

        Hukidashi("B1030090");//ほーら 肩くらい
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        #region 智恵理 手を少しプレイヤー側へ01と往復（追従なし）(Y保持してXZだけ)
        IKRHand_Chieri_SekurabeChieriToPlayer01PosObj
            = Resources.Load("_PosObj/02Sekurabe/IKRHand_Chieri_SekurabeChieriToPlayer01PosObj") as GameObject;

        IKRHandTargetTrs.DOLocalMoveX(IKRHand_Chieri_SekurabeChieriToPlayer01PosObj.transform.localPosition.x, 1f);
        IKRHandTargetTrs.DOLocalMoveZ(IKRHand_Chieri_SekurabeChieriToPlayer01PosObj.transform.localPosition.z, 1f);
        IKRHandTargetTrs.DOLocalRotate(IKRHand_Chieri_SekurabeChieriToPlayer01PosObj.transform.localEulerAngles, 1f)
            .OnComplete(() =>
            {
                FollowDOMove(IKRHandTargetTrs, tempTarget.transform, 1f);
                IKRHandTargetTrs.DOLocalRotate(IKRHand_PareChieri_SekurabeChieriPosObj.transform.localEulerAngles, 1f)
                .OnComplete(() =>
                {
                    IKRHandTargetTrs.DOLocalMoveX(IKRHand_Chieri_SekurabeChieriToPlayer01PosObj.transform.localPosition.x, 1f);
                    IKRHandTargetTrs.DOLocalMoveZ(IKRHand_Chieri_SekurabeChieriToPlayer01PosObj.transform.localPosition.z, 1f);
                    IKRHandTargetTrs.DOLocalRotate(IKRHand_Chieri_SekurabeChieriToPlayer01PosObj.transform.localEulerAngles, 1f);
                });
            });
        #endregion


        yield return new WaitForSeconds(1);
        #region プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
        #endregion
        yield return KeyOrWait(3);

        #region 「すごいでしょー　すっごいな　え、なに　　ああいやいや　変なのー
        Hukidashi("B1030095");//すごいでしょー
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        yield return new WaitForSeconds(1);

        NovelSetVis("B1030100");//お、おお、すっごいな・・
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("B1030100");//え、なに？
        ChieriMotion("f_え、なになんて？", 0.2f, 2);
        AseTare();
        yield return new WaitForSeconds(1);

        NovelSetVis("B1030110");//ああいやいや！
        yield return KeyOrWait(3);
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        Hukidashi("B1030110");//変なのー。
        //手IKOFF
        DOTweenToIKEfPos(IKRHandEf, 0, 3f);
        DOTweenToIKEfRot(IKRHandEf, 0, 3f);

        ChieriMotion("つまんなそう", 0.2f, 2);
        #endregion

        #region スマホ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.8f, 1);
        #endregion

        yield return new WaitForSeconds(1);

        #region スマホしまう

        ChieriMotion("背比べ左手スマホしまう", 0f, 0);
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "背比べスマホしまう") { yield return null; }
        while (girlAnimNomTime <= 0.55f) { yield return null; }
        //スマホObjオフ（しまう）
        ChieriSumahoObj.SetActive(false);

        while (girlAnimNomTime <= 7f) { yield return null; }

        ChieriMotion("背比べ後腕おろし", 0.5f, 0);

        isGirlAnimReadSystem = false;

        #endregion

        #region プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
        #endregion


        yield return new WaitForSeconds(1);


        #region じゃあそろそろ休憩おわろう　だーめ！　あ、こら！　怒るぞ！
        ChieriMotion("笑顔01口眉_目閉じない", 0.5f, 2);
        yield return new WaitForSeconds(1);

        HukidashiNovelDistanceChange(0.45f, 3);
        Hukidashi("B1030130");//じゃあそろそろ休憩終わろうか
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        NovelSetVis("B1030120");//え、もう！？　交代交代
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);


        Hukidashi("B1030140");//だーめ！
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        ChieriMotion("ん？", 0.2f, 2);
        ChieriMotionDelay(2, "f_だーめ、宿題終わるまで", 0.3f, 2);

        //頭 右下見る
        GameObject IKLookAt_Chieri020_DaamePosObj
            = Resources.Load("_PosObj/02Sekurabe/IKLookAt_Chieri020_DaamePosObj") as GameObject;

        FollowDOMove(IKLookAtHeadTargetTrs
            , IKLookAt_Chieri020_DaamePosObj.transform.localPosition, 2f);

        yield return new WaitForSeconds(1);

        #region 頭に指あての右手IKpos
        ChieriMotion("背比べ01", 1f, 0);
        ChieriMotionDelay(0.5f, "背比べ後腕おろしループ", 0.5f, 0);//時間差表情戻し

        ChieriMotion("ひとさし指差し", 0.5f, 5);

        //IKTargetをペアレントしてゆらゆらに追従
        IKRHandTargetTrs.SetParent(Bip001NeckTrs);

        GameObject KaoyokoYubitate02_IKRHand_PareNeckPosObj
            = Resources.Load("_PosObj/_ParentPoseObjs/KaoyokoYubitate02_IKRHand_PareNeckPosObj") as GameObject;
        IKRHandTargetTrs.localPosition = KaoyokoYubitate02_IKRHand_PareNeckPosObj.transform.localPosition;
        IKRHandTargetTrs.localEulerAngles = KaoyokoYubitate02_IKRHand_PareNeckPosObj.transform.localEulerAngles;

        yield return null;

        //右手IKON
        DOTweenToIKEfPos(IKRHandEf, 1, 2);
        DOTweenToIKEfRot(IKRHandEf, 1, 3);

        #endregion

        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B1030130");//あ、こら！　怒るぞ！
        while (isNovelSetVisIng) { yield return null; }
        #endregion

        #region プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 2);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 2f);
        #endregion


        #region こわくないよ　じゃあもっと縮めちゃおうかなー？
        ChieriMotion("ん？", 0.2f, 2);
        yield return new WaitForSeconds(1);
        HukidashiNovelDistanceChange(0.3f, 3);
        Hukidashi("B1030150");//あはは　こわくないよ

        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        //右手IKOFF
        DOTweenToIKEfPos(IKRHandEf, 0, 2);
        DOTweenToIKEfRot(IKRHandEf, 0, 2);
        ChieriMotion("背比べ直前逆再生", 0.5f, 0);

        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);
        ChieriMotion("_noData", 0.001f, 5);//指差しやめ

        NovelSetVis("B1030140");//ぬぬ・・
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("B1030160");//じゃあもっと縮めちゃおうかなー？

        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(2, "f_こうするとー・・", 0.3f, 2);//時間差表情戻し

        ChieriMotion("背比べ直前", 0f, 0);
        yield return new WaitForSeconds(0.5f);

        #endregion

        #region スマホ取り出しいじりしまうマスク版
        string
            tmpBaseAnimStateName = "背比べ直前";

        StartCoroutine(GirlAnimReadSystem(11));

        //マスクのため、レイヤーのアニメを1フレでベースと同じモーション状態にする（ParameterでNormlizedTimeが指定できる（ただし指定し続けないと静止））
        ChieriMotion(tmpBaseAnimStateName, 0f, 11);//現在のベースアニメと同じアニメ指定
        girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeに
        yield return null;//↑適用に1フレ必要

        ChieriMotion("背比べ左手スマホ取り出し", 0.5f, 11);
        while (nowGirlAnimOtherLayerClipNameDict[11] != "背比べスマホ取り出し") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[11] <= 0.375f) { yield return null; }
        isGirlAnimReadSystem = false;
        //スマホObjオン（取り出し）
        ChieriSumahoObj.SetActive(true);
        //画面つける（画面更新も一緒に起動される）
        ChieriSumahoPower(true);

        yield return KeyOrWait(1);

        HukidashiNovelDistanceChange(0.45f, 3);
        NovelSetVis("B1030150");//あ、こら！　わかったわかった！

        #region ■目眩リトルとDOTWeenTOでプレイヤーサイズ縮小(縮小完了bool付き)マスク版
        ChieriMotion("背比べ左手スマホいじり", 0f, 11);
        yield return new WaitForSeconds(1);

        isShrinkComplete = false;
        //段階別で目眩具合と縮小度変更して縮小
        PPv2MemaiLittle(0.5f);

        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
        , DB.playerScale_SekurabeTwo, 10f)
        .OnComplete(() => { isShrinkComplete = true; });

        #endregion


        ChieriMotion("背比べ左手スマホしまう", 0f, 11);
        StartCoroutine(GirlAnimReadSystem(11));
        while (nowGirlAnimOtherLayerClipNameDict[11] != "背比べスマホしまう") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[11] <= 0.5f) { yield return null; }
        //スマホObjオフ（しまう）
        ChieriSumahoObj.SetActive(false);

        //モーション終了まで待機
        while (girlAnimOtherLayerNomTimeDict[11] <= 0.65f) { yield return null; }

        //現在のベースと同じモーションになるまで待機してからnoData
        ChieriMotion("背比べ後腕おろしループ", 0.5f, 11);
        while (nowGirlAnimOtherLayerClipNameDict[11] != nowGirlAnimClipName)
        {
            girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeにセットし続ける
            yield return null;
        }
        ChieriMotion("_noData", 0f, 11);


        isGirlAnimReadSystem = false;

        #endregion

        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(2);

        //手IKやめ
        DOTweenToIKEfPos(IKRHandEf, 0, 1);
        DOTweenToIKEfRot(IKRHandEf, 0, 1);


        #region ■智恵理紐摘む手のコリダー戻し
        for (int i = 0; i < ChieriColliderObjs.Length; i++)
        {
            if (
                ChieriColliderObjs[i].name == "UpperArm_R_coll" ||
                ChieriColliderObjs[i].name == "Forearm_R_coll" ||
                ChieriColliderObjs[i].name == "Hand_R_coll" ||
                ChieriColliderObjs[i].name == "Hitosashi00_R_coll" ||
                ChieriColliderObjs[i].name == "Hitosashi01_R_coll" ||
                ChieriColliderObjs[i].name == "Hitosashi02_R_coll" ||
                ChieriColliderObjs[i].name == "Ko00_R_coll" ||
                ChieriColliderObjs[i].name == "Ko01_R_coll" ||
                ChieriColliderObjs[i].name == "Ko02_R_coll" ||
                ChieriColliderObjs[i].name == "Kusuri00_R_coll" ||
                ChieriColliderObjs[i].name == "Kusuri01_R_coll" ||
                ChieriColliderObjs[i].name == "Kusuri02_R_coll" ||
                ChieriColliderObjs[i].name == "Naka00_R_coll" ||
                ChieriColliderObjs[i].name == "Naka01_R_coll" ||
                ChieriColliderObjs[i].name == "Naka02_R_coll" ||
                ChieriColliderObjs[i].name == "Oya00_R_coll" ||
                ChieriColliderObjs[i].name == "Oya01_R_coll" ||
                ChieriColliderObjs[i].name == "Oya02_R_coll"
                )
            {
                ChieriColliderObjs[i].SetActive(true);
            }
        }
        #endregion


        EventMove("1-2ブリッジ 隣に座り宿題手伝い");


        yield return null;


    }
    IEnumerator B1050()//1-2ブリッジ 隣に座り宿題手伝い
    {
        if (debugEventMoveFlag == true)
        {
            ChieriMotion("隣に座り宿題手伝い", 0f, 0);//デバッグ用アニメ直接再生

            nowPlayerLocalScale = DB.playerScale_SekurabeTwo;
            //宿題システムスタート
            StartCoroutine(HomeworkSystem());
            //宿題ロック
            isHwVisLock = true;
            #region プレイヤー背比べ位置に移動と回転設定

            GameObject Player_00SekurabeStandPosObj
                = Resources.Load("_PosObj/02Sekurabe/Player_00SekurabeStandPosObj") as GameObject;

            if (isSekurabeRealStand == false)
            {
                CameraObjectsTrs.transform.localPosition = Player_00SekurabeStandPosObj.transform.localPosition;
                //カメラリセット値変更してリセット
                CameraReset(Player_00SekurabeStandPosObj.transform.localEulerAngles
                    , DB.cameraStandAnchorDefLocalPos);//Anchorを立ちに
            }
            else //VR立ちしてたら、手動で回転のリセット値更新して、同じ分アンカー回転 
            {
                //cameraobjectsのリセット回転値と回転を90にし
                DB.cameraObjectsResetLocalEul =
                CameraObjectsTrs.transform.localEulerAngles = Player_00SekurabeStandPosObj.transform.localEulerAngles;

                //アンカー回転を、現在のアンカー回転から90を引いた数に
                CameraAnchorTrs.localEulerAngles =
                    -(Player_00SekurabeStandPosObj.transform.localEulerAngles
                    - CameraAnchorTrs.localEulerAngles);
                nowPlayerStand = true;
            }
            #endregion

        }
        EventReset();
        yield return null;
        //頭IKやめ
        DOTweenToLAIKSHead(LAIKHeadS, 0, 2);

        HukidashiNovelDistanceChange(0.5f);


        #region ■横に座り 宿題寄せて ペン持つまで
        //宿題見　目だけ
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, HomeworkTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);

        //座りモーション開始　　Drillの移動するモーションも開始
        drillAnim.enabled = true;
        ChieriMotion("隣に座り宿題手伝い", 1f, 0);
        drillAnim.CrossFadeInFixedTime("Drill移動", 0f, 0);
        yield return new WaitForSeconds(0.1f);

        //ひとまず分岐残し
        if (isSkirtAngry01) { }
        else { Hukidashi("B1050010"); }//「じゃあ隠してたお詫びに」

        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "隣に座り宿題手伝い開始") { yield return null; }
        while (girlAnimNomTime <= 0.098f) { yield return null; }

        //ひとまず分岐残し
        if (isSkirtAngry01) { }
        //通常なら笑顔
        else
        { ChieriMotion("笑顔01口眉", 0.2f, 2); }//目閉じ笑顔


        //IK宿題に
        FollowDOMove(IKLookAtEyeTargetTrs, HomeworkTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 0.7f, 0f);


        while (nowGirlAnimClipName != "隣に座り宿題手伝い開始") { yield return null; }
        while (girlAnimNomTime <= 0.26f) { yield return null; }

        //ひとまず分岐残し
        if (isSkirtAngry01) { }
        //通常なら笑顔目開き
        else { ChieriMotion("笑顔01口眉_目閉じない", 0.2f, 2); }


        while (nowGirlAnimClipName != "隣に座り宿題手伝い開始") { yield return null; }
        while (girlAnimNomTime <= 0.39f) { yield return null; }


        //怒り
        if (isSkirtAngry01)
        { Hukidashi("AB0100c1"); }//「ほら進んでない！」
        //通常
        else
        {
            DelAll_Hukidashi();
            Hukidashi("B1050020");//宿題やってあげるね
        }


        //宿題ペアレント
        HomeworkObjectsTrs.SetParent(DrillTrs);

        //事前ターゲット
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);

        while (nowGirlAnimClipName != "隣に座り宿題手伝い開始") { yield return null; }
        while (girlAnimNomTime <= 0.67f) { yield return null; }

        //ペン持つ
        SharpenObj.transform.SetParent(GirlRhitosashi02Trs, true);
        SharpenObj.transform.localPosition = Sharpen_syukudai_GirlRhitosashi02_ParameterTrs.localPosition;
        SharpenObj.transform.localEulerAngles = Sharpen_syukudai_GirlRhitosashi02_ParameterTrs.localEulerAngles;

        while (nowGirlAnimClipName != "隣に座り宿題手伝い開始") { yield return null; }
        while (girlAnimNomTime <= 0.71f) { yield return null; }

        //プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        LAIKHead.solver.clampWeightHead = 0.5f;//デフォ値だと全然上に向かないので
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        //宿題ペアレント戻し
        HomeworkObjectsTrs.SetParent(GameObjectsTrs);
        drillAnim.enabled = false;

        yield return KeyOrWait(3);

        HukidashiNovelDistanceChange(0.75f, 3);

        NovelSetVis("B1050010");//おっほんとうに？
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        #endregion

        //■■もうすでに座ってるなら
        if (PlayerTargetTrs.position.y < PlayerStandFeetCubeTrs.position.y - 0.4f * GameObjectsTrs.localScale.y)
        {
            //通常なら「まだ序盤？」 
            if (isSkirtAngry01 == false)
            {
                //「じゃあちょっとだけやってあげようかな」
                Hukidashi("AB0130");
                ChieriMotion("笑顔01口眉", 0.7f, 2);
                ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.4f, 2);//時間差表情戻し
                yield return KeyOrWait(4);


                //書き始める
                ChieriMotion("隣に座り宿題手伝いループ", 1f, 0);//デバッグ用アニメ直接再生

                //ペン見
                DOTweenToLAIKSEyes(LAIKEyeS, 0.4f, 0.2f);
                FollowDOMove(IKLookAtEyeTargetTrs, SharpenObj.transform);
                DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
                FollowDOMove(IKLookAtHeadTargetTrs, SharpenObj.transform, new Vector3(0, -0.2f, 0), 1);
                yield return new WaitForSeconds(4);
            }
            else
            {
                //書き始める
                ChieriMotion("隣に座り宿題手伝いループ", 1f, 0);//デバッグ用アニメ直接再生

                //ペン見
                DOTweenToLAIKSEyes(LAIKEyeS, 0.4f, 0.2f);
                FollowDOMove(IKLookAtEyeTargetTrs, SharpenObj.transform);
                DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
                FollowDOMove(IKLookAtHeadTargetTrs, SharpenObj.transform, new Vector3(0, -0.2f, 0), 1);
                yield return new WaitForSeconds(1);

                //「ほらここ間違ってる！」
                Hukidashi("AB0100c3");
                yield return KeyOrWait(2);
                //「眼鏡なのになんで」
                Hukidashi("AB0100c4");
                yield return KeyOrWait(2);

            }
            goto 座ってた;
        }


        //■VR以外なら暗幕座りの流れ開始
        if (DB.playerVR != DataBridging.PlayerVREnvironment.VR)
        {
            //通常
            if (isSkirtAngry01 == false)
            {
                DelAll_Hukidashi(); yield return null;
                Hukidashi("B1050030");//「ほら座って座って」
                ChieriMotion("笑顔01口眉", 0.2f, 2);
                ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
            }
            //怒り「早く座る！」
            if (isSkirtAngry01 == true)
            { Hukidashi("AB0100c2"); }

            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            //フェードアウトで場面転換感
            FadeBlack(1, 0.5f);
            yield return new WaitForSeconds(1);

            //暗幕中に位置移動
            CameraAnchorTrs.localPosition = DB.cameraSitAnchorDefLocalPos;

            FadeBlack(0, 1);
            yield return new WaitForSeconds(2);

            goto 座った;
        }


        //■VRなら実際座り待ち
        //通常「教えてあげるから座って」
        if (isSkirtAngry01 == false)
        {
            DelAll_Hukidashi(); yield return null;
            SHukidashi("AB0120");
        }

        //怒り「早く座る！」
        if (isSkirtAngry01 == true)
        { SHukidashi("AB0100c2"); }

        //■プレイヤー座り待ち
        while (PlayerTargetTrs.position.y > PlayerStandFeetCubeTrs.position.y - 0.4f * GameObjectsTrs.localScale.y)
        { yield return null; }

        座った:

        DelAll_Hukidashi(); yield return null;

        //通常なら笑顔
        if (isSkirtAngry01 == false)
        {
            TereHoho();
            ChieriMotion("f_笑顔口開き目閉じ", 0.2f, 2);
            ChieriMotionDelay(1.5f, "f_こうするとー・・", 0.2f, 2);//時間差表情戻し

            yield return new WaitForSeconds(1.5f);

            //IK頭 宿題に 目、もう少しこっち見
            FollowDOMove(IKLookAtHeadTargetTrs, HomeworkTrs, 2f);
            DOTweenToLAIKSHead(LAIKHeadS, 0.5f, 2f);
            DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

        }

        //怒り「ほら進んでない！」
        if (isSkirtAngry01 == true)
        {
            //顔をそらす
            DOTweenToLAIKSEyes(LAIKEyeS, 0, 0.2f);
            DOTweenToLAIKSHead(LAIKHeadS, 0f, 1);

            //書き始める
            ChieriMotion("隣に座り宿題手伝いループ", 1f, 0);//デバッグ用アニメ直接再生
        }

        座ってた:

        #region フェードアウトとモノローグで場面転換感（途中 位置チェンジや初期化設定あり）(ここでBGM変更したい（モノローグ中本鳴り、抜けたらスピーカー鳴り）)
        FadeBlack(1, 5);

        //BGMフェードアウト
        BGMPlay(false, null, 0, 0, 12);

        //環境音フェードイン
        KankyouBGMVolumer(0.5f, 12f);

        yield return new WaitForSeconds(8);
        HukidashiNovelDistanceChange(0.5f);



        #region モノローグ
        NovelSetVis("B1050020");//夏休みの宿題。今年は後回しにして良かった
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        Hukidashi("B1050040");//こんな風に宿題
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B1050030");//小学校以来？
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);
        Hukidashi("B1050050");//そんなに？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1.5f);


        NovelSetVis("B1050040");//そのままなんとなく
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        NovelSetVis("B1050050");//修学旅行の時　～　どうだった？
        while (novelCurrentPageInt < 1) { yield return null; }
        Hukidashi("B1050060");//そうそう！
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B1050070");//あれね、実はね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(2);

        NovelSetVis("B1050060");//感謝しかない
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        #region ■位置チェンジ（ここの必要はないけど、あるとしたらフキダシ位置くらい？）
        ChieriMotion("ひじつきリラックス待機", 0f, 0);//デバッグ用アニメ直接再生

        //HeadClamp数値初期化
        LAIKHead.solver.clampWeightHead = DB.defLAIKHeadClamp;

        //宿題戻し ペアレント
        HomeworkObjectsTrs.SetParent(GameObjectsTrs);
        yield return null;
        HomeworkObjectsTrs.localPosition = HwDefLocalPos;
        HomeworkObjectsTrs.localEulerAngles = HwDefLocalEul;

        drillAnim.enabled = true;
        drillAnim.CrossFadeInFixedTime("Drillデフォルト位置", 0.0f, 0, 0);
        yield return null;
        drillAnim.enabled = false;

        //ペン置く
        SharpenObj.transform.SetParent(RoomTrs);
        SharpenObj.transform.localPosition = Sharpen_table_Room_ParameterTrs.localPosition;
        SharpenObj.transform.localEulerAngles = Sharpen_table_Room_ParameterTrs.localEulerAngles;
        #endregion


        yield return new WaitForSeconds(1);

        Hukidashi("B1050080");//あはは、そうだったんだ？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(2);

        NovelSetVis("B1050070");//（できることなら）
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(2);


        #endregion

        #endregion

        //終了処理
        EventMove();
    }

    IEnumerator B2000()//宿題進んだかな？
    {
        if (debugEventMoveFlag == true)
        {
            ChieriMotion("ひじつきリラックス待機", 0f, 0);//デバッグ用アニメ直接再生

            //nowPlayerLocalScale = new Vector3(0.4f, 0.4f, 0.4f);
            nowPlayerLocalScale = DB.playerScale_SekurabeTwo;


            ChieriSumahoObj.SetActive(false);
        }
        EventReset();

        #region 暗幕設定
        //■FinalIKのバグ？　一度ウェイト0にしないと変。
        DOTweenToLAIKSEyes(LAIKEyeS, 0, 0f);
        yield return null;

        #region プレイヤー宿題位置に移動と回転設定

        //暗幕中に位置移動
        GameObject Player_00StartSitPosObj
            = Resources.Load("_PosObj/01OP/Player_00StartSitPosObj") as GameObject;

        CameraObjectsTrs.transform.localPosition = Player_00StartSitPosObj.transform.localPosition;
        //カメラリセット値変更してリセット
        CameraReset(Player_00StartSitPosObj.transform.localEulerAngles
            , DB.cameraSitAnchorDefLocalPos);//Anchorを座りに

        #endregion

        //宿題システムスタート
        #region 宿題初期値設定
        //攻撃力, 集中力, 集中力回復量, お金, 値段, 集中力減退量
        DB.HwPowFloat = 2;            //攻撃力
        DB.HwConcFloat = 20;          //集中力(スタミナ)
        DB.HwConcCureFloat = 0.5f;    //集中力回復量
        DB.HwConcDownFloat = 1;       //集中力減退量
        DB.HwMoneyFloat = 180;          //お金
        DB.HwPriceFloat = 10;         //値段（倍数）
        DB.HwConcCurRhythmFloat = 3;  //回復が始まるまでの時間
        DB.HwAttackRhythmMaxFloat = 0.5f;//攻撃の間隔スピード
        DB.HwPointLocalScale = new Vector3(0.01f, 0.0001f, 0.01f);

        DB.HwStageClearCountInt = 4;
        DB.HwAllEnmKillCountInt = 0;
        #endregion
        StartCoroutine(HomeworkSystem());
        //宿題5ページ目へ
        HwPageForceMove(5);

        //宿題ロック解除
        isHwVisLock = false;

        //事前
        ChieriMotion("ひじつきリラックス待機", 0f, 0);
        ChieriMotion("f_ジト目のみ40", 0f, 2);
        TereHoho(false, 0);

        //LookAtターゲット 宿題へ
        //雑誌見
        FollowDOMove(IKLookAtEyeTargetTrs, Drill_chieriTrs, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, Drill_chieriTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0);
        DOTweenToLAIKSHead(LAIKHeadS, 0.4f, 0);

        //宿題現在ページ取得
        int tmpPrevHwNowStageInt = HwNowStageInt;

        #endregion

        //開幕まで間
        yield return new WaitForSeconds(4);

        //フェードイン開幕
        FadeWhite(0, 4, Ease.InOutQuad);
        FadeBlack(0, 4);
        //goto デバッグ移動;

        yield return new WaitForSeconds(2);


        //ページめくった（次ステージに行った）ら
        while (HwNowStageInt <= tmpPrevHwNowStageInt) { yield return null; }
        isHwVisLock = true;//宿題止め
        yield return new WaitForSeconds(1);

        HukidashiNovelDistanceChange(0.3f);

        NovelSetVis("B2000010");//うわぁ、まだまだあるなー
        while (novelCurrentPageInt < 1) { yield return null; }

        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.2f);
        yield return new WaitForSeconds(1f);

        //ん？
        Hukidashi("B2000010");//うん？
        ChieriMotion("ひじつきリラックス→気付き", 0f, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 2f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.82f, 2f);
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);
        while (isNovelSetVisIng) { yield return null; }

        HukidashiNovelDistanceChange(0.7f, 3);

        Hukidashi("B2000020");//「まあいっぺんにだもんね」
        ChieriMotion("気づき待機→姿勢正し→四つんばい近づき", 1f, 0);
        ChieriMotion("あはは・・・", 0.4f, 2);
        ChieriMotionDelay(1, "f_あはは目開き", 0.2f, 2);

        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "四つん這い近づき") { yield return null; }
        while (girlAnimNomTime <= 0.14f) { yield return null; }

        DelAll_Hukidashi();
        #region プレイヤー見開始 //clamp変更注意
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 2.5f);
        DOTween.To(() => LAIKHead.solver.clampWeightHead, (x) => LAIKHead.solver.clampWeightHead
        = x, 0.6f, 3f);

        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 1);

        #endregion

        Hukidashi("B2000030");//「休憩する？」
        ChieriMotion("f_じゃーそろそろ", 0.2f, 2);
        ChieriMotionDelay(2, "_noData", 0.4f, 2);

        while (girlAnimNomTime <= 0.53f) { yield return null; }
        HukidashiNovelDistanceChange(0.4f, 3);

        NovelSetVis("B2000020");//ああ、そうしようかな　うおでか
        while (girlAnimNomTime <= 0.65f) { yield return null; }
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(2, "ん？", 0.1f, 2);//時間差表情戻し

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);
        HukidashiNovelDistanceChange(0.6f, 1);

        Hukidashi("B2000040");//「ん？　なになに？」
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        NovelSetVis("B2000030");//迫力があって……。
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2000050");//「あはは、どんな大きさに見えてるんだろ」
        ChieriMotion("あはは・・・", 0.4f, 2);
        ChieriMotionDelay(1, "f_あはは目開き", 0.1f, 2);
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2000040");//気にしてなさそうで良かった
        while (novelCurrentPageInt < 1) { yield return null; }
        Hukidashi("B2000060");//「どうどう？　どれくらい進んだ？」
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        #region 宿題見開始//clamp注意
        //ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, HomeworkObjectsTrs, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, HomeworkObjectsTrs, 1f);
        LAIKHead.solver.clampWeightHead = 0.5f;
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        #endregion
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2000070");//「あとちょっとじゃん！」
        ChieriMotion("f_あ！ほら！口あき", 0.1f, 2);
        yield return new WaitForSeconds(0.5f);
        #region プレイヤー見開始
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1.5f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
        #endregion
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        ChieriMotion("ん？", 0.2f, 2);
        #region 時計見るIK //目と頭が別 //Clamp戻し
        LAIKHead.solver.clampWeightHead = DB.defLAIKHeadClamp;
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        GameObject IKLookAtEye_Chieri_ClockLookPosObj
            = Resources.Load("_PosObj/03SuwariSekurabe/IKLookAtEye_Chieri_ClockLookPosObj") as GameObject;
        FollowDOMove(IKLookAtEyeTargetTrs, IKLookAtEye_Chieri_ClockLookPosObj.transform.position, 0f);
        GameObject IKLookAtHead_Chieri_ClockLookPosObj
            = Resources.Load("_PosObj/03SuwariSekurabe/IKLookAtHead_Chieri_ClockLookPosObj") as GameObject;
        FollowDOMove(IKLookAtHeadTargetTrs, IKLookAtHead_Chieri_ClockLookPosObj.transform.position, 2f);
        #endregion
        yield return new WaitForSeconds(1f);

        Hukidashi("B2000080");//「これなら間に合いそうだし」
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        #region プレイヤー見開始 頭だけ0.5秒後
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        yield return new WaitForSeconds(0.5f);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 2f);
        #endregion

        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2000090");//「ちょっと遊ばない？」
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1f);

        NovelSetVis("B2000050");//おーいいねといいたい所だけど
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);


        Hukidashi("B2000100");//「んーそっかぁ」
        AseTare();
        ChieriMotion("あはは・・・", 0.4f, 2);
        ChieriMotionDelay(1, "f_あはは目開き", 0.1f, 2);
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2000060");//メガネを取ったりつけたり
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("B2000110");//「じゃあがんばってね」
        ChieriMotion("キリッ", 0.2f, 2);

        #region ぐっぐマスク
        StartCoroutine(GirlAnimReadSystem(1));

        string
            tmpBaseAnimStateName = "座り背比べ待機ループ";

        //マスクのため、レイヤーのアニメを1フレでベースと同じモーション状態にする（ParameterでNormlizedTimeが指定できる（ただし指定し続けないと静止））
        ChieriMotion(tmpBaseAnimStateName, 0f, 1);//現在のベースアニメと同じアニメ指定
        girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeに
        yield return null;//↑適用に1フレ必要

        ChieriMotion("ぐっぐっ", 0.5f, 1);
        yield return new WaitForSeconds(1.7f);


        //現在のベースと同じモーションになるまで待機してからnoData
        ChieriMotion(tmpBaseAnimStateName, 0.5f, 1);
        while (nowGirlAnimOtherLayerClipNameDict[1] != nowGirlAnimClipName)
        {
            girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeにセットし続ける
            yield return null;
        }
        ChieriMotion("_noData", 0f, 1);

        isGirlAnimReadSystem = false;

        #endregion
        yield return KeyOrWait(1);

        NovelSetVis("B2000070");//お、おおー！
        while (isNovelSetVisIng) { yield return null; }
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        yield return new WaitForSeconds(1);

        FadeBlack(1, 2);
        yield return new WaitForSeconds(3);

        NovelSetVis("B2000080");//しかし智恵理から・・
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(2);

        //終了処理
        //IK切り
        DOTweenToLAIKSEyes(LAIKEyeS, 0, 0);
        DOTweenToLAIKSHead(LAIKHeadS, 0, 0);

        EventMove();
    }
    IEnumerator B2010()//気が散る！
    {
        if (debugEventMoveFlag == true)
        {
            nowPlayerLocalScale = DB.playerScale_SekurabeTwo;
            #region 宿題初期値設定
            //攻撃力, 集中力, 集中力回復量, お金, 値段, 集中力減退量
            DB.HwPowFloat = 2;            //攻撃力
            DB.HwConcFloat = 20;          //集中力(スタミナ)
            DB.HwConcCureFloat = 0.5f;    //集中力回復量
            DB.HwConcDownFloat = 1;       //集中力減退量
            DB.HwMoneyFloat = 225;          //お金
            DB.HwPriceFloat = 10;         //値段（倍数）
            DB.HwConcCurRhythmFloat = 3;  //回復が始まるまでの時間
            DB.HwAttackRhythmMaxFloat = 0.5f;//攻撃の間隔スピード
            DB.HwPointLocalScale = new Vector3(0.013f, 0.0001f, 0.013f);

            DB.HwStageClearCountInt = 5;
            DB.HwAllEnmKillCountInt = 0;
            #endregion
        }
        EventReset();

        FadeBlack(1, 0);//一応閉幕

        #region 設定
        #region プレイヤー宿題位置に移動と回転設定

        //暗幕中に位置移動
        GameObject Player_00KigachiruStartSitPosObj
            = Resources.Load("_PosObj/04Kigachiru/Player_00KigachiruStartSitPosObj") as GameObject;

        CameraObjectsTrs.transform.localPosition = Player_00KigachiruStartSitPosObj.transform.localPosition;
        //カメラリセット値変更してリセット
        CameraReset(Player_00KigachiruStartSitPosObj.transform.localEulerAngles
            , DB.cameraSitAnchorDefLocalPos);//Anchorを立ちに

        #endregion

        //宿題システムスタート
        #region 宿題初期値設定
        //攻撃力, 集中力, 集中力回復量, お金, 値段, 集中力減退量
        DB.HwPowFloat = 2;            //攻撃力
        DB.HwConcFloat = 20;          //集中力(スタミナ)
        DB.HwConcCureFloat = 0.5f;    //集中力回復量
        DB.HwConcDownFloat = 1;       //集中力減退量
        DB.HwMoneyFloat = 225;          //お金
        DB.HwPriceFloat = 10;         //値段（倍数）
        DB.HwConcCurRhythmFloat = 3;  //回復が始まるまでの時間
        DB.HwAttackRhythmMaxFloat = 0.5f;//攻撃の間隔スピード
        DB.HwPointLocalScale = new Vector3(0.013f, 0.0001f, 0.013f);

        DB.HwStageClearCountInt = 5;
        DB.HwAllEnmKillCountInt = 0;
        #endregion
        StartCoroutine(HomeworkSystem());
        //宿題6ページ目へ
        HwPageForceMove(6);

        //宿題ロック解除
        isHwVisLock = false;

        //宿題現在ページ取得(最後までに全問解いてたらイベント進ませる用)
        int tmpPrevHwNowStageInt = HwNowStageInt - 1;
        isHwClearEventWait = true;//次ページ移動できないように

        #endregion

        HukidashiNovelDistanceChange(0.4f);

        NovelSetVis("B2010010");//が。

        //環境音フェードダウン
        KankyouBGMVolumer(0.2f, 5f);

        //開幕まで間
        while (isNovelSetVisIng) { yield return null; }

        #region 近くて気が散る
        #region 近くで宿題見る設定
        GameObject Chieri00_SekurabeSuwariChikaiPosObj
            = Resources.Load("_PosObj/04Kigachiru/Chieri00_SekurabeSuwariChikaiPosObj") as GameObject;
        DB.isChieriPosLock = false;
        GirlTrs.localPosition = Chieri00_SekurabeSuwariChikaiPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri00_SekurabeSuwariChikaiPosObj.transform.localEulerAngles;
        ChieriMotion("座り背比べ待機ループ", 0f, 0);

        ChieriMotion("_noData", 0f, 2);

        //宿題見
        IKLookAtEyeTargetTrs.position = HomeworkTrs.position;
        IKLookAtHeadTargetTrs.position = HomeworkTrs.position;
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 0);

        //顔傾け準備
        ChieriMotion("h_noData", 0f, 7);

        #endregion

        FadeBlack(0, 1);
        isHwVisLock = false;
        yield return new WaitForSeconds(1f);

        NovelSetVis("B2010020");//近い近い


        float tmpMeaiTimeTwo = 0;
        StartCoroutine(SeeGirlSystem());

        //宿題解いた数取得（三問解いたら抜けるように）
        float preHwAllEnmKillCountInt = HwAllEnmKillCountInt;
        while (preHwAllEnmKillCountInt + 2 >= HwAllEnmKillCountInt)
        {
            #region 顔を見てたら ふふ
            if (seeHeadNomFlt > evA0010seeHeadRangeFloat)
            { tmpMeaiTimeTwo += 1 * Time.deltaTime; }

            if (tmpMeaiTimeTwo > 2)
            {
                tmpMeaiTimeTwo = 0;
                #region プレイヤーちら見
                ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 2f);
                DOTweenToLAIKSHead(LAIKHeadS, 0.6f, 4);
                #endregion
                yield return new WaitForSeconds(0.5f);
                Hukidashi("B2010010");//ん？

                #region プレイヤーがん見
                ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
                DOTweenToLAIKSHead(LAIKHeadS, 1f, 1);
                #endregion
                TereHohoAlphaChange(0.8235294117647059f);
                TereHoho();
                yield return new WaitForSeconds(0.5f);
                ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
                yield return new WaitForSeconds(2.5f);
                DelAll_Hukidashi();
                //首傾け
                ChieriMotion("h_右少し傾け", 1f, 7);
                ChieriMotion("笑顔01口眉", 0.3f, 2);
                ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                Hukidashi("B2010015");//ふふ
                yield return new WaitForSeconds(3);
                ChieriMotion("h_noData", 2f, 7);

                #region 宿題見る
                //宿題見
                ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
                FollowDOMove(IKLookAtEyeTargetTrs, HomeworkTrs, 0f);
                FollowDOMove(IKLookAtHeadTargetTrs, HomeworkTrs, 2f);
                DOTweenToLAIKSEyes(LAIKEyeS, 1, 0);
                DOTweenToLAIKSHead(LAIKHeadS, 1, 2);
                #endregion


                //入れ子でも三問解いたら抜ける（10秒経ったらもう一度ふふ解除）
                float tmpWaitTime = 0;
                while (preHwAllEnmKillCountInt + 2 >= HwAllEnmKillCountInt)
                {
                    tmpWaitTime += 1 * Time.deltaTime;
                    if (tmpWaitTime > 10) { goto 抜け; }
                    yield return null;
                }
            }
            抜け:
            #endregion
            yield return null;
        }
        ChieriMotion("_noData", 0.5f, 7);//顔傾け本戻し

        FadeBlack(1, 1f);
        NovelSetVis("B2010030");//気が散る・・
        isHwVisLock = true;
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1f);
        #region 終了処理
        //IKオフ
        DOTweenToLAIKSEyes(LAIKEyeS, 0, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, 0, 1);
        //Followが残る？　ので、クリアを挟んでみる
        FollowDOMoveFromTrsList.Clear();
        yield return null;

        TereHoho(false, 0);
        #endregion
        #endregion

        #region カメラで気が散る
        FadeBlack(1, 0f);
        #region ベッド横位置スマホ持ち
        GameObject Chieri01_BedYokoSuwariPosObj
            = Resources.Load("_PosObj/04Kigachiru/Chieri01_BedYokoSuwariPosObj") as GameObject;
        DB.isChieriPosLock = false;
        GirlTrs.localPosition = Chieri01_BedYokoSuwariPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri01_BedYokoSuwariPosObj.transform.localEulerAngles;
        ChieriMotion("ベッド座りポーズ", 0f, 0);
        ChieriMotion("背比べ左手スマホいじり", 0f, 11);

        #region IKLHand スマホでカメラ取る位置
        GameObject Chieri01_IKLHandSumaho_BedYokoSuwariPosObj
            = Resources.Load("_PosObj/04Kigachiru/Chieri01_IKLHandSumaho_BedYokoSuwariPosObj") as GameObject;
        IKLHandTargetTrs.transform.localPosition = Chieri01_IKLHandSumaho_BedYokoSuwariPosObj.transform.localPosition;
        IKLHandTargetTrs.transform.localEulerAngles = Chieri01_IKLHandSumaho_BedYokoSuwariPosObj.transform.localEulerAngles;
        //左手IKON
        DOTweenToIKEfPos(IKLHandEf, 1, 0f);
        DOTweenToIKEfRot(IKLHandEf, 1, 0f);

        #endregion

        #region スマホON
        //スマホObjオン（取り出し）
        ChieriSumahoObj.SetActive(true);
        //画面つける（画面更新も一緒に起動される）
        ChieriSumahoPower(true);
        GameObject ChieriSumaho_LHand_SekurabeKatatePosObj
            = Resources.Load("_PosObj/_ParentPoseObjs/ChieriSumaho_LHand_SekurabeKatatePosObj") as GameObject;
        ChieriSumahoObj.transform.localPosition = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localEulerAngles;
        #endregion

        #region スマホ見(IKペアレント注意)(どうもここまでやらないとできない)
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        IKLookAtEyeTargetTrs.SetParent(ChieriSumahoObj.transform);
        IKLookAtHeadTargetTrs.SetParent(ChieriSumahoObj.transform);
        yield return null;

        IKLookAtEyeTargetTrs.localPosition =
        IKLookAtHeadTargetTrs.localPosition = Vector3.zero;
        yield return null;

        FixedAction(() =>
        {
            IKLookAtEyeTargetTrs.SetParent(GirlIKTargetsTrs);
            IKLookAtHeadTargetTrs.SetParent(GirlIKTargetsTrs);
        });

        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 0);
        #endregion
        #endregion

        yield return new WaitForSeconds(1f);


        //ツイストOFF 
        isKataTwistAuto = false;

        //開幕
        FadeBlack(0, 1);
        isHwVisLock = false;
        yield return new WaitForSeconds(2f);


        #region はいチーズ　えへへ～
        Hukidashi("B2010020");//はいチーズ
        isHwVisLock = true;
        yield return new WaitForSeconds(1f); yield return KeyOrWait(1);
        isHwVisLock = false;
        SEPlay(Other3DSEObj, "camera-shutter1", ChieriSumahoObj, 5);
        yield return new WaitForSeconds(2f);

        Hukidashi("B2010030");//えへへ～
        ChieriMotion("背比べ左手スマホいじり", 0f, 11);
        TereHoho();
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        isHwVisLock = true;
        yield return new WaitForSeconds(1f); yield return KeyOrWait(1);
        isHwVisLock = false;
        yield return new WaitForSeconds(1f);

        #endregion

        NovelSetVis("B2010030");//気が散る・・
        isHwVisLock = true;

        FadeBlack(1, 1f);
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1f);

        //ツイストON
        isKataTwistAuto = true;

        #region 終了処理
        ChieriMotion("_noData", 0f, 11);
        //左手IKOFF
        DOTweenToIKEfPos(IKLHandEf, 0, 0f);
        DOTweenToIKEfRot(IKLHandEf, 0, 0f);
        TereHoho(false, 0);
        ChieriSumahoObj.SetActive(false);
        #endregion
        #endregion

        #region 寝そべりで気が散る
        FadeBlack(1, 0f);
        #region 寝そべり
        GameObject Chieri00_AsipataPosObj
            = Resources.Load("_PosObj/04Kigachiru/Chieri02_AsipataPosObj") as GameObject;
        DB.isChieriPosLock = false;
        GirlTrs.localPosition = Chieri00_AsipataPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri00_AsipataPosObj.transform.localEulerAngles;
        ChieriMotion("寝そべりポーズ", 0f, 0);
        #endregion

        #region タブレット移動と画面ON
        Vector3
            tmpTabletDefLclPos = TabletTrs.localPosition,
            tmpTabletDefLclEul = TabletTrs.localEulerAngles;

        GameObject TabletObj01_KigachiruPosObj
            = Resources.Load("_PosObj/04Kigachiru/TabletObj01_KigachiruPosObj") as GameObject;

        TabletTrs.localPosition = TabletObj01_KigachiruPosObj.transform.localPosition;
        TabletTrs.localEulerAngles = TabletObj01_KigachiruPosObj.transform.localEulerAngles;

        TabletTrs.Find("ChieriSmartPhoneCanvas").gameObject.SetActive(true);

        #endregion

        DOTweenToLAIKSEyes(LAIKEyeS, 0, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, 0, 0f);

        yield return new WaitForSeconds(1f);
        FadeBlack(0, 1);

        //宿題解いた数取得（2問解いたら抜けるように）
        preHwAllEnmKillCountInt = HwAllEnmKillCountInt;
        isHwVisLock = false;
        yield return new WaitForSeconds(2f);

        while (preHwAllEnmKillCountInt + 1 > HwAllEnmKillCountInt)
        { yield return null; }

        Hukidashi("B2010040");//～♪
        ChieriMotion("寝そべり足パタループ", 1f, 0);

        //宿題解いた数取得（一問解いたら抜けるように）
        preHwAllEnmKillCountInt = HwAllEnmKillCountInt;
        while (preHwAllEnmKillCountInt == HwAllEnmKillCountInt)
        { yield return null; }

        NovelSetVis("B2010030");//気が散る・・
        isHwVisLock = true;

        FadeBlack(1, 1f);
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1f);

        #region タブレットもとに戻し画面OFF
        TabletTrs.localPosition = tmpTabletDefLclPos;
        TabletTrs.localEulerAngles = tmpTabletDefLclEul;

        TabletTrs.Find("ChieriSmartPhoneCanvas").gameObject.SetActive(false);

        #endregion

        #endregion

        #region パンツで気が散る
        FadeBlack(1, 0f);

        StartCoroutine(GirlAnimReadSystem());

        #region 参考書原点直前 座り背比べループ原点設置 宿題見
        DB.isChieriPosLock = false;
        GameObject Chieri03_SankousyoPosObj
            = Resources.Load("_PosObj/04Kigachiru/Chieri03_00_SankousyoPosObj") as GameObject;
        GirlTrs.localPosition = Chieri03_SankousyoPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri03_SankousyoPosObj.transform.localEulerAngles;
        ChieriMotion("座り背比べ待機ループ原点", 0f, 0);

        ChieriMotion("_noData", 0f, 2);

        //宿題見
        IKLookAtEyeTargetTrs.position = HomeworkTrs.position;
        IKLookAtHeadTargetTrs.position = HomeworkTrs.position;
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 0);
        #endregion
        yield return new WaitForSeconds(1f);
        FadeBlack(0, 1);

        //全問解いてなければ、宿題解除
        if (HwStageClearCountInt <= tmpPrevHwNowStageInt)//ページ終わってなければ
        { isHwVisLock = false; }

        yield return new WaitForSeconds(2f);

        #region クローゼットに向かう
        DOTweenToLAIKSEyes(LAIKEyeS, 0, 0);
        DOTweenToLAIKSHead(LAIKHeadS, 0, 1);

        Hukidashi("B2010050");//そうだ、確かクローゼットに・・・
        ChieriMotion("参考書取りに行く原点", 0.5f, 0);
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                                                      //yield return new WaitForSeconds(2f);
                                                      //NovelSetVis("B2010030");//気が散・・ちょ！
        while (nowGirlAnimClipName != "参考書取りに行く原点") { yield return null; }
        while (girlAnimNomTime <= 0.14f) { yield return null; }
        #endregion

        CameraAnchorTrs.DOShakePosition(1f, 0.01f);
        NovelSetVis("B2010040");//ごほっ！ごほっ！
        #region 参考書モーションスピードパラメータとめ
        float tmpSpeed = 1;
        //DOTWeenTO
        DOTween.To(() => tmpSpeed, (x) => tmpSpeed = x
        , 0f, 0.3f)
            .OnUpdate(() =>//更新
                    { girlAnim.SetFloat("参考書原点スピード", tmpSpeed); });
        #endregion
        yield return new WaitForSeconds(1f);

        DelAll_Hukidashi();
        Hukidashi("B2010060");//え？
        ChieriMotion("ん？", 0.2f, 2);
        ChieriMotionDelay(1, "f_だーめ目開き", 0f, 2);//時間差表情戻し

        #region プレイヤー見(頭だけ別値 Clamp変更注意)
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);

        GameObject Chieri03_01_IKLookHead_SankousyoPlayerMiruPosObj
            = Resources.Load("_PosObj/04Kigachiru/Chieri03_01_IKLookHead_SankousyoPlayerMiruPosObj") as GameObject;
        FollowDOMove(IKLookAtHeadTargetTrs, Chieri03_01_IKLookHead_SankousyoPlayerMiruPosObj.transform.localPosition, 1f);
        LAIKHead.solver.clampWeightHead = 0f;//デフォ値だと全然上に向かないので
        DOTweenToLAIKSHead(LAIKHeadS, 1, 1f);

        //Bodyも同時にやるために手をその場固定
        GirlPosToIKTargetPosRot(); while (isGirlPosToIKTargetPosRotLoading) { yield return null; }
        DOTweenToIKEfPos(IKRHandEf, 1, 0);
        DOTweenToIKEfPos(IKLHandEf, 1, 0);

        //Body(Headの)
        DOTweenToLAIKSBody(LAIKHeadS, 0.1f, 1f);

        #endregion

        //while (true)
        //{
        //    if (Input.GetKeyDown(KeyCode.F))
        //    {
        //        DOTweenToLAIKSHead(LAIKHeadS, 0, 1f);
        //        DOTweenToLAIKSBody(LAIKHeadS, 0, 1f);
        //    }
        //    if (Input.GetKeyDown(KeyCode.G))
        //    {
        //        DOTweenToLAIKSHead(LAIKHeadS, 1, 1f);
        //        DOTweenToLAIKSBody(LAIKHeadS, 0.1f, 1f);
        //    }

        //    yield return null;
        //}

        yield return new WaitForSeconds(1f);
        DelAll_Hukidashi();
        Hukidashi("B2010070");//あ！！

        yield return new WaitForSeconds(0.5f);

        //IK戻し
        DOTweenToLAIKSHead(LAIKHeadS, 0, 1);
        DOTweenToLAIKSBody(LAIKHeadS, 0f, 1f);
        DOTweenToIKEfPos(IKRHandEf, 0, 0);
        DOTweenToIKEfPos(IKLHandEf, 0, 0);


        TereHohoAlphaChange(1);
        TereHoho();
        AseTare(Mathf.Infinity);

        ChieriMotion("あはは・・・", 0.4f, 2);
        ChieriMotionDelay(2, "f_え？(軽驚)", 0.1f, 2);//時間差表情戻し
        ChieriMotion("参考書取りに行く原点逆再生", 0.2f, 0);

        while (nowGirlAnimClipName != "参考書取りに行く原点逆再生") { yield return null; }
        while (girlAnimNomTime <= 0.4f) { yield return null; }
        LAIKHead.solver.clampWeightHead = DB.defLAIKHeadClamp;//戻し
        DelAll_Hukidashi();
        Hukidashi("B2010080");//あは、あははは・・

        #region プレイヤーがん見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 1f, 1);
        #endregion


        while (girlAnimNomTime <= 0.8f) { yield return null; }
        ChieriMotion("座り背比べ待機ループ原点", 0.5f, 0);
        girlAnim.SetFloat("参考書原点スピード", 1);
        ChieriMotion("f_あ！ほら！口閉じ", 0.4f, 2);
        isGirlAnimReadSystem = false;

        yield return new WaitForSeconds(4);

        NovelSetVis("B2010050");//な、なにやってんだか・・
        ChieriMotion("いいのかな・・・", 0.4f, 2);
        #region IK隅見る (目と頭それぞれ別、そしてclamp)
        GameObject Chieri03_02_IKLookEye_SumiMiruPosObj
            = Resources.Load("_PosObj/04Kigachiru/Chieri03_02_IKLookEye_SumiMiruPosObj") as GameObject;
        GameObject Chieri03_02_IKLookHead_SumiMiruPosObj
            = Resources.Load("_PosObj/04Kigachiru/Chieri03_02_IKLookHead_SumiMiruPosObj") as GameObject;

        LAIKHead.solver.clampWeightHead = 0;

        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, Chieri03_02_IKLookEye_SumiMiruPosObj.transform.localPosition, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, Chieri03_02_IKLookHead_SumiMiruPosObj.transform.localPosition, 2f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 2);
        #endregion
        isHwVisLock = true;
        while (isNovelSetVisIng) { yield return null; }

        FadeBlack(1, 1f);
        yield return new WaitForSeconds(1f);
        #region 終了処理

        AseTare(false);
        TereHoho(false);
        DOTweenToLAIKSEyes(LAIKEyeS, 0, 0);
        DOTweenToLAIKSHead(LAIKHeadS, 0, 0);
        LAIKHead.solver.clampWeightHead = DB.defLAIKHeadClamp;

        #endregion

        #endregion

        #region バジラで気が散る

        //■アニメ制御なので、IKRHandTargetはアニメでのみしか動かせないのに注意
        #region 設定
        DB.isChieriPosLock = true;
        ChieriMotion("座り背比べ待機ループ", 0f, 0);
        ChieriMotion("_noData", 0f, 2);
        ChieriMotion("怪獣バトルポーズミラー", 0f, 5);//手

        #region ■バジラ生成して 智恵理の手に（右手版）
        if (GirlRHandTrs.Find("Kaiju") == null)
        {
            //バジラ生成
            KB_KaijuObj = Instantiate(Resources.Load("EventSystem/KaijuBattle/Prefab/Kaiju") as GameObject);
            KB_KaijuObj.transform.SetParent(GirlRHandTrs, false);
        }
        //すでに配置してある場合
        else { KB_KaijuObj = GirlRHandTrs.Find("Kaiju").gameObject; }

        //名前と削除リスト入れ
        KB_KaijuObj.name = "Kaiju";
        DB.evMoveDelObjList.Add(KB_KaijuObj);

        //握る位置
        GameObject Chieri04_01_RHandPareKaiju_GrapPosObj
            = Resources.Load("_PosObj/04Kigachiru/Chieri04_01_RHandPareKaiju_GrapPosObj") as GameObject;
        KB_KaijuObj.transform.localPosition = Chieri04_01_RHandPareKaiju_GrapPosObj.transform.localPosition;
        KB_KaijuObj.transform.localEulerAngles = Chieri04_01_RHandPareKaiju_GrapPosObj.transform.localEulerAngles;


        #endregion

        //バジラ掴む右手のIK
        DOTweenToIKEfPos(IKRHandEf, 1, 0);
        DOTweenToIKEfRot(IKRHandEf, 1, 0);

        //IKRHandTargetをアニメーションで動作
        Animator
            tmpIKRHandTargetAnim = IKRHandTargetTrs.GetComponent<Animator>();
        tmpIKRHandTargetAnim.enabled = true;

        tmpIKRHandTargetAnim.CrossFadeInFixedTime("バジラ準備", 0f, 0);

        #region 智恵理バジラ見る
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, KB_KaijuObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, KB_KaijuObj.transform, 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 1f, 1);

        #endregion


        #endregion
        yield return new WaitForSeconds(2f);

        FadeBlack(0, 2);
        HukidashiNovelDistanceChange(0.25f);

        //全問解いてなければ、宿題解除
        if (HwStageClearCountInt <= tmpPrevHwNowStageInt)//ページ終わってなければ
        { isHwVisLock = false; }

        yield return new WaitForSeconds(1f);

        #region バジラモーションをアニメで「が～宿題終わらんようだな貴様」
        Hukidashi("B2010100");//むむ・・！
        ChieriMotion("f_怒り目見開き", 0.7f, 2);
        tmpIKRHandTargetAnim.CrossFadeInFixedTime("が～宿題終わらんようだな貴様", 0.5f, 0);
        while (tmpIKRHandTargetAnim.GetCurrentAnimatorClipInfo(0).Length == 0) { yield return null; }//エラー回避
        while (tmpIKRHandTargetAnim.GetCurrentAnimatorClipInfo(0)[0].clip.name != "が～宿題終わらんようだな貴様") { yield return null; }
        while (tmpIKRHandTargetAnim.GetCurrentAnimatorStateInfo(0).normalizedTime <= 0.27f) { yield return null; }

        Hukidashi("B2010110");//ガ～～～！
        ChieriMotion("f_怒り睨み", 0.2f, 2);

        while (tmpIKRHandTargetAnim.GetCurrentAnimatorStateInfo(0).normalizedTime <= 0.52f) { yield return null; }
        DelAll_Hukidashi();
        Hukidashi("B2010120");//まだ宿題が終わらんようだな
        ChieriMotion("f_怒り目つむり", 0.7f, 2);


        while (tmpIKRHandTargetAnim.GetCurrentAnimatorStateInfo(0).normalizedTime <= 0.84f) { yield return null; }
        DelAll_Hukidashi();
        #region プレイヤーがん見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 1f, 1);
        #endregion
        Hukidashi("B2010130");//貴様ッ！！
        ChieriMotion("f_更にキリッ", 0.2f, 2);
        #endregion
        yield return new WaitForSeconds(1.5f);

        isHwVisLock = true;

        CameraAnchorTrs.DOShakePosition(0.5f, 0.02f);
        NovelSetVis("B2010100");//なにしてんだよもう！
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        HukidashiNovelDistanceChange(0.35f);

        Hukidashi("B2010140");//あはは、暇になっちゃった
        tmpIKRHandTargetAnim.CrossFadeInFixedTime("貴様から戻し", 0f, 0);
        AseTare(Mathf.Infinity);
        TereHohoAlphaChange(0.6f);
        TereHoho();
        ChieriMotion("あはは・・・", 0.2f, 2);
        ChieriMotionDelay(2, "f_笑顔01口眉下がり_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        HukidashiNovelDistanceChange(0.45f);

        NovelSetVis("B2010110");//宿題してんだから・・・ん？　ていうかなんでそんな玩具
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1f);

        //少し頭下げ
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);


        Hukidashi("B2010150");//え？　だってこれ小さい頃くれたやつだよ？
        ChieriMotion("ん？", 0.5f, 2);
        tmpIKRHandTargetAnim.CrossFadeInFixedTime("くれたやつだよ", 0f, 0);
        AseTare(1f, false);
        TereHohoAlphaChange(0.2f, 2);
        yield return new WaitForSeconds(0.5f);

        //バジラ目でちら見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, KB_KaijuObj.transform, 0f);

        yield return new WaitForSeconds(0.5f);

        //プレイヤーに戻し
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);

        yield return KeyOrWait(3);
        yield return new WaitForSeconds(1f);

        HukidashiNovelDistanceChange(0.4f);

        NovelSetVis("B2010120");//・・・・・・あ、あれかバジラか！
        while (novelCurrentPageInt < 2) { yield return null; }
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1f);

        Hukidashi("B2010160");//あはは、楽しかったけどね
        ChieriMotion("あはは・・・", 0.2f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        TereHoho(false, 5);
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1f);



        NovelSetVis("B2010130");//（俺が先に卒業しちゃったんだよな
        while (novelCurrentPageInt < 1) { yield return null; }
        HukidashiNovelDistanceChange(0.25f, 10);

        tmpIKRHandTargetAnim.CrossFadeInFixedTime("ゆっくり近づけ", 0f, 0);
        ChieriMotion("f_更にキリッ", 10f, 2);
        //頭上げ
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, 10f);

        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(2f);

        CameraAnchorTrs.DOShakePosition(0.5f, 0.01f);
        NovelSetVis("B2010140");//は、宿題宿題！
        isHwVisLock = false;

        //リズムアップアイテム設置
        Instantiate(Resources.Load("EventSystem/Homework/EnemyGimic/ItemRhythmUp") as GameObject
            , HwStagesTrsList[HwNowStageInt].transform
            , false);

        #region 宿題解き待機（これまでに全問解いてるか、解いてないかで処理変わる）
        全問解いた:
        //既に全問解いてたらページめくりで移動
        if (HwStageClearCountInt > tmpPrevHwNowStageInt)//ページ終わった（クリアステージ数増えた）ら
        {
            //宿題バー色つけ
            HwNextStgBarTrs.GetComponent<Renderer>().material.color = Color.blue;//次ステージバー色変更
            SEPlay(UISEObj, "ui_notification_05", HomeworkTrs.gameObject);

            //ページめくった（次ステージに行った）ら
            while (HwNowStageInt == HwStageClearCountInt) { yield return null; }
            isHwVisLock = true;//宿題止め
            yield return new WaitForSeconds(2);
            goto その調子だ;
        }

        //宿題解いた数取得（2問解いたら抜けるように）
        preHwAllEnmKillCountInt = HwAllEnmKillCountInt;
        while (preHwAllEnmKillCountInt + 1 > HwAllEnmKillCountInt)
        {
            //もし問題数が残り1とかだった場合に備えて全問解いた場合
            if (HwStageClearCountInt > tmpPrevHwNowStageInt)//ページ終わった（クリアステージ数増えた）ら
            { goto 全問解いた; }
            yield return null;
        }
        isHwVisLock = true;//宿題止め
        #endregion

        その調子だ:
        HukidashiNovelDistanceChange(0.35f);

        Hukidashi("B2010170");//その調子だ眞人よ
        tmpIKRHandTargetAnim.CrossFadeInFixedTime("その調子だ", 0.5f, 0);

        yield return new WaitForSeconds(2f);
        NovelSetVis("B2010150");//置いておけって！
        yield return new WaitForSeconds(3f);

        FadeBlack(1, 2f);
        isHwVisLock = true;
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(2f);

        #region 終了処理
        //IKオフ
        DOTweenToLAIKSEyes(LAIKEyeS, 0, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, 0, 0f);

        DOTweenToIKEfPos(IKRHandEf, 0, 0);
        DOTweenToIKEfRot(IKRHandEf, 0, 0);

        //手戻し
        ChieriMotion("_noData", 0f, 5);

        //バジラ消し
        Destroy(KB_KaijuObj);

        //アニメ切り
        tmpIKRHandTargetAnim.enabled = false;

        #endregion


        #endregion

        yield return new WaitForSeconds(2);

        //終了処理
        isHwClearEventWait = false;//次ページ移動できるように

        EventMove();
    }
    IEnumerator B2020()//持ち上げられそう
    {
        if (debugEventMoveFlag == true)
        {
            nowPlayerLocalScale = DB.playerScale_SekurabeTwo;
            #region 宿題初期値設定
            //攻撃力, 集中力, 集中力回復量, お金, 値段, 集中力減退量
            DB.HwPowFloat = 2;            //攻撃力
            DB.HwConcFloat = 20;          //集中力(スタミナ)
            DB.HwConcCureFloat = 0.5f;    //集中力回復量
            DB.HwConcDownFloat = 1;       //集中力減退量
            DB.HwMoneyFloat = 324;          //お金
            DB.HwPriceFloat = 10;         //値段（倍数）
            DB.HwConcCurRhythmFloat = 3;  //回復が始まるまでの時間
            DB.HwAttackRhythmMaxFloat = 0.25f;//攻撃の間隔スピード
            DB.HwPointLocalScale = new Vector3(0.013f, 0.0001f, 0.013f);

            DB.HwStageClearCountInt = 5;
            DB.HwAllEnmKillCountInt = 0;
            #endregion
        }
        EventReset();

        XRSettings.gameViewRenderMode = GameViewRenderMode.LeftEye;

        FadeBlack(1, 0);//一応閉幕
        HukidashiNovelDistanceChange(0.35f);

        #region 設定
        #region プレイヤー宿題位置に移動と回転設定

        //暗幕中に位置移動
        GameObject Player_00StartSitPosObj
            = Resources.Load("_PosObj/01OP/Player_00StartSitPosObj") as GameObject;

        CameraObjectsTrs.transform.localPosition = Player_00StartSitPosObj.transform.localPosition;
        //カメラリセット値変更してリセット
        CameraReset(Player_00StartSitPosObj.transform.localEulerAngles
            , DB.cameraSitAnchorDefLocalPos);//Anchorを立ちに

        #endregion

        //宿題システムスタート
        StartCoroutine(HomeworkSystem());
        //宿題7ページ目へ
        HwPageForceMove(7);

        //宿題ロック解除
        isHwVisLock = false;

        //宿題現在ページ取得(最後までに全問解いてたらイベント進ませる用)
        int tmpPrevHwNowStageInt = HwNowStageInt - 1;
        isHwClearEventWait = true;//次ページ移動できないように


        DB.isChieriPosLock = true;
        ChieriMotion("座り背比べ待機ループ", 0f, 0);
        ChieriMotion("f_十分？", 0f, 2);
        #region 事前プレイヤーがん見(目は体の床あたり(CameraObjects))
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, CameraObjectsTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 0f);
        #endregion

        #region 指 口横にあての右手IKpos
        ChieriMotion("ひとさし指差し", 0f, 5);

        //IKTargetをペアレントしてゆらゆらに追従
        IKRHandTargetTrs.SetParent(Bip001HeadTrs);


        //指 口横にあて
        GameObject KutiSitaYubiAte01_IKRHand_PareBip001HeadPosObj
            = Resources.Load("_PosObj/_ParentPoseObjs/KutiSitaYubiAte01_IKRHand_PareBip001HeadPosObj") as GameObject;
        IKRHandTargetTrs.DOLocalMove(KutiSitaYubiAte01_IKRHand_PareBip001HeadPosObj.transform.localPosition
            , 0f);
        IKRHandTargetTrs.DOLocalRotate(KutiSitaYubiAte01_IKRHand_PareBip001HeadPosObj.transform.localEulerAngles
            , 0f);

        yield return null;

        //右手IKON
        DOTweenToIKEfPos(IKRHandEf, 1, 0);
        DOTweenToIKEfRot(IKRHandEf, 1, 0);

        #endregion

        ChieriMotion("h_noData", 0f, 7);//顔傾け用準備

        #endregion

        //指口あて時 肘がねじれるのでON
        isKataTwistAuto = false;

        FadeBlack(0, 2);

        yield return new WaitForSeconds(5);

        Hukidashi("・・・");
        isHwVisLock = true;
        yield return new WaitForSeconds(1); yield return KeyOrWait(1);
        yield return new WaitForSeconds(1);

        HukidashiNovelDistanceChange(0.6f);
        NovelSetVis("B2020010");//なんだジロジロ見て・・
        while (novelCurrentPageInt < 1) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2020010");//ん？　んー
        #region プレイヤーちら見して戻す
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerTargetTrs, 0f);
        yield return new WaitForSeconds(1f);
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, CameraObjectsTrs, 0f);

        #endregion
        yield return KeyOrWait(1);

        Hukidashi("B2020020");//持ち上げられそうだなぁって
        ChieriMotion("h_右少し傾け", 1f, 7);
        yield return new WaitForSeconds(1); yield return KeyOrWait(1);
        yield return new WaitForSeconds(0.7f);

        NovelSetVis("B2020020");//持ち上げる？　なにを？

        ChieriMotion("笑顔01口眉_目閉じない", 1f, 2);

        //右手IKON 指顔もどし
        DOTweenToIKEfPos(IKRHandEf, 0, 2);
        DOTweenToIKEfRot(IKRHandEf, 0, 2);
        ChieriMotion("_noData", 1f, 5);//指戻し
        ChieriMotion("h_noData", 1f, 7);//顔傾け戻しゆっくり用


        yield return new WaitForSeconds(1);
        //ChieriMotion("_noData", 0f, 7);//顔傾け戻し

        ChieriMotion("ゆっくり立ち上がり", 0.5f, 0);
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        //戻し
        isKataTwistAuto = true;

        yield return new WaitForSeconds(2);

        //IKRHandペアレント戻し
        IKRHandTargetTrs.SetParent(GirlIKTargetsTrs);

        yield return new WaitForSeconds(2f);
        Hukidashi("B2020030");//せーの
        yield return new WaitForSeconds(1f);

        HukidashiNovelDistanceChange(0.4f, 3);

        #region ■立ち上がらせられ（持ち上げ）

        //IKの前傾でスカートはみ出るので、一旦Iterationを0に
        FBBIK.solver.iterations = 0;


        //IK両手 プレイヤーの両脇くらいに //悪くないのでそのまま使用(数値は少し変えた)
        FollowDOMove(IKRHandTargetTrs, PlayerTargetTrs, new Vector3(0.04f, -0.18f, 0.12f), 0f);
        FollowDOMove(IKLHandTargetTrs, PlayerTargetTrs, new Vector3(0.04f, -0.18f, -0.12f), 0f);

        //IKON
        DOTweenToIKEfPos(IKRHandEf, 1, 2);
        DOTweenToIKEfPos(IKLHandEf, 1, 2);

        //プレイヤー見（目）
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);

        ChieriMotion("f_更にキリッ", 1.5f, 2);
        yield return new WaitForSeconds(1f);


        NovelSetVis("B2020030");

        ChieriMotion("笑顔01口眉", 0.4f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        #region 持ち上げ音出すために頭にWindNoiseSoundObj設置

        //WindnoiseSoundObj付与
        GameObject PlayerHeadWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundPlayerObj") as GameObject
            , CameraAnchorTrs);//（頭）
        DB.evMoveDelObjList.Add(PlayerHeadWindnoiseSoundObj);
        PlayerHeadWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpPlayerHeadWindnoiseSound = PlayerHeadWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpPlayerHeadWindnoiseSound.aSource.maxDistance = 50;
        tmpPlayerHeadWindnoiseSound.pitchMax = 1f;
        tmpPlayerHeadWindnoiseSound.pitchUpRateAdjustFloat = 6;
        tmpPlayerHeadWindnoiseSound.pitchDownRateAdjustFloat = 6;

        tmpPlayerHeadWindnoiseSound.aSource.volume = 0;
        yield return null;

        //音、ブッ　と入るのでフェードイン
        //DOTWeenTO
        DOTween.To(() => PlayerHeadWindnoiseSoundObj.GetComponent<AudioSource>().volume, (x) => PlayerHeadWindnoiseSoundObj.GetComponent<AudioSource>().volume = x
        , 0.1f
        , 0.7f)
        .OnComplete(() =>
        {
            //フェードアウト
            DOTween.To(() => PlayerHeadWindnoiseSoundObj.GetComponent<AudioSource>().volume, (x) => PlayerHeadWindnoiseSoundObj.GetComponent<AudioSource>().volume = x
            , 0f
            , 0.4f);
        });


        #endregion

        #region プレイヤー持ち上げられ移動
        DOTween.To(() => CameraAnchorTrs.localPosition, (x) => CameraAnchorTrs.localPosition = x,
            DB.cameraStandAnchorDefLocalPos, 2f).SetEase(Ease.OutBack);

        GameObject Player_00MotiagerareStandPosObj
            = Resources.Load("_PosObj/05Motiage/Player_00MotiagerareStandPosObj") as GameObject;

        CameraObjectsTrs.DOLocalMove(Player_00MotiagerareStandPosObj.transform.localPosition, 2f);

        #endregion
        #region 動的にカメラリセット設定
        //cameraobjectsのリセット回転値と回転を指定し
        DB.cameraObjectsResetLocalEul =
        CameraObjectsTrs.transform.localEulerAngles = Player_00MotiagerareStandPosObj.transform.localEulerAngles;
        //アンカーも
        DB.cameraAnchorResetLocalPos = DB.cameraStandAnchorDefLocalPos;


        //アンカー回転を、現在のアンカー回転から指定を引いた数に（今向いてる方向に一瞬で変え）
        CameraAnchorTrs.localEulerAngles =
            -(Player_00MotiagerareStandPosObj.transform.localEulerAngles
            - CameraAnchorTrs.localEulerAngles);
        nowPlayerStand = true;
        #endregion

        #region プレイヤーがん見（頭）(Clamp注意)
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        LAIKHead.solver.clampWeightHead = 0.5f;
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        #endregion


        yield return new WaitForSeconds(2f);

        //Iteration戻し
        FBBIK.solver.iterations = 4;


        DOTweenToIKEfPos(IKRHandEf, 0, 1.6f);
        DOTweenToIKEfPos(IKLHandEf, 0, 1.6f);
        #endregion

        #region ほらね ～ もうちょっと小さくなれば
        yield return new WaitForSeconds(3f);

        HukidashiNovelDistanceChange(0.3f);
        Hukidashi("B2020040");//ほらね
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);
        while (isNovelSetVisIng) { yield return null; }

        NovelSetVis("B2020040");//俺かよ！　あれ？
        while (novelCurrentPageInt < 2) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2020050");//がまんできなくて・・
        AseTare();
        TereHoho();
        ChieriMotion("あはは・・・", 0.4f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.3f, 2);//時間差表情戻し

        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);
        while (isNovelSetVisIng) { yield return null; }
        TereHoho(false, 4);

        NovelSetVis("B2020050");//智恵理が持ち上げたんだよな？
        while (novelCurrentPageInt < 1) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2020060");//立ち上がらせるので精一杯だったけどね
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);
        while (isNovelSetVisIng) { yield return null; }


        Hukidashi("B2020070");//もうちょっと小さくなれば
        #endregion

        #region スマホで縮小開始（片手マスク版）

        //スマホ片手いじりPosへ
        GameObject ChieriSumaho_LHand_SekurabeKatatePosObj = Resources.Load("_PosObj/_ParentPoseObjs/ChieriSumaho_LHand_SekurabeKatatePosObj") as GameObject;
        ChieriSumahoObj.transform.localPosition = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localEulerAngles;

        string
            tmpBaseAnimStateName = "立ちループ";

        StartCoroutine(GirlAnimReadSystem(11));

        //マスクのため、レイヤーのアニメを1フレでベースと同じモーション状態にする（ParameterでNormlizedTimeが指定できる（ただし指定し続けないと静止））
        ChieriMotion(tmpBaseAnimStateName, 0f, 11);//現在のベースアニメと同じアニメ指定
        girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeに
        yield return null;//↑適用に1フレ必要

        ChieriMotion("背比べ左手スマホ取り出し", 0.5f, 11);
        while (nowGirlAnimOtherLayerClipNameDict[11] != "背比べスマホ取り出し") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[11] <= 0.375f) { yield return null; }
        //スマホObjオン（取り出し）
        ChieriSumahoObj.SetActive(true);
        //画面つける（画面更新も一緒に起動される）
        ChieriSumahoPower(true);

        #region スマホ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.8f, 1);
        #endregion



        while (girlAnimOtherLayerNomTimeDict[11] <= 1f) { yield return null; }

        #region ■目眩リトルとDOTWeenTOでプレイヤーサイズ縮小(縮小完了bool付き)マスク版
        ChieriMotion("背比べ左手スマホいじり", 0f, 11);
        yield return new WaitForSeconds(1);

        bool isShrinkComplete = false;
        //段階別で目眩具合と縮小度変更して縮小
        PPv2MemaiLittle(1f);

        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
        , DB.playerScale_MotiageZero, 10f)
        .OnComplete(() => { isShrinkComplete = true; });

        #endregion
        SEPlay("magic-attack-darkness1_long(-12)", 0.5f);

        //BGM小さく
        BGMPlay(true, null, 0.3f, 3);

        //環境音フェードアップ
        KankyouBGMVolumer(0.5f, 5f);
        DOTween.To(() => clockVolume, (x) => clockVolume = x
        , 0.5f, 5);


        while (nowGirlAnimOtherLayerClipNameDict[11] != "背比べスマホいじり") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[11] <= 2f) { yield return null; }

        HukidashiNovelDistanceChange(0.4f);

        NovelSetVis("B2020060");//再び　えっじゃこれって

        #region プレイヤーがん見（頭）(Clamp注意)
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        //プレイヤー見（目）
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);

        LAIKHead.solver.clampWeightHead = 0.5f;
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        #endregion

        while (isNovelSetVisIng) { yield return null; }



        ChieriMotion("背比べ左手スマホしまう", 0f, 11);
        StartCoroutine(GirlAnimReadSystem(11));
        while (nowGirlAnimOtherLayerClipNameDict[11] != "背比べスマホしまう") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[11] <= 0.5f) { yield return null; }
        //スマホObjオフ（しまう）
        ChieriSumahoObj.SetActive(false);

        //モーション終了まで待機
        while (girlAnimOtherLayerNomTimeDict[11] <= 0.65f) { yield return null; }

        //現在のベースと同じモーションになるまで待機してからnoData
        ChieriMotion(tmpBaseAnimStateName, 0.5f, 11);
        while (nowGirlAnimOtherLayerClipNameDict[11] != nowGirlAnimClipName)
        {
            girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeにセットし続ける
            yield return null;
        }
        ChieriMotion("_noData", 0f, 11);


        while (isShrinkComplete == false) { yield return null; }
        #endregion




        //スマホ取り出しの屈みと、背比べ待機の上半身（後ろ腕組）
        ChieriMotion("立ちスマホ取り出し", 0.5f, 0);
        ChieriMotion("背比べ待機02", 1f, 1);

        Hukidashi("B2020080");//胸より下になっちゃった
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        ChieriMotion("f_余裕感笑顔", 0.5f, 2);
        yield return new WaitForSeconds(2);
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        ChieriMotion("h_右少し傾け", 2f, 7);


        while (nowGirlAnimClipName != "立ちスマホ操作スライドループ") { yield return null; }
        while (girlAnimNomTime <= 1f) { yield return null; }
        isGirlAnimReadSystem = false;


        NovelSetVis("B2020070");//大人と子供だ！
        while (isNovelSetVisIng) { yield return null; }


        ChieriMotion("h_noData", 1f, 7);
        ChieriMotion("立ちループ", 0.5f, 0);
        yield return new WaitForSeconds(0.5f);
        ChieriMotion("_noData", 1f, 1);//マスク消し


        //IK足固定(持ち上げるときに屈む用)
        GirlPosToIKTargetPosRot();
        DB.isChieriPosLock = false;
        yield return null;
        DOTweenToIKEfPos(IKRFootEf, 1, 0);
        DOTweenToIKEfRot(IKRFootEf, 1, 0);
        DOTweenToIKEfPos(IKLFootEf, 1, 0);
        DOTweenToIKEfRot(IKLFootEf, 1, 0);


        yield return new WaitForSeconds(0.7f);
        Hukidashi("B2020100");//これなら・・それ！

        //BGM戻し
        BGMPlay(true, null, 1f, 4);

        //環境音フェードダウン
        KankyouBGMVolumer(0.2f, 5f);


        #region ■高い高いから降ろすまで一連
        #region プレイヤーがん見（頭　数値0.9）(Clamp注意)
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        LAIKHead.solver.clampWeightHead = 0.5f;
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.9f, 1);
        #endregion

        ////VR時とPC時で位置変える
        //if (XRSettings.enabled)
        //{
        //    //IK両手 プレイヤーの両脇くらいに //こちらはcameraObjectsに追従（PlayerTargetだと上げた後カメラ動かすと手が動いちゃうので
        //    FollowDOMove(IKRHandTargetTrs, CameraObjectsTrs, new Vector3(-0.088f, 0.544f, 0.1f), 0f);
        //    FollowDOMove(IKLHandTargetTrs, CameraObjectsTrs, new Vector3(-0.088f, 0.544f, -0.1f), 0f);
        //}
        //else
        //{
        FollowDOMove(IKRHandTargetTrs, CameraObjectsTrs, new Vector3(0f, 0.57f, 0.1f), 0f);
        FollowDOMove(IKLHandTargetTrs, CameraObjectsTrs, new Vector3(0f, 0.57f, -0.1f), 0f);
        //}

        //※↑設定方法
        //高い高いまで進め、IKTarget動かし、DOTWeenを切り、Cameraobjectsにペアレントし、CameraObjectsを0位置にして、ペアレントはずした値


        //同時に屈み処理（足固定してのChieri移動）
        GameObject Chieri_IKFootLock_TakaitakaiKagamiPosObj
            = Resources.Load("_PosObj/05Motiage/Chieri_IKFootLock_TakaitakaiKagamiPosObj") as GameObject;
        GirlTrs.DOLocalMove(Chieri_IKFootLock_TakaitakaiKagamiPosObj.transform.localPosition
            , 1.5f);



        //IKON
        DOTweenToIKEfPos(IKRHandEf, 1, 1.5f);
        DOTweenToIKEfPos(IKLHandEf, 1, 1.5f);
        yield return new WaitForSeconds(1.5f);

        //屈み処理戻し
        GirlTrs.DOLocalMove(Vector3.zero
            , 3f).SetEase(Ease.OutBack)
            .OnComplete(() =>
            {
                //足固定外しと智恵理位置ロック
                DB.isChieriPosLock = true;
                DOTweenToIKEfPos(IKRFootEf, 0, 0);
                DOTweenToIKEfRot(IKRFootEf, 0, 0);
                DOTweenToIKEfPos(IKLFootEf, 0, 0);
                DOTweenToIKEfRot(IKLFootEf, 0, 0);
            });


        //頭風ノイズフェードイン
        //DOTWeenTO
        DOTween.To(() => PlayerHeadWindnoiseSoundObj.GetComponent<AudioSource>().volume, (x) => PlayerHeadWindnoiseSoundObj.GetComponent<AudioSource>().volume = x
        , 0.2f
        , 1.5f)
        .OnComplete(() =>
        {
            //フェードアウト            
            DOTween.To(() => PlayerHeadWindnoiseSoundObj.GetComponent<AudioSource>().volume, (x) => PlayerHeadWindnoiseSoundObj.GetComponent<AudioSource>().volume = x
            , 0f
            , 0.7f);
        });

        #region プレイヤー持ち上げられ移動
        GameObject Player_01MotiagerareTakaiTakaiPosObj;
        //if (XRSettings.enabled)
        //{
        //    Player_01MotiagerareTakaiTakaiPosObj 
        //        = Resources.Load("_PosObj/05Motiage/Player_01MotiagerareTakaiTakaiPosObj") as GameObject;
        //}
        //else
        //{
        Player_01MotiagerareTakaiTakaiPosObj
            = Resources.Load("_PosObj/05Motiage/Player_01MotiagerareTakaiTakaiPCPosObj") as GameObject;
        //}

        DOTween.To(() => CameraObjectsTrs.localPosition, (x) => CameraObjectsTrs.localPosition = x,
            Player_01MotiagerareTakaiTakaiPosObj.transform.localPosition, 6f).SetEase(Ease.OutBack);

        #endregion
        //トラッキングオフとリセンター
        InputTracking.disablePositionalTracking = true;
        if (XRSettings.enabled)//VRポジションリセット
        {
            //CameraReset(null, null, true);
            yield return null;
            VRUICameraTrs.localPosition = Vector3.zero;
            VRCameraTrs.localPosition = Vector3.zero;
        }

        //太一位置ずらし
        //if (XRSettings.enabled)
        //{ Player_DummyTrs.localPosition = new Vector3(0, 0, -0.2f); }
        //else
        //{
        Player_DummyTrs.localPosition = new Vector3(0, 0f, -0.08f);
        //}



        HukidashiNovelDistanceChange(0.55f);

        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(3, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1);
        DelAll_Hukidashi();
        Hukidashi("B2020110");//たかいたかい
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);



        NovelSetVis("B2020080");//持ち上がった　軽くなってんの？！
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2020120");//幼稚園児みたいだし？
        ChieriMotion("ん？", 0.2f, 2);
        yield return new WaitForSeconds(1);
        ChieriMotion("h_右少し傾け", 0.5f, 7);
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2020090");//幼稚園児って　実際に縮んでる？！
        while (isNovelSetVisIng) { yield return null; }
        ChieriMotion("h_noData", 1f, 7);
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2020130");//軽い軽い
        #region 軽い軽い
        GameObject Player_02MotiagerareSaraniTakaiPosObj;
        //if (XRSettings.enabled)
        //{
        //    Player_02MotiagerareSaraniTakaiPosObj 
        //        = Resources.Load("_PosObj/05Motiage/Player_02MotiagerareSaraniTakaiPosObj") as GameObject;
        //}
        //else
        //{
        Player_02MotiagerareSaraniTakaiPosObj
            = Resources.Load("_PosObj/05Motiage/Player_02MotiagerareSaraniTakaiPCPosObj") as GameObject;
        //}
        CameraObjectsTrs.DOLocalMove
            (Player_02MotiagerareSaraniTakaiPosObj.transform.localPosition, 5f);
        //DOTween.To(() => CameraObjectsTrs.localPosition, (x) => CameraObjectsTrs.localPosition = x,
        //    Player_01MotiagerareTakaiTakaiPosObj.transform.localPosition, 6f).SetEase(Ease.OutBack);

        #endregion

        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        NovelSetVis("B2020100");//ちょっと降ろしてくれ！
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2020140");//えー、最初はこれぐらいの高さだったのに
        ChieriMotion("ん？", 0.2f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        #region おろし途中
        GameObject Player_03MotiagerareOrosiTotyuuPosObj
            = Resources.Load("_PosObj/05Motiage/Player_03MotiagerareOrosiTotyuuPosObj") as GameObject;

        CameraObjectsTrs.DOLocalMove
            (Player_03MotiagerareOrosiTotyuuPosObj.transform.localPosition, 4f);
        //DOTween.To(() => CameraObjectsTrs.localPosition, (x) => CameraObjectsTrs.localPosition = x,
        //    Player_01MotiagerareTakaiTakaiPosObj.transform.localPosition, 6f).SetEase(Ease.OutBack);

        #endregion
        yield return new WaitForSeconds(3);

        TereHoho();
        yield return new WaitForSeconds(0.5f);

        HukidashiNovelDistanceChange(0.3f);

        Hukidashi("B2020150");//ふふ
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(0.5f);



        #region おろし
        GameObject Player_04MotiagerareOrosiPosObj
            = Resources.Load("_PosObj/05Motiage/Player_04MotiagerareOrosiPosObj") as GameObject;

        CameraObjectsTrs.DOLocalMove
            (Player_00MotiagerareStandPosObj.transform.localPosition, 3f).SetEase(Ease.InBack);
        //DOTween.To(() => CameraObjectsTrs.localPosition, (x) => CameraObjectsTrs.localPosition = x,
        //    Player_01MotiagerareTakaiTakaiPosObj.transform.localPosition, 6f).SetEase(Ease.OutBack);

        #endregion
        yield return new WaitForSeconds(2);

        //IK足固定(降ろすときに屈む用)
        GirlPosToIKTargetPosRot();
        DB.isChieriPosLock = false;
        yield return null;
        DOTweenToIKEfPos(IKRFootEf, 1, 0f);
        DOTweenToIKEfRot(IKRFootEf, 1, 0f);
        DOTweenToIKEfPos(IKLFootEf, 1, 0f);
        DOTweenToIKEfRot(IKLFootEf, 1, 0f);

        DelAll_Hukidashi();
        HukidashiNovelDistanceChange(0.4f);
        Hukidashi("B2020160");//よいしょっと

        yield return new WaitForSeconds(0.7f);

        #region 同時に屈み処理（足固定してのChieri移動）（0.7+0.3での1秒ウェイトでかなり感覚的に処理）
        GirlTrs.DOLocalMove(Chieri_IKFootLock_TakaitakaiKagamiPosObj.transform.localPosition
            , 0.5f)
            .OnComplete(() =>
            {
                //屈み処理戻し
                GirlTrs.DOLocalMove(Vector3.zero
                    , 1f)
                    .OnComplete(() =>
                    {
                        //足固定外しと智恵理位置ロック
                        DB.isChieriPosLock = true;
                        DOTweenToIKEfPos(IKRFootEf, 0, 0);
                        DOTweenToIKEfRot(IKRFootEf, 0, 0);
                        DOTweenToIKEfPos(IKLFootEf, 0, 0);
                        DOTweenToIKEfRot(IKLFootEf, 0, 0);
                    });
            });
        #endregion

        yield return new WaitForSeconds(0.3f);

        //手戻し
        DOTweenToIKEfPos(IKRHandEf, 0, 1.6f);
        DOTweenToIKEfPos(IKLHandEf, 0, 1.6f);
        TereHoho(false, 4);




        //着地
        var tmpPos = new Vector3(CameraObjectsTrs.position.x, 0, CameraObjectsTrs.position.z);
        SEPlay(tmpPos, Other3DSEObj, "足音2_footsteps_shoe_grass_walk_04", 8f);


        //トラッキングオン
        InputTracking.disablePositionalTracking = false;
        if (XRSettings.enabled)//VRポジションリセット
        { CameraReset(null, null, true); }

        //太一位置戻し
        Player_DummyTrs.localPosition = new Vector3(0, 0, 0f);

        yield return KeyOrWait(3);

        while (IKLHandEf.positionWeight != 0) { yield return null; }
        #endregion

        //終了処理:
        EventMove("本当に縮んでるよ");

    }
    IEnumerator B2030()//本当に縮んでるよ
    {
        if (debugEventMoveFlag == true)
        {
            ChieriMotion("立ちループ", 0f, 0);
            ChieriMotion("笑顔01口眉_目閉じない", 0f, 2);

            #region プレイヤーがん見（目デフォ　頭 数値0.9）(頭Clamp注意)
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            FollowDOMove(IKLookAtEyeTargetTrs, PlayerTargetTrs, 0f);
            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);

            LAIKHead.solver.clampWeightHead = 0.5f;
            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
            DOTweenToLAIKSHead(LAIKHeadS, 0.9f, 1);

            #endregion

            nowPlayerLocalScale = DB.playerScale_MotiageZero;

            #region プレイヤー位置とカメラリセット
            GameObject Player_00MotiagerareStandPosObj
                = Resources.Load("_PosObj/05Motiage/Player_00MotiagerareStandPosObj") as GameObject;
            CameraObjectsTrs.localPosition = Player_00MotiagerareStandPosObj.transform.localPosition;

            //カメラリセット（+回転と立ち設定）
            //カメラリセット値変更してリセット
            CameraReset(Player_00MotiagerareStandPosObj.transform.localEulerAngles
                , DB.cameraStandAnchorDefLocalPos);//Anchorを立ちに
            #endregion

            //スマホ位置デフォルトPosへ
            GameObject ChieriSumaho_LHand_DefPosObj
                = Resources.Load("_PosObj/_ParentPoseObjs/ChieriSumaho_LHand_DefPosObj") as GameObject;
            ChieriSumahoObj.transform.localPosition = ChieriSumaho_LHand_DefPosObj.transform.localPosition;
            ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_LHand_DefPosObj.transform.localEulerAngles;
            #region 宿題
            //宿題システムスタート
            StartCoroutine(HomeworkSystem());
            //宿題7ページ目へ
            HwPageForceMove(7);

            //宿題ロック
            isHwVisLock = true;
            #endregion

        }
        EventReset();

        yield return new WaitForSeconds(0.5f);
        HukidashiNovelDistanceChange(0.5f);

        NovelSetVis("B2030010");//ふぅ・・それで、えーとつまり・・
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2030010");//うん、ほんとに縮んでるよ
        ChieriMotion("ん？", 0.2f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2030020");//ほ、ほんとにってヤバいやつ・・・　言ってるそばから縮む
        while (novelCurrentPageInt < 1) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        StartCoroutine(GirlAnimReadSystem());
        girlAnim.speed = 0.8f;
        ChieriMotion("立ちスマホ取り出し", 0.5f, 0);

        #region スマホ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 2f);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, 2f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 2);
        DOTweenToLAIKSHead(LAIKHeadS, 0.9f, 2);
        #endregion
        while (nowGirlAnimClipName != "立ちスマホ取り出し") { yield return null; }
        while (girlAnimNomTime <= 0.7f) { yield return null; }
        //スマホObjオン（取り出し）
        ChieriSumahoObj.SetActive(true);
        //画面つける（画面更新も一緒に起動される）
        ChieriSumahoPower(true);
        //スマホ見速度アップ
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0.2f);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, 0.2f);

        while (nowGirlAnimClipName != "立ちスマホ操作スライドループ") { yield return null; }
        while (girlAnimNomTime <= 1.3f) { yield return null; }
        ChieriMotion("立ちスマホ操作触らずループ", 0.5f, 0);
        #region ■目眩リトルとDOTWeenTOでプレイヤーサイズ縮小(縮小完了bool付き)マスク版
        bool isShrinkComplete = false;
        //段階別で目眩具合と縮小度変更して縮小
        PPv2MemaiLittle(1f);

        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
        , DB.playerScale_MotiageOne, 15f)
        .OnComplete(() => { isShrinkComplete = true; });

        #endregion
        SEPlay("magic-attack-darkness1_long(-12)", 0.5f);

        //BGM小さく
        BGMPlay(true, null, 0.2f, 3);

        //環境音フェードアップ
        KankyouBGMVolumer(0.6f, 5f);


        //プレイヤー0.4サイズまで待機
        while (nowPlayerLocalScale.x >= 0.4f) { yield return null; }

        Hukidashi("B2030020");//ほら
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        ChieriMotion("立ちスマホ見せ開始", 0.5f, 0);
        girlAnim.speed = 0.8f;
        #region プレイヤ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        #endregion
        #region スマホ見せ左手IK回転（位置は肘がおかしくなるので回転のみ）
        GameObject IKLHand_Chieri_SumahoMiseRotObj
            = Resources.Load("_PosObj/06HontoniChiisaku/IKLHand_Chieri_SumahoMiseRotObj") as GameObject;
        IKLHandTargetTrs.localEulerAngles = IKLHand_Chieri_SumahoMiseRotObj.transform.localEulerAngles;

        DOTweenToIKEfRot(IKLHandEf, 1, 2);
        #endregion

        while (isNovelSetVisIng) { yield return null; }

        NovelSetVis("B2030030");//現在身長　え、そんなに？！

        HukidashiNovelDistanceChange(1.25f);

        //縮小完了まで待機
        while (isShrinkComplete == false) { yield return null; }
        while (isNovelSetVisIng) { yield return null; }
        Hukidashi("B2030030");//膝下くらい？
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        yield return new WaitForSeconds(0.5f);
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        yield return new WaitForSeconds(0.5f);
        ChieriMotion("f_あ！ほら！", 1f, 2);
        yield return KeyOrWait(3);

        ChieriMotion("立ちスマホちら見開始", 1f, 0);

        #region スマホ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, 1f);
        #endregion

        //手回転IK消し
        DOTweenToIKEfRot(IKLHandEf, 0, 1);

        NovelSetVis("B2030040");//え、うわやば　後ずさる
        while (isNovelSetVisIng) { yield return null; }

        FadeBlack(1, 0.5f);
        yield return new WaitForSeconds(0.5f);

        #region 暗幕中に設定
        //プレイヤー位置
        GameObject Player_00SekurabeStandPosObj
            = Resources.Load("_PosObj/02Sekurabe/Player_00SekurabeStandPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_00SekurabeStandPosObj.transform.localPosition;

        //宿題終了
        isHomeworkSystem = false;

        //首ガクッとなるので暗幕中にClamp
        DOTween.To(() => LAIKHead.solver.clampWeightHead, (x) => LAIKHead.solver.clampWeightHead = x
        , 0.85f
        , 0.3f);

        #endregion

        if (DB.isUserInfoVisMakotoHeightUnlock == false)
        {
            //マコト身長表示アンロック
            DB.isUserInfoVisMakotoHeightUnlock = true;
            SubTitleVis(true, "Unlock M Key", 1, true);
            yield return new WaitForSeconds(2);
        }

        yield return new WaitForSeconds(0.5f);
        FadeBlack(0, 0.5f);
        HukidashiNovelDistanceChange(1.7f);
        yield return new WaitForSeconds(0.5f);

        //スマホ見
        Hukidashi("B2030040");//わ～○○センチだって
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        ChieriMotion("f_わ～こんなとこばっか見てる", 0.5f, 2);

        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2030050");//さ、○○センチ！？
        ChieriMotion("ん？", 0.5f, 2);
        #region プレイヤー見 （頭Clamp0.85）

        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

        //LAIKHead.solver.clampWeightHead = 0.85f;
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 3f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 3f);
        #endregion
        while (novelCurrentPageInt < 2) { yield return null; }
        TereHoho();
        #region プレイヤーぴょんぴょん（DOLocalJumpテスト）
        //着地
        var tmpPos = new Vector3(CameraObjectsTrs.position.x, 0, CameraObjectsTrs.position.z);

        CameraObjectsTrs.DOLocalJump(CameraObjectsTrs.localPosition, 0.1f, 2, 1);
        yield return new WaitForSeconds(0.2f);
        SEPlay(tmpPos, Other3DSEObj, "足音2_footsteps_shoe_grass_walk_04", 8f);
        yield return new WaitForSeconds(0.6f);
        SEPlay(tmpPos, Other3DSEObj, "足音3_footsteps_shoe_grass_walk_05", 8f);


        #endregion

        while (novelCurrentPageInt < 4) { yield return null; }
        ChieriMotion("立ちスマホ口元手開始", 0f, 0);
        #region IKRHandペアレントで口元に当てる手の位置調整
        GameObject KutiSitaNigiriTeate01_IKRHand_PareBip001HeadPosObj
            = Resources.Load("_PosObj/_ParentPoseObjs/KutiSitaNigiriTeate01_IKRHand_PareBip001HeadPosObj") as GameObject;
        IKRHandTargetTrs.SetParent(Bip001HeadTrs);
        IKRHandTargetTrs.localPosition = KutiSitaNigiriTeate01_IKRHand_PareBip001HeadPosObj.transform.localPosition;
        IKRHandTargetTrs.localEulerAngles = KutiSitaNigiriTeate01_IKRHand_PareBip001HeadPosObj.transform.localEulerAngles;
        yield return new WaitForSeconds(1);

        DOTweenToIKEfPos(IKRHandEf, 1, 2);
        DOTweenToIKEfRot(IKRHandEf, 1, 2);

        //肘上がりすぎなのでBend
        FBBIK.solver.rightArmChain.bendConstraint.weight = 0.97f;
        #endregion

        while (isNovelSetVisIng) { yield return null; }
        ChieriMotion("f_あはは目開き", 2f, 2);
        yield return new WaitForSeconds(0.5f);
        Hukidashi("B2030050");//待って、可愛いすぎ・・
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);
        ChieriMotion("立ちスマホ口元手くねくね", 0f, 0);
        ChieriMotion("f_下がり眉ジト目笑顔口", 4f, 2);

        NovelSetVis("B2030060");//へ？　やめろってそういう反応！
        while (isNovelSetVisIng) { yield return null; }

        //スマホぶらつかせと手IKOFF
        StartCoroutine(GirlAnimReadSystem());
        ChieriMotion("立ちスマホぶらつかせ開始", 1f, 0);
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        DOTweenToIKEfPos(IKRHandEf, 0, 1);
        DOTweenToIKEfRot(IKRHandEf, 0, 1);
        while (nowGirlAnimClipName != "立ちスマホぶらつかせループ") { yield return null; }

        //スマホぶらつかせポジに
        DOTween.To(() => ChieriSumahoObj.transform.localPosition, (x) => ChieriSumahoObj.transform.localPosition = x
        , ChieriSumaho_LHand_BuraBuraPosObj.transform.localPosition, 0.5f);
        DOTween.To(() => ChieriSumahoObj.transform.localRotation, (x) => ChieriSumahoObj.transform.localRotation = x
        , ChieriSumaho_LHand_BuraBuraPosObj.transform.localRotation.eulerAngles, 0.5f);

        HukidashiNovelDistanceChange(2f);

        Hukidashi("B2030060");//ほらほら届くかも？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        //Bend戻し
        FBBIK.solver.rightArmChain.bendConstraint.weight = 1f;


        NovelSetVis("B2030070");//やらせようとすんな！
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);
        ChieriMotion("あはは・・・", 0.3f, 2);
        AseTare();
        Hukidashi("B2030070");//あはは、だめ？

        yield return new WaitForSeconds(1f);

        ChieriMotion("立ちスマホぶらつかせ終了", 0.5f, 0);
        ChieriMotion("f_あはは目開き", 0.1f, 2);

        #region スマホデフォルトポジにTween
        DOTween.To(() => ChieriSumahoObj.transform.localPosition, (x) => ChieriSumahoObj.transform.localPosition = x
        , ChieriSumaho_LHand_DefPosObj.transform.localPosition, 0.5f);
        DOTween.To(() => ChieriSumahoObj.transform.localRotation, (x) => ChieriSumahoObj.transform.localRotation = x
        , ChieriSumaho_LHand_DefPosObj.transform.localRotation.eulerAngles, 0.5f);
        #endregion

        while (nowGirlAnimClipName != "立ちスマホぶらつかせ終了") { yield return null; }
        while (girlAnimNomTime <= 0.85f) { yield return null; };

        #region スマホ見(頭clampDOTWeen)
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, 1f);
        DOTween.To(() => LAIKHead.solver.clampWeightHead, (x) => LAIKHead.solver.clampWeightHead = x
        , 0.7f, 1);
        #endregion

        while (nowGirlAnimClipName != "立ちスマホしまい") { yield return null; }
        while (girlAnimNomTime <= 0.6f) { yield return null; };

        TereHoho(false, 3);
        #region IKプレイヤ見（頭ClampDOTWeen）
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
        DOTween.To(() => LAIKHead.solver.clampWeightHead, (x) => LAIKHead.solver.clampWeightHead = x
        , 0.8f, 0.5f);
        #endregion

        //スマホOFF
        ChieriSumahoObj.SetActive(false);

        yield return KeyOrWait(3);

        Hukidashi("B2030080");//恥ずかしがることないのに～
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2030080");//ほーん？
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2030090");//私が？　なんで？
        ChieriMotion("ん？", 0.5f, 2);
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);
        ChieriMotion("立ち髪かきあげ", 0.5f, 0);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2030090");//見上げてるわけだけども
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(2f);

        //終了処理:
        EventMove();
    }
    IEnumerator B2040()//上見ちゃだめ
    {
        if (debugEventMoveFlag == true)
        {
            ChieriMotion("立ちループ", 0f, 0);
            ChieriMotion("ん？", 0f, 2);

            #region IKプレイヤ見（頭Clamp0.8）
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
            DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

            LAIKHead.solver.clampWeightHead = 0.8f;

            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0f);
            DOTweenToLAIKSHead(LAIKHeadS, 1, 0f);
            #endregion
            nowPlayerLocalScale = DB.playerScale_MotiageOne;

            #region プレイヤー位置とカメラリセット
            GameObject Player_00SekurabeStandPosObj
                = Resources.Load("_PosObj/02Sekurabe/Player_00SekurabeStandPosObj") as GameObject;
            CameraObjectsTrs.localPosition = Player_00SekurabeStandPosObj.transform.localPosition;

            //カメラリセット（+回転と立ち設定）
            //カメラリセット値変更してリセット
            CameraReset(Player_00SekurabeStandPosObj.transform.localEulerAngles
                , DB.cameraStandAnchorDefLocalPos);//Anchorを立ちに
            #endregion

        }
        EventReset();

        //腰見てる判定とする数値
        float tmpSeeSpineJudgeFlt = 1;

        HukidashiNovelDistanceChange(0.8f);

        TereHohoAlphaChange(1);
        TereHoho(1f);
        ChieriMotion("f_あ！ほら！口普通キョトン", 1f, 2);

        yield return new WaitForSeconds(1f);
        AseTare(Mathf.Infinity);
        ChieriMotion("立ちループ", 1f, 0);
        ChieriMotion("監視注意開始", 0.1f, 1);
        ChieriMotion("f_怒り目見開き", 1f, 2);

        Hukidashi("B2040010");//下見て下！
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        NovelSetVis("B2040010");//恥ずかしがることないのに～
        while (isNovelSetVisIng) { yield return null; }


        StartCoroutine(SeeGirlSystem());
        yield return null;

        #region ■腰見てたら分岐
        if (seeSpineNomFlt > tmpSeeSpineJudgeFlt
            || seeHeadNomFlt > tmpSeeSpineJudgeFlt
            )
        {
            SHukidashi("B2040020");//いいから見ないで！
            #region ■下見るまで待機（フキダシゲージ）
            bool isTmpSpineMinai = true;

            //Sフキダシのスライダー取得
            Slider tmpSHukidashiSlider =
                hukidasis[0].transform.GetChild(0).Find("SentakuOnSlider").GetComponent<Slider>();

            tmpSHukidashiSlider.maxValue = 4;//4秒見なければ抜けるように

            while (isTmpSpineMinai)
            {
                //腰見てなければゲージ増える
                if (seeSpineNomFlt < tmpSeeSpineJudgeFlt
                    && seeHeadNomFlt < tmpSeeSpineJudgeFlt)
                {
                    tmpSHukidashiSlider.value += 1 * Time.deltaTime;
                    //MAXになったら抜け
                    if (tmpSHukidashiSlider.value == tmpSHukidashiSlider.maxValue)
                    {
                        DelAll_Hukidashi();
                        isTmpSpineMinai = false;
                    }
                }
                //腰見たらゲージ戻る
                else
                {
                    tmpSHukidashiSlider.value = tmpSHukidashiSlider.minValue;
                }
                yield return null;
            }
            #endregion
        }
        #endregion

        #region 智恵理ポーズ戻し
        StartCoroutine(GirlAnimReadSystem(1)); yield return null;

        //宿題見 目のみ一瞬で
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, DrillTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);


        ChieriMotion("立ちループ", 1f, 1);
        while (nowGirlAnimOtherLayerClipNameDict[1] != "ゆっくり立ち上がり後ループ") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[1] <= 1f) { yield return null; }
        ChieriMotion("_noData", 0f, 1);
        isGirlAnimReadSystem = false;

        ChieriMotion("怒01もうちょっと下がって", 1f, 2);
        TereHohoAlphaChange(0.4f);
        TereHoho(2);
        AseTare(2, false);
        #endregion


        NovelSetVis("B2040110");//宿題できないぞ

        #region 宿題見頭 //clamp注意
        FollowDOMove(IKLookAtHeadTargetTrs, DrillTrs, 1f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        DOTween.To(() => LAIKHead.solver.clampWeightHead, (x) => LAIKHead.solver.clampWeightHead = x
        , 0.5f, 2);
        #endregion

        yield return new WaitForSeconds(2);
        while (novelCurrentPageInt < 1) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2040110");//え？　あほんとだ
        ChieriMotion("ん？", 1f, 2);
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);
        while (isNovelSetVisIng) { yield return null; }

        #region ■腰見てたら分岐
        if (seeSpineNomFlt > tmpSeeSpineJudgeFlt
            || seeHeadNomFlt > tmpSeeSpineJudgeFlt)
        {
            #region IKプレイヤ見（頭Clamp0.8） terehoho
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
            DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

            TereHohoAlphaChange(1f);
            TereHoho(1);
            yield return new WaitForSeconds(1);
            AseTare(Mathf.Infinity);

            LAIKHead.solver.clampWeightHead = 0.8f;

            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
            DOTweenToLAIKSHead(LAIKHeadS, 1, 1f);
            #endregion
            ChieriMotion("監視注意開始", 0.1f, 1);
            ChieriMotion("f_怒り目見開き", 1f, 2);

            Hukidashi("B2040030");//だからこっち見ないの！
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            NovelSetVis("B2040020");//いや見ちゃうだろ！
            while (isNovelSetVisIng) { yield return null; }
            yield return new WaitForSeconds(0.5f);
            ChieriMotion("f_かなり怒り目軽くジト目", 1f, 2);

            //右上半身マスクに切り替えて右手戻し
            ChieriMotion("監視注意ループ", 0f, 10);
            yield return null;
            ChieriMotion("立ちループ", 1f, 10);

            Hukidashi("B2040040");//足でも見てて！
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            yield return new WaitForSeconds(0.5f);

            NovelSetVis("B2040030");//あ、足って……
            while (novelCurrentPageInt < 1) { yield return null; }

            //まだ腰見てたらゲージ開始　見てなかったら抜け
            if (seeSpineNomFlt > tmpSeeSpineJudgeFlt
                || seeHeadNomFlt > tmpSeeSpineJudgeFlt)
            {
                isNovelFadeTween = isNovelSetVisIng = false;

                SHukidashi("B2040050");//早く！
                ChieriMotion("f_かなり怒り目開き", 1f, 2);
                CameraAnchorTrs.DOShakePosition(0.5f, 0.1f);

                #region ■腰以外見るまで待機（フキダシゲージ）
                bool isTmpSpineMinai = true;

                //Sフキダシのスライダー取得
                Slider tmpSHukidashiSlider =
                    hukidasis[0].transform.GetChild(0).Find("SentakuOnSlider").GetComponent<Slider>();

                tmpSHukidashiSlider.maxValue = 4;//4秒見なければ抜けるように

                while (isTmpSpineMinai)
                {
                    //腰見てなければゲージ増える
                    if (seeSpineNomFlt < tmpSeeSpineJudgeFlt
                        && seeHeadNomFlt < tmpSeeSpineJudgeFlt)
                    {
                        tmpSHukidashiSlider.value += 1 * Time.deltaTime;
                        //MAXになったら抜け
                        if (tmpSHukidashiSlider.value == tmpSHukidashiSlider.maxValue)
                        {
                            DelAll_Hukidashi();
                            isTmpSpineMinai = false;
                            HukidashiNovelDistanceChange(2);
                            NovelSetVis("B2040040");//お～こわ

                            //判定少し緩めに
                            tmpSeeSpineJudgeFlt = 6;
                        }
                    }
                    //腰見たらゲージ戻る
                    else
                    {
                        tmpSHukidashiSlider.value = tmpSHukidashiSlider.minValue;
                    }
                    yield return null;
                }
                #endregion
            }

        }
        #endregion
        HukidashiNovelDistanceChange(2);


        #region 智恵理ポーズ戻し
        StartCoroutine(GirlAnimReadSystem(1));

        //宿題見 目のみ一瞬で
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, DrillTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);

        ChieriMotion("立ちループ", 1f, 1);
        while (nowGirlAnimOtherLayerClipNameDict[1] != "ゆっくり立ち上がり後ループ") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[1] <= 1f) { yield return null; }
        ChieriMotion("_noData", 0f, 1);
        ChieriMotion("_noData", 0f, 10);
        isGirlAnimReadSystem = false;

        ChieriMotion("怒01もうちょっと下がって", 1f, 2);
        TereHohoAlphaChange(0.4f);
        TereHoho(2);
        AseTare(2, false);

        #endregion
        #region 宿題見 //clamp注意
        FollowDOMove(IKLookAtEyeTargetTrs, DrillTrs, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, DrillTrs, 1f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        DOTween.To(() => LAIKHead.solver.clampWeightHead, (x) => LAIKHead.solver.clampWeightHead = x
        , 0.5f, 2);
        #endregion


        while (isNovelSetVisIng) { yield return null; }

        #region 台詞ごとに腰見判定（蹴り作るまで保留）
        yield return new WaitForSeconds(0.5f);
        ChieriMotion("監視向き変更開始", 0.5f, 0);
        ChieriMotion("f_ジト目40ん？私のハンカチで？", 1f, 2);
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2040120");//んー・・
        yield return new WaitForSeconds(0.5f); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2040130");//宿題できないわけだし・・
        yield return new WaitForSeconds(0.5f); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        #region ■腰見てたら分岐
        if (seeSpineNomFlt > tmpSeeSpineJudgeFlt
            || seeHeadNomFlt > tmpSeeSpineJudgeFlt)
        {
            Hukidashi("B2040141");//やっぱりちょっと遊んだり・・
            goto はぁ;
        }
        #endregion

        はぁ:
        #region パンツ見た設定で進む
        if (seeSpineNomFlt > tmpSeeSpineJudgeFlt
            || seeHeadNomFlt > tmpSeeSpineJudgeFlt)
        {
            #region IKプレイヤ見（頭Clamp0.8） terehoho
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
            DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
            #endregion
            ChieriMotion("監視ループポーズ", 2f, 0);
            yield return new WaitForSeconds(2);
            ChieriMotion("f_はぁ・・", 1f, 2, 0);
            yield return new WaitForSeconds(2);
            ChieriMotion("監視リラックス1開始ループポーズへ", 2f, 0);
            DelAll_Hukidashi();

            ChieriMotion("f_はぁ・・目瞑り口開け", 0.3f, 2, 0);
            ChieriMotionDelay(1.5f, "f_はぁ・・口開け", 1f, 2);
            Hukidashi("B2040143");//はぁ・・
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            yield return new WaitForSeconds(0.5f);
            Hukidashi("B2040145");//そんなにえっちだったんだ・・
            ChieriMotion("f_はぁ・・", 1f, 2, 0);
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            yield return new WaitForSeconds(0.5f);

            NovelSetVis("B2040115");//いや不可抗力で・・
            while (novelCurrentPageInt < 3) { yield return null; }

            ChieriMotion("f_はぁ・・怒り眉", 2f, 2, 0);
            Hukidashi("B2040147");//ふぅーん・・
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            ChieriMotion("監視リラックス１→2開始ループポーズへ", 3f, 0);

            while (isNovelSetVisIng) { yield return null; }
            yield return new WaitForSeconds(0.5f);

            #region IK横見
            GameObject IKLookEye_TodokimosinaikuseniPosObj
                = Resources.Load("_PosObj/06UemityaDame/IKLookEye_TodokimosinaikuseniPosObj") as GameObject;

            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            FollowDOLocalMove(IKLookAtEyeTargetTrs, IKLookEye_TodokimosinaikuseniPosObj.transform.localPosition, 0f);
            DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

            GameObject IKLookHead_TodokimosinaikuseniPosObj
                = Resources.Load("_PosObj/06UemityaDame/IKLookHead_TodokimosinaikuseniPosObj") as GameObject;
            FollowDOLocalMove(IKLookAtHeadTargetTrs, IKLookHead_TodokimosinaikuseniPosObj.transform.localPosition, 2f);
            DOTweenToLAIKSHead(LAIKHeadS, 1, 1f);
            #endregion

            yield return new WaitForSeconds(1);

            Hukidashi("B2040148");//見上げるしかできないくせに
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            NovelSetVis("B2040117");//うぐ・・

            while (novelCurrentPageInt < 5) { yield return null; }

            //IK目だけプレイヤ見
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
            DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

            ChieriMotion("f_ん？少し怒り", 0.8f, 2, 0);

            while (novelCurrentPageInt < 6) { yield return null; }
            #region IKプレイヤ見（頭Clamp0.8） terehoho
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
            DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
            LAIKHead.solver.clampWeightHead = 0.8f;
            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 3f);
            DOTweenToLAIKSHead(LAIKHeadS, 1, 3f);
            #endregion

            while (novelCurrentPageInt < 7) { yield return null; }
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            ChieriMotion("f_ん？少し笑顔", 0.2f, 2, 0);



            while (isNovelSetVisIng) { yield return null; }
            yield return new WaitForSeconds(0.5f);




            goto やったぁ;
        }
        #endregion

        Hukidashi("B2040140");//やっぱりちょっと遊ばない？
        #region IKプレイヤ見（頭Clamp0.8） terehoho
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        LAIKHead.solver.clampWeightHead = 0.8f;
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 1f);
        #endregion
        ChieriMotion("あはは・・・", 0.3f, 2, 0);
        ChieriMotionDelay(1.5f, "f_笑顔01口眉下がり_目閉じない", 0.2f, 2);
        ChieriMotion("監視リラックス1開始", 1f, 0);
        yield return new WaitForSeconds(0.5f); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);


        NovelSetVis("B2040120");//大きさを戻す概念は無いのか！
        while (isNovelSetVisIng)
        {
            #region ■腰見てたら分岐
            if (seeSpineNomFlt > tmpSeeSpineJudgeFlt
                || seeHeadNomFlt > tmpSeeSpineJudgeFlt)
            {
                goto はぁ;
            }
            #endregion
            yield return null;
        }

        NovelSetVis("B2040130");//誘導された気がする
        ChieriMotion("監視リラックス１→2開始", 1f, 0);
        while (isNovelSetVisIng)
        {
            #region ■腰見てたら分岐
            if (seeSpineNomFlt > tmpSeeSpineJudgeFlt
                || seeHeadNomFlt > tmpSeeSpineJudgeFlt)
            {
                goto はぁ;
            }
            #endregion
            yield return null;
        }

        NovelSetVis("B2040140");//意固地になることないか
        while (isNovelSetVisIng)
        {
            #region ■腰見てたら分岐
            if (seeSpineNomFlt > tmpSeeSpineJudgeFlt
                || seeHeadNomFlt > tmpSeeSpineJudgeFlt)
            {
                goto はぁ;
            }
            #endregion

            yield return null;
        }

        #endregion


        NovelSetVis("B2040150");//うーんわかった
        while (novelCurrentPageInt < 1) { yield return null; }
        yield return new WaitForSeconds(1f);

        やったぁ:

        girlAnim.speed = 0.7f;
        Hukidashi("B2040150");//ほんと？　やったぁ！
        ChieriMotion("プレイヤ横しゃがみ開始", 0.5f, 0);
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        while (isNovelSetVisIng) { yield return null; }
        HukidashiNovelDistanceChange(1.4f);

        yield return new WaitForSeconds(1);

        NovelSetVis("B2040160");//うおっと・・
        while (isNovelSetVisIng) { yield return null; }




        yield return new WaitForSeconds(1);
        NovelSetVis("B2040170");//どうやって外すんだ？
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        //BGMフェードアウト
        BGMPlay(false, null, 0f, 0, 8);

        Hukidashi("B2040160");//あ、その、さ
        #region 右上ちら見してすぐ戻す
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        //LAIKEye.solver.clampWeightEyes = 0.88f;
        GameObject ChieriIKEyeMigiue_HeadLocalPosObj
            = Resources.Load("_PosObj/_ParentPoseObjs/ChieriIKEyeMigiue_HeadLocalPosObj") as GameObject;
        FollowDOMove(IKLookAtEyeTargetTrs, Bip001HeadTrs.TransformPoint(ChieriIKEyeMigiue_HeadLocalPosObj.transform.localPosition), 0f);
        yield return new WaitForSeconds(0.5f);


        //プレイヤー見る
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        #endregion
        yield return KeyOrWait(3);
        ChieriMotion("プレイヤ横しゃがみ顔よせ開始", 2f, 0);
        ChieriMotion("f_公ってえっちなものばかり", 2f, 2);
        yield return new WaitForSeconds(1f);

        Hukidashi("B2040170");//どこまで縮むか試してみたくない？

        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        FadeBlack(1, 4);
        yield return new WaitForSeconds(4);

        yield return new WaitForSeconds(2);

        EventMove("どこまで縮むかな");


        yield return null;
    }
    IEnumerator B2050()//どこまで縮むかな
    {
        if (debugEventMoveFlag == true)
        {
            girlAnim.speed = 0.7f;
            nowPlayerLocalScale = DB.playerScale_MotiageOne;

            FadeBlack(1, 0);

        }
        EventReset();

        #region 暗幕設定
        #region 智恵理ポーズと位置
        DB.isChieriPosLock = false;

        GameObject Chieri010_SyagamiChizimePosObj
            = Resources.Load("_PosObj/07DokomadeChizimukana/Chieri010_SyagamiChizimePosObj") as GameObject;
        GirlTrs.localPosition = Chieri010_SyagamiChizimePosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri010_SyagamiChizimePosObj.transform.localEulerAngles;

        ChieriMotion("片膝立ちミラーしゃがみループ原点", 0f, 0);
        ChieriMotion("笑顔01口眉_目閉じない", 0f, 2);
        TereHohoAlphaChange(0.2f);
        TereHoho(true, 0f);

        #region IKプレイヤ見（頭Clamp0.8）
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

        LAIKHead.solver.clampWeightHead = 0.8f;

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 0f);
        #endregion

        #region SoundObj右手に付与
        //WindnoiseSoundObj付与（左手）
        GameObject RHandWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRHandTrs);
        DB.evMoveDelObjList.Add(RHandWindnoiseSoundObj);
        RHandWindnoiseSoundObj.name = nameof(RHandWindnoiseSoundObj);
        RHandWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpRHandWindnoiseSound = RHandWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpRHandWindnoiseSound.aSource.maxDistance = 50;
        tmpRHandWindnoiseSound.pitchMax = 1f;
        tmpRHandWindnoiseSound.pitchUpRateAdjustFloat = 2;
        tmpRHandWindnoiseSound.pitchDownRateAdjustFloat = 0.0005f;

        tmpRHandWindnoiseSound.aSource.volume = 0f;
        #endregion
        #region SoundObj右足に付与
        //WindnoiseSoundObj付与（左手）
        GameObject RFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRFootTrs);
        DB.evMoveDelObjList.Add(RHandWindnoiseSoundObj);
        RFootWindnoiseSoundObj.name = nameof(RFootWindnoiseSoundObj);

        //ローカル位置
        GameObject RFootNoiseObj_BosikyuuLocalPosObj = Resources.Load("_PosObj/07DokomadeChizimukana/RFootNoiseObj_BosikyuuLocalPosObj") as GameObject;
        RFootWindnoiseSoundObj.transform.localPosition = RFootNoiseObj_BosikyuuLocalPosObj.transform.localPosition;

        //設定
        WindnoiseSound tmpRFootWindnoiseSound = RFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpRFootWindnoiseSound.aSource.maxDistance = 200;
        tmpRFootWindnoiseSound.pitchMax = 1f;
        tmpRFootWindnoiseSound.pitchUpRateAdjustFloat = 1;
        tmpRFootWindnoiseSound.pitchDownRateAdjustFloat = 0.0005f;

        tmpRFootWindnoiseSound.aSource.volume = 0f;
        #endregion
        #region SoundObj頭に付与（立ち上がり用）
        //WindnoiseSoundObj付与
        GameObject HeadWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , HeadSphereTrs);//（頭）
        DB.evMoveDelObjList.Add(HeadWindnoiseSoundObj);
        HeadWindnoiseSoundObj.name = nameof(HeadWindnoiseSoundObj);

        //ローカル位置
        GameObject SoundObj_01_Ningyou_PareHeadPosObj = Resources.Load("_PosObj/D_Henai_Day1/SoundObj_01_Ningyou_PareHeadPosObj") as GameObject;
        HeadWindnoiseSoundObj.transform.localPosition = SoundObj_01_Ningyou_PareHeadPosObj.transform.localPosition;

        //設定
        WindnoiseSound tmpHeadWindnoiseSound = HeadWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpHeadWindnoiseSound.aSource.maxDistance = 250;

        tmpHeadWindnoiseSound.aSource.volume = 0f;
        #endregion

        #endregion

        #region 持ち上げ音出すためにプレイヤー頭にWindNoiseSoundObj設置
        //WindnoiseSoundObj付与
        GameObject PlayerHeadWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundPlayerObj") as GameObject
            , CameraAnchorTrs);//（頭）
        DB.evMoveDelObjList.Add(PlayerHeadWindnoiseSoundObj);
        PlayerHeadWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpPlayerHeadWindnoiseSound = PlayerHeadWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpPlayerHeadWindnoiseSound.aSource.maxDistance = 50;
        tmpPlayerHeadWindnoiseSound.pitchMax = 1f;
        tmpPlayerHeadWindnoiseSound.pitchUpRateAdjustFloat = 6;
        tmpPlayerHeadWindnoiseSound.pitchDownRateAdjustFloat = 0.0005f;

        tmpPlayerHeadWindnoiseSound.aSource.volume = 0;
        #endregion

        #region プレイヤー 位置とポーズとカメラリセット
        GameObject Player010_StartStandPosObj
            = Resources.Load("_PosObj/07DokomadeChizimukana/Player010_StartStandPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player010_StartStandPosObj.transform.localPosition;

        //カメラリセット（+回転と立ち設定）
        //カメラリセット値変更してリセット
        CameraReset(Player010_StartStandPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos);//Anchorを立ちに

        #endregion

        ChieriMotion("h_noData", 0f, 7);//顔傾け用準備

        #endregion

        //環境音フェードアップ
        KankyouBGMVolumer(0.6f, 5f);

        HukidashiNovelDistanceChange(0.6f);


        FadeBlack(0, 4);
        yield return new WaitForSeconds(4);

        //goto デバッグ移動;

        NovelSetVis("B2050010");//どこまでって・・
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2050010");//気になってこない？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        ChieriMotion("片膝立ちミラー手伸ばし開始原点", 0f, 0);


        //右手風ノイズフェードインアウト
        //DOTWeenTO
        DOTween.To(() => tmpRHandWindnoiseSound.aSource.volume, (x) => tmpRHandWindnoiseSound.aSource.volume = x
        , 0.4f
        , 1f)
        .OnComplete(() =>
        {
            //フェードアウト            
            DOTween.To(() => tmpRHandWindnoiseSound.aSource.volume, (x) => tmpRHandWindnoiseSound.aSource.volume = x
            , 0f
            , 2f);
        });

        //ツイストOFF 
        isKataTwistAuto = false;
        #region ■右手プレイヤー頭に添える追従
        //■VRCameraから少し離れた位置に追従しつつ、VRcameraが回転しても影響を受けないようにする

        //まず現在のCameraAnchorTrs位置に手乗せ位置Objペアレント（事前にVRCameraが回転していても大丈夫なように）
        GameObject IKRHand_PareVRCamera_ChizimePlayerKaoSoeruPosObj
            = Instantiate(Resources.Load("_PosObj/07DokomadeChizimukana/IKRHand_PareVRCamera_ChizimePlayerKaoSoeruPosObj") as GameObject
            , CameraAnchorTrs, false);

        //PosObj位置からCameraAdjustTrackingTrs位置を引いたPos生成（Adjust量となる）
        Vector3 tmpAdjustPos =
            (IKRHand_PareVRCamera_ChizimePlayerKaoSoeruPosObj.transform.position
            - CameraAdjustTrackingTrs.position)
            / GameObjectsTrs.localScale.z;//メソッドでGameObjectsのサイズかけているので（メソッドでかける理由は、ほぼ全てのObjがGameObjectsに入っているため。今回は特別）

        //そして追いかけるのはVRカメラにAdjust量足した位置(1フレで移動したのち1.5追いかけに)
        FollowDOMove(IKRHandTargetTrs, VRCameraTrs, tmpAdjustPos, 0f);
        yield return null;
        FollowDOMove(IKRHandTargetTrs, VRCameraTrs, tmpAdjustPos, 1.5f);
        //これでVRcameraの位置に少し離れて追従しつつ、回転の影響を受けない

        //■調整する場合は、一旦IKRHandTTargetを直接追いかけるようにしてから（↑のTweenを切る）
        //IKRHandTargetを回転ゼロのVRCameraにペアレントして調整した後
        //PosObjのPrefab（IKRHand_PareVRCamera_ChizimePlayerKaoSoeruPosObj）に値をいれる



        //手首の回転(1フレで回転）
        IKRHandTargetTrs.DORotate(IKRHand_PareVRCamera_ChizimePlayerKaoSoeruPosObj.transform.eulerAngles, 0f);
        //Adjust位置、回転値読み取ったのでPosObj削除
        Destroy(IKRHand_PareVRCamera_ChizimePlayerKaoSoeruPosObj);


        //IKON
        DOTweenToIKEfPos(IKRHandEf, 1, 3);
        DOTweenToIKEfRot(IKRHandEf, 1, 6);


        #endregion
        yield return new WaitForSeconds(0.5f);

        HukidashiNovelDistanceChange(0.3f);

        NovelSetVis("B2050020");//まあ、うおお
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2050020");//ほら、手だけでこんなに
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2050030");//頭つかまれるかと・・きになる、けど・・・、・・よし試すか！
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        HukidashiNovelDistanceChange(0.6f);

        Hukidashi("B2050030");//やった！　嬉しい！
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1);
        NovelSetVis("B2050040");//ありがたいけども

        #region ■しゃがみながら左手スマホ取り出し　マスク IK版
        string
            tmpBaseAnimStateName = "片膝立ちミラー手伸ばしループ原点";
        #region スマホ片手いじりPosへ
        GameObject ChieriSumaho_LHand_SekurabeKatatePosObj = Resources.Load("_PosObj/_ParentPoseObjs/ChieriSumaho_LHand_SekurabeKatatePosObj") as GameObject;
        ChieriSumahoObj.transform.localPosition = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localEulerAngles;
        #endregion

        StartCoroutine(GirlAnimReadSystem(11));

        //マスクのため、レイヤーのアニメを1フレでベースと同じモーション状態にする（ParameterでNormlizedTimeが指定できる（ただし指定し続けないと静止））
        ChieriMotion(tmpBaseAnimStateName, 0f, 11);//現在のベースアニメと同じアニメ指定
        girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeに

        yield return null;//↑適用に1フレ必要

        ChieriMotion("背比べ左手スマホ取り出し", 0.5f, 11);

        #region 左手IK（しゃがみだと位置がずれるため）
        GameObject IKLHand_Chieri_Sumaho010DasuPosObj
            = Resources.Load("_PosObj/07DokomadeChizimukana/IKLHand_Chieri_Sumaho010DasuPosObj") as GameObject;
        IKLHandTargetTrs.localPosition = IKLHand_Chieri_Sumaho010DasuPosObj.transform.localPosition;
        IKLHandTargetTrs.localEulerAngles = IKLHand_Chieri_Sumaho010DasuPosObj.transform.localEulerAngles;

        DOTweenToIKEfPos(IKLHandEf, 1, 1f);
        DOTweenToIKEfRot(IKLHandEf, 1, 1f);

        #endregion

        while (nowGirlAnimOtherLayerClipNameDict[11] != "背比べスマホ取り出し") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[11] <= 0.375f) { yield return null; }
        isGirlAnimReadSystem = false;
        //スマホObjオン（取り出し）
        ChieriSumahoObj.SetActive(true);
        //画面つける（画面更新も一緒に起動される）
        ChieriSumahoPower(true);

        #region スマホ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, new Vector3(0, -0.5f, 0), 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.8f, 1);
        #endregion


        #region 左手IKいじり位置へ（力技
        //まずターゲットTween移動
        GameObject IKLHand_Chieri_Sumaho020IziriPosObj
            = Resources.Load("_PosObj/07DokomadeChizimukana/IKLHand_Chieri_Sumaho020IziriPosObj") as GameObject;
        IKLHandTargetTrs.DOLocalMove(IKLHand_Chieri_Sumaho020IziriPosObj.transform.localPosition, 1f);
        IKLHandTargetTrs.DOLocalRotate(IKLHand_Chieri_Sumaho020IziriPosObj.transform.localEulerAngles, 1f);

        //少しウェイト下げて
        DOTweenToIKEfPos(IKLHandEf, 0.6f, 0.5f);
        DOTweenToIKEfRot(IKLHandEf, 0.6f, 0.5f);

        yield return new WaitForSeconds(0.5f);
        //ウェイト戻す
        DOTweenToIKEfPos(IKLHandEf, 1, 0.5f);
        DOTweenToIKEfRot(IKLHandEf, 1, 0.5f);
        #endregion

        #endregion

        yield return new WaitForSeconds(3);

        DelAll_Hukidashi();
        Hukidashi("B2050040");//じゃあひとまず・・

        while (isNovelSetVisIng) { yield return null; }

        #region スマホいじって縮小
        ChieriMotion("背比べ左手スマホいじり", 0f, 11);
        #region IKプレイヤ見（頭Clamp0.8）
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

        LAIKHead.solver.clampWeightHead = 0.8f;

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 1f);
        #endregion

        #region ■目眩リトルとDOTWeenTOでプレイヤーサイズ縮小(縮小完了bool付き)マスク版
        bool isShrinkComplete = false;
        //段階別で目眩具合と縮小度変更して縮小
        PPv2MemaiLittle(1f);

        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
        , DB.playerScale_DokomadeChizimuZero, 10f)
        .OnComplete(() => { isShrinkComplete = true; });

        #endregion
        #endregion

        SEPlay("magic-attack-darkness1_long(-12)", 0.5f);

        yield return new WaitForSeconds(1);
        NovelSetVis("B2050050");//おおー・・　
        while (isShrinkComplete == false) { yield return null; }
        while (isNovelSetVisIng) { yield return null; }

        //IK OFF
        DOTweenToIKEfPos(IKRHandEf, 0, 2);
        DOTweenToIKEfRot(IKRHandEf, 0, 2);

        #region スマホしまい
        ChieriMotion("背比べ左手スマホしまう", 0f, 11);
        StartCoroutine(GirlAnimReadSystem(11));

        #region 左手IKしまい位置へ（力技
        //まずターゲットTween移動
        IKLHandTargetTrs.DOLocalMove(IKLHand_Chieri_Sumaho010DasuPosObj.transform.localPosition, 1.5f);
        IKLHandTargetTrs.DOLocalRotate(IKLHand_Chieri_Sumaho010DasuPosObj.transform.localEulerAngles, 1.5f);

        //同時に少しウェイト下げて
        DOTweenToIKEfPos(IKLHandEf, 0.6f, 0.5f);
        DOTweenToIKEfRot(IKLHandEf, 0.6f, 0.5f);

        yield return new WaitForSeconds(0.5f);
        //ウェイト戻す
        DOTweenToIKEfPos(IKLHandEf, 1, 0.5f);
        DOTweenToIKEfRot(IKLHandEf, 1, 0.5f);
        #endregion

        while (nowGirlAnimOtherLayerClipNameDict[11] != "背比べスマホしまう") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[11] <= 0.5f) { yield return null; }
        //スマホObjオフ（しまう）
        ChieriSumahoObj.SetActive(false);

        //ウェイト戻す
        DOTweenToIKEfPos(IKLHandEf, 0, 1.5f);
        DOTweenToIKEfRot(IKLHandEf, 0, 1.5f);

        //モーション終了まで待機
        while (girlAnimOtherLayerNomTimeDict[11] <= 0.65f) { yield return null; }

        //現在のベースと同じモーションになるまで待機してからnoData
        ChieriMotion(tmpBaseAnimStateName, 0.5f, 11);
        while (nowGirlAnimOtherLayerClipNameDict[11] != nowGirlAnimClipName)
        {
            girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeにセットし続ける
            yield return null;
        }
        ChieriMotion("_noData", 0f, 11);


        isGirlAnimReadSystem = false;

        #endregion

        #region 立ち上がり(風音も)

        girlAnim.speed = 0.6f;
        ChieriMotion("片膝立ちミラー終了立ち上がり原点", 0f, 0);

        //フェードイン
        DOTween.To(() => HeadWindnoiseSoundObj.GetComponent<AudioSource>().volume, (x) => HeadWindnoiseSoundObj.GetComponent<AudioSource>().volume = x
        , 1f
        , 0.2f);



        yield return new WaitForSeconds(2);


        //手添え時にOFFにしたツイストON
        isKataTwistAuto = true;

        #endregion

        HukidashiNovelDistanceChange(1.75f);

        NovelSetVis("B2050060");//立ち上がったらまた！　
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        //頭風音フェードアウト
        DOTween.To(() => HeadWindnoiseSoundObj.GetComponent<AudioSource>().volume, (x) => HeadWindnoiseSoundObj.GetComponent<AudioSource>().volume = x
        , 0f
        , 0.2f);

        Hukidashi("B2050050");//どう？　大きい？
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        #region IKで足固定して、体傾け
        //足IKと（その場固定）IKON 
        IKLFootTargetTrs.position = GirlLFootTrs.position;
        IKLFootTargetTrs.rotation = GirlLFootTrs.rotation;
        DOTweenToIKEfPos(IKLFootEf, 1, 0f);
        DOTweenToIKEfRot(IKLFootEf, 1, 1f);

        IKRFootTargetTrs.position = GirlRFootTrs.position;
        IKRFootTargetTrs.rotation = GirlRFootTrs.rotation;
        DOTweenToIKEfPos(IKRFootEf, 1, 0f);
        DOTweenToIKEfRot(IKRFootEf, 1, 1f);


        //智恵理の体自体（足固定で傾き表現）(足が浮くので、高さは少し遅らせる)
        GameObject Chieri020_FootIKLock_TatiMiorosiPosObj
            = Resources.Load("_PosObj/07DokomadeChizimukana/Chieri020_FootIKLock_TatiMiorosiPosObj") as GameObject;
        GirlTrs.DOLocalMoveX(Chieri020_FootIKLock_TatiMiorosiPosObj.transform.localPosition.x
            , 2f).SetEase(Ease.OutQuad);
        GirlTrs.DOLocalMoveY(Chieri020_FootIKLock_TatiMiorosiPosObj.transform.localPosition.y
            , 3f).SetEase(Ease.OutQuad);
        GirlTrs.DOLocalMoveZ(Chieri020_FootIKLock_TatiMiorosiPosObj.transform.localPosition.z
            , 2f).SetEase(Ease.OutQuad);
        GirlTrs.DOLocalRotate(Chieri020_FootIKLock_TatiMiorosiPosObj.transform.localEulerAngles
            , 2f).SetEase(Ease.OutQuad)
            .OnComplete(() => { ChieriMotion("h_右少し傾け", 1f, 7); });
        #endregion

        yield return new WaitForSeconds(1);
        yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2050070");//そりゃでかいよ　
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2050060");//バジラみたい？
        ChieriMotion("あはは・・・", 0.2f, 2);
        ChieriMotionDelay(2, "f_笑顔01口眉下がり_目閉じない", 0.1f, 2);//時間差表情戻し

        #region 体傾け 戻し
        GirlTrs.DOLocalMoveX(Chieri010_SyagamiChizimePosObj.transform.localPosition.x
            , 2f).SetEase(Ease.OutQuad);
        GirlTrs.DOLocalMoveY(Chieri010_SyagamiChizimePosObj.transform.localPosition.y
            , 1.25f).SetEase(Ease.OutQuad);
        GirlTrs.DOLocalMoveZ(Chieri010_SyagamiChizimePosObj.transform.localPosition.z
            , 2f).SetEase(Ease.OutQuad);
        GirlTrs.DOLocalRotate(Chieri010_SyagamiChizimePosObj.transform.localEulerAngles
            , 2f).SetEase(Ease.OutQuad);
        #endregion
        ChieriMotion("h_noData", 1f, 7);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);
        #region IK固定 戻し
        DOTweenToIKEfPos(IKRFootEf, 0, 4f);
        DOTweenToIKEfRot(IKRFootEf, 0, 4f);
        DOTweenToIKEfPos(IKLFootEf, 0, 4f);
        DOTweenToIKEfRot(IKLFootEf, 0, 4f);
        #endregion

        NovelSetVis("B2050080");//バジラいたらこんな感じなのかな　
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2050070");//ふふん、じゃあまた覗いてる眞人君は
        ChieriMotion("キリッ", 0.7f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        Hukidashi("B2050080");//踏み潰しちゃおっかなー
        ChieriMotion("f_怒り眉目閉じ笑顔", 0.2f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("B2050090");//覗くとかそういうのじゃないだろ！　
        yield return new WaitForSeconds(2f);
        ChieriMotion("f_怒り目笑顔口", 0.2f, 2);

        #region 踏みIK
        //まずBendGoal0
        FBBIK.solver.rightLegChain.bendConstraint.weight =
        FBBIK.solver.leftLegChain.bendConstraint.weight = 0;


        //右足風ノイズフェードイン
        DOTween.To(() => tmpRFootWindnoiseSound.aSource.volume, (x) => tmpRFootWindnoiseSound.aSource.volume = x
        , 0.4f
        , 0.4f)
        .OnComplete(() =>
        {
            DOTween.To(() => tmpRFootWindnoiseSound.aSource.volume, (x) => tmpRFootWindnoiseSound.aSource.volume = x
            , 0f
            , 2f);
        });
        #region 上げ
        //智恵理の体自体（足固定で傾き表現）
        GameObject Humi01ChieriPosObj
            = Resources.Load("_PosObj/07DokomadeChizimukana/Humi01ChieriPosObj") as GameObject;
        GirlTrs.DOLocalMove(Humi01ChieriPosObj.transform.localPosition
            , 4f).SetEase(Ease.OutQuad);
        GirlTrs.DOLocalRotate(Humi01ChieriPosObj.transform.localEulerAngles
            , 4f).SetEase(Ease.OutQuad);

        //右足（踏み足あげ）
        GameObject Humi01IKRFootPosObj
            = Resources.Load("_PosObj/07DokomadeChizimukana/Humi01IKRFootPosObj") as GameObject;
        IKRFootTargetTrs.localPosition = Humi01IKRFootPosObj.transform.localPosition;
        IKRFootTargetTrs.localEulerAngles = Humi01IKRFootPosObj.transform.localEulerAngles;

        //左足IKと（その場固定）IKON
        IKLFootTargetTrs.position = GirlLFootTrs.position;
        IKLFootTargetTrs.rotation = GirlLFootTrs.rotation;
        DOTweenToIKEfPos(IKLFootEf, 1, 0);
        DOTweenToIKEfRot(IKLFootEf, 1, 0);

        //右足IKON
        DOTweenToIKEfPos(IKRFootEf, 1, 4);//元からoutQuad
        DOTweenToIKEfRot(IKRFootEf, 1, 4);
        #endregion
        yield return new WaitForSeconds(2f);
        HukidashiNovelDistanceChange(0.55f);
        NovelSetVis("B2050100");//えいやまてまてまて！

        yield return new WaitForSeconds(2f);

        #region 体前乗り出し（顔だし）
        //IKBody（体の高さ固定の上、智恵理の体自体（GirlTrs)下げることで前傾に）
        GameObject Humi015IKBodyPosObj
            = Resources.Load("_PosObj/07DokomadeChizimukana/Humi015IKBodyPosObj") as GameObject;
        IKBodyTargetTrs.localPosition = Humi015IKBodyPosObj.transform.localPosition;

        DOTweenToIKEfPos(IKBodyEf, 1, 0);
        ChieriMotion("h_左少し傾け", 1f, 7);//顔傾け

        #region 手IK 設定（同じ場所で固定 右手腰当 左空中）

        //両手位置回転取得
        GirlPosToIKTargetPosRot(); while (isGirlPosToIKTargetPosRotLoading) { yield return null; }


        //左手設定（肩ねじれるので）
        FBBIK.solver.leftArmChain.bendConstraint.weight = 0;
        FBBIK.solver.leftArmChain.reach = 0.4f;//少し引っ張ることで顔を出すので、肘を少し曲げるために



        DOTweenToIKEfPos(IKLHandEf, 1, 2);
        DOTweenToIKEfRot(IKLHandEf, 1, 2);
        DOTweenToIKEfPos(IKRHandEf, 1, 2);
        DOTweenToIKEfRot(IKRHandEf, 1, 2);

        #endregion

        //智恵理の体自体（足固定で傾き表現）
        GameObject Humi015ChieriPosObj
            = Resources.Load("_PosObj/07DokomadeChizimukana/Humi015ChieriPosObj") as GameObject;
        GirlTrs.DOLocalMove(Humi015ChieriPosObj.transform.localPosition
            , 2f).SetEase(Ease.OutQuad);
        GirlTrs.DOLocalRotate(Humi015ChieriPosObj.transform.localEulerAngles
            , 2f).SetEase(Ease.OutQuad);
        #endregion



        yield return new WaitForSeconds(2f);
        Hukidashi("B2050090");//ばいばーい♪
        ChieriMotion("笑顔01口眉", 0.2f, 2);

        yield return new WaitForSeconds(2f);
        isNovelFadeTween = isNovelSetVisIng = false;



        #region 降ろし
        //智恵理の体自体（足固定で傾き表現）
        GameObject Humi02ChieriPosObj
            = Resources.Load("_PosObj/07DokomadeChizimukana/Humi02ChieriPosObj") as GameObject;
        GirlTrs.DOLocalMove(Humi02ChieriPosObj.transform.localPosition
            , 1f).SetEase(Ease.InOutBack);
        GirlTrs.DOLocalRotate(Humi02ChieriPosObj.transform.localEulerAngles
            , 1f).SetEase(Ease.InOutBack);


        #region 顔出し用後付IK（Body、LRHand）も同時に解除
        DOTweenToIKEfPos(IKBodyEf, 0, 1, Ease.InOutBack);
        DOTweenToIKEfPos(IKLHandEf, 0, 1, Ease.InOutBack);
        DOTweenToIKEfRot(IKLHandEf, 0, 1, Ease.InOutBack);
        DOTweenToIKEfPos(IKRHandEf, 0, 1, Ease.InOutBack);
        DOTweenToIKEfRot(IKRHandEf, 0, 1, Ease.InOutBack);



        #endregion


        //踏み降ろし待機用Bool
        bool isTmpHumiorosi = false;

        //右足（踏み足おろし）
        GameObject Humi02IKRFootPosObj
            = Resources.Load("_PosObj/07DokomadeChizimukana/Humi02IKRFootPosObj") as GameObject;
        IKRFootTargetTrs.DOLocalMove(Humi02IKRFootPosObj.transform.localPosition
            , 0.6f).SetEase(Ease.InBack);
        IKRFootTargetTrs.DOLocalRotate(Humi02IKRFootPosObj.transform.localEulerAngles
            , 0.6f).SetEase(Ease.InBack)
            .OnComplete(() =>
            {
                //カメラ揺れ
                CameraAnchorTrs.DOShakePosition(0.5f, 0.2f);
                //CameraAnchorTrs.localPosition = DB.cameraSitAnchorDefLocalPos;
                DelAll_Hukidashi();
                isTmpHumiorosi = true;
            });

        #endregion
        ChieriMotion("f_怒り眉目閉じ笑顔", 0.2f, 2);
        ChieriMotionDelay(2, "f_怒り目笑顔口", 0.1f, 2);//時間差表情戻し

        yield return new WaitForSeconds(0.2f);
        SEPlay("swing40_d_16低い", GirlRFootTrs.gameObject, 0.3f);
        yield return new WaitForSeconds(0.2f);
        SEPlay("bosu23_c_37mix_5倍", GirlRFootTrs.gameObject, 1f);

        ChieriMotion("h_noData", 0.6f, 7);

        //足踏みおろしまで待機
        while (isTmpHumiorosi == false) { yield return null; }

        //白フラッシュ
        FadeWhite(1, 0.05f); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);
        //環境音オフ
        KankyouBGMVolumer(0f, 0.5f);

        #region プレイヤーカメラ倒れ 直

        Vector3
            tmpDefCameraPos = CameraAnchorTrs.localPosition,
            tmpFlowCameraPos = new Vector3(0, 1.2f, 0),
            tmpSlipCameraPos = new Vector3(0, 0.3f, 0),
            tmpSlipCameraEul = new Vector3(-45, 0, 0);


        CameraAnchorTrs.DOLocalMove(tmpFlowCameraPos, 0.05f);
        yield return new WaitForSeconds(0.05f);
        CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.5f).SetEase(Ease.OutBounce);
        yield return new WaitForSeconds(0.05f);
        CameraAnchorTrs.DOLocalMove(tmpDefCameraPos, 0.05f);
        yield return new WaitForSeconds(0.05f);

        //TPSプレイヤー倒れモーション
        isPlayerUniqueMotion = true;
        PlayerMotion("liedown_00_Re", 0.2f, 0);

        CameraAnchorTrs.DOLocalRotate(tmpSlipCameraEul, 0.2f).SetEase(Ease.InSine);
        CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.5f).SetEase(Ease.OutBounce)
            .OnComplete(() =>
            {
                //カメラリセット（+回転と立ち設定）
                //カメラリセット値変更してリセット
                CameraReset(null
                        , tmpSlipCameraPos
                        , false
                        , tmpSlipCameraEul
                        , false
                        , false//ユーザーカメラコントロールはリセットしない
                        );
            });
        #endregion



        yield return new WaitForSeconds(4f);
        ChieriMotion("_noData", 0f, 7);//戻し

        HukidashiNovelDistanceChange(1.25f);

        Hukidashi("B2050100");//あ、あれ・・？
        ChieriMotion("ん？", 0.9f, 2);
        AseTare(Mathf.Infinity);

        #region IKなど戻し
        GirlTrs.DOLocalMove(Chieri010_SyagamiChizimePosObj.transform.localPosition, 2f);
        GirlTrs.DOLocalRotate(Chieri010_SyagamiChizimePosObj.transform.localEulerAngles, 2f);

        DOTweenToIKEfPos(IKRFootEf, 0, 2);
        DOTweenToIKEfRot(IKRFootEf, 0, 2);
        #endregion
        yield return new WaitForSeconds(2);
        DOTweenToIKEfPos(IKLFootEf, 0, 1);
        DOTweenToIKEfRot(IKLFootEf, 0, 1);
        #endregion

        yield return KeyOrWait(3);

        //頭風ノイズフェードイン
        //DOTWeenTO
        DOTween.To(() => HeadWindnoiseSoundObj.GetComponent<AudioSource>().volume, (x) => HeadWindnoiseSoundObj.GetComponent<AudioSource>().volume = x
        , 1f
        , 1f);

        Hukidashi("B2050110");//冗談だよ・・？
        ChieriMotion("片膝立ちミラーしゃがみ開始原点", 0.5f, 0);
        ChieriMotion("f_けど・・・", 0.9f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        NovelSetVis("B2050110");//はは、ははは・・・
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2050120");//あはは、よ、よかったー
        ChieriMotion("あはは・・・", 0.2f, 2);
        ChieriMotionDelay(2, "f_笑顔01口眉下がり_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        //環境音フェードイン
        KankyouBGMVolumer(0.6f, 5f);

        NovelSetVis("B2050120");//よいしょっと
        FadeBlack(1, 1);
        yield return new WaitForSeconds(1);


        //頭風ノイズ事前フェードアウト
        //DOTWeenTO
        DOTween.To(() => HeadWindnoiseSoundObj.GetComponent<AudioSource>().volume, (x) => HeadWindnoiseSoundObj.GetComponent<AudioSource>().volume = x
        , 0
        , 0.2f);
        #region 暗幕設定
        ChieriMotion("笑顔01口眉", 0f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        AseTare(0, false);

        //倒れカメラ戻し
        CameraObjectsTrs.localPosition = Player010_StartStandPosObj.transform.localPosition;
        isPlayerUniqueMotion = false;

        //カメラリセット（+回転と立ち設定）
        //カメラリセット値変更してリセット
        CameraReset(Player010_StartStandPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos
            , false
            , DB.cameraAnchorResetLocalPos);//Anchorをゼロに

        //左手IK設定戻し（肩ねじれるので設定したのを戻し）（バジラ戦でリーチ設定しっぱなしで変になった）
        FBBIK.solver.leftArmChain.bendConstraint.weight = 1;
        FBBIK.solver.leftArmChain.reach = 0.1f;//少し引っ張ることで顔を出すので、肘を少し曲げるために


        #endregion

        //片手持ち時右肘がねじれるのでON（左肘は右手にひっぱられて体前傾からのねじれだったので、持ち上げるスピードを早くした
        isKataTwistAuto = false;


        while (isNovelSetVisIng) { yield return null; }
        FadeBlack(0, 1);
        yield return new WaitForSeconds(2);

        Hukidashi("B2050130");//テーブルでしよっか
        AseTare();
        ChieriMotion("あはは・・・", 0.2f, 2);
        ChieriMotionDelay(1, "f_笑顔01口眉下がり_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2050130");//へ？　ああ、そ、そうだな　（びびっちゃってる）
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2050140");//あ、大丈夫！　運んであげる
        ChieriMotion("笑顔01口眉_目閉じない", 0.2f, 2);
        yield return new WaitForSeconds(0.5f);
        ChieriMotion("笑顔01口眉", 0f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(0.5f); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        HukidashiNovelDistanceChange(0.95f);
        NovelSetVis("B2050140");//え？　うおおおおわ！

        ChieriMotion("片膝立ちミラー手伸ばし開始原点", 0f, 0);

        #region IKRHand プレイヤー掴み（cameraObjectsにペアレント注意）
        IKRHandTargetTrs.SetParent(CameraObjectsTrs);
        GameObject IKRHand_PareCameraObjects_HakobuPosObj;
        if (XRSettings.enabled)
        {
            IKRHand_PareCameraObjects_HakobuPosObj
                = Resources.Load("_PosObj/07DokomadeChizimukana/IKRHand_PareCameraObjects_HakobuPosObj") as GameObject;
        }
        else
        {
            IKRHand_PareCameraObjects_HakobuPosObj
                = Resources.Load("_PosObj/07DokomadeChizimukana/IKRHand_PareCameraObjects_HakobuPCPosObj") as GameObject;
        }
        IKRHandTargetTrs.localPosition = IKRHand_PareCameraObjects_HakobuPosObj.transform.localPosition;
        IKRHandTargetTrs.localEulerAngles = IKRHand_PareCameraObjects_HakobuPosObj.transform.localEulerAngles;

        DOTweenToIKEfRot(IKRHandEf, 1, 1.5f);
        DOTweenToIKEfPos(IKRHandEf, 1, 1.5f);
        #endregion

        yield return new WaitForSeconds(1);

        //トラッキングオフとリセンター
        InputTracking.disablePositionalTracking = true;

        if (XRSettings.enabled)//VRポジションリセット
        {
            //CameraReset(null, null, true);
            yield return null;
            VRUICameraTrs.localPosition = Vector3.zero;
            VRCameraTrs.localPosition = Vector3.zero;
        }
        if (XRSettings.enabled)
        {
            //プレイヤーダミー太一を少し後ろへ（つかまれてる位置に）
            Player_DummyTrs.localPosition = new Vector3(0, 0, -0.2f);
        }
        else
        {
            //プレイヤーダミー太一を少し後ろへ（つかまれてる位置に）
            Player_DummyTrs.localPosition = new Vector3(0, 0, 0f);
        }


        ChieriMotion("手筒", 0.5f, 5);
        yield return new WaitForSeconds(0.5f);

        ChieriMotion("片膝立ちミラー終了立ち上がり原点", 0f, 0);
        #region cameraObjects移動で運び
        GameObject Player020_Hakobare01PosObj
            = Resources.Load("_PosObj/07DokomadeChizimukana/Player020_Hakobare01PosObj") as GameObject;
        CameraObjectsTrs.DOLocalMove(Player020_Hakobare01PosObj.transform.localPosition, 6f);

        #endregion

        //プレイヤー頭風ノイズフェードイン
        //DOTWeenTO
        DOTween.To(() => PlayerHeadWindnoiseSoundObj.GetComponent<AudioSource>().volume, (x) => PlayerHeadWindnoiseSoundObj.GetComponent<AudioSource>().volume = x
        , 0.2f
        , 0.7f)
        .OnComplete(() =>
        {
            //フェードアウト
            DOTween.To(() => PlayerHeadWindnoiseSoundObj.GetComponent<AudioSource>().volume, (x) => PlayerHeadWindnoiseSoundObj.GetComponent<AudioSource>().volume = x
            , 0f
            , 8f);
        });

        yield return new WaitForSeconds(5);

        Hukidashi("B2050150");//ほーら片手で持てちゃう
        ChieriMotion("笑顔01口眉", 0f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(0.5f); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        //Twist戻し
        isKataTwistAuto = true;

        NovelSetVis("B2050150");//片手？！　分厚っ
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2050160");//さっきよりいい眺めでしょー
        yield return new WaitForSeconds(0.5f); yield return KeyOrWait(3);

        NovelSetVis("B2050160");//いい眺めって　何メートル
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2050170");//１．３メートルくらい？
        ChieriMotion("あはは・・・", 0.2f, 2);
        AseTare();
        yield return new WaitForSeconds(0.5f); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.2f);

        NovelSetVis("B2050170");//それリアルの奴な！
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.3f);
        FadeBlack(1, 2);
        yield return new WaitForSeconds(4f);

        //戻し
        isKataTwistAuto = true;

        //トラッキングオン
        InputTracking.disablePositionalTracking = false;
        if (XRSettings.enabled)//VRポジションリセット
        { CameraReset(null, null, true); }

        #region 暗幕終了処理
        ChieriMotion("_noData", 0f, 5);//手戻し
        TereHoho(false, 0);
        //IKOFF
        DOTweenToIKEfRot(IKRHandEf, 0, 0f);
        DOTweenToIKEfPos(IKRHandEf, 0, 0f);

        LAIKHead.solver.clampWeightHead = DB.defLAIKHeadClamp;

        #endregion



        EventMove();
    }
    IEnumerator B2060()//バジラ君だよ
    {
        if (debugEventMoveFlag == true)
        {
            girlAnim.speed = 0.5f;
            nowPlayerLocalScale = DB.playerScale_DokomadeChizimuZero;

            FadeBlack(1, 0);
        }
        EventReset();

        #region 暗幕設定
        Drill_chieriTrs.gameObject.SetActive(false);

        #region 智恵理ポーズと位置
        DB.isChieriPosLock = true;

        ChieriMotion("座り待機", 0f, 0);
        ChieriMotion("笑顔01口眉_目閉じない", 0f, 2);
        ChieriMotion("怪獣バトルポーズミラー", 0f, 5);//手

        TereHohoAlphaChange(0.2f);
        TereHoho(true, 0f);

        #region IKプレイヤ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 0f);
        #endregion

        #region 右手IK設置（バジラ掴み）
        GameObject IKRHand_01_StartPosObj
            = Resources.Load("_PosObj/08BaziraKunDayo/IKRHand_01_StartPosObj") as GameObject;
        IKRHandTargetTrs.localPosition = IKRHand_01_StartPosObj.transform.localPosition;
        IKRHandTargetTrs.localEulerAngles = IKRHand_01_StartPosObj.transform.localEulerAngles;

        DOTweenToIKEfPos(IKRHandEf, 1, 0f);
        DOTweenToIKEfRot(IKRHandEf, 1, 0f);

        #endregion

        #endregion

        #region ■バジラ生成して 智恵理の手に（右手版）
        #region 生成と配置
        if (GirlRHandTrs.Find("Kaiju") == null)
        {
            //バジラ生成
            KB_KaijuObj = Instantiate(Resources.Load("EventSystem/KaijuBattle/Prefab/Kaiju") as GameObject);
            KB_KaijuObj.transform.SetParent(GirlRHandTrs, false);
        }
        //すでに配置してある場合
        else { KB_KaijuObj = GirlRHandTrs.Find("Kaiju").gameObject; }

        //名前と削除リスト入れ
        KB_KaijuObj.name = "Kaiju";
        DB.evMoveDelObjList.Add(KB_KaijuObj);

        //握る位置
        GameObject Bazira_01_PareRHand_GrapPosObj
            = Resources.Load("_PosObj/08BaziraKunDayo/Bazira_01_PareRHand_GrapPosObj") as GameObject;
        KB_KaijuObj.transform.localPosition = Bazira_01_PareRHand_GrapPosObj.transform.localPosition;
        KB_KaijuObj.transform.localEulerAngles = Bazira_01_PareRHand_GrapPosObj.transform.localEulerAngles;


        #endregion

        //バジラ掴む右手のIK
        DOTweenToIKEfPos(IKRHandEf, 1, 0);
        DOTweenToIKEfRot(IKRHandEf, 1, 0);

        //IKRHandTargetをアニメーションで動作
        Animator
            tmpIKRHTgtAnim = IKRHandTargetTrs.GetComponent<Animator>();
        tmpIKRHTgtAnim.enabled = true;

        tmpIKRHTgtAnim.CrossFadeInFixedTime("080開始準備", 0f, 0);

        //#region 智恵理バジラ見る
        //ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        //FollowDOMove(IKLookAtEyeTargetTrs, KB_KaijuObj.transform, 0f);
        //DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        //FollowDOMove(IKLookAtHeadTargetTrs, KB_KaijuObj.transform, 1f);
        //DOTweenToLAIKSHead(LAIKHeadS, 1f, 1);

        //#endregion


        #endregion

        #region プレイヤー 位置とポーズとカメラリセット
        GameObject Player_01_StartPosObj
            = Resources.Load("_PosObj/08BaziraKunDayo/Player_01_StartPosObj") as GameObject;

        CameraObjectsTrs.localPosition = Player_01_StartPosObj.transform.localPosition;

        //カメラリセット（+回転と立ち設定）
        //カメラリセット値変更してリセット
        CameraReset(Player_01_StartPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos);//Anchorを立ちに

        #endregion

        ChieriMotion("h_noData", 0f, 7);//顔傾け用準備

        #region SoundObj左手に付与
        //WindnoiseSoundObj付与（左手）
        GameObject LHandWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlLHandTrs);
        DB.evMoveDelObjList.Add(LHandWindnoiseSoundObj);
        LHandWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpLHandWindnoiseSound = LHandWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpLHandWindnoiseSound.aSource.maxDistance = 80;
        tmpLHandWindnoiseSound.pitchMax = 0.7f;
        tmpLHandWindnoiseSound.pitchUpRateAdjustFloat = 2;

        tmpLHandWindnoiseSound.aSource.volume = 0f;
        #endregion
        #region SoundObj右手に付与
        //WindnoiseSoundObj付与（左手）
        GameObject RHandWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRHandTrs);
        DB.evMoveDelObjList.Add(RHandWindnoiseSoundObj);
        RHandWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpRHandWindnoiseSound = RHandWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpRHandWindnoiseSound.aSource.maxDistance = 50;
        tmpRHandWindnoiseSound.pitchMax = 1f;
        tmpRHandWindnoiseSound.pitchUpRateAdjustFloat = 2;
        tmpRHandWindnoiseSound.pitchDownRateAdjustFloat = 100;

        tmpRHandWindnoiseSound.aSource.volume = 0f;
        #endregion
        #region SoundObj頭に付与
        //WindnoiseSoundObj付与（左手）
        GameObject HeadWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , Bip001HeadTrs);
        DB.evMoveDelObjList.Add(HeadWindnoiseSoundObj);
        HeadWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpHeadWindnoiseSound = HeadWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpHeadWindnoiseSound.aSource.maxDistance = 80;
        tmpHeadWindnoiseSound.pitchMax = 1f;
        tmpHeadWindnoiseSound.pitchUpRateAdjustFloat = 3;

        tmpHeadWindnoiseSound.aSource.volume = 0f;
        #endregion


        #endregion

        //環境音フェードダウン
        KankyouBGMVolumer(0.2f, 2f);

        //バジラもスマホも肘がねじれるのでON
        isKataTwistAuto = false;

        HukidashiNovelDistanceChange(1f);
        yield return new WaitForSeconds(2f);


        //智恵理SoundObjON
        tmpLHandWindnoiseSound.aSource.volume = 0.8f;
        tmpRHandWindnoiseSound.aSource.volume = 0.7f;
        tmpHeadWindnoiseSound.aSource.volume = 2f;



        FadeBlack(0, 3);
        yield return new WaitForSeconds(1.5f);

        #region バジラ君だよ～　　～　　迫力ない？
        tmpIKRHTgtAnim.CrossFadeInFixedTime("080ほーらバジラ君だよ", 0f, 0);
        Hukidashi("B2060010");//ほーらバジラ君だよ～～
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        ChieriMotion("h_右少し傾け", 1f, 7);//顔傾け
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        tmpIKRHTgtAnim.CrossFadeInFixedTime("080が～～", 0f, 0);
        Hukidashi("B2060020");//が～～～！
        ChieriMotion("f_更にキリッ", 0.2f, 2);
        ChieriMotion("h_noData", 0.5f, 7);//顔傾け用準備
        #region IK頭プレイヤ下見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtHeadTargetTrs, CameraObjectsTrs, new Vector3(0, 0.14f, 0), 2f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 2f);
        #endregion

        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        HukidashiNovelDistanceChange(0.85f);

        NovelSetVis("B2060010");//またそれか・・　宣伝用みたいでおもしろいな
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        HukidashiNovelDistanceChange(0.5f);
        tmpIKRHTgtAnim.CrossFadeInFixedTime("080えー、そう？", 0f, 0);
        Hukidashi("B2060030");//えーそう？迫力ない？
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        ChieriMotion("f_下がり眉つまんなそう", 0.2f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2060020");//ないわけじゃないけど・・
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);
        #endregion

        Hukidashi("B2060040");//じゃあ・・
        ChieriMotion("ん？", 0.2f, 2);

        #region 座り待機でのマスクスマホ
        string
            tmpBaseAnimStateName = "座り待機";

        #region スマホ片手いじりPosへ
        GameObject ChieriSumaho_LHand_SekurabeKatatePosObj = Resources.Load("_PosObj/_ParentPoseObjs/ChieriSumaho_LHand_SekurabeKatatePosObj") as GameObject;
        ChieriSumahoObj.transform.localPosition = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localEulerAngles;
        #endregion

        StartCoroutine(GirlAnimReadSystem(11));

        //マスクのため、レイヤーのアニメを1フレでベースと同じモーション状態にする（ParameterでNormlizedTimeが指定できる（ただし指定し続けないと静止））
        ChieriMotion(tmpBaseAnimStateName, 0f, 11);//現在のベースアニメと同じアニメ指定
        girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeに

        yield return null;//↑適用に1フレ必要

        ChieriMotion("背比べ左手スマホ取り出し", 0.5f, 11);
        while (nowGirlAnimOtherLayerClipNameDict[11] != "背比べスマホ取り出し") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[11] <= 0.375f) { yield return null; }

        //スマホObjオン（取り出し）
        ChieriSumahoObj.SetActive(true);
        //画面つける（画面更新も一緒に起動される）
        ChieriSumahoPower(true);


        //while (girlAnimOtherLayerNomTimeDict[11] <= 1f) { Debug.Log(girlAnimOtherLayerNomTimeDict[11]); yield return null; }


        #region スマホ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, 3f);
        DOTweenToLAIKSHead(LAIKHeadS, 1f, 3);
        #endregion

        #region 左手IKいじり位置へ（力技

        //まずターゲットをカーブ位置に（机に当たらないように）
        GameObject IKLHand_Chieri_Sumaho010ToridashiCurvePosObj
            = Resources.Load("_PosObj/08BaziraKunDayo/IKLHand_Chieri_Sumaho010ToridashiCurvePosObj") as GameObject;
        IKLHandTargetTrs.localPosition = IKLHand_Chieri_Sumaho010ToridashiCurvePosObj.transform.localPosition;
        IKLHandTargetTrs.localEulerAngles = IKLHand_Chieri_Sumaho010ToridashiCurvePosObj.transform.localEulerAngles;

        while (girlAnimOtherLayerNomTimeDict[11] <= 0.5f) { yield return null; }

        //そこからTween移動開始
        GameObject IKLHand_Chieri_Sumaho020IziriPosObj
            = Resources.Load("_PosObj/08BaziraKunDayo/IKLHand_Chieri_Sumaho020IziriPosObj") as GameObject;
        IKLHandTargetTrs.DOLocalMove(IKLHand_Chieri_Sumaho020IziriPosObj.transform.localPosition, 1f);
        IKLHandTargetTrs.DOLocalRotate(IKLHand_Chieri_Sumaho020IziriPosObj.transform.localEulerAngles, 1f);

        DOTweenToIKEfPos(IKLHandEf, 1, 2f);
        DOTweenToIKEfRot(IKLHandEf, 1, 2f);
        #endregion

        while (girlAnimOtherLayerNomTimeDict[11] <= 1f) { yield return null; }

        #region スマホいじって縮小
        ChieriMotion("背比べ左手スマホいじり", 0f, 11);
        #region IKプレイヤ見（目だけ）
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        #endregion

        #region ■目眩リトルとDOTWeenTOでプレイヤーサイズ縮小(縮小完了bool付き)マスク版
        //バグ報告あるのでひとまず秒数でウェイトに変更
        //bool isShrinkComplete = false;

        //段階別で目眩具合と縮小度変更して縮小
        PPv2MemaiLittle(1f);

        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
        , DB.playerScale_BaziraGuraiZero, 3f);
        //バグ報告あるのでひとまず秒数でウェイトに変更
        //.OnComplete(() => { isShrinkComplete = true; });

        #endregion
        #endregion
        SEPlay("magic-attack-darkness1_Short1", 0.1f);

        Hukidashi("B2060050");//これぐらい？
        //バグ報告あるのでひとまず秒数でウェイトに変更
        //while (isShrinkComplete == false) { yield return null; }
        yield return new WaitForSeconds(3);

        #region スマホ見 目だけ
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        #endregion

        #region スマホいじって縮小
        ChieriMotion("背比べ左手スマホいじり", 0f, 11);
        #region IKプレイヤ見（目だけ）
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        #endregion

        #region ■目眩リトルとDOTWeenTOでプレイヤーサイズ縮小(縮小完了bool付き)マスク版
        //段階別で目眩具合と縮小度変更して縮小
        PPv2MemaiLittle(1f);

        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
        , DB.playerScale_BaziraGuraiOne, 3f);

        #endregion
        #endregion
        SEPlay("magic-attack-darkness1_Short1", 0.15f);

        Hukidashi("B2060060");//これぐらいでどう？

        #region IKプレイヤ見 （頭は下見）
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

        FollowDOMove(IKLookAtHeadTargetTrs, CameraObjectsTrs, new Vector3(0, 0.14f, 0), 2f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 2f);
        #endregion

        yield return new WaitForSeconds(1); yield return KeyOrWait(1);
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し

        yield return new WaitForSeconds(0.3f);

        HukidashiNovelDistanceChange(0.65f);

        NovelSetVis("B2060030");//いやまって刻まれても　うわこわ

        #region 左手IKOFFへ（力技のやつ

        DOTweenToIKEfPos(IKLHandEf, 0, 2f);
        DOTweenToIKEfRot(IKLHandEf, 0, 2f);
        #endregion

        ChieriMotion("背比べ左手スマホしまう", 0f, 11);
        StartCoroutine(GirlAnimReadSystem(11));
        while (nowGirlAnimOtherLayerClipNameDict[11] != "背比べスマホしまう") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[11] <= 0.5f) { yield return null; }
        //スマホObjオフ（しまう）
        ChieriSumahoObj.SetActive(false);

        //モーション終了まで待機
        while (girlAnimOtherLayerNomTimeDict[11] <= 0.65f) { yield return null; }

        //現在のベースと同じモーションになるまで待機してからnoData
        ChieriMotion(tmpBaseAnimStateName, 0.5f, 11);
        while (nowGirlAnimOtherLayerClipNameDict[11] != nowGirlAnimClipName)
        {
            girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeにセットし続ける
            yield return null;
        }
        ChieriMotion("_noData", 0f, 11);


        isGirlAnimReadSystem = false;

        #endregion

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        #region くっくっく 　～～　　手の方が恐いぞ
        Hukidashi("B2060070");//くっくっく
        ChieriMotion("f_更にキリッ", 0.2f, 2);
        tmpIKRHTgtAnim.CrossFadeInFixedTime("080くっくっく", 0f, 0);
        yield return new WaitForSeconds(3);

        DelAll_Hukidashi();
        Hukidashi("B2060080");//先ほどはよくも馬鹿にしてくれたな
        ChieriMotion("f_怒り目つむり", 0.2f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        DelAll_Hukidashi();
        Hukidashi("B2060090");//貴様！！
        ChieriMotion("f_怒り目見開き", 0.05f, 2);
        tmpIKRHTgtAnim.CrossFadeInFixedTime("080貴様！", 0f, 0);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        Hukidashi("B2060100");//グガガガガー
        ChieriMotion("f_更にキリッ", 0.2f, 2);
        tmpIKRHTgtAnim.CrossFadeInFixedTime("080グガガガガー", 0f, 0);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2060040");//わかったわかった！
        yield return new WaitForSeconds(0.5f); yield return KeyOrWait(3);
        while (novelCurrentPageInt < 1) { yield return null; }

        ChieriMotion("f_更にキリッ目閉じ", 0.2f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1f);

        HukidashiNovelDistanceChange(1f);
        NovelSetVis("B2060050");//というか手の方が恐い
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);
        #endregion

        #region 手出し　～～　手置き

        Hukidashi("B2060110");//手が恐い？
        ChieriMotion("ん？", 0.5f, 2);
        ChieriMotionDelay(3, "笑顔01口眉_目閉じない", 0.2f, 2);//時間差表情戻し
        tmpIKRHTgtAnim.CrossFadeInFixedTime("080でもそれなら置き", 0f, 0);

        #region IK左手出す
        GameObject IKLHand_Chieri_TegakowaiPosObj
            = Resources.Load("_PosObj/08BaziraKunDayo/IKLHand_Chieri_TegakowaiPosObj") as GameObject;
        IKLHandTargetTrs.localEulerAngles = IKLHand_Chieri_TegakowaiPosObj.transform.localEulerAngles;

        DOTweenToIKEfPos(IKLHandEf, 1, 6f);
        DOTweenToIKEfRot(IKLHandEf, 1, 6f);
        yield return new WaitForSeconds(3);
        IKLHandTargetTrs.DOLocalMove(IKLHand_Chieri_TegakowaiPosObj.transform.localPosition, 3)
            .SetEase(Ease.OutBack);

        #endregion
        #region バジラ置いて手戻し
        FixedAction(() =>
        {
            KB_KaijuObj.transform.SetParent(GameObjectsTrs);
        });
        yield return new WaitForSeconds(0.1f);

        tmpIKRHTgtAnim.CrossFadeInFixedTime("080手だけ戻し", 0f, 0);
        DOTweenToIKEfPos(IKRHandEf, 0, 3f);
        DOTweenToIKEfRot(IKRHandEf, 0, 3f);
        ChieriMotion("_noData", 2f, 5);//手


        #endregion
        yield return new WaitForSeconds(1);

        HukidashiNovelDistanceChange(0.55f);
        NovelSetVis("B2060060");//うおわ！
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);


        Hukidashi("B2060120");//女の子の手が恐い？
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        ChieriMotion("手乗せ立ち消しゴム落とし終了", 1f, 6);
        ChieriMotion("h_右少し傾け", 1f, 7);//顔傾け用準備
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        Hukidashi("B2060130");//男の子としてどうなのかな？
        ChieriMotion("f_公ってえっちなものばかり", 0.5f, 2);
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1f);

        NovelSetVis("B2060070");//うぬぬ・・
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        ChieriMotion("ん？", 0.3f, 2);
        AseTare(Mathf.Infinity);
        yield return new WaitForSeconds(2);
        ChieriMotion("h_noData", 0.5f, 7);//顔傾け用準備
        ChieriMotion("_noData", 0.5f, 6);

        HukidashiNovelDistanceChange(2.8f);
        Hukidashi("B2060140");//あ、うそうそごめんね・・
        ChieriMotion("あはは・・・", 0.2f, 2);
        ChieriMotionDelay(2, "f_笑顔01口眉下がり_目閉じない", 0.1f, 2);//時間差表情戻し
        #region IKで左手置き
        //GameObject IKLHand_Chieri_TegakowaiOkiPosObj
        //    = Resources.Load("_PosObj/08BaziraKunDayo/IKLHand_Chieri_TegakowaiOkiPosObj") as GameObject;
        //IKLHandTargetTrs.DOLocalMove(IKLHand_Chieri_TegakowaiOkiPosObj.transform.localPosition, 3);
        //IKLHandTargetTrs.DOLocalRotate(IKLHand_Chieri_TegakowaiOkiPosObj.transform.localEulerAngles,3f);

        IKLHandTargetTrs.DOLocalMove(IKLHand_Chieri_Sumaho020IziriPosObj.transform.localPosition, 2f);
        IKLHandTargetTrs.DOLocalRotate(IKLHand_Chieri_Sumaho020IziriPosObj.transform.localEulerAngles, 2f);

        DOTweenToIKEfPos(IKLHandEf, 0, 4f);
        DOTweenToIKEfRot(IKLHandEf, 0, 4f);

        #endregion
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);
        #endregion

        #region 俺がフォロー　～～　セット組んでいい？
        NovelSetVis("B2060080");//あ、まずい　俺がフォローされてる
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);
        ChieriMotion("ん？", 0.7f, 2);
        yield return new WaitForSeconds(1f);
        Hukidashi("B2060150");//あ、あはは・・
        ChieriMotion("あはは・・・", 0.2f, 2);
        ChieriMotionDelay(2, "f_笑顔01口眉下がり_目閉じない", 0.1f, 2);//時間差表情戻し

        yield return new WaitForSeconds(1f);
        NovelSetVis("B2060090");//完全にミスった！！
        yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        Hukidashi("B2060160");//んーでもそれなら・・
        AseTare(3, false);
        ChieriMotion("ん？", 0.7f, 2);
        #region バジラ見 目だけ
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, KB_KaijuObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        //FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, 3f);
        //DOTweenToLAIKSHead(LAIKHeadS, 1f, 3);
        #endregion

        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);
        Hukidashi("B2060170");//バジラVSマコトがいいかな？
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        #region IKプレイヤ見 目だけ
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        #endregion
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2060100");//ほう・・！
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        HukidashiNovelDistanceChange(2.1f);
        Hukidashi("B2060180");//セット組んでいい？
        yield return new WaitForSeconds(1f);
        ChieriMotion("身乗り出し", 0.2f / girlAnim.speed, 0);
        ChieriMotionDelay(1f, "f_あ！ほら！口閉じ", 0.2f, 2);//時間差表情戻し


        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "身乗り出し") { yield return null; }
        while (girlAnimNomTime <= 0.43f) { yield return null; }

        SEPlay(Other3DSEObj, "机・叩く03_ピッチ-7", GrasstableTrs.gameObject, 2f);

        yield return new WaitForSeconds(1f);

        NovelSetVis("B2060110");//え？　セット？
        yield return KeyOrWait(3);
        while (isNovelSetVisIng) { yield return null; }
        //FadeBlack(1, 3);
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        //急激に移動するのでサウンドオブジェ手動消し
        for (int i = 0; i < DB.evMoveDelObjList.Count; i++)
        {
            if (DB.evMoveDelObjList[i] != null)
            {
                if (DB.evMoveDelObjList[i].tag == "SoundObj")
                {
                    GameObject tmpObj = DB.evMoveDelObjList[i];
                    //1秒フェードアウト後削除
                    tmpObj.GetComponent<AudioSource>().DOFade(0, 1)
                        .OnComplete(() => { DestroyImmediate(tmpObj, true); });
                }
            }
        }


        yield return new WaitForSeconds(3);
        #endregion

        #region 暗幕中終了処理

        //終了処理
        Destroy(KB_KaijuObj);
        //右手IKアニメOFF
        tmpIKRHTgtAnim.enabled = false;
        #endregion
        //戻し
        isKataTwistAuto = false;

        EventMove();

        yield break;
    }
    IEnumerator B2070()//バジラVSマコト
    {
        if (debugEventMoveFlag == true)
        {
            nowPlayerLocalScale = DB.playerScale_BaziraGuraiOne;
            FadeBlack(1, 0);
        }
        EventReset();
        yield return null;

        girlAnim.speed = 0.4f;
        FadeBlack(1, 0);
        yield return null;

        #region バジラBGM
        ////■直接再生
        //sounderBGMAudioSource.volume = 0.5f;
        ////sounderBGMAudioSource.clip = Instantiate(ResourceFiles.BGM["また明日"]);
        //sounderBGMAudioSource.clip = Resources.Load("Main/BGM/大地獣ループ化") as AudioClip;
        //sounderBGMAudioSource.Play();
        //sounderBGMAudioSource.loop = true;
        ////DOTween.To(() => sounderBGMAudioSource.volume, (x) => sounderBGMAudioSource.volume = x, 0.5f, 4);

        //止め
        BGMPlay(false, null, 0, 0.2f, 0.2f);

        //■スピーカー再生
        speaker.audioSource.volume = 0f;
        speakerHighPass.cutoffFrequency = 200;
        speakerHighPass.highpassResonanceQ = 1;
        //speaker.audioSource.clip = Resources.Load("Main/BGM/大地獣ループ化") as AudioClip;
        speaker.audioSource.clip = ResourceFiles.BGM["大地獣ループ化"];
        speaker.audioSource.Play();
        speaker.audioSource.loop = true;
        speaker.audioSource.spatialize = true;

        yield return null;
        DOTween.To(() => speaker.audioSource.volume, (x) => speaker.audioSource.volume = x,
            0.5f, 0.01f);

        //スピーカー位置
        GameObject Speaker_BazziraVSMakotoPosObj
            = Resources.Load("_PosObj/09BazziraVSMakoto/Speaker_BazziraVSMakotoPosObj") as GameObject;
        SpeakerTrs.localPosition = Speaker_BazziraVSMakotoPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = Speaker_BazziraVSMakotoPosObj.transform.localEulerAngles;

        #endregion

        #region 暗幕設定


        #region 智恵理ポーズと位置
        DB.isChieriPosLock = false;
        ChieriMotion("怪獣バトルポーズ", 0f, 0);
        ChieriMotion("キリッ", 0f, 2);

        GameObject Chieri010_BazziraVSMakotoPosObj
            = Resources.Load("_PosObj/09BazziraVSMakoto/Chieri010_BazziraVSMakotoPosObj") as GameObject;
        GirlTrs.localPosition = Chieri010_BazziraVSMakotoPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri010_BazziraVSMakotoPosObj.transform.localEulerAngles;


        TereHohoAlphaChange(0.2f);
        TereHoho(true, 0f);

        #region IKプレイヤ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 0f);
        #endregion

        #region SoundObj左手に付与
        //WindnoiseSoundObj付与（左手）
        GameObject LHandWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlLHandTrs);
        DB.evMoveDelObjList.Add(LHandWindnoiseSoundObj);
        LHandWindnoiseSoundObj.name = nameof(LHandWindnoiseSoundObj);
        LHandWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpLHandWindnoiseSound = LHandWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpLHandWindnoiseSound.aSource.maxDistance = 120;
        tmpLHandWindnoiseSound.pitchMax = 1f;
        tmpLHandWindnoiseSound.pitchUpRateAdjustFloat = 4;

        tmpLHandWindnoiseSound.aSource.volume = 0f;

        #endregion
        #endregion

        #region ■バジラ生成して 智恵理の手に（左手版）
        #region 生成と配置
        if (GirlRHandTrs.Find("Kaiju") == null)
        {
            //バジラ生成
            KB_KaijuObj = Instantiate(Resources.Load("EventSystem/KaijuBattle/Prefab/Kaiju") as GameObject);
            KB_KaijuObj.transform.SetParent(GirlLHandTrs, false);
        }
        //すでに配置してある場合
        else { KB_KaijuObj = GirlLHandTrs.Find("Kaiju").gameObject; }

        //名前と削除リスト入れ
        KB_KaijuObj.name = "Kaiju";
        DB.evMoveDelObjList.Add(KB_KaijuObj);

        //なぜかPrefabから呼び出したときに小さくなるので、コードでConvex
        KB_KaijuObj.transform.Find("Kaiju_Collider").GetComponent<MeshCollider>().convex = true;

        #endregion

        //IKLHandTargetをアニメーションで動作
        Animator
            tmpIKLHTgtAnim = IKLHandTargetTrs.GetComponent<Animator>();
        tmpIKLHTgtAnim.enabled = true;

        tmpIKLHTgtAnim.CrossFadeInFixedTime("0900準備", 0f, 0);


        #endregion

        #region カメラ（プレイヤー）設定
        GameObject Player010_BazziraVSMakotoPosObj
            = Resources.Load("_PosObj/09BazziraVSMakoto/Player010_BazziraVSMakotoPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player010_BazziraVSMakotoPosObj.transform.localPosition;

        //カメラリセット（+回転と立ち設定）
        //カメラリセット値変更してリセット
        CameraReset(Player010_BazziraVSMakotoPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos);//Anchorを立ちに

        #region //シャーペン装備 以前の
        //SharpenObj.transform.SetParent(VRCameraTrs);
        //GameObject Sharpen_PareVRCamera_SoubiPosObj
        //    = Resources.Load("_PosObj/09BazziraVSMakoto/Sharpen_PareVRCamera_SoubiPosObj") as GameObject;
        //SharpenObj.transform.localPosition = Sharpen_PareVRCamera_SoubiPosObj.transform.localPosition;
        //SharpenObj.transform.localEulerAngles = Sharpen_PareVRCamera_SoubiPosObj.transform.localEulerAngles;
        //SharpenObj.SetActive(true);
        #endregion

        #region //シャーペン装備 太一に
        SharpenObj.transform.SetParent(Player_DummyTrs);
        GameObject Sharpen_ParePlayerDummy_SoubiPosObj
            = Resources.Load("_PosObj/09BazziraVSMakoto/Sharpen_ParePlayerDummy_SoubiPosObj") as GameObject;
        SharpenObj.transform.localPosition = Sharpen_ParePlayerDummy_SoubiPosObj.transform.localPosition;
        SharpenObj.transform.localEulerAngles = Sharpen_ParePlayerDummy_SoubiPosObj.transform.localEulerAngles;
        SharpenObj.SetActive(true);
        #endregion

        #endregion

        //IKTargetを智恵理のBoneと同じ位置回転に
        GirlPosToIKTargetPosRot(); while (isGirlPosToIKTargetPosRotLoading) { yield return null; }


        //左手IKON
        DOTweenToIKEfPos(IKLHandEf, 1, 0);
        DOTweenToIKEfRot(IKLHandEf, 1, 0);
        yield return null;
        #region 小物（テーブルや箱　エッフェル）
        //小物消し
        GrasstableTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);
        Drill_chieriTrs.gameObject.SetActive(false);
        KeshigomuObj.SetActive(false);
        isHomeworkSystem = false;


        //エッフェル生成・配置
        GameObject Eiffel_hiObj;
        if (GameObject.Find("Eiffel_hiObj") == null)
        {
            Eiffel_hiObj
                = Instantiate(Resources.Load("Main/KomonoObj/Eiffel/Eiffel_hiObj") as GameObject
                , RoomTrs, false);
            Eiffel_hiObj.name = nameof(Eiffel_hiObj);
        }
        else
        {
            Eiffel_hiObj = GameObject.Find("Eiffel_hiObj");
        }

        GameObject Eiffel_BazziraVSMakotoPosObj
            = Resources.Load("_PosObj/09BazziraVSMakoto/Eiffel_BazziraVSMakotoPosObj") as GameObject;
        Eiffel_hiObj.transform.localPosition = Eiffel_BazziraVSMakotoPosObj.transform.localPosition;
        Eiffel_hiObj.transform.localEulerAngles = Eiffel_BazziraVSMakotoPosObj.transform.localEulerAngles;

        //小物（箱オブジェ）なければ設置
        if (GameObject.Find("KB_KomonoObjs") == null)
        {
            KB_KomonoObjs = Instantiate(Resources.Load("EventSystem/KaijuBattle/Prefab/KB_KomonoObjs") as GameObject
                , GameObjectsTrs, false);
        }
        else { KB_KomonoObjs = GameObject.Find("KB_KomonoObjs"); }
        DB.evMoveDelObjList.Add(KB_KomonoObjs);

        #region ■小物リセットできるように
        //GetAllChildrenを使い、小物全部取得（）
        List<GameObject> KomonoObjsAllList = GetAllChildren.GetAll(KB_KomonoObjs);

        //komono群のPos・Eul・RigidBodyのList
        List<Vector3>
            komonoPosList = new List<Vector3>(),
            komonoEulList = new List<Vector3>();
        List<Rigidbody>
            komonoRigidbodyList = new List<Rigidbody>();
        //取得
        for (int i = 0; i < KomonoObjsAllList.Count; i++)
        {
            komonoPosList.Add(KomonoObjsAllList[i].transform.position);
            komonoEulList.Add(KomonoObjsAllList[i].transform.eulerAngles);

            if (KomonoObjsAllList[i].GetComponent<Rigidbody>() != null)
            { komonoRigidbodyList.Add(KomonoObjsAllList[i].GetComponent<Rigidbody>()); }
        }
        #endregion

        #endregion

        #endregion

        HukidashiNovelDistanceChange(0.55f);

        yield return new WaitForSeconds(4f);


        //開幕
        FadeBlack(0, 3);
        yield return new WaitForSeconds(3f);

        Hukidashi("B2070010");//グーハーハーハー
        ChieriMotion("f_更にキリッ", 0.2f, 2);
        tmpIKLHTgtAnim.CrossFadeInFixedTime("0901グーハーハーハー", 0f, 0);
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        Hukidashi("B2070020");//ワシが来たからにはこの街はもう・・
        tmpIKLHTgtAnim.CrossFadeInFixedTime("0902この街はもう", 0.3f, 0);
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        Hukidashi("B2070030");//終わりだ！
        tmpIKLHTgtAnim.CrossFadeInFixedTime("0903終わりだ", 0f, 0);
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        #region 智恵理バジラ見る
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        FollowDOMove(IKLookAtEyeTargetTrs, GirlLHandTrs, 0.1f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, Eiffel_hiObj.transform, 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.5f, 1);
        #endregion

        Hukidashi("B2070040");//グハハハハ
        tmpIKLHTgtAnim.CrossFadeInFixedTime("0904グハハハハ", 0f, 0);
        yield return new WaitForSeconds(1f);

        NovelSetVis("B2070010");//俺はシャーペン持たされて何をやっているんだ・・
        while (isNovelSetVisIng) { yield return null; }
        while (tmpIKLHTgtAnim.GetCurrentAnimatorStateInfo(0).normalizedTime < 1) { yield return null; }

        Hukidashi("B2070050");//ほらチャンス！
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        #region IKプレイヤ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 1f);
        #endregion
        yield return new WaitForSeconds(1f);

        yield return KeyOrWait(3);


        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2070020");//えーと、こうか？
        yield return new WaitForSeconds(1f);
        while (isNovelSetVisIng) { yield return null; }
        #region シャーペンCameraObjectsにつけて攻撃モーション
        SharpenObj.transform.SetParent(CameraObjectsTrs);

        GameObject Sharpen_PareCameraObjects_KougekiJunbiPosObj
            = Resources.Load("_PosObj/09BazziraVSMakoto/Sharpen_PareCameraObjects_KougekiJunbiPosObj") as GameObject;
        GameObject Sharpen_PareCameraObjects_KougekiPosObj
            = Resources.Load("_PosObj/09BazziraVSMakoto/Sharpen_PareCameraObjects_KougekiPosObj") as GameObject;

        SharpenObj.transform.DOLocalMove(Sharpen_PareCameraObjects_KougekiJunbiPosObj.transform.localPosition, 0.5f)
            .OnComplete(() =>
            {
                SharpenObj.transform.DOLocalMove(Sharpen_PareCameraObjects_KougekiPosObj.transform.localPosition, 1)
                .SetEase(Ease.InOutBack);
            });

        //回転
        SharpenObj.transform.DOLocalRotate(Sharpen_PareCameraObjects_KougekiPosObj.transform.localEulerAngles, 0.5f).OnComplete(() =>
        {
            SharpenObj.transform.DOLocalRotate(Sharpen_PareCameraObjects_KougekiPosObj.transform.localEulerAngles, 1)
            .SetEase(Ease.InOutBack);
        });
        yield return new WaitForSeconds(1.1f);
        #endregion

        #region バジラダメージ 直
        SEPlay("punch-middle2", KB_KaijuObj, 0.5f);
        KB_kaijuRenderer = KB_KaijuObj.GetComponent<Renderer>();
        KB_kaijuDefMaterial = KB_kaijuRenderer.material;
        Material damageMat = Instantiate(Resources.Load("EventSystem/KaijuBattle/Mat/damageRed") as Material);
        KB_kaijuRenderer.material = damageMat;
        yield return new WaitForSeconds(0.05f);
        KB_kaijuRenderer.material = KB_kaijuDefMaterial;
        #endregion

        HukidashiNovelDistanceChange(1.5f);

        //フェードイン
        DOTween.To(() => tmpLHandWindnoiseSound.aSource.volume, (x) => tmpLHandWindnoiseSound.aSource.volume = x
        , 1f
        , 1f);

        tmpIKLHTgtAnim.CrossFadeInFixedTime("0905グワーよくも", 0f, 0);
        Hukidashi("B2070060");//グワーよくもやってくれたな貴様
        ChieriMotion("f_きゃう", 0.2f, 2);
        ChieriMotionDelay(1, "f_かなり怒り目開き", 0.1f, 2);//時間差表情戻し
        #region 智恵理バジラ見る目clamp注意
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        LAIKEye.solver.clampWeightEyes = 0.88f;
        FollowDOMove(IKLookAtEyeTargetTrs, GirlLHandTrs, 0.1f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, Eiffel_hiObj.transform, 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.5f, 1);
        #endregion

        yield return null;
        while (tmpIKLHTgtAnim.GetCurrentAnimatorStateInfo(0).normalizedTime < 0.45f) { yield return null; }
        #region シャーペン戻し
        GameObject Sharpen_PareCameraObjects_SoubiPosObj
           = Resources.Load("_PosObj/09BazziraVSMakoto/Sharpen_PareCameraObjects_SoubiPosObj") as GameObject;
        SharpenObj.transform.DOLocalMove(Sharpen_PareCameraObjects_SoubiPosObj.transform.localPosition, 0.5f);
        SharpenObj.transform.DOLocalRotate(Sharpen_PareCameraObjects_SoubiPosObj.transform.localEulerAngles, 0.5f);

        #endregion
        #region IKプレイヤ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 1f);
        #endregion

        while (tmpIKLHTgtAnim.GetCurrentAnimatorStateInfo(0).normalizedTime < 0.89f) { yield return null; }

        //左手風音フェードアウト
        DOTween.To(() => tmpLHandWindnoiseSound.aSource.volume, (x) => tmpLHandWindnoiseSound.aSource.volume = x
        , 0f
        , 0.5f);

        #region シャーペン落とし
        SharpenObj.transform.SetParent(GameObjectsTrs);
        GameObject Sharpen_RakkaPosObj
           = Resources.Load("_PosObj/09BazziraVSMakoto/Sharpen_RakkaPosObj") as GameObject;
        SharpenObj.transform.DOLocalMove(Sharpen_RakkaPosObj.transform.localPosition, 0.5f);
        SharpenObj.transform.DOLocalRotate(Sharpen_RakkaPosObj.transform.localEulerAngles, 0.5f);

        #endregion

        #region プレイヤーダメージとカメラ倒れ 直
        SEPlay("punch-high2", 0.5f);
        //TPSプレイヤー倒れモーション
        isPlayerUniqueMotion = true;
        PlayerMotion("liedown_00_Re", 0.2f, 0);

        //白フラッシュ
        FadeWhite(1, 0.05f); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);

        Vector3
            tmpDefCameraPos = CameraAnchorTrs.localPosition,
            tmpDefCameraEul = CameraAnchorTrs.localEulerAngles,
            tmpFlowCameraPos = new Vector3(0, 1.2f, 0),
            tmpSlipCameraPos = new Vector3(0, 0.3f, 0),
            tmpSlipCameraEul = new Vector3(-45, 0, 0);

        CameraAnchorTrs.DOLocalMove(tmpFlowCameraPos, 0.05f);
        yield return new WaitForSeconds(0.05f);
        CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.5f).SetEase(Ease.OutBounce);
        yield return new WaitForSeconds(0.05f);
        CameraAnchorTrs.DOLocalMove(tmpDefCameraPos, 0.05f);
        yield return new WaitForSeconds(0.05f);
        SEPlay("足音1_footsteps_shoe_grass_walk_03");

        CameraAnchorTrs.DOLocalRotate(tmpSlipCameraEul, 0.2f).SetEase(Ease.InSine);
        CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.5f).SetEase(Ease.OutBounce)
            .OnComplete(() =>
            {
                //カメラリセット（+回転と立ち設定）
                //カメラリセット値変更してリセット
                CameraReset(null
                        , tmpSlipCameraPos
                        , false
                        , tmpSlipCameraEul //Anchorを転んだ回転に
                        , false
                        , false//ユーザーカメラはリセットしない 
                        );
            });
        #endregion

        ChieriMotion("f_更にキリッ", 0.3f, 2);


        yield return new WaitForSeconds(0.3f);
        //DelAll_Hukidashi();
        NovelSetVis("B2070030");//なにがしたいんだ！
        tmpIKLHTgtAnim.CrossFadeInFixedTime("0906反撃終わって復帰", 0f, 0);
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        DelAll_Hukidashi();
        Hukidashi("B2070070");//空を飛べる我輩
        ChieriMotion("f_更にキリッ目閉じ", 0.05f, 2);
        ChieriMotionDelay(1, "f_更にキリッ", 0.1f, 2);//時間差表情戻し
        tmpIKLHTgtAnim.CrossFadeInFixedTime("0907空を飛べる", 0f, 0);
        yield return new WaitForSeconds(2f);
        NovelSetVis("B2070040");//飛んでる設定かよ！　痛っ
        yield return KeyOrWait(3);
        while (isNovelSetVisIng) { yield return null; }

        //倒れカメラ戻し
        isPlayerUniqueMotion = false;
        CameraAnchorTrs.DOLocalRotate(tmpDefCameraEul, 0.3f);
        CameraAnchorTrs.DOLocalMove(tmpDefCameraPos, 0.9f)
            .OnComplete(() =>
            {
                //カメラリセット値変更してリセット
                CameraReset(null
                        , tmpDefCameraPos
                        , false
                        , tmpDefCameraEul
                        , false
                        , false//ユーザーカメラリセットしない
                        );
            });

        NovelSetVis("B2070050");//ストップストップ
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("B2070080");//え～せっかく組んだのに
        ChieriMotion("f_ちぇー控えめ", 0.3f, 2);
        tmpIKLHTgtAnim.CrossFadeInFixedTime("0909えー", 1f, 0);
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        HukidashiNovelDistanceChange(1f);
        Hukidashi("B2070090");//眞人の負けでいいの？
                              //ChieriMotion("ん？", 0.3f, 2);
        tmpIKLHTgtAnim.CrossFadeInFixedTime("0910負けでいいの？", 1f, 0);
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2070060");//負けでいい！
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1f);

        HukidashiNovelDistanceChange(2f);
        Hukidashi("B2070100");//これからだったのにねー
        ChieriMotion("f_ん？（いぶかしみ）", 0.2f, 2);
        tmpIKLHTgtAnim.CrossFadeInFixedTime("0911これからだったのにねー", 1f, 0);
        yield return new WaitForSeconds(1f);
        #region 智恵理バジラ見る (目clamp注意)
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        LAIKEye.solver.clampWeightEyes = 0.95f;
        FollowDOMove(IKLookAtEyeTargetTrs, GirlLHandTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, GirlLHandTrs, 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.5f, 1);
        #endregion

        yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        HukidashiNovelDistanceChange(0.5f);
        NovelSetVis("B2070070");//あ、危なかった・・

        DOTween.To(() => speaker.audioSource.volume, (x) => speaker.audioSource.volume = x
        , 0f, 8)
        .OnComplete(() =>
        {
            speaker.audioSource.Stop();
        });

        FadeBlack(1, 4);

        while (isNovelSetVisIng) { yield return null; }

        #region //デバッグ操作（小物（箱）リセット）
        //while (true)
        //{
        //    if (Input.GetKeyDown(KeyCode.F))
        //    {
        //        #region 小物リセット
        //        for (int i = 0; i < KomonoObjsAllList.Count; i++)
        //        {
        //            KomonoObjsAllList[i].transform.position = komonoPosList[i];
        //            KomonoObjsAllList[i].transform.eulerAngles = komonoEulList[i];
        //        }
        //        for (int i = 0; i < komonoRigidbodyList.Count; i++)
        //        {
        //            komonoRigidbodyList[i].velocity =
        //            komonoRigidbodyList[i].angularVelocity = Vector3.zero;
        //            komonoRigidbodyList[i].ResetInertiaTensor();
        //        }
        //        #endregion
        //    }

        //    yield return null;
        //}
        #endregion

        //終了処理
        Destroy(KB_KomonoObjs);
        Destroy(KB_KaijuObj);
        Destroy(Eiffel_hiObj);

        //IKLHandTargetアニメーションオフ
        tmpIKLHTgtAnim.enabled = false;


        //左手右手IKOFF
        DOTweenToIKEfPos(IKLHandEf, 0, 0);
        DOTweenToIKEfRot(IKLHandEf, 0, 0);
        DOTweenToIKEfPos(IKRHandEf, 0, 0);
        DOTweenToIKEfRot(IKRHandEf, 0, 0);


        yield return new WaitForSeconds(2);

        EventMove();


    }
    IEnumerator B2080()//定規で測りながら
    {
        if (debugEventMoveFlag == true)
        {
            nowPlayerLocalScale = DB.playerScale_BaziraGuraiOne;
            FadeBlack(1, 0);
        }
        EventReset();
        yield return null;

        girlAnim.speed = 0.4f;
        FadeBlack(1, 0);
        yield return null;

        Debug.Log(HwNowStageInt);
        Debug.Log(drillTexturesList.Count);

        #region 暗幕設定
        Drill_chieriTrs.gameObject.SetActive(false);

        #region 小物位置（文具入れごと）(エッフェル)(バジラ)
        //小物ON
        GrasstableTrs.gameObject.SetActive(true);
        DrillTrs.gameObject.SetActive(true);
        Drill_chieriTrs.gameObject.SetActive(false);
        KeshigomuObj.SetActive(true);

        //スピーカー
        GameObject Speaker_JougiDe00_StartPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/Speaker_JougiDe00_StartPosObj") as GameObject;
        SpeakerTrs.localPosition = Speaker_JougiDe00_StartPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = Speaker_JougiDe00_StartPosObj.transform.localEulerAngles;

        //シャーペン
        GameObject Sharpen_JougiDe00_PosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/Sharpen_JougiDe00_PosObj") as GameObject;
        SharpenObj.transform.localPosition = Sharpen_JougiDe00_PosObj.transform.localPosition;
        SharpenObj.transform.localEulerAngles = Sharpen_JougiDe00_PosObj.transform.localEulerAngles;

        //文具入れ
        GameObject Bungu_JougiDe00_StartPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/Bungu_JougiDe00_StartPosObj") as GameObject;
        BunguTrs.localPosition = Bungu_JougiDe00_StartPosObj.transform.localPosition;
        BunguTrs.localEulerAngles = Bungu_JougiDe00_StartPosObj.transform.localEulerAngles;

        //エッフェル生成・配置
        GameObject Eiffel_hiObj;
        if (GameObject.Find("Eiffel_hiObj") == null)
        {
            Eiffel_hiObj
                = Instantiate(Resources.Load("Main/KomonoObj/Eiffel/Eiffel_hiObj") as GameObject
                , RoomTrs, false);
            Eiffel_hiObj.name = nameof(Eiffel_hiObj);
        }
        else
        {
            Eiffel_hiObj = GameObject.Find("Eiffel_hiObj");
        }


        GameObject Eiffel_JougiDe00_StartPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/Eiffel_JougiDe00_StartPosObj") as GameObject;
        Eiffel_hiObj.transform.localPosition = Eiffel_JougiDe00_StartPosObj.transform.localPosition;
        Eiffel_hiObj.transform.localEulerAngles = Eiffel_JougiDe00_StartPosObj.transform.localEulerAngles;

        #region ■バジラ生成して テーブルに
        if (GameObject.Find("Kaiju") == null)
        {
            //バジラ生成
            KB_KaijuObj = Instantiate(Resources.Load("EventSystem/KaijuBattle/Prefab/Kaiju") as GameObject);
            KB_KaijuObj.transform.SetParent(GameObjectsTrs);
        }
        //すでに配置してある場合
        else { KB_KaijuObj = GameObject.Find("Kaiju"); }

        //名前と削除リスト入れ
        KB_KaijuObj.name = "Kaiju";
        DB.evMoveDelObjList.Add(KB_KaijuObj);

        //置き位置
        GameObject Kaiju_JougiDe00_StartPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/Kaiju_JougiDe00_StartPosObj") as GameObject;
        KB_KaijuObj.transform.localPosition = Kaiju_JougiDe00_StartPosObj.transform.localPosition;
        KB_KaijuObj.transform.localEulerAngles = Kaiju_JougiDe00_StartPosObj.transform.localEulerAngles;
        KB_KaijuObj.transform.localScale = Vector3.one;

        #endregion

        #endregion

        //定規持ち時肘がねじれるのでON
        isKataTwistAuto = false;

        #region 智恵理ポーズと位置 定規スマホ
        DB.isChieriPosLock = true;

        ChieriMotion("座り待機", 0f, 0);
        ChieriMotion("f_残念そう", 0f, 2);
        ChieriMotion("デスクペットボトルへ落とす前ポーズ", 0f, 5);//右手
        ChieriMotion("背比べ左手スマホ持ち", 0f, 11);//左上半身
        ChieriMotion("h_noData", 0f, 7);//顔傾け用準備

        TereHohoAlphaChange(0.1f);
        TereHoho(true, 0f);

        #region IKプレイヤ見（頭少し下）(頭Clamp注意)
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

        LAIKHead.solver.clampWeightHead = 0.78f;//デフォ値だと全然上に向かないので
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.08f, 0), 0f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 0f);
        #endregion

        #region 右手IK設置（定規持ち）
        GameObject IKRHand_JougiDe00_AtegaiPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/IKRHand_JougiDe00_AtegaiPosObj") as GameObject;
        IKRHandTargetTrs.localPosition = IKRHand_JougiDe00_AtegaiPosObj.transform.localPosition;
        IKRHandTargetTrs.localEulerAngles = IKRHand_JougiDe00_AtegaiPosObj.transform.localEulerAngles;

        DOTweenToIKEfPos(IKRHandEf, 1, 0f);
        DOTweenToIKEfRot(IKRHandEf, 1, 0f);

        #endregion

        #region 左手IK設置（スマホテーブルにぶつからないように）       
        GameObject IKLHand_Chieri_Sumaho020IziriPosObj
            = Resources.Load("_PosObj/08BaziraKunDayo/IKLHand_Chieri_Sumaho020IziriPosObj") as GameObject;
        IKLHandTargetTrs.localPosition = IKLHand_Chieri_Sumaho020IziriPosObj.transform.localPosition;
        IKLHandTargetTrs.localEulerAngles = IKLHand_Chieri_Sumaho020IziriPosObj.transform.localEulerAngles;

        DOTweenToIKEfPos(IKLHandEf, 1, 0f);
        DOTweenToIKEfRot(IKLHandEf, 1, 0f);
        #endregion

        //スマホ片手いじりPosにしてON
        GameObject ChieriSumaho_LHand_SekurabeKatatePosObj
            = Resources.Load("_PosObj/_ParentPoseObjs/ChieriSumaho_LHand_SekurabeKatatePosObj") as GameObject;
        ChieriSumahoObj.transform.localPosition = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localEulerAngles;
        ChieriSumahoObj.SetActive(true);
        ChieriSumahoPower(true);

        //定規をペアレントして右手のPosへ（ペットボトル摘み利用）
        JougiTrs.SetParent(GirlRHandTrs);
        GameObject Jougi_PareRHand_JougiDe00_PickPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/Jougi_PareRHand_JougiDe00_PickPosObj") as GameObject;
        JougiTrs.localPosition = Jougi_PareRHand_JougiDe00_PickPosObj.transform.localPosition;
        JougiTrs.localEulerAngles = Jougi_PareRHand_JougiDe00_PickPosObj.transform.localEulerAngles;
        JougiTrs.localScale = Jougi_PareRHand_JougiDe00_PickPosObj.transform.localScale;

        //定規固定のために呼吸止め
        OriBreathController.enabled = false;

        #endregion

        #region プレイヤー 位置とポーズとカメラリセット
        GameObject Player010_JougiDe00_StartPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/Player010_JougiDe00_StartPosObj") as GameObject;

        CameraObjectsTrs.localPosition = Player010_JougiDe00_StartPosObj.transform.localPosition;

        //カメラリセット（+回転と立ち設定）
        //カメラリセット値変更してリセット
        CameraReset(Player010_JougiDe00_StartPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos);//Anchorを立ちに

        #endregion

        #region 宿題 念のため
        //宿題システムスタート
        StartCoroutine(HomeworkSystem());
        //宿題7ページ目へ
        HwPageForceMove(7);

        //宿題ロック
        isHwVisLock = true;

        //宿題サイトついてたら消す（なぜかついてたので）
        if (HwPointTrs.gameObject.activeSelf == true)
        {
            HwPointTrs.gameObject.SetActive(false);
            HwPointTrs.position = Vector3.zero;
        }
        #endregion


        #region SoundObj左手に付与
        //WindnoiseSoundObj付与（左手）
        GameObject LHandWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlLHandTrs);
        DB.evMoveDelObjList.Add(LHandWindnoiseSoundObj);
        LHandWindnoiseSoundObj.name = nameof(LHandWindnoiseSoundObj);
        LHandWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpLHandWindnoiseSound = LHandWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpLHandWindnoiseSound.aSource.maxDistance = 50;
        tmpLHandWindnoiseSound.aSource.volume = 0.7f;
        tmpLHandWindnoiseSound.pitchUpRateAdjustFloat = 2;

        tmpLHandWindnoiseSound.pitchMax = 0;
        #endregion
        #region SoundObj右手に付与
        //WindnoiseSoundObj付与（左手）
        GameObject RHandWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRHandTrs);
        DB.evMoveDelObjList.Add(RHandWindnoiseSoundObj);
        RHandWindnoiseSoundObj.name = nameof(RHandWindnoiseSoundObj);
        RHandWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpRHandWindnoiseSound = RHandWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpRHandWindnoiseSound.aSource.maxDistance = 50;
        tmpRHandWindnoiseSound.pitchMax = 1f;
        tmpRHandWindnoiseSound.pitchUpRateAdjustFloat = 2;
        tmpRHandWindnoiseSound.pitchDownRateAdjustFloat = 100;

        tmpRHandWindnoiseSound.aSource.volume = 0;
        #endregion
        #region SoundObj頭に付与
        //WindnoiseSoundObj付与（左手）
        GameObject HeadWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , Bip001HeadTrs);
        DB.evMoveDelObjList.Add(HeadWindnoiseSoundObj);
        HeadWindnoiseSoundObj.name = nameof(HeadWindnoiseSoundObj);
        HeadWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpHeadWindnoiseSound = HeadWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpHeadWindnoiseSound.aSource.maxDistance = 50;
        tmpHeadWindnoiseSound.pitchMax = 1f;
        tmpHeadWindnoiseSound.pitchUpRateAdjustFloat = 3;

        tmpHeadWindnoiseSound.aSource.volume = 0;
        #endregion


        float tmptime = Time.timeSinceLevelLoad;
        Debug.Log("ロード開始" + Time.timeSinceLevelLoad);

        #region ■隠れ鬼移動システム事前ON（ロードかかるほど重くなったので）
        isSeePointTempOff = true;//ポインタ表示OFF
        KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
        //ローディング待ち
        while (isKOSystemLoading) { yield return null; }
        #endregion

        Debug.Log(Time.timeSinceLevelLoad - tmptime + "ロード終了" + Time.timeSinceLevelLoad);

        #endregion
        HukidashiNovelDistanceChange(0.5f);

        //風SoundObj音量上げ
        yield return new WaitForSeconds(1f);
        tmpLHandWindnoiseSound.pitchMax = 0.7f;
        tmpRHandWindnoiseSound.aSource.volume = 0.7f;
        tmpHeadWindnoiseSound.aSource.volume = 2f;

        //開幕
        FadeBlack(0, 3);
        yield return new WaitForSeconds(3f);



        //goto デバッグ移動;

        #region 定規添えから おうどんどん来いまで

        Hukidashi("B2080010");//負けてしまったヒーローマコト君は
        ChieriMotion("f_残念そう目つむり", 0.1f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        Hukidashi("B2080020");//巨大化の変身が解け
        ChieriMotion("f_残念そう", 0.05f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        #region 定規取り出し
        GameObject IKRHand_JougiDe001_AtegaiPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/IKRHand_JougiDe001_AtegaiPosObj") as GameObject;
        IKRHandTargetTrs.DOLocalMove(IKRHand_JougiDe001_AtegaiPosObj.transform.localPosition, 3f);
        IKRHandTargetTrs.DOLocalRotate(IKRHand_JougiDe001_AtegaiPosObj.transform.localEulerAngles, 3f);
        #endregion


        Hukidashi("B2080030");//17メートルから縮んでしまいます
        yield return new WaitForSeconds(0.5f);
        ChieriMotion("h_右少し傾け", 0.5f, 7);//顔傾け
        yield return new WaitForSeconds(0.5f);
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1.5f, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        yield return KeyOrWait(3);
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(0.5f, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        #region 定規添え
        GameObject IKRHand_JougiDe005_AtegaiPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/IKRHand_JougiDe005_AtegaiPosObj") as GameObject;
        IKRHandTargetTrs.DOLocalMove(IKRHand_JougiDe005_AtegaiPosObj.transform.localPosition, 3f);
        IKRHandTargetTrs.DOLocalRotate(IKRHand_JougiDe005_AtegaiPosObj.transform.localEulerAngles, 3f);
        #endregion



        NovelSetVis("B2080010");//なんで最後嬉しそう　　17センチか・・
        while (isNovelSetVisIng) { yield return null; }
        NovelSetVis("B2080020");//智恵理は140メートル？
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);

        ChieriMotion("あはは・・・", 0.05f, 2);
        ChieriMotion("h_noData", 0.3f, 7);//顔傾け
        AseTare();
        Hukidashi("B2080040");//私のことはいいから
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //IKちょい右上見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, HeadSphereTrs, new Vector3(0.6f, 0.2f, 0), 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, VRCameraTrs, new Vector3(0.4f, -0.15f, 0), 10f);

        ChieriMotion("f_む～", 0.4f, 2);
        TereHohoAlphaChange(0.8f);
        TereHoho(true, 2);
        yield return new WaitForSeconds(0.5f);
        Hukidashi("B2080050");//実際は１４５
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("B2080030");//大して変わんないだろ！
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        #region IKプレイヤ見（頭少し下）
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.08f, 0), 2f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 0f);
        #endregion

        ChieriMotion("あはは・・・", 0.05f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        TereHohoAlphaChange(0.2f);
        TereHoho(true, 2);
        Hukidashi("B2080060");//とにかくじゃあいくよ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("B2080040");//おうどんどんこい
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);
        #endregion

        デバッグ移動:
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し


        #region マスクスマホ操作しまい
        string
            tmpBaseAnimStateName = "座り待機";
        StartCoroutine(GirlAnimReadSystem(11));


        #region マスクスマホいじり

        #region スマホ見 目だけ
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        #endregion
        yield return new WaitForSeconds(0.5f);
        ChieriMotion("背比べ左手スマホいじり", 0f, 11);
        Hukidashi("B2080070");//ゆっくりにしてー・・
        yield return new WaitForSeconds(1f);

        #endregion

        yield return new WaitForSeconds(2);


        #region IKプレイヤ見（目だけ）
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        #endregion

        #region ■マスクスマホしまう と同時に追従指のせ
        #region 左手IKOFFへ（力技のやつ

        DOTweenToIKEfPos(IKLHandEf, 0, 2f);
        DOTweenToIKEfRot(IKLHandEf, 0, 2f);
        #endregion

        ChieriMotion("背比べ左手スマホしまう", 0f, 11);
        StartCoroutine(GirlAnimReadSystem(11));
        while (nowGirlAnimOtherLayerClipNameDict[11] != "背比べスマホしまう") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[11] <= 0.5f) { yield return null; }
        //スマホObjオフ（しまう）
        ChieriSumahoObj.SetActive(false);

        //モーション終了まで待機
        while (girlAnimOtherLayerNomTimeDict[11] <= 0.65f) { yield return null; }

        isGirlAnimReadSystem = false;


        #region ■追従指のせとスマホマスク終了を同時に(SetLayerWeightを使う)

        ChieriMotion("lh_手乗せつつきの指", 1f, 6);
        #region ■左人差し指プレイヤー頭の上追従開始
        //■VRCameraから少し離れた位置に追従しつつ、VRcameraが回転しても影響を受けないようにする

        //まず現在のCameraAdjustTrackingTrs位置に手乗せ位置Objペアレント（事前にVRCameraが回転していても大丈夫なように）
        GameObject IKLHand_PareVRCamera_00PlayerHeadTopYubiatePosObj
            = Instantiate(Resources.Load("_PosObj/10JougiDeHakarinagara/IKLHand_PareVRCamera_00PlayerHeadTopYubiatePosObj") as GameObject
            , CameraAnchorTrs, false);

        //PosObj位置からCameraAdjustTrackingTrs位置を引いたPos生成（Adjust量となる）
        Vector3 tmpAdjustPos =
            (IKLHand_PareVRCamera_00PlayerHeadTopYubiatePosObj.transform.position
            - CameraAdjustTrackingTrs.position)
            / GameObjectsTrs.localScale.z;//メソッドでGameObjectsのサイズかけているので（メソッドでかける理由は、ほぼ全てのObjがGameObjectsに入っているため。今回は特別）

        //そして追いかけるのはVRカメラにAdjust量足した位置
        FollowDOMove(IKLHandTargetTrs, VRCameraTrs, tmpAdjustPos, 1.5f);
        //これでVRcameraの位置に少し離れて追従しつつ、回転の影響を受けない

        //■調整する場合は、一旦IKLHandTTargetを直接追いかけるようにしてから（↑のTweenを切る）
        //IKLHandTargetを回転ゼロのVRCameraにペアレントして調整した後
        //PosObjのPrefab（IKLHand_PareVRCamera_PlayerHeadTopYubiatePosObj）に値をいれる



        //手首の回転
        IKLHandTargetTrs.DORotate(IKLHand_PareVRCamera_00PlayerHeadTopYubiatePosObj.transform.eulerAngles, 1.5f);
        //Adjust位置、回転値読み取ったのでPosObj削除
        Destroy(IKLHand_PareVRCamera_00PlayerHeadTopYubiatePosObj);


        //IKON
        DOTweenToIKEfPos(IKLHandEf, 1, 3);
        DOTweenToIKEfRot(IKLHandEf, 1, 3);

        #endregion

        #region 左半身のウェイトを下げていく
        float tmpLayerWeightFloat = 1;

        //DOTWeenTOで下げながら適用
        DOTween.To(() => tmpLayerWeightFloat, (x) => tmpLayerWeightFloat = x, 0f, 1f / girlAnim.speed)
            .OnUpdate(() => { girlAnim.SetLayerWeight(11, tmpLayerWeightFloat); })
            .OnComplete(() =>
            {
                //終わったらアニメとウェイト元に戻しておく
                ChieriMotion("_noData", 0f, 11);
                girlAnim.SetLayerWeight(11, 1);
            });

        //↓（ウェイト下げでやってるのでいらない）
        ////現在のベースと同じモーションになるまで待機してからnoData
        //ChieriMotion(tmpBaseAnimStateName, 0.5f, 11);
        //while (nowGirlAnimOtherLayerClipNameDict[11] != nowGirlAnimClipName)
        //{
        //    girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeにセットし続ける
        //    yield return null;
        //}
        //ChieriMotion("_noData", 0f, 11);


        #endregion


        #endregion

        #endregion

        #endregion

        #region ■目眩リトルとDOTWeenTOでプレイヤーサイズ縮小(縮小完了bool付き)マスク版
        bool isShrinkComplete = false;
        //段階別で目眩具合と縮小度変更して縮小
        PPv2MemaiLittle(1f);

        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
        , DB.playerScale_JougiDeHakariZero, 20f)
        .OnComplete(() => { isShrinkComplete = true; });

        #endregion

        SEPlay("magic-attack-darkness1_long(-12)", 0.5f);



        #region 身長カウントダウン
        yield return new WaitForSeconds(3);
        Hukidashi("B2080080");//13 11
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し

        #region IK右手 定規近づけ
        GameObject IKRHand_JougiDe01_AtegaiPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/IKRHand_JougiDe01_AtegaiPosObj") as GameObject;
        IKRHandTargetTrs.DOLocalMove(IKRHand_JougiDe01_AtegaiPosObj.transform.localPosition, 3f);
        IKRHandTargetTrs.DOLocalRotate(IKRHand_JougiDe01_AtegaiPosObj.transform.localEulerAngles, 3f);
        #endregion

        yield return new WaitForSeconds(4);
        NovelSetVis("B2080050");//う、むむ・・
        yield return new WaitForSeconds(2);
        DelAll_Hukidashi();
        Hukidashi("B2080090");//8　7
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        #endregion

        while (isNovelSetVisIng) { yield return null; }
        while (isShrinkComplete == false) { yield return null; }
        Hukidashi("B2080100");//5センチ！　こんなとこかな？

        #region ■一応頭追従位置を更新（小さくなると位置離れるので（少し下げ目に設定して力技でそれっぽくしたけど））（tmpAdjustPosを更新してIK）
        //小さくなっている最中だと位置ずれるので、小さくなりきってから
        GameObject IKLHand_PareVRCamera_01PlayerHeadTopYubiatePosObj
            = Instantiate(Resources.Load("_PosObj/10JougiDeHakarinagara/IKLHand_PareVRCamera_01PlayerHeadTopYubiatePosObj") as GameObject
            , CameraAnchorTrs, false);
        tmpAdjustPos =
            (IKLHand_PareVRCamera_01PlayerHeadTopYubiatePosObj.transform.position
            - CameraAdjustTrackingTrs.position)
            / GameObjectsTrs.localScale.z;//メソッドでGameObjectsのサイズかけているので（メソッドでかける理由は、ほぼ全てのObjがGameObjectsに入っているため。今回は特別）

        //そして追いかけるのはVRカメラにAdjust量足した位置
        FollowDOMove(IKLHandTargetTrs, VRCameraTrs, tmpAdjustPos, 1.5f);

        //手首の回転
        IKLHandTargetTrs.DORotate(IKLHand_PareVRCamera_01PlayerHeadTopYubiatePosObj.transform.eulerAngles, 1.5f);
        //Adjust位置、回転値読み取ったのでPosObj削除
        Destroy(IKLHand_PareVRCamera_01PlayerHeadTopYubiatePosObj);
        #endregion

        yield return new WaitForSeconds(1);
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        #region 左手IK離す
        GameObject IKLHand_JougiDe01_KonnatokokanaPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/IKLHand_JougiDe01_KonnatokokanaPosObj") as GameObject;

        //FollowDOMoveで追従キャンセルする
        FollowDOMove(IKLHandTargetTrs, IKLHand_JougiDe01_KonnatokokanaPosObj.transform.localPosition, 3f);
        IKLHandTargetTrs.DOLocalRotate(IKLHand_JougiDe01_KonnatokokanaPosObj.transform.localEulerAngles, 3f);

        #endregion
        ChieriMotion("lh_甘にぎり", 1f, 6);

        yield return KeyOrWait(3);

        NovelSetVis("B2080060");//うお、遠っ
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        ChieriMotion("ん？", 0.1f, 2);
        Hukidashi("B2080110");//遠く感じるの？

        //呼吸戻し
        OriBreathController.enabled = true;

        #region 右手IK定規置きPosへ
        GameObject IKRHand_JougiDe03_OkiPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/IKRHand_JougiDe03_OkiPosObj") as GameObject;
        IKRHandTargetTrs.DOLocalMove(IKRHand_JougiDe03_OkiPosObj.transform.localPosition, 3f);
        yield return new WaitForSeconds(1);
        yield return KeyOrWait(3);
        IKRHandTargetTrs.DOLocalRotate(IKRHand_JougiDe03_OkiPosObj.transform.localEulerAngles, 3f)
            .OnComplete(() =>
            {
                #region IK右手カーブ位置に運びつつOFF
                ChieriMotion("_noData", 0.8f, 5);//右手
                DOTweenToIKEfPos(IKRHandEf, 0, 3f);
                DOTweenToIKEfRot(IKRHandEf, 0, 3f);

                GameObject IKRHand_JougiDe04_OkiCurvePosObj
                = Resources.Load("_PosObj/10JougiDeHakarinagara/IKRHand_JougiDe04_OkiCurvePosObj") as GameObject;
                IKRHandTargetTrs.DOLocalMove(IKRHand_JougiDe04_OkiCurvePosObj.transform.localPosition, 1f).SetEase(Ease.InQuad);
                IKRHandTargetTrs.DOLocalRotate(IKRHand_JougiDe04_OkiCurvePosObj.transform.localEulerAngles, 1f).SetEase(Ease.InQuad);
                #endregion
                #region 定規文具置かれる
                JougiTrs.SetParent(GameObjectsTrs);

                GameObject Jougi_JougiDe02_OkiPosObj
                    = Resources.Load("_PosObj/10JougiDeHakarinagara/Jougi_JougiDe02_OkiPosObj") as GameObject;
                JougiTrs.DOLocalMove(Jougi_JougiDe02_OkiPosObj.transform.localPosition, 0.5f);
                JougiTrs.DOLocalRotate(Jougi_JougiDe02_OkiPosObj.transform.localEulerAngles, 0.5f);
                #endregion
            });



        #endregion

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        Hukidashi("B2080120");//近づいてみる？
        yield return new WaitForSeconds(2);

        ChieriMotion("lh_手乗せつつきの指", 0.5f, 6);
        #region 左手IK近づいてみる？
        GameObject IKLHand_JougiDe02_TikaduitemiruPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/IKLHand_JougiDe02_TikaduitemiruPosObj") as GameObject;
        IKLHandTargetTrs.DOLocalMove(IKLHand_JougiDe02_TikaduitemiruPosObj.transform.localPosition, 2f);
        IKLHandTargetTrs.DOLocalRotate(IKLHand_JougiDe02_TikaduitemiruPosObj.transform.localEulerAngles, 2f)
            .OnComplete(() =>
            {
            });
        #endregion

        yield return KeyOrWait(3);

        NovelSetVis("B2080070");//近づくって・・え
        while (isNovelSetVisIng) { yield return null; }


        #region 操作説明 移動ポイント説明表示
        GameObject SousaSetumeiKOWindowCanvas;
        if (DB.isEnglish)
        {
            SousaSetumeiKOWindowCanvas = Instantiate(Resources.Load("EventSystem/Menu/Prefab/SousaSetumeiKOEngWindowCanvas") as GameObject
                , VRCameraTrs, false);
        }
        else
        {
            SousaSetumeiKOWindowCanvas = Instantiate(Resources.Load("EventSystem/Menu/Prefab/SousaSetumeiKOWindowCanvas") as GameObject
                , VRCameraTrs, false);
        }

        FadeBlack(0.5f, 0.5f);


        while (isKetteiDown == false)
        {
            yield return null;
        }

        FadeBlack(0, 0.5f);
        Destroy(SousaSetumeiKOWindowCanvas);
        #endregion



        #region ■隠れ鬼移動システムON
        isSeePointTempOff = false;//ポインタ表示
                                  //移動場所00オン
        int tmpListInt = 0;
        KO_KakurePosObjsList[tmpListInt].SetActive(true);
        //ポイント出現 演出
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[tmpListInt].transform.Find("TikaduitemiruPos").gameObject);
        //歩きスピードにしてモーションも歩きに
        playerMoveSpeed = 1;
        KO_AsiotoTimeCountMaxFloat = 0.7f;
        isKO_PlayerWalk = true;
        #endregion

        while (isTikaduitemiruPos_Enter == false) { yield return null; }
        isKOSystem = false;
        KO_isMovePosLock = true;

        //足音速さ戻し
        KO_AsiotoTimeCountMaxFloat = 0.35f;

        Hukidashi("B2080130");//どう？
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        ChieriMotion("lh_甘にぎり", 1f, 6);
        #region 左手IK離す
        GameObject IKLHand_JougiDe03_DouPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/IKLHand_JougiDe03_DouPosObj") as GameObject;

        FollowDOMove(IKLHandTargetTrs, IKLHand_JougiDe03_DouPosObj.transform.localPosition, 3f);
        IKLHandTargetTrs.DOLocalRotate(IKLHand_JougiDe03_DouPosObj.transform.localEulerAngles, 3f);

        DOTweenToIKEfPos(IKLHandEf, 0.8f, 3f);
        DOTweenToIKEfRot(IKLHandEf, 0.8f, 3f);
        #endregion
        NovelSetVis("B2080080");//うへへ・・・　え？　なんというか・・・
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2080140");//届かない？
        ChieriMotion("h_右少し傾け", 0.5f, 7);//顔傾け
        ChieriMotion("f_うーん・・？", 0.1f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2080090");//あ・・
        while (isNovelSetVisIng) { yield return null; }
        ChieriMotion("笑顔01口眉_目閉じない", 0.2f, 2);

        yield return new WaitForSeconds(0.5f);

        #region IKエッフェル見 目
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, Eiffel_hiObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        #endregion
        yield return new WaitForSeconds(1f);

        Hukidashi("B2080150");//じゃあさじゃあさ
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        ChieriMotion("h_noData", 0.3f, 7);//顔戻し

        #region IKエッフェル見 頭
        FollowDOMove(IKLookAtHeadTargetTrs, Eiffel_hiObj.transform, 3f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 3f);
        #endregion
        #region 左手IKエッフェルへ伸ばし、持ち、置き(ReachやBendGoalもいじって、胸近づけ)

        //連続OnCompleteで長いので完了Bool
        bool isTmpComplete = false;

        GameObject IKLHand_JougiDe04_EiffelTsukamiPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/IKLHand_JougiDe04_EiffelTsukamiPosObj") as GameObject;

        //ReachとBendGoal
        DOTween.To(() => FBBIK.solver.leftArmChain.reach, (x) => FBBIK.solver.leftArmChain.reach = x
        , 0.44f, 3f);
        DOTween.To(() => FBBIK.solver.leftArmChain.bendConstraint.weight, (x) => FBBIK.solver.leftArmChain.bendConstraint.weight = x
        , 0f, 3f).SetEase(Ease.InQuint);

        //0.8にしてたので1に
        DOTweenToIKEfPos(IKLHandEf, 1f, 3f);
        DOTweenToIKEfRot(IKLHandEf, 1f, 3f);

        //つまみ位置へ
        FollowDOMove(IKLHandTargetTrs, IKLHand_JougiDe04_EiffelTsukamiPosObj.transform.localPosition, 3f);
        IKLHandTargetTrs.DOLocalRotate(IKLHand_JougiDe04_EiffelTsukamiPosObj.transform.localEulerAngles, 3f)
            .OnComplete(() =>
            {
                //ペアレント
                Eiffel_hiObj.transform.SetParent(GirlLHandTrs);

                #region IKプレイヤ見（頭少し下）(頭Clamp注意)（ペアレントするとIKLook狂うのですぐプレイヤー見にした）
                ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

                LAIKHead.solver.clampWeightHead = 0.78f;//デフォ値だと全然上に向かないので
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.08f, 0), 2f);
                DOTweenToLAIKSHead(LAIKHeadS, 1, 2f);
                #endregion


                //BendGoal戻し
                DOTween.To(() => FBBIK.solver.leftArmChain.bendConstraint.weight, (x) => FBBIK.solver.leftArmChain.bendConstraint.weight = x
                    , 1f, 6f).SetEase(Ease.OutQuint);

                //Pathで浮かばせカーブしつつ置き位置へ
                GameObject IKLHand_JougiDe05_EiffelOkiCurvePosObj
                    = Resources.Load("_PosObj/10JougiDeHakarinagara/IKLHand_JougiDe05_EiffelOkiCurvePosObj") as GameObject;
                GameObject IKLHand_JougiDe05_EiffelOkiPosObj
                = Resources.Load("_PosObj/10JougiDeHakarinagara/IKLHand_JougiDe05_EiffelOkiPosObj") as GameObject;

                Vector3[] paths = new[]
                {
                    IKLHand_JougiDe05_EiffelOkiCurvePosObj.transform.localPosition,
                    IKLHand_JougiDe05_EiffelOkiPosObj.transform.localPosition,
                };
                IKLHandTargetTrs.DOLocalPath(paths, 3.0f, PathType.CatmullRom);

                IKLHandTargetTrs.DOLocalRotate(IKLHand_JougiDe05_EiffelOkiPosObj.transform.localEulerAngles, 3f)
                .OnComplete(() =>
                {
                    isTmpComplete = true;//ここで完了

                    //ペアレントはずし
                    Eiffel_hiObj.transform.SetParent(GameObjectsTrs);

                    //手戻し（1回目の方の甘にぎり）
                    FollowDOMove(IKLHandTargetTrs, IKLHand_JougiDe01_KonnatokokanaPosObj.transform.localPosition, 3f);
                    IKLHandTargetTrs.DOLocalRotate(IKLHand_JougiDe01_KonnatokokanaPosObj.transform.localEulerAngles, 3f);
                    //0.8に戻し
                    DOTweenToIKEfPos(IKLHandEf, 0.8f, 3f);
                    DOTweenToIKEfRot(IKLHandEf, 0.8f, 3f);

                    //Reach戻し（影響薄いから最後でよい）
                    DOTween.To(() => FBBIK.solver.leftArmChain.reach, (x) => FBBIK.solver.leftArmChain.reach = x
                        , 0.1f, 10f);

                });
            });

        #endregion

        //ゴト音出すために結局実時間計測も兼ねた
        yield return new WaitForSeconds(5.8f);
        SEPlay(Other3DSEObj, "MetalC@11_5高い_短0_ピッチ＋4", Eiffel_hiObj, 0.7f);
        SEPlay(Other3DSEObj, "MetalE@11_ピッチ＋4", Eiffel_hiObj);

        //Tween終了待ち
        while (isTmpComplete == false) { yield return null; }

        Hukidashi("B2080160");//これ登ってみない？
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("B2080100");//これ？
        yield return new WaitForSeconds(3);
        NovelSetVis("B2080110");//これ！？
        CameraAnchorTrs.DOShakePosition(0.5f, 0.1f);
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        #region IKエッフェル見 目
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, Eiffel_hiObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        #endregion
        Hukidashi("B2080170");//てっぺんまで登れば
        ChieriMotion("lh_手乗せつつきの指", 1f, 6);
        #region IKエッフェルトップ指差し
        GameObject IKLHand_JougiDe06_EiffelTopPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/IKLHand_JougiDe06_EiffelTopPosObj") as GameObject;
        FollowDOMove(IKLHandTargetTrs, IKLHand_JougiDe06_EiffelTopPosObj.transform.localPosition, 2f);
        IKLHandTargetTrs.DOLocalRotate(IKLHand_JougiDe06_EiffelTopPosObj.transform.localEulerAngles, 2f);
        //1に
        DOTweenToIKEfPos(IKLHandEf, 1f, 2f);
        DOTweenToIKEfRot(IKLHandEf, 1f, 2f);
        #endregion
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2080120");//ジャングルジムと思えば……大丈夫か？
        while (isNovelSetVisIng) { yield return null; }

        #region IKプレイヤ見（頭少し下）(頭Clamp注意)（ペアレントするとIKLook狂うのですぐプレイヤー見にした）
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

        LAIKHead.solver.clampWeightHead = 0.78f;//デフォ値だと全然上に向かないので
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.08f, 0), 2f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 2f);
        #endregion

        Hukidashi("B2080180");//大丈夫！　アリと同じで
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        #region IK指差し大丈夫
        GameObject IKLHand_JougiDe07_DaizyoubuPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/IKLHand_JougiDe07_DaizyoubuPosObj") as GameObject;
        FollowDOMove(IKLHandTargetTrs, IKLHand_JougiDe07_DaizyoubuPosObj.transform.localPosition, 2f);
        IKLHandTargetTrs.DOLocalRotate(IKLHand_JougiDe07_DaizyoubuPosObj.transform.localEulerAngles, 2f);
        #endregion
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        Hukidashi("B2080190");//登るの簡単落ちても安全
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        ChieriMotion("h_右少し傾け", 0.5f, 7);//顔傾け
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("B2080130");//安心できないや！
        while (isNovelSetVisIng) { yield return null; }

        FadeBlack(1, 2);
        yield return new WaitForSeconds(2);

        //肘ツイストオフ
        isKataTwistAuto = true;

        #region 終了処理
        //DOTween用IKリスト　IKEf、LAIKSのDictクリア
        FollowDOMoveFromTrsList.Clear();
        IKEfPosTweenerDict.Clear();
        IKEfRotTweenerDict.Clear();
        LAIKSHeadTweenerDict.Clear();
        LAIKSEyesTweenerDict.Clear();
        LAIKSBodyTweenerDict.Clear();

        //DOTeen.Clearはノベルログ用のなども全部消してしまうのでやってはいけない
        ////そしてDOTweenを全部クリア
        //DOTween.Clear();

        //モーション
        ChieriMotion("_noData", 0f, 5);//右手
        ChieriMotion("_noData", 0f, 11);//左上半身
        ChieriMotion("_noData", 0f, 7);//顔傾け用準備

        //IK
        DOTweenToIKEfPos(IKRHandEf, 0, 0f);
        DOTweenToIKEfRot(IKRHandEf, 0, 0f);
        DOTweenToIKEfPos(IKLHandEf, 0, 0f);
        DOTweenToIKEfRot(IKLHandEf, 0, 0f);


        #endregion

        EventMove();
    }
    IEnumerator B2090()//エッフェル塔
    {
        if (debugEventMoveFlag == true)
        {
            nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;
            FadeBlack(1, 0);
        }
        EventReset();
        yield return null;

        girlAnim.speed = 0.6f;
        FadeBlack(1, 0);
        yield return null;


        #region 暗幕設定
        Drill_chieriTrs.gameObject.SetActive(false);

        #region 小物位置（文具入れごと）(エッフェル)(バジラ)
        //小物ON
        GrasstableTrs.gameObject.SetActive(true);
        DrillTrs.gameObject.SetActive(true);
        Drill_chieriTrs.gameObject.SetActive(false);
        KeshigomuObj.SetActive(true);

        //スピーカー
        GameObject Speaker_JougiDe00_StartPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/Speaker_JougiDe00_StartPosObj") as GameObject;
        SpeakerTrs.localPosition = Speaker_JougiDe00_StartPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = Speaker_JougiDe00_StartPosObj.transform.localEulerAngles;

        //シャーペン
        GameObject Sharpen_JougiDe00_PosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/Sharpen_JougiDe00_PosObj") as GameObject;
        SharpenObj.transform.localPosition = Sharpen_JougiDe00_PosObj.transform.localPosition;
        SharpenObj.transform.localEulerAngles = Sharpen_JougiDe00_PosObj.transform.localEulerAngles;

        //文具入れ
        GameObject Bungu_JougiDe00_StartPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/Bungu_JougiDe00_StartPosObj") as GameObject;
        BunguTrs.localPosition = Bungu_JougiDe00_StartPosObj.transform.localPosition;
        BunguTrs.localEulerAngles = Bungu_JougiDe00_StartPosObj.transform.localEulerAngles;

        //エッフェル生成・配置
        GameObject Eiffel_hiObj;
        if (GameObject.Find("Eiffel_hiObj") == null)
        {
            Eiffel_hiObj
                = Instantiate(Resources.Load("Main/KomonoObj/Eiffel/Eiffel_hiObj") as GameObject
                , RoomTrs, false);
            Eiffel_hiObj.name = nameof(Eiffel_hiObj);
        }
        else
        {
            Eiffel_hiObj = GameObject.Find("Eiffel_hiObj");
        }

        GameObject Eiffel_JougiDe01_OkarePosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/Eiffel_JougiDe01_OkarePosObj") as GameObject;
        Eiffel_hiObj.transform.localPosition = Eiffel_JougiDe01_OkarePosObj.transform.localPosition;
        Eiffel_hiObj.transform.localEulerAngles = Eiffel_JougiDe01_OkarePosObj.transform.localEulerAngles;

        #region ■バジラ生成して テーブルに
        if (GameObject.Find("Kaiju") == null)
        {
            //バジラ生成
            KB_KaijuObj = Instantiate(Resources.Load("EventSystem/KaijuBattle/Prefab/Kaiju") as GameObject);
            KB_KaijuObj.transform.SetParent(GameObjectsTrs);
        }
        //すでに配置してある場合
        else { KB_KaijuObj = GameObject.Find("Kaiju"); }

        //名前と削除リスト入れ
        KB_KaijuObj.name = "Kaiju";
        DB.evMoveDelObjList.Add(KB_KaijuObj);

        //置き位置
        GameObject Kaiju_JougiDe00_StartPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/Kaiju_JougiDe00_StartPosObj") as GameObject;
        KB_KaijuObj.transform.localPosition = Kaiju_JougiDe00_StartPosObj.transform.localPosition;
        KB_KaijuObj.transform.localEulerAngles = Kaiju_JougiDe00_StartPosObj.transform.localEulerAngles;
        KB_KaijuObj.transform.localScale = Vector3.one;

        #endregion

        #endregion

        #region 智恵理ポーズと位置 定規スマホ
        DB.isChieriPosLock = false;
        GameObject Chieri010_Eiffel_StartPosObj
            = Resources.Load("_PosObj/11EiffelTower/Chieri010_Eiffel_StartPosObj") as GameObject;
        GirlTrs.localPosition = Chieri010_Eiffel_StartPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri010_Eiffel_StartPosObj.transform.localEulerAngles;

        ChieriMotion("座り待機", 0f, 0);
        ChieriMotion("笑顔01口眉_目閉じない", 0f, 2);
        ChieriMotion("h_noData", 0f, 7);//顔傾け用準備

        TereHohoAlphaChange(0.1f);
        TereHoho(true, 0f);

        #region IKプレイヤ見（頭少し下）(頭Clamp注意)
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

        LAIKHead.solver.clampWeightHead = 0.78f;//デフォ値だと全然上に向かないので
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.08f, 0), 0f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 0f);
        #endregion
        #endregion

        #region プレイヤー 位置とポーズとカメラリセット
        GameObject Player010_Eiffel_StartPosObj
            = Resources.Load("_PosObj/11EiffelTower/Player010_Eiffel_StartPosObj") as GameObject;

        CameraObjectsTrs.localPosition = Player010_Eiffel_StartPosObj.transform.localPosition;

        //カメラリセット（+回転と立ち設定）
        //カメラリセット値変更してリセット
        CameraReset(Player010_Eiffel_StartPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos);//Anchorを立ちに

        #endregion

        #region 宿題 念のため
        //宿題システムスタート
        StartCoroutine(HomeworkSystem());
        //宿題7ページ目へ
        HwPageForceMove(7);

        //宿題ロック
        isHwVisLock = true;

        //宿題サイトついてたら消す（なぜかついてたので）
        if (HwPointTrs.gameObject.activeSelf == true)
        {
            HwPointTrs.gameObject.SetActive(false);
            HwPointTrs.position = Vector3.zero;
        }

        #endregion


        #endregion

        #region SoundObj左手に付与
        //WindnoiseSoundObj付与（左手）
        GameObject LHandWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlLHandTrs);
        DB.evMoveDelObjList.Add(LHandWindnoiseSoundObj);
        LHandWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpLHandWindnoiseSound = LHandWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpLHandWindnoiseSound.aSource.maxDistance = 50;
        tmpLHandWindnoiseSound.pitchMax = 0.7f;
        tmpLHandWindnoiseSound.pitchUpRateAdjustFloat = 2;

        tmpLHandWindnoiseSound.aSource.volume = 0;
        #endregion
        #region SoundObj右手に付与
        //WindnoiseSoundObj付与（左手）
        GameObject RHandWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRHandTrs);
        DB.evMoveDelObjList.Add(RHandWindnoiseSoundObj);
        RHandWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpRHandWindnoiseSound = RHandWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpRHandWindnoiseSound.aSource.maxDistance = 50;
        tmpRHandWindnoiseSound.pitchMax = 1f;
        tmpRHandWindnoiseSound.pitchUpRateAdjustFloat = 2;
        tmpRHandWindnoiseSound.pitchDownRateAdjustFloat = 100;

        tmpRHandWindnoiseSound.aSource.volume = 0;
        #endregion
        #region SoundObj頭に付与
        //WindnoiseSoundObj付与（左手）
        GameObject HeadWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , Bip001HeadTrs);
        DB.evMoveDelObjList.Add(HeadWindnoiseSoundObj);
        HeadWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpHeadWindnoiseSound = HeadWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpHeadWindnoiseSound.aSource.maxDistance = 50;
        tmpHeadWindnoiseSound.pitchMax = 1f;
        tmpHeadWindnoiseSound.pitchUpRateAdjustFloat = 3;

        tmpHeadWindnoiseSound.aSource.volume = 0;
        #endregion


        HukidashiNovelDistanceChange(0.5f);

        //開幕
        FadeBlack(0, 2);
        yield return new WaitForSeconds(2f);

        tmpRHandWindnoiseSound.aSource.volume = 0.7f;
        tmpRHandWindnoiseSound.aSource.volume = 0.7f;
        tmpHeadWindnoiseSound.aSource.volume = 2f;


        NovelSetVis("B2090010");//よ、よし・・

        while (isNovelSetVisIng) { yield return null; }


        #region 登りシステム設定
        //登りモード
        AN_isClimbMode = true;

        AN_isGrapPowerMode = false;

        //NGリスト
        AN_GrapNGObjList.Clear();
        AN_GrapNGObjList.Add(RoomTrs.Find("Kabe").gameObject);

        //■脚のぼりシステム コルーチン始動
        StartCoroutine(AsinoboriSystem());
        yield return null;

        //rigid監視スタート
        StartCoroutine(RigidReadSystem());

        #endregion
        //Inputロック
        AN_isInputLock = true;

        #region 操作説明 登り操作説明表示
        GameObject SousaSetumeiANWindowCanvas;
        if (DB.isEnglish)
        {
            SousaSetumeiANWindowCanvas = Instantiate(Resources.Load("EventSystem/Menu/Prefab/SousaSetumeiANEngWindowCanvas") as GameObject
                , VRCameraTrs, false);
        }
        else
        {
            SousaSetumeiANWindowCanvas = Instantiate(Resources.Load("EventSystem/Menu/Prefab/SousaSetumeiANWindowCanvas") as GameObject
                , VRCameraTrs, false);
        }

        FadeBlack(0.5f, 0.5f);

        yield return null;//キーUp待ち
        while (
            isKetteiDown == false
            && isMenuPauseDown == false
            )
        {
            yield return null;
        }

        FadeBlack(0, 0.5f);
        Destroy(SousaSetumeiANWindowCanvas);
        #endregion


        //Inputロック解除
        AN_isInputLock = false;

        //初掴みまで待機
        while (AN_isRGrap == false && AN_isLGrap == false) { yield return null; }

        #region プレイヤーに当たるイベントコリダー設置（コリダー側にスクリプト）
        GameObject Eiffel010_PareEiffel_EV010ColliderObj
            = Instantiate(Resources.Load("_PosObj/11EiffelTower/Eiffel010_PareEiffel_EV010ColliderObj") as GameObject
            , Eiffel_hiObj.transform, false);
        DB.evMoveDelObjList.Add(Eiffel010_PareEiffel_EV010ColliderObj);

        GameObject Eiffel020_PareEiffel_EV020ColliderObj
            = Instantiate(Resources.Load("_PosObj/11EiffelTower/Eiffel020_PareEiffel_EV020ColliderObj") as GameObject
            , Eiffel_hiObj.transform, false);
        DB.evMoveDelObjList.Add(Eiffel020_PareEiffel_EV020ColliderObj);

        #endregion
        //サブイベプレイリストシステムスタート
        StartCoroutine(SubEventPlaylistSystemIEnum());
        //このさきっぽがゴール　追加
        subEventIEnumList.Add(B2090KonoSakippo(Eiffel_hiObj));

        bool isTmpEiffelTimeCount = true;//エッフェルタイム計測用
        while (isB2090End == false)//ゴールイベント終了時に抜ける
        {
            if (isTmpEiffelTimeCount) { eiffelClimgTime += 1 * Time.deltaTime; }

            if (isB2090Noboreteru)
            {
                subEventIEnumList.Add(B2090Noboreteru());
                Destroy(Eiffel010_PareEiffel_EV010ColliderObj);
                isB2090Noboreteru = false;
            }
            if (isB2090Goal)
            {
                AN_isInputLock = true;
                isTmpEiffelTimeCount = false;
                subEventIEnumList.Insert(0, B2090Goal(Eiffel_hiObj));
                Destroy(Eiffel020_PareEiffel_EV020ColliderObj);
                isB2090Goal = false;

                SEPlay(UISEObj, "UI_cho");
            }
            yield return null;
        }

        //イベントムーブはゴールサブイベに
        yield break;

    }
    #region ┗■エッフェル登り中のサブイベント群

    float eiffelClimgTime;//スピードクリアしたらタイム表示用
    IEnumerator B2090KonoSakippo(GameObject Eiffel_hiObj)//この先っぽに触ったらゴールね
    {
        #region IKエッフェル見 目
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, Eiffel_hiObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        #endregion

        #region IKエッフェルトップ指差し
        ChieriMotion("lh_手乗せつつきの指", 1f, 6);
        GameObject IKLHand_JougiDe06_EiffelTopPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/IKLHand_JougiDe06_EiffelTopPosObj") as GameObject;
        IKLHandTargetTrs.localPosition = IKLHand_JougiDe06_EiffelTopPosObj.transform.localPosition;
        IKLHandTargetTrs.localEulerAngles = IKLHand_JougiDe06_EiffelTopPosObj.transform.localEulerAngles;
        //1に
        DOTweenToIKEfPos(IKLHandEf, 1f, 2f);
        DOTweenToIKEfRot(IKLHandEf, 1f, 2f);
        #endregion

        yield return new WaitForSeconds(1);
        Hukidashi("B2090010");//この先っぽ
        yield return new WaitForSeconds(3);

        #region IKエッフェルトップ指差しやめ
        ChieriMotion("_noData", 1f, 6);
        //0に
        DOTweenToIKEfPos(IKLHandEf, 0f, 2f);
        DOTweenToIKEfRot(IKLHandEf, 0f, 2f);
        #endregion

        NovelSetVis("B2090020", true);//こっからじゃ見えないけどな！
        #region IKプレイヤ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        #endregion
        yield return new WaitForSeconds(1);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し

        //サブイベントPlayListシステム用に終了を通知
        isRunSubEventPlayListSystemEvent = false;
        yield break;
    }

    public bool isB2090Noboreteru = false;
    public bool isB2090SpeedClear = true;
    IEnumerator B2090Noboreteru()//登れてるすごい（姿勢変え）
    {
        Hukidashi("B2090020");//ちゃんと登れてるねー
        ChieriMotion("ん？", 0.1f, 2);

        ChieriMotion("座りからリラックス", 0.5f, 0);//デバッグ用アニメ直接再生
        //IK頭Clamp変更
        DOTween.To(() => LAIKHead.solver.clampWeightHead, (x) => LAIKHead.solver.clampWeightHead = x
        , 0.73f, 3f);

        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "気付き→姿勢正し") { yield return null; }
        while (girlAnimNomTime <= 0.4f) { yield return null; }

        while (girlAnimNomTime <= 0.8f) { yield return null; }
        isGirlAnimReadSystem = false;

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1.5f, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し

        NovelSetVis("B2090030", true);//おわああ！

        #region IK両手とも位置少しずらし（エッフェルや顔に埋まらないように）
        GameObject IKRHand010_Eiffel_RelaxPosObj
            = Resources.Load("_PosObj/11EiffelTower/IKRHand010_Eiffel_RelaxPosObj") as GameObject;
        GameObject IKLHand010_Eiffel_RelaxPosObj
            = Resources.Load("_PosObj/11EiffelTower/IKLHand010_Eiffel_RelaxPosObj") as GameObject;
        IKRHandTargetTrs.localPosition = IKRHand010_Eiffel_RelaxPosObj.transform.localPosition;
        IKRHandTargetTrs.localEulerAngles = IKRHand010_Eiffel_RelaxPosObj.transform.localEulerAngles;
        IKLHandTargetTrs.localPosition = IKLHand010_Eiffel_RelaxPosObj.transform.localPosition;
        IKLHandTargetTrs.localEulerAngles = IKLHand010_Eiffel_RelaxPosObj.transform.localEulerAngles;

        DOTweenToIKEfPos(IKRHandEf, 1, 2);
        DOTweenToIKEfRot(IKRHandEf, 1, 2);
        DOTweenToIKEfPos(IKLHandEf, 1, 2);
        DOTweenToIKEfRot(IKLHandEf, 1, 2);
        #endregion

        yield return new WaitForSeconds(3);
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1.5f, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        Hukidashi("B2090025");//がんばってー


        //ここでゴールイベントが予約されてなかったらスピードクリアならず
        if (subEventIEnumList.Count == 1)
        { isB2090SpeedClear = false; }

        //サブイベントPlayListシステム用に終了を通知
        isRunSubEventPlayListSystemEvent = false;
        yield break;
    }

    public bool isB2090Goal = false;
    public bool isB2090End = false;
    IEnumerator B2090Goal(GameObject Eiffel_hiObj)//ゴール
    {
        ANGrapHandUIObj.SetActive(false);

        //isKinematicつけることでぶつかりと移動を防ぐ
        AN_PlayerRigidbody.isKinematic = true;

        if (isB2090SpeedClear)
        {
            #region スピードクリアしたら
            NovelSetVis("B2090045");//どうだこの速さ！
            ChieriMotion("リラックスから座り", 0.3f, 0);
            #region 手IK戻し
            DOTweenToIKEfPos(IKRHandEf, 0, 1);
            DOTweenToIKEfRot(IKRHandEf, 0, 1);
            DOTweenToIKEfPos(IKLHandEf, 0, 1);
            DOTweenToIKEfRot(IKLHandEf, 0, 1);
            #endregion
            while (novelCurrentPageInt < 1) { yield return null; }

            DelAll_Hukidashi();
            Hukidashi("B2090035");//えーすごい速い！
            ChieriMotion("f_え？(軽驚)", 0.1f, 2);
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            //ChieriMotion("キリッ", 0.1f, 2);
            Hukidashi("B2090037");//○○秒しかかかってないよ？
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            NovelSetVis("B2090047");//ずいぶん具体的な数字が出てきたな
            while (isNovelSetVisIng) { yield return null; }

            #endregion
        }
        else
        {
            NovelSetVis("B2090040");//登ったぞー！
            while (isNovelSetVisIng) { yield return null; }

            ChieriMotion("リラックスから座り", 0f, 0);//デバッグ用アニメ直接再生
            #region 手IK戻し
            DOTweenToIKEfPos(IKRHandEf, 0, 1);
            DOTweenToIKEfRot(IKRHandEf, 0, 1);
            DOTweenToIKEfPos(IKLHandEf, 0, 1);
            DOTweenToIKEfRot(IKLHandEf, 0, 1);
            #endregion
            StartCoroutine(GirlAnimReadSystem());
            while (nowGirlAnimClipName != "気付き→姿勢正し") { yield return null; }
            while (girlAnimNomTime <= 0.9f) { yield return null; }
            isGirlAnimReadSystem = false;

            DelAll_Hukidashi();
            Hukidashi("B2090030");//すごいすごい
            ChieriMotion("笑顔01口眉", 0.1f, 2);
            ChieriMotionDelay(1.5f, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        }
        NovelSetVis("B2090050");//大したことないな！
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("B2090040");//近い？
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1.5f, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        ChieriMotion("h_右少し傾け", 1f, 7);//顔傾け用準備
        TereHohoAlphaChange(0.85f);
        TereHoho(true, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("B2090060");//そりゃ、まあ・・
        while (isNovelSetVisIng) { yield return null; }


        //スキンメッシュコリダーON
        StartCoroutine(ReloadSkinMeshColliderSystemIEnum());


        Hukidashi("B2090050");//ハイタッチ～
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1.5f, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        ChieriMotion("h_noData", 0.5f, 7);
        TereHoho(false, 20);

        //肩ツイストオフ
        isKataTwistAuto = false;

        #region IKハイタッチ位置へ
        ChieriMotionDelay(1.5f, "パー", 1f, 5);
        GameObject IKRHand020_Eiffel_HiTouchPosObj
            = Resources.Load("_PosObj/11EiffelTower/IKRHand020_Eiffel_HiTouchPosObj") as GameObject;
        IKRHandTargetTrs.localPosition = IKRHand020_Eiffel_HiTouchPosObj.transform.localPosition;
        IKRHandTargetTrs.localEulerAngles = IKRHand020_Eiffel_HiTouchPosObj.transform.localEulerAngles;
        //1に
        DOTweenToIKEfPos(IKRHandEf, 1f, 4f);
        DOTweenToIKEfRot(IKRHandEf, 1f, 4f);
        #endregion
        yield return new WaitForSeconds(2);

        NovelSetVis("B2090070");//んな無茶な・・・どおわあああ！！
        yield return KeyOrWait(1);
        while (isNovelSetVisIng) { yield return null; }

        ANGrapHandUIObj.SetActive(true);

        //yield return KeyOrWait(1);

        #region AN手はずし
        isLInput = false;
        AsinoboriHandLeave(AN_Hand_L_RootTrs, AN_playerLHandJoint);

        #endregion

        AN_GrapNGObjList.Add(Eiffel_hiObj);

        #region 手タッチ待ち（今は音出すだけ）
        while (true)
        {
            if (isKetteiDown
                || Input.GetButtonDown(DB.inputDict["左手"])
                || Input.GetButtonDown(DB.inputDict["右手"]))
            {
                //智恵理コリダーなら
                if (AN_nowLSerchObj == FixedMoveChieriColliderFollderObj)
                {
                    HandGrapSEPlay(AN_Hand_L_RootTrs.gameObject, AN_nowLSerchObj);
                    SEPlay("UI_cho", AN_Hand_L_RootTrs.gameObject);
                    goto 抜け;
                }
                else if (AN_nowRSerchObj == FixedMoveChieriColliderFollderObj)
                {
                    HandGrapSEPlay(AN_Hand_R_RootTrs.gameObject, AN_nowRSerchObj);
                    SEPlay("UI_cho", AN_Hand_R_RootTrs.gameObject);
                    goto 抜け;
                }

            }
            yield return null;
        }
        抜け:
        #endregion

        ANGrapHandUIObj.SetActive(false);
        CameraAnchorTrs.DOShakePosition(0.5f, 0.1f);

        TereHohoAlphaChange(0.85f);
        TereHoho(true, 2);

        yield return new WaitForSeconds(1);

        Hukidashi("B2090070");//えへへ～・・
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1.5f, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        #region IK ハイタッチ後少し後退
        GameObject IKRHand040_Eiffel_HiTouchAfterPosObj
            = Resources.Load("_PosObj/11EiffelTower/IKRHand040_Eiffel_HiTouchAfterPosObj") as GameObject;
        IKRHandTargetTrs.DOLocalMove(IKRHand040_Eiffel_HiTouchAfterPosObj.transform.localPosition, 2);
        IKRHandTargetTrs.DOLocalRotate(IKRHand040_Eiffel_HiTouchAfterPosObj.transform.localEulerAngles, 2);
        #endregion

        NovelSetVis("B2090090");//分厚っ！
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2090080");//乗って乗って！
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1f, "f_あ！ほら！口あき", 0.05f, 2);//時間差表情戻し
        ChieriMotionDelay(2f, "f_あ！ほら！口閉じ", 0.05f, 2);//時間差表情戻し
        TereHohoAlphaChange(1f);
        TereHoho(true, 2);
        #region IK 乗り位置に
        GameObject IKRHand050_Eiffel_NosePosObj
            = Resources.Load("_PosObj/11EiffelTower/IKRHand050_Eiffel_NosePosObj") as GameObject;
        IKRHandTargetTrs.DOLocalMove(IKRHand050_Eiffel_NosePosObj.transform.localPosition, 2);
        IKRHandTargetTrs.DOLocalRotate(IKRHand050_Eiffel_NosePosObj.transform.localEulerAngles, 2);
        #endregion
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2090100");//乗る？！
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("B2090090");//お願い！
        ChieriMotion("あはは・・・", 0.1f, 2);
        ChieriMotionDelay(1f, "f_あはは・・・目0開き", 0.05f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("B2090110");//マジか・・！　う、動くなよ？
        while (isNovelSetVisIng) { yield return null; }

        #region 両手離さないようEASYモードに
        bool isBeforeEASYModeTrue = false;//後で戻す用
        if (AN_isInputSwitchEasyMode == false)
        {
            AN_isInputSwitchEasyMode = true;
            AN_isInputSwitchHardMode = false;
            isBeforeEASYModeTrue = true;
        }

        #endregion

        AN_isInputLock = false;
        ANGrapHandUIObj.SetActive(true);

        #region 両手とも智恵理コリダー掴むまで待機
        while (true)
        {
            if (AN_isRLGrap
                && (AN_nowLSerchObj == AN_nowRSerchObj == FixedMoveChieriColliderFollderObj))
            { goto 両手とも智恵理コリダー掴んだ; }
            yield return null;
        }
        両手とも智恵理コリダー掴んだ:
        #endregion
        AN_isInputLock = true;

        NovelSetVis("B2090120");//う・・おおおお！
        while (isNovelSetVisIng) { yield return null; }

        #region プレイヤー 手の上に乗りあがりTween
        GameObject Player020_Eiffel_TeNoriagariPosObj
            = Resources.Load("_PosObj/11EiffelTower/Player020_Eiffel_TeNoriagariPosObj") as GameObject;
        CameraObjectsTrs.DOLocalMoveY(Player020_Eiffel_TeNoriagariPosObj.transform.localPosition.y, 1.5f)
            .SetEase(Ease.InOutBack);
        CameraObjectsTrs.DOLocalMoveX(Player020_Eiffel_TeNoriagariPosObj.transform.localPosition.x, 1.5f)
            .SetEase(Ease.InBack);
        CameraObjectsTrs.DOLocalMoveZ(Player020_Eiffel_TeNoriagariPosObj.transform.localPosition.z, 1.5f)
            .SetEase(Ease.InBack);
        #endregion
        #region 同時にアンカー座り位置へ　と　カメラリセット設定（OnCompleteでANシステム止めとペアレントがある）
        //同時にカメラリセット設定(ペアレントされるので、そのローカルを入れる)
        DB.cameraObjectsResetLocalEul = Player020_Eiffel_TeNoriagariPosObj.transform.localEulerAngles;
        DB.cameraAnchorResetLocalPos = DB.cameraSitAnchorDefLocalPos;

        //アンカー座り位置へ
        CameraAnchorTrs.DOLocalMoveY(DB.cameraSitAnchorDefLocalPos.y, 1.5f)
            .OnComplete(() =>
            {
                isANSystem = false;
                CameraObjectsTrs.SetParent(GirlRHandTrs);
                //同時にカメラリセット設定(ペアレントされるので、そのローカルを入れる)
                DB.cameraObjectsResetLocalEul = CameraObjectsTrs.localEulerAngles;
                DB.cameraAnchorResetLocalPos = DB.cameraSitAnchorDefLocalPos;//座りに

            });

        #endregion


        yield return new WaitForSeconds(3f);
        //消えちゃうの阻止(内部的には消えてないのに消えてしまう現象。こうしてなんとか再表示された)
        Player_DummyTrs.Find("mesh").Find("Body").GetComponent<SkinnedMeshRenderer>().updateWhenOffscreen = false;
        yield return null;
        Player_DummyTrs.Find("mesh").Find("Body").GetComponent<SkinnedMeshRenderer>().updateWhenOffscreen = true;

        isReloadSkinMeshColliderSystem = false;

        ChieriMotion("f_え？(軽驚)", 3f, 2);
        NovelSetVis("B2090130");//ぜぇぜぇ
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);


        //BGMフェードダウン
        BGMPlay(true, null, 0.5f, 10, 10);
        //環境音フェードイン
        KankyouBGMVolumer(0.5f, 10);

        #region IK 手近づけ
        GameObject IKRHand060_Eiffel_HontoniPosObj
            = Resources.Load("_PosObj/11EiffelTower/IKRHand060_Eiffel_HontoniPosObj") as GameObject;
        IKRHandTargetTrs.DOLocalMove(IKRHand060_Eiffel_HontoniPosObj.transform.localPosition, 4);
        IKRHandTargetTrs.DOLocalRotate(IKRHand060_Eiffel_HontoniPosObj.transform.localEulerAngles, 4);

        #endregion
        yield return new WaitForSeconds(0.5f);


        NovelSetVis("B2090140");//いきなり動かすなって！
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("・・・");
        ChieriMotion("f_ほんとに手の上だ", 6f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        NovelSetVis("B2090150");//どした？
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2090100");//ほんとに手の上だ・・・
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2090160");//そうだなぁ。　もしかして重い？
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1f);
        Hukidashi("B2090110");//え？　あ、大丈夫！　重くないよ

        #region 我に返る目パチ
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        yield return new WaitForSeconds(0.3f);
        ChieriMotion("f_え？(軽驚)", 0.05f, 2);
        yield return new WaitForSeconds(0.05f);

        yield return new WaitForSeconds(0.5f);

        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        yield return new WaitForSeconds(0.3f);
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        #endregion

        AseTare();
        yield return new WaitForSeconds(0.5f);
        ChieriMotion("あはは・・・", 0.1f, 2);
        ChieriMotionDelay(1f, "f_え？(軽驚)", 0.05f, 2);//時間差表情戻し
        yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2090170");//そっかー　どこ行っちゃったんだ俺の質量・・
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        //フェードダウン
        BGMPlay(true, null, 0f, 10, 10);
        //環境音フェードアップ
        KankyouBGMVolumer(1f, 10);

        Hukidashi("B2090120");//うん、吹いたら飛んじゃいそうなくらい
        ChieriMotion("なんか変だよね～", 0.6f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("B2090180");//怖いこというな！
        while (isNovelSetVisIng) { yield return null; }

        //プツ音出るのでサウンドオブジェ手動消し
        for (int i = 0; i < DB.evMoveDelObjList.Count; i++)
        {
            if (DB.evMoveDelObjList[i] != null)
            {
                if (DB.evMoveDelObjList[i].tag == "SoundObj")
                {
                    GameObject tmpObj = DB.evMoveDelObjList[i];
                    //1秒フェードアウト後削除
                    tmpObj.GetComponent<AudioSource>().DOFade(0, 1)
                        .OnComplete(() => { DestroyImmediate(tmpObj, true); });
                }
            }
        }

        FadeBlack(1, 2);
        yield return new WaitForSeconds(2);



        #region //落ちるバージョン（ボツ？）
        //CameraAnchorTrs.DOShakePosition(0.5f, 0.1f);
        //AN_isInputLock = true;

        //NovelSetVis("B2090080");//や、ばっ・・しまっ・・・！
        //yield return new WaitForSeconds(0.5f);
        //ChieriMotion("f_驚愕", 0.1f, 0);
        //Hukidashi("B2090060");//危ないだめ！

        //yield return new WaitForSeconds(0.8f);

        //#region 手受け止め位置に
        //GameObject IKRHand030_Eiffel_UketomePosObj
        //    = Resources.Load("_PosObj/11EiffelTower/IKRHand030_Eiffel_UketomePosObj") as GameObject;
        //IKRHandTargetTrs.DOLocalMove(IKRHand030_Eiffel_UketomePosObj.transform.localPosition, 1.5f);
        //IKRHandTargetTrs.DOLocalRotate(IKRHand030_Eiffel_UketomePosObj.transform.localEulerAngles, 1.5f);
        //#endregion

        //yield return new WaitForSeconds(0.7f);

        //#region エッフェル飛び
        //GameObject EiffelHi_TaorePosObj
        //    = Resources.Load("_PosObj/11EiffelTower/EiffelHi_TaorePosObj") as GameObject;
        //Eiffel_hiObj.transform.DOLocalMove(EiffelHi_TaorePosObj.transform.localPosition, 1.5f);
        //Eiffel_hiObj.transform.DOLocalRotate(EiffelHi_TaorePosObj.transform.localEulerAngles, 0.7f);
        //#endregion

        //#region 強制両手とも離し
        //isLInput = false;
        //AsinoboriHandLeave(AN_Hand_L_RootTrs, AN_playerLHandJoint);
        //isNovelFadeTween = isNovelSetVisIng = false;

        //isRInput = false;
        //AsinoboriHandLeave(AN_Hand_R_RootTrs, AN_playerRHandJoint);
        //isNovelFadeTween = isNovelSetVisIng = false;
        //#endregion

        ////0.4529949からプレイヤー着地高さ0.3342707
        //while (CameraObjectsTrs.localPosition.y >= 0.35)
        //{
        //    if (Input.GetKeyDown(KeyCode.V)) { goto 落下; }
        //    yield return null;
        //}
        //落下:
        //FadeWhite(1, 0);

        ////PlayerHPAddSub(-800);
        //isANSystem = false;
        //AN_isInputLock = false;

        #endregion


        //ゴールイベント終了でメインイベント終了
        isB2090End = true;

        //サブイベントPlayListシステム用に終了を通知
        isRunSubEventPlayListSystemEvent = false;

        //肩ツイスト戻し
        isKataTwistAuto = true;

        #region 終了処理

        //マスク戻し
        ChieriMotion("_noData", 0f, 5);

        //IK戻し
        DOTweenToIKEfPos(IKRHandEf, 0, 0f);
        DOTweenToIKEfRot(IKRHandEf, 0, 0f);

        //ペアレント戻し
        CameraObjectsTrs.SetParent(GameObjectsTrs);

        #endregion


        EventMove("手の平の上");
        yield break;
    }
    #endregion
    IEnumerator B2100()//手の平の上
    {
        if (debugEventMoveFlag == true)
        {
            nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;
            FadeBlack(1, 0);
        }
        EventReset();
        yield return null;


        girlAnim.speed = 0.5f;

        #region ■暗幕中設定

        StartCoroutine(ReloadSkinMeshColliderSystemIEnum());

        #region 小物位置（文具入れごと）(エッフェル)(バジラ)
        //小物ON
        GrasstableTrs.gameObject.SetActive(true);
        DrillTrs.gameObject.SetActive(true);
        Drill_chieriTrs.gameObject.SetActive(false);
        KeshigomuObj.SetActive(true);

        //スピーカー
        GameObject Speaker_JougiDe00_StartPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/Speaker_JougiDe00_StartPosObj") as GameObject;
        SpeakerTrs.localPosition = Speaker_JougiDe00_StartPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = Speaker_JougiDe00_StartPosObj.transform.localEulerAngles;

        //シャーペン
        GameObject Sharpen_JougiDe00_PosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/Sharpen_JougiDe00_PosObj") as GameObject;
        SharpenObj.transform.localPosition = Sharpen_JougiDe00_PosObj.transform.localPosition;
        SharpenObj.transform.localEulerAngles = Sharpen_JougiDe00_PosObj.transform.localEulerAngles;

        //文具入れ
        GameObject Bungu_JougiDe00_StartPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/Bungu_JougiDe00_StartPosObj") as GameObject;
        BunguTrs.localPosition = Bungu_JougiDe00_StartPosObj.transform.localPosition;
        BunguTrs.localEulerAngles = Bungu_JougiDe00_StartPosObj.transform.localEulerAngles;

        //エッフェル生成・配置
        GameObject Eiffel_hiObj;
        if (GameObject.Find("Eiffel_hiObj") == null)
        {
            Eiffel_hiObj
                = Instantiate(Resources.Load("Main/KomonoObj/Eiffel/Eiffel_hiObj") as GameObject
                , RoomTrs, false);
            Eiffel_hiObj.name = nameof(Eiffel_hiObj);
        }
        else
        {
            Eiffel_hiObj = GameObject.Find("Eiffel_hiObj");
        }

        GameObject Eiffel_JougiDe01_OkarePosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/Eiffel_JougiDe01_OkarePosObj") as GameObject;
        Eiffel_hiObj.transform.localPosition = Eiffel_JougiDe01_OkarePosObj.transform.localPosition;
        Eiffel_hiObj.transform.localEulerAngles = Eiffel_JougiDe01_OkarePosObj.transform.localEulerAngles;

        #region ■バジラ生成して テーブルに
        if (GameObject.Find("Kaiju") == null)
        {
            //バジラ生成
            KB_KaijuObj = Instantiate(Resources.Load("EventSystem/KaijuBattle/Prefab/Kaiju") as GameObject);
            KB_KaijuObj.transform.SetParent(GameObjectsTrs);
        }
        //すでに配置してある場合
        else { KB_KaijuObj = GameObject.Find("Kaiju"); }

        //名前と削除リスト入れ
        KB_KaijuObj.name = "Kaiju";
        DB.evMoveDelObjList.Add(KB_KaijuObj);

        //置き位置
        GameObject Kaiju_JougiDe00_StartPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/Kaiju_JougiDe00_StartPosObj") as GameObject;
        KB_KaijuObj.transform.localPosition = Kaiju_JougiDe00_StartPosObj.transform.localPosition;
        KB_KaijuObj.transform.localEulerAngles = Kaiju_JougiDe00_StartPosObj.transform.localEulerAngles;
        KB_KaijuObj.transform.localScale = Vector3.one;

        #endregion

        #endregion

        #region 智恵理ポーズと位置
        DB.isChieriPosLock = true;

        ChieriMotion("手乗せ初期座り状態ループ", 0f, 0);
        ChieriMotion("f_ほんとに手の上だ", 0f, 2);
        ChieriMotion("h_noData", 0f, 7);//顔傾け用準備

        TereHohoAlphaChange(0.85f);
        TereHoho(true, 0);

        #region IKプレイヤ見（頭少し下）(頭Clamp注意)
        //ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

        LAIKHead.solver.clampWeightHead = 0.78f;
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.08f, 0), 0f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 0f);
        #endregion

        #endregion

        #region プレイヤー 手にペアレント　位置とポーズとカメラリセット
        CameraObjectsTrs.SetParent(GirlRHandTrs);
        yield return null;

        GameObject Player010_Tenohira_PareRHand_StartPosObj
            = Resources.Load("_PosObj/12TenohiranoUe/Player010_Tenohira_PareRHand_StartPosObj") as GameObject;

        CameraObjectsTrs.localPosition = Player010_Tenohira_PareRHand_StartPosObj.transform.localPosition;

        //カメラリセット（+回転と立ち設定）
        //カメラリセット値変更してリセット
        CameraReset(Player010_Tenohira_PareRHand_StartPosObj.transform.localEulerAngles
            , DB.cameraSitAnchorDefLocalPos);//Anchorを座りに

        #endregion

        #region 持ち上げ音出すためにプレイヤー頭にWindNoiseSoundObj設置

        //WindnoiseSoundObj付与
        GameObject PlayerHeadWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundPlayerObj") as GameObject
            , CameraAnchorTrs);//（頭）
        DB.evMoveDelObjList.Add(PlayerHeadWindnoiseSoundObj);
        PlayerHeadWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpPlayerHeadWindnoiseSound = PlayerHeadWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpPlayerHeadWindnoiseSound.aSource.maxDistance = 50;
        tmpPlayerHeadWindnoiseSound.pitchMax = 1f;
        tmpPlayerHeadWindnoiseSound.pitchUpRateAdjustFloat = 6;
        tmpPlayerHeadWindnoiseSound.pitchDownRateAdjustFloat = 0.00005f;

        tmpPlayerHeadWindnoiseSound.aSource.volume = 0;
        #endregion


        #region 宿題 念のため
        //宿題システムスタート
        StartCoroutine(HomeworkSystem());
        //宿題7ページ目へ
        HwPageForceMove(7);

        //宿題ロック
        isHwVisLock = true;
        #endregion


        #region SoundObj左手に付与
        //WindnoiseSoundObj付与（左手）
        GameObject LHandWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlLHandTrs);
        DB.evMoveDelObjList.Add(LHandWindnoiseSoundObj);
        LHandWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpLHandWindnoiseSound = LHandWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpLHandWindnoiseSound.aSource.maxDistance = 50;
        tmpLHandWindnoiseSound.aSource.volume = 1f;
        tmpLHandWindnoiseSound.pitchMax = 0.7f;
        tmpLHandWindnoiseSound.pitchUpRateAdjustFloat = 40;
        tmpLHandWindnoiseSound.pitchDownRateAdjustFloat = 100;
        #endregion
        #region //SoundObj右手に付与
        //WindnoiseSoundObj付与（左手）
        //GameObject RHandWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
        //    , GirlRHandTrs);
        //DB.evDelObjList.Add(RHandWindnoiseSoundObj);
        //RHandWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        ////設定
        //WindnoiseSound tmpRHandWindnoiseSound = RHandWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        //tmpRHandWindnoiseSound.aSource.maxDistance = 50;
        //tmpRHandWindnoiseSound.aSource.volume = 0.7f;
        //tmpRHandWindnoiseSound.pitchMax = 1f;
        //tmpRHandWindnoiseSound.pitchUpRateAdjustFloat = 4;
        //tmpRHandWindnoiseSound.pitchDownRateAdjustFloat = 100;
        #endregion
        #region SoundObj頭に付与
        //WindnoiseSoundObj付与（左手）
        GameObject HeadWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , Bip001HeadTrs);
        DB.evMoveDelObjList.Add(HeadWindnoiseSoundObj);
        HeadWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpHeadWindnoiseSound = HeadWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpHeadWindnoiseSound.aSource.maxDistance = 50;
        tmpHeadWindnoiseSound.aSource.volume = 2f;
        tmpHeadWindnoiseSound.pitchMax = 1f;
        tmpHeadWindnoiseSound.pitchUpRateAdjustFloat = 3;
        #endregion

        //ミュート
        tmpLHandWindnoiseSound.aSource.mute =
        //tmpRHandWindnoiseSound.aSource.mute =
        tmpHeadWindnoiseSound.aSource.mute = true;
        #endregion

        yield return new WaitForSeconds(1);

        //FadeBlack(0, 0);
        FadeBlack(0, 2);
        yield return new WaitForSeconds(3);
        //goto デバッグ移動;

        //ミュート切り
        tmpLHandWindnoiseSound.aSource.mute =
        //tmpRHandWindnoiseSound.aSource.mute =
        tmpHeadWindnoiseSound.aSource.mute = false;

        #region 立ち上がり準備まで
        yield return new WaitForSeconds(1);
        NovelSetVis("B2100010");//手って熱いな
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        Hukidashi("・・・");
        yield return new WaitForSeconds(1); yield return KeyOrWait(1);

        NovelSetVis("B2100020");//ええーと智恵理？　疲れてる？
        while (novelCurrentPageInt < 1) { yield return null; }
        yield return new WaitForSeconds(0.5f);
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        ChieriMotion("f_我に帰る", 0.3f / girlAnim.speed, 2);



        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        Hukidashi("B2100010");//あ、ううん、大丈夫
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        ChieriMotion("f_眉高い笑顔", 0.1f / girlAnim.speed, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(1);
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2100020");//もう少しこうしていていい？
        ChieriMotion("f_ほんの少しジト目笑顔", 0.3f / girlAnim.speed, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(1);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2100030");//構わないけど
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2100030");//やってみたかったんだ
        ChieriMotion("笑顔01口眉", 0.05f / girlAnim.speed, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.05f / girlAnim.speed, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(1);

        Hukidashi("B2100040");//メルヘンな感じで
        ChieriMotion("h_右少し傾け", 0.3f / girlAnim.speed, 7);//顔傾け用準備
        ChieriMotion("笑顔01口眉", 0.05f / girlAnim.speed, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f / girlAnim.speed, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(1);
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2100050");//お人形でやらなかった？
        yield return new WaitForSeconds(1); yield return KeyOrWait(1);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2100040");//バジラとかだったしなあ
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2100060");//戦わせたりとかだよね
        AseTare();
        ChieriMotion("h_noData", 0.5f / girlAnim.speed, 7);//顔傾け用準備
        ChieriMotion("f_あはは・・2", 0.1f / girlAnim.speed, 2);
        ChieriMotionDelay(1, "f_あはは・・2目開き", 0.1f / girlAnim.speed, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(1);

        NovelSetVis("B2100050");//うんうん
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);


        Hukidashi("B2100070");//自分が一番大きいって気づいたり
        ChieriMotion("笑顔01口眉_目閉じない", 0.1f / girlAnim.speed, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(1);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2100060");//うんう・・うーん？
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1f);

        Hukidashi("B2100080");//あれ？　そうでもない・・？
        ChieriMotion("f_あ！ほら！口普通キョトン眉下がり", 0.2f / girlAnim.speed, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(1);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2100070");//まずい　話題を変える
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("B2100090");//え、ほんと？　迫力ある？
        ChieriMotion("笑顔01口眉_目閉じない", 0.1f / girlAnim.speed, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(1);

        NovelSetVis("B2100080");//スリル満点
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("B2100100");//じゃあもっと高くしてあげようかな
        ChieriMotion("笑顔01口眉", 0.05f / girlAnim.speed, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f / girlAnim.speed, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(1);

        #endregion

        デバッグ移動:

        ChieriMotion("手乗せ座り→手乗せしゃがみ", 0f, 0);

        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2100090");//へ？　スリルオーバーキル
        while (isNovelSetVisIng) { yield return null; }



        //プレイヤー頭風ノイズフェードイン
        //DOTWeenTO
        DOTween.To(() => PlayerHeadWindnoiseSoundObj.GetComponent<AudioSource>().volume, (x) => PlayerHeadWindnoiseSoundObj.GetComponent<AudioSource>().volume = x
        , 0.2f
        , 1f);

        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "手乗せしゃがみループ") { yield return null; }
        //while (girlAnimNomTime <= 1f) { yield return null; }

        Hukidashi("B2100110");//立ち上がるよー
        yield return new WaitForSeconds(1); yield return KeyOrWait(1);

        FixedAction(() => { CameraObjectsTrs.SetParent(GameObjectsTrs); });
        while (isFixedAction) { yield return null; }


        #region 脚登りシステム起動と設定(智恵理手に首根っこで接続)
        StartCoroutine(AsinoboriSystem());
        AN_isInputLock = false;
        AN_PlayerHuseSphereCollider.enabled = true;
        AN_PlayerNormalCapsuleCollider.enabled = false;
        AN_isGrapPowerMode = false;
        AN_isClimbMode = false;

        AN_isInputSwitchEasyMode = false;
        AN_isInputSwitchHardMode = true;

        //首根っこGrapのリミットは少し下
        #endregion

        //プレイヤー頭風ノイズフェードアップ
        //DOTWeenTO
        DOTween.To(() => PlayerHeadWindnoiseSoundObj.GetComponent<AudioSource>().volume, (x) => PlayerHeadWindnoiseSoundObj.GetComponent<AudioSource>().volume = x
        , 0.4f
        , 0.7f);

        girlAnim.CrossFade("手乗せしゃがみ→手乗せ立ち上がり", 0.5f, 0);

        yield return new WaitForSeconds(1f);

        //首根っこ智恵理手にGrap Limit3.5（前は4だった）
        AN_KubinekkoGrap(GirlRHandTrs, Vector3.zero, 3.5f);

        NovelSetVis("B2100100", true);//しがみつく
        while (isNovelSetVisIng) { yield return null; }

        while (nowGirlAnimClipName != "手乗せ立ちループ") { yield return null; }
        isGirlAnimReadSystem = false;

        AN_isInputLock = true;
        ANGrapHandUIObj.SetActive(false);

        NovelSetVis("B2100110");//はっはっはっ・・・！　あぶなっい・・・！
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("B2100120");//小人さん
        ChieriMotion("笑顔01口眉", 0.05f / girlAnim.speed, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f / girlAnim.speed, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(1);

        NovelSetVis("B2100120");//メルヘンってなんだ・・
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("B2100130");//もう少し真ん中に
        ChieriMotion("ん？", 0.1f / girlAnim.speed, 2);

        //プレイヤー頭風ノイズフェードダウン
        //DOTWeenTO
        DOTween.To(() => PlayerHeadWindnoiseSoundObj.GetComponent<AudioSource>().volume, (x) => PlayerHeadWindnoiseSoundObj.GetComponent<AudioSource>().volume = x
        , 0.2f
        , 0.7f);

        yield return new WaitForSeconds(1);
        yield return KeyOrWait(3);

        #region 指で押して手の中央へ
        string
            tmpBaseAnimStateName = "手乗せ立ちループ";
        StartCoroutine(GirlAnimReadSystem(1));

        //マスクのため、レイヤーのアニメを1フレでベースと同じモーション状態にする（ParameterでNormlizedTimeが指定できる（ただし指定し続けないと静止））
        ChieriMotion(tmpBaseAnimStateName, 0f, 1);//現在のベースアニメと同じアニメ指定
        girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeに
        yield return null;//↑適用に1フレ必要

        ChieriMotion("ub_手乗せつつき短縮", 1f, 1);

        yield return new WaitForSeconds(1);
        NovelSetVis("B2100130");//わわかってる　どほは！

        while (nowGirlAnimOtherLayerClipNameDict[1] != "ub_手乗せつつき短縮") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[1] <= 1f) { yield return null; }


        #region SekkinPivotで押しやり表現
        //IKターゲットを現在Pos位置に置き
        GirlPosToIKTargetPosRot(); while (isGirlPosToIKTargetPosRotLoading) { yield return null; }

        while (isFixedAction) { yield return null; }
        yield return null;

        //IKON
        DOTweenToIKEfPos(IKLHandEf, 1, 0);
        DOTweenToIKEfRot(IKLHandEf, 1, 0);


        //指先ピボットオブジェ生成（IKONのゆびさしポーズ時じゃなきゃだめ）
        GameObject PivotObj
            = Instantiate(Resources.Load("EventSystem/Sekkin/SekkinPivotObj") as GameObject);
        DB.evMoveDelObjList.Add(PivotObj);

        FixedAction(() =>
       { PivotObj.transform.SetParent(GirlLhitosashi02Trs, false); });

        while (isFixedAction) { yield return null; }

        //ピボットでIKRHand逆同期スタート
        Sekkin(PivotObj, IKLHandTargetTrs.gameObject);

        //指先ピボットをcameraObjectsへ
        FollowDOMove(PivotObj.transform, VRCameraTrs, 0.8f, Ease.Linear);

        yield return new WaitForSeconds(0.8f);

        DelAll_Hukidashi();
        Hukidashi("B2100140");//もうちょっと、こっち



        //■接着したとみなして 登りシステム止め、カメラをペアレントし指定位置に移動
        isANSystem = false;
        yield return null;

        //白フラッシュ
        FadeWhite(1, 0.05f); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);

        SEPlay("足音2_footsteps_shoe_grass_walk_04");
        SEPlay("nuno_washing-machine-laundry-put1");

        FixedAction(() =>
        {
            CameraObjectsTrs.SetParent(GirlRHandTrs);
        });
        while (isFixedAction) { yield return null; }
        yield return null;

        GameObject Player020_Tenohira_PareRHand_TutukaregoPosObj
            = Resources.Load("_PosObj/12TenohiranoUe/Player020_Tenohira_PareRHand_TutukaregoPosObj") as GameObject;

        CameraObjectsTrs.DOLocalMove(Player020_Tenohira_PareRHand_TutukaregoPosObj.transform.localPosition
            , 1)
            .SetEase(Ease.InBounce);
        CameraObjectsTrs.DOLocalRotateQuaternion(Player020_Tenohira_PareRHand_TutukaregoPosObj.transform.localRotation
            , 1)
            .SetEase(Ease.InBounce);
        yield return new WaitForSeconds(1);

        ////カメラリセット（+回転と立ち設定）
        ////カメラリセット値変更してリセット
        //CameraReset(Player010_Tenohira_PareRHand_StartPosObj.transform.localEulerAngles
        //    , DB.cameraSitAnchorDefLocalPos);//Anchorを座りに


        #region 指突きマスク終了
        DOTweenToIKEfPos(IKLHandEf, 0, 1);
        DOTweenToIKEfRot(IKLHandEf, 0, 1);


        //現在のベースと同じモーションになるまで待機してからnoData
        ChieriMotion(tmpBaseAnimStateName, 2f, 1);
        while (nowGirlAnimOtherLayerClipNameDict[1] != nowGirlAnimClipName)
        {
            girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeにセットし続ける
            yield return null;
        }
        ChieriMotion("_noData", 0f, 1);


        isGirlAnimReadSystem = false;
        #endregion

        #endregion

        #endregion

        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1f);
        #region 乱暴だった？　から 手かぶせ直前まで
        Hukidashi("B2100150");//ちょっと乱暴だった？
        ChieriMotion("f_あはは・・2", 0.1f / girlAnim.speed, 2);
        ChieriMotionDelay(1, "f_あはは・・2目開き", 0.1f / girlAnim.speed, 2);//時間差表情戻し
        AseTare();
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("B2100140");//乱暴だった。
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2100160");//景色どう？
        ChieriMotion("笑顔01口眉", 0.05f / girlAnim.speed, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.05f / girlAnim.speed, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("B2100150");//命綱でもありゃな・・！
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("B2100170");//そっかやっぱり怖いんだ・・
        ChieriMotion("f_あ！ほら！口普通キョトン眉下がり", 0.2f / girlAnim.speed, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("B2100160");//当然だと思いますね・・！
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);


        Hukidashi("B2100180");//じゃあ降ろしてあげるけど
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        #endregion

        ChieriMotion("手乗せ立ち手かぶせ", 1f, 0);


        Hukidashi("B2100190");//こうすれば怖くないかな？
        ChieriMotion("笑顔01口眉", 0.05f / girlAnim.speed, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f / girlAnim.speed, 2);//時間差表情戻し

        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "手乗せ立ち手かぶせ") { yield return null; }
        while (girlAnimNomTime <= 0.15f) { yield return null; }
        DelAll_Hukidashi();
        FixedAction(() => { CameraObjectsTrs.SetParent(GameObjectsTrs); });
        //開始待ちと終了待ち
        while (isFixedAction == false) { yield return null; }
        while (isFixedAction) { yield return null; }

        #region 脚登りシステム起動と設定
        StartCoroutine(AsinoboriSystem());
        AN_isInputLock = false;

        AN_PlayerHuseSphereCollider.enabled = true;
        AN_PlayerNormalCapsuleCollider.enabled = false;
        AN_isGrapPowerMode = false;
        AN_isClimbMode = false;

        AN_isInputSwitchEasyMode = false;
        AN_isInputSwitchHardMode = true;


        AN_KubinekkoGrap(GirlRHandTrs);
        AN_AdjustKubinekkoLimit = 1f;//0で手と同じ
        #endregion

        NovelSetVis("B2100170", true);




        while (girlAnimNomTime <= 0.5f) { yield return null; }
        SEPlay("足音2_footsteps_shoe_grass_walk_04");
        SEPlay("nuno_washing-machine-laundry-put1");
        FadeBlack(1, 1);
        yield return new WaitForSeconds(1);
        isANSystem = false;

        KankyouBGMVolumer(0, 2);

        #region 被せられ位置に、プレイヤー倒れ、トラッキングオフ
        //TPSプレイヤー倒れモーション
        isPlayerUniqueMotion = true;
        PlayerMotion("liedown_00_Re", 0.2f, 0);

        InputTracking.disablePositionalTracking = true;

        //（ポストプロセス用に変更）
        ////カメラ回転、アンカーでセット
        //GameObject Player030_Tenohira_Anchor_KabuserarePosObj =
        //    Resources.Load("_PosObj/12TenohiranoUe/Player030_Tenohira_Anchor_KabuserarePosObj") as GameObject;

        //CameraReset(null, null, false,
        //    Player030_Tenohira_Anchor_KabuserarePosObj.transform.localEulerAngles);

        #endregion

        #region 手の中用ポストプロセスとスポットライトとカメラ、カメラアンカー位置

        //カメラ回転、アンカーでセット
        GameObject Player040_Tenohira_KabuserarePosObj =
            Resources.Load("_PosObj/12TenohiranoUe/Player040_Tenohira_KabuserarePosObj") as GameObject;

        GameObject Player040_Tenohira_Anchor_KabuserarePosObj =
            Resources.Load("_PosObj/12TenohiranoUe/Player040_Tenohira_Anchor_KabuserarePosObj") as GameObject;

        CameraObjectsTrs.DOLocalMove(Player040_Tenohira_KabuserarePosObj.transform.localPosition, 1)
            .OnComplete(() =>
            {
                CameraReset(Player040_Tenohira_KabuserarePosObj.transform.localEulerAngles,
                    Player040_Tenohira_Anchor_KabuserarePosObj.transform.localPosition, true,
                    Player040_Tenohira_Anchor_KabuserarePosObj.transform.localEulerAngles);
            });

        StartCoroutine(B2100TekabuseEffect());

        #endregion

        isReloadSkinMeshColliderSystem = false;

        yield return new WaitForSeconds(1.5f);

        FadeBlack(0f, 20);

        NovelSetVis("B2100180");//あぐぐ熱い
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("B2100200");//これなら怖くないよね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("B2100190");//覚えてろ智恵理・・！
        while (isNovelSetVisIng) { yield return null; }

        FadeBlack(1f, 3);
        yield return new WaitForSeconds(3f);

        //プツ音出るのでサウンドオブジェ手動消し
        for (int i = 0; i < DB.evMoveDelObjList.Count; i++)
        {
            if (DB.evMoveDelObjList[i] != null)
            {
                if (DB.evMoveDelObjList[i].tag == "SoundObj")
                {
                    GameObject tmpObj = DB.evMoveDelObjList[i];
                    //1秒フェードアウト後削除
                    tmpObj.GetComponent<AudioSource>().DOFade(0, 1)
                        .OnComplete(() => { DestroyImmediate(tmpObj, true); });
                }
            }
        }
        yield return new WaitForSeconds(1f);

        isB2100TekabuseEffect = false;

        //トラッキング戻し
        InputTracking.disablePositionalTracking = false;
        //倒れモーション戻し
        isPlayerUniqueMotion = false;

        EventMove("チャイム");
    }
    #region ┗■手被せ時のポストプロセスやライト、TPS切り替えでONOFF用
    bool
        isB2100TekabuseEffect = false;

    IEnumerator B2100TekabuseEffect()
    {
        isB2100TekabuseEffect = true;

        GameObject PostProcessVolumeTekabuseObj =
            Instantiate(Resources.Load("PostProcessing/Prefab/PostProcessVolumeTekabuse") as GameObject);

        while (isB2100TekabuseEffect)
        {
            if (tPSModeInt != 0)
            {
                if (PostProcessVolumeTekabuseObj.activeSelf)
                { PostProcessVolumeTekabuseObj.SetActive(false); }
            }
            else
            {
                if (PostProcessVolumeTekabuseObj.activeSelf == false)
                { PostProcessVolumeTekabuseObj.SetActive(true); }
            }

            yield return null;
        }
        Destroy(PostProcessVolumeTekabuseObj);
    }

    #endregion
    AudioSource chimeAS;
    IEnumerator C1010()//チャイム
    {
        if (debugEventMoveFlag == true)
        {
            FadeBlack(1, 0);
            nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;
        }
        EventReset();
        yield return null;


        //アニメスピード
        girlAnim.speed = 0.5f;

        #region 暗幕中設定
        Drill_chieriTrs.gameObject.SetActive(false);

        #region 小物位置（文具入れごと）(エッフェル)(バジラ)
        //小物ON
        GrasstableTrs.gameObject.SetActive(true);
        DrillTrs.gameObject.SetActive(true);
        Drill_chieriTrs.gameObject.SetActive(false);
        KeshigomuObj.SetActive(true);

        //消しゴム
        KeshigomuObj.transform.SetParent(RoomTrs);
        KeshigomuObj.transform.localPosition = Keshigomu_C_Modositehosii_table_Room_ParameterTrs.localPosition;
        KeshigomuObj.transform.localEulerAngles = Keshigomu_C_Modositehosii_table_Room_ParameterTrs.localEulerAngles;
        KeshigomuObj.SetActive(true);

        //スピーカー
        GameObject Speaker_JougiDe00_StartPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/Speaker_JougiDe00_StartPosObj") as GameObject;
        SpeakerTrs.localPosition = Speaker_JougiDe00_StartPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = Speaker_JougiDe00_StartPosObj.transform.localEulerAngles;

        //シャーペン
        GameObject Sharpen_JougiDe00_PosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/Sharpen_JougiDe00_PosObj") as GameObject;
        SharpenObj.transform.localPosition = Sharpen_JougiDe00_PosObj.transform.localPosition;
        SharpenObj.transform.localEulerAngles = Sharpen_JougiDe00_PosObj.transform.localEulerAngles;

        //文具入れ
        GameObject Bungu_JougiDe00_StartPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/Bungu_JougiDe00_StartPosObj") as GameObject;
        BunguTrs.localPosition = Bungu_JougiDe00_StartPosObj.transform.localPosition;
        BunguTrs.localEulerAngles = Bungu_JougiDe00_StartPosObj.transform.localEulerAngles;

        //エッフェル生成・配置
        GameObject Eiffel_hiObj;
        if (GameObject.Find("Eiffel_hiObj") == null)
        {
            Eiffel_hiObj
                = Instantiate(Resources.Load("Main/KomonoObj/Eiffel/Eiffel_hiObj") as GameObject
                , RoomTrs, false);
            Eiffel_hiObj.name = nameof(Eiffel_hiObj);
        }
        else
        {
            Eiffel_hiObj = GameObject.Find("Eiffel_hiObj");
        }

        GameObject Eiffel_JougiDe00_StartPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/Eiffel_JougiDe00_StartPosObj") as GameObject;
        Eiffel_hiObj.transform.localPosition = Eiffel_JougiDe00_StartPosObj.transform.localPosition;
        Eiffel_hiObj.transform.localEulerAngles = Eiffel_JougiDe00_StartPosObj.transform.localEulerAngles;

        #region ■バジラ生成して テーブルに
        if (GameObject.Find("Kaiju") == null)
        {
            //バジラ生成
            KB_KaijuObj = Instantiate(Resources.Load("EventSystem/KaijuBattle/Prefab/Kaiju") as GameObject);
            KB_KaijuObj.transform.SetParent(GameObjectsTrs);
        }
        //すでに配置してある場合
        else { KB_KaijuObj = GameObject.Find("Kaiju"); }

        //名前と削除リスト入れ
        KB_KaijuObj.name = "Kaiju";
        DB.evMoveDelObjList.Add(KB_KaijuObj);

        //置き位置
        GameObject Kaiju_JougiDe00_StartPosObj
            = Resources.Load("_PosObj/10JougiDeHakarinagara/Kaiju_JougiDe00_StartPosObj") as GameObject;
        KB_KaijuObj.transform.localPosition = Kaiju_JougiDe00_StartPosObj.transform.localPosition;
        KB_KaijuObj.transform.localEulerAngles = Kaiju_JougiDe00_StartPosObj.transform.localEulerAngles;
        KB_KaijuObj.transform.localScale = Vector3.one;

        #endregion

        #endregion

        #region 智恵理ポーズと位置
        DB.isChieriPosLock = false;
        GameObject Chieri010_Eiffel_StartPosObj
            = Resources.Load("_PosObj/11EiffelTower/Chieri010_Eiffel_StartPosObj") as GameObject;
        GirlTrs.localPosition = Chieri010_Eiffel_StartPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri010_Eiffel_StartPosObj.transform.localEulerAngles;

        ChieriMotion("座り待機", 0f, 0);
        ChieriMotion("笑顔01口眉_目閉じない", 0f, 2);
        ChieriMotion("h_noData", 0f, 7);//顔傾け用準備

        TereHohoAlphaChange(0.1f);
        TereHoho(true, 0f);

        #region IKプレイヤ見（頭少し下）(頭Clamp注意)
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);

        //LAIKHead.solver.clampWeightHead = 0.78f;//デフォ値だと全然上に向かないので
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.08f, 0), 0f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 0f);
        #endregion

        #endregion

        #region プレイヤー 位置とポーズとカメラリセット
        GameObject Player_01_StartPosObj
            = Resources.Load("_PosObj/C01_HayaruKimochi/Modositehosii/Player_01_StartPosObj") as GameObject;

        CameraObjectsTrs.localPosition = Player_01_StartPosObj.transform.localPosition;

        //カメラリセット（+回転と立ち設定）
        //カメラリセット値変更してリセット
        CameraReset(Player_01_StartPosObj.transform.localEulerAngles
            , DB.cameraSitAnchorDefLocalPos //Anchorを座りに
            , true
            , Vector3.zero); //倒れだったのを直し

        #endregion

        #endregion 暗幕中設定

        //開幕
        FadeBlack(0, 3);
        yield return new WaitForSeconds(3);

        //ヒグラシに変え
        KankyouBGMChanger(semiSE.audioSource, "Higurashi_nc104892_間追加");

        Hukidashi("C1010010");//「じゃあ次はね」
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //BGM 音量
        BGMPlay(true, null, 0.5f, 10, 10);
        //環境音フェードイン
        KankyouBGMVolumer(0.3f, 10);

        NovelSetVis("C1010010");//待った待った……！
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("C1010020");//「そ、そう？休む？」
        AseTare();
        ChieriMotion("あはは・・・", 0.05f, 2);
        ChieriMotionDelay(1f, "f_あはは目開き", 0.05f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);



        NovelSetVis("C1010020");//さすがにな……！
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("C1010030");//「じゃあ休んだらねー」

        //VR時プレイヤー見るFollowが残るので、クリアを挟む
        FollowDOMoveFromTrsList.Clear();
        yield return null;

        #region IK左右ちら見



        LAIKEye.solver.clampWeightEyes = DB.defLAIKEyeClamp;

        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        GameObject ChieriIKEyeMigiue_HeadLocalPosObj
            = Resources.Load("_PosObj/_ParentPoseObjs/ChieriIKEyeMigiue_HeadLocalPosObj") as GameObject;
        IKLookAtEyeTargetTrs.position = Bip001HeadTrs.TransformPoint(ChieriIKEyeMigiue_HeadLocalPosObj.transform.localPosition);

        yield return new WaitForSeconds(1);

        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        GameObject ChieriIKEyeHidari_HeadLocalPosObj
            = Resources.Load("_PosObj/_ParentPoseObjs/ChieriIKEyeHidari_HeadLocalPosObj") as GameObject;
        IKLookAtEyeTargetTrs.position = Bip001HeadTrs.TransformPoint(ChieriIKEyeHidari_HeadLocalPosObj.transform.localPosition);


        #endregion
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("C1010030");//ストップストップ！　休んでから考えよう。というか・・
        yield return new WaitForSeconds(2);

        //目IKプレイヤーに戻し
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);

        ChieriMotion("ん？", 0.1f, 2);
        ChieriMotion("h_右少し傾け", 1f, 7);//首傾け

        while (isNovelSetVisIng) { yield return null; }


        //BGMフェードダウン
        BGMPlay(true, null, 0f, 6, 6);
        //環境音フェードイン
        KankyouBGMVolumer(0.7f, 10);


        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        ChieriMotion("h_noData", 0.5f, 7);//戻し
        yield return new WaitForSeconds(2);

        NovelSetVis("C1010040");//大きさってこれで頭打ち？
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);
        Hukidashi("C1010040");//えっと、大きさはね・・
        ChieriMotion("_noData", 1f, 2);



        //■チャイム
        SEPlay(ChimeSEObj, "tooki", GameObject.Find("ChimeSpeaker"), 0.8f);
        chimeAS = ChimeSEObj.GetComponent<AudioSource>();
        yield return new WaitForSeconds(1f);

        #region 窓の方見るIK

        //VR時プレイヤー見るFollowが残るので、クリアを挟む
        FollowDOMoveFromTrsList.Clear();
        yield return null;


        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        GameObject ChieriLookTargetPos_00_MadoYokomeObj
            = Resources.Load("_PosObj/C_Chime/ChieriLookTargetPos_00_MadoYokomeObj") as GameObject;
        IKLookAtEyeTargetTrs.localPosition = ChieriLookTargetPos_00_MadoYokomeObj.transform.localPosition;

        yield return new WaitForSeconds(1);
        //顔ゆっくり向ける
        FollowDOLocalMove(IKLookAtHeadTargetTrs, ChieriLookTargetPos_00_MadoYokomeObj.transform.localPosition + new Vector3(0.05f, -0.15f, 0), 2f);
        #endregion

        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        yield return new WaitForSeconds(1);
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        #region もっと窓見る
        GameObject ChieriLookTargetPos_01_MadoMiruObj
            = Resources.Load("_PosObj/C_Chime/ChieriLookTargetPos_01_MadoMiruObj") as GameObject;
        IKLookAtEyeTargetTrs.localPosition = ChieriLookTargetPos_01_MadoMiruObj.transform.localPosition;
        //頭すごいゆっくり
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriLookTargetPos_01_MadoMiruObj.transform.localPosition, 8f);
        #endregion

        DelAll_Hukidashi();
        Hukidashi("C1010050");//「・・・あ」
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        Hukidashi("C1010060");//「もうこんな時間」
        ChieriMotion("f_けど・・・", 1f, 2);
        yield return new WaitForSeconds(1);
        #region 斜めうつむき
        GameObject ChieriLookTargetPos_02_NanameUtsumukiObj
            = Resources.Load("_PosObj/C_Chime/ChieriLookTargetPos_02_NanameUtsumukiObj") as GameObject;
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriLookTargetPos_02_NanameUtsumukiObj.transform.localPosition, 8f);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriLookTargetPos_02_NanameUtsumukiObj.transform.localPosition, 8f);
        ChieriMotion("f_えっと、その・・", 8f, 2);
        #endregion
        yield return KeyOrWait(3);

        NovelSetVis("C1010050");//あーなつかしいな。昔もチャイムで
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(2);
        Hukidashi("・・・");
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        #region プレイヤーをゆっくり見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerTargetTrs, 3f);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0.05f, -0.15f, 0), 12f);
        #endregion

        yield return new WaitForSeconds(3);

        NovelSetVis("C1010060");//じゃあ一旦切り替えて・・ん？
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(5);
        NovelSetVis("C1010070");//智恵理？

        //環境音フェードイン
        KankyouBGMVolumer(0.8f, 5);

        ChieriMotion("笑顔02アルカイック口眉", 3f, 2);
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(5);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        yield return new WaitForSeconds(1f);

        while (isNovelSetVisIng) { yield return null; }

        //暗幕
        FadeBlack(1, 2);
        yield return new WaitForSeconds(2f);

        EventMove("少しだけ待っててね");

    }
    bool isToBeContinued = false;
    IEnumerator D1000()//少しだけ待っててね
    {
        if (debugEventMoveFlag == true)
        {
            nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;
        }
        EventReset();

        //暗幕
        FadeBlack(1, 1);
        yield return new WaitForSeconds(1f);

        //環境音フェードイン
        KankyouBGMVolumer(0.8f, 5);

        #region 暗幕中設定

        #region ■隠れ鬼移動システム事前ON（ロードかかるほど重くなったので）
        isSeePointTempOff = true;
        KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
        #endregion

        #region 智恵理ポーズ表情　暗幕なのであまり関係ないけど一応
        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);
        //智恵理0位置ロック解除
        DB.isChieriPosLock = false;

        //アニメスピード
        girlAnim.speed = 0.5f;
        //ポーズ表情
        ChieriMotion("背比べ待機02", 0f, 0);
        ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);
        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        #endregion

        #region 小物
        //小物消し
        Drill_chieriTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);
        KeshigomuObj.SetActive(true);
        SharpenObj.SetActive(true);

        //文具入れ
        BunguTrs.position = bunguDefPos;
        BunguTrs.eulerAngles = bunguDefEul;

        //エッフェル
        Eiffel_hiTrs.position = eiffel_hiObjDefPos;
        Eiffel_hiTrs.eulerAngles = eiffel_hiObjDefEul;
        #endregion

        #region ケーブル バッテリー設置
        GameObject USBCable02_Battery_NoboriPrefab;
        //既に編集用に置いてあったら取得
        if (GameObject.Find("USBCable02_Battery_NoboriPrefab") != null)
        {
            USBCable02_Battery_NoboriPrefab
                = GameObject.Find("USBCable02_Battery_NoboriPrefab");
        }
        else //無ければリソースから
        {
            USBCable02_Battery_NoboriPrefab
                = Instantiate(Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/USBCable02_Battery_NoboriPrefab") as GameObject
                , GameObjectsTrs, false);
            USBCable02_Battery_NoboriPrefab.name = "USBCable02_Battery_NoboriPrefab";
        }
        DB.sceneMoveDelObjList.Add(USBCable02_Battery_NoboriPrefab);

        GameObject BatteryObj;
        //既に編集用に置いてあったら取得
        if (GameObject.Find("Battery") != null)
        { BatteryObj = GameObject.Find("Battery"); }
        else //無ければリソースから
        {
            BatteryObj = Instantiate(Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/Battery") as GameObject
              , GameObjectsTrs, false);
            BatteryObj.name = "Battery";
        }
        DB.sceneMoveDelObjList.Add(BatteryObj);

        //智恵理スマホ
        ChieriSumahoObj.SetActive(true);
        ChieriSumahoObj.transform.SetParent(GameObjectsTrs, false);//智恵理の手から外して

        GameObject ChieriSumaho010_HikidashiUePosObj
            = Resources.Load("_PosObj/13Tansaku00/ChieriSumaho010_HikidashiUePosObj") as GameObject;

        ChieriSumahoObj.transform.localPosition = ChieriSumaho010_HikidashiUePosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho010_HikidashiUePosObj.transform.localEulerAngles;
        #endregion


        ////fogの強さ
        //RenderSettings.fogDensity = 0.001f;

        yield return new WaitForSeconds(2);

        ////サブタイトル
        //SubTitleVis(true, serihuDict["SD1010010"]);

        #region プレイヤー 位置とポーズとカメラリセット
        GameObject Player_00_DeskUeTansaku1PosObj
            = Resources.Load("_PosObj/D_Henai_Day1/Player_00_DeskUeTansaku1PosObj") as GameObject;

        CameraObjectsTrs.localPosition = Player_00_DeskUeTansaku1PosObj.transform.localPosition;

        //カメラリセット（+回転と立ち設定）
        //カメラリセット値変更してリセット
        CameraReset(Player_00_DeskUeTansaku1PosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos);//Anchorを立ちに

        #endregion

        //智恵理 探索時位置に
        GameObject Chieri_00_TsukueMaePosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_00_TsukueMaePosObj") as GameObject;
        GirlTrs.localPosition = Chieri_00_TsukueMaePosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri_00_TsukueMaePosObj.transform.localEulerAngles;

        //スピーカー 位置に
        SpeakerTrs.gameObject.SetActive(true);
        GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
        SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        //椅子飛び降りるよう位置
        GameObject Chair_010_IsuDivePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1/Chair_010_IsuDivePosObj") as GameObject;
        ChairTrs.localPosition = Chair_010_IsuDivePosObj.transform.localPosition;
        ChairTrs.localEulerAngles = Chair_010_IsuDivePosObj.transform.localEulerAngles;

        #endregion 暗幕中設定

        #region 暗幕中台詞とSE
        //「じゃあご飯食べてくる」
        Hukidashi("D1010");
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //「待っててね」
        Hukidashi("D1020");
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("D1000010");//え？　智恵理？
        yield return new WaitForSeconds(1);

        //「公の分も後で」
        Hukidashi("D1030");
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //智恵理ドア位置へ
        GameObject Chieri_01_DoorPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_01_DoorPosObj") as GameObject;
        GirlTrs.localPosition = Chieri_01_DoorPosObj.transform.localPosition;
        //ドア開く音
        SEPlay(DoorSEObj, "door-open1", GirlTrs.gameObject);
        yield return new WaitForSeconds(2f);

        NovelSetVis("D1000020");//おーい！　体このまま？！

        //サブタイトル消し
        SubTitleVis(false, 2);

        //ドア閉まる音
        SEPlay(DoorSEObj, "door-close2", GirlTrs.gameObject);
        yield return new WaitForSeconds(1f);

        //智恵理メッシュオフ
        GirlMeshTrs.gameObject.SetActive(false);

        //一応ゼロ位置
        GirlTrs.localPosition = GirlTrs.localEulerAngles
            = Vector3.zero;

        #endregion

        //開幕
        FadeBlack(0, 3);
        yield return new WaitForSeconds(5);
        while (isNovelSetVisIng) { yield return null; }

        //■選択肢有りノベル「とにかく待つ」「状況を整理する」「逃げる」
        sentakuListNum = 99;//初期化
        NovelSetVis("■D1010");//え？
        //ノベル選択肢タイミング（終了直前）までループ
        while (isNovelSentakushiWait) { yield return null; }

        yield return new WaitForSeconds(1);

        #region ■切り選択候補 とにかく待つ（探索なし）は2週目の予定
        Sentakushi("■D1010a", Mathf.Infinity, "待っていてと言われたけど");//メガネ外す
        Sentakushi("■D1010b", Mathf.Infinity);//整理
        if (DB.storyLoopCountInt > 0)
        { Sentakushi("■D1010c", Mathf.Infinity); }//待つ

        //環境音フェードアウト
        KankyouBGMVolumer(0f, 10);


        if (isToBeContinued)
        {
            #region 体験版終了してToBeContinuedへ
            EventMove("ToBeContinued");
            while (true) { yield return null; }
            #endregion

        }


        //選択肢選ばれるまでループ
        while (sentakuListNum == 99) { yield return null; }
        yield return null;
        switch (sentakuListNum)
        {
            case 0://選択肢a メガネ外す
                体戻そう:
                sentakuListNum = 99;
                yield return new WaitForSeconds(1);

                #region メガネを外そうとしてないことに気づき、スマホをいじりに行こうと思うまで
                NovelSetVis("D1010c");//ひとまずメガネを外そう
                while (novelCurrentPageInt < 2) { yield return null; }
                FadeBlack(1, 1);//暗幕

                while (isNovelSetVisIng) { yield return null; }

                yield return new WaitForSeconds(1);

                NovelSetVis("D1010c010");//え？あれ？
                while (isNovelSetVisIng) { yield return null; }
                NovelSetVis("D1010c020");//しかしメガネはそこになかった
                while (novelCurrentPageInt < 2) { yield return null; }
                FadeBlack(0, 1);//開幕

                while (novelCurrentPageInt < 4) { yield return null; }
                SEPlay("GrapHada02");
                yield return new WaitForSeconds(0.5f);
                SEPlay("shoulder-touch1");

                while (isNovelSetVisIng) { yield return null; }

                yield return new WaitForSeconds(1);

                NovelSetVis("D1010c030");//一体どういう・・
                while (isNovelSetVisIng) { yield return null; }

                #endregion

                EventMove("探索1");
                break;

            case 1://選択肢b　状況を確認する
                sentakuListNum = 99;
                yield return new WaitForSeconds(1);
                #region 入れ子選択肢
                sentakuListNum = 99;//初期化
                NovelSetVis("D1010b");//状況整理
                while (isNovelSetVisIng) { yield return null; }

                yield return new WaitForSeconds(3);

                NovelSetVis("■D1010b010");//まあいっか！　どうするかな
                while (isNovelSentakushiWait) { yield return null; }
                yield return new WaitForSeconds(1);


                Sentakushi("■D1010a", Mathf.Infinity, "待つかどうか");
                if (DB.storyLoopCountInt > 0)
                { Sentakushi("■D1010c", Mathf.Infinity); }//待つ

                while (sentakuListNum == 99) { yield return null; }
                yield return null;
                switch (sentakuListNum)
                {
                    case 0://選択肢a　体戻せないかな
                        goto 体戻そう;

                    case 1://選択肢b　とにかく待つ
                        goto とにかく待つ;
                }
                #endregion
                break;

            case 2://選択肢c　とにかく待とう
                とにかく待つ:
                sentakuListNum = 99;
                yield return new WaitForSeconds(1);
                NovelSetVis("D1010a");//「待っててね」と言われた訳だし

                //暗幕
                FadeBlack(1, 1);
                yield return new WaitForSeconds(2f);
                while (isNovelSetVisIng) { yield return null; }
                yield return new WaitForSeconds(2f);

                NovelSetVis("D2000");//足音が聞こえてきた
                while (isNovelSetVisIng) { yield return null; }
                EventMove("会話1");
                break;
        }
        #endregion

        yield break;
    }

    IEnumerator ToBeContinued()//ToBeContinued
    {
        if (debugEventMoveFlag == true)
        {
        }
        EventReset();
        yield return new WaitForSeconds(0.1f);


        #region ToBeContinued
        FadeBlack(1, 5, true);
        isMenuLock = true;//メニューロック
        isHwVisLock = true;//宿題ロック

        //TO BE CONTINUED設置
        GameObject tempTobecontinuedObj = Instantiate(Resources.Load("Main/UI/ToBeContinued/TobecontinuedCanvas") as GameObject
            , VRUICameraTrs);
        DB.evMoveDelObjList.Add(tempTobecontinuedObj);//削除用にDBのリストへ登録

        //■■幕中なので前面表示
        //取得
        Image tmpImage = tempTobecontinuedObj.GetComponent<Image>();
        //透明に
        tmpImage.color = new Color(1, 1, 1, 0);
        //徐々に不透明に
        DOTween.To(() => tmpImage.color, (x) => tmpImage.color = x, new Color(1, 1, 1, 1)
            , 5f)
             .SetEase(Ease.InOutQuad)
             .SetUpdate(true);

        yield return new WaitForSeconds(5f);

        //徐々に透明に
        DOTween.To(() => tmpImage.color, (x) => tmpImage.color = x, new Color(1, 1, 1, 0)
            , 5f)
             .SetEase(Ease.InOutQuad)
             .SetUpdate(true);

        //UIごとフェードアウト（シーン移動用のフェード）
        GameObject.Find("FadeBlackSceneMoveCanvasImage").GetComponent<Image>()
            .DOFade(1, 5);


        //NovelSetVis("ToBeContinued");

        //智恵理メッシュON
        GirlMeshTrs.gameObject.SetActive(true);

        KankyouBGMVolumer(0f, 5);
        yield return new WaitForSeconds(5f);


        EventMove("タイトル", true, true);
        #endregion



        #region //以前のここにあったToBeContinued
        //FadeBlack(1, 5, true);
        //isMenuLock = true;//メニューロック
        //isHwVisLock = true;//宿題ロック

        ////TO BE CONTINUED設置
        //GameObject tempTobecontinuedObj = Instantiate(Resources.Load("Main/UI/ToBeContinued/TobecontinuedCanvas") as GameObject
        //    , VRUICameraTrs);
        //DB.evMoveDelObjList.Add(tempTobecontinuedObj);//削除用にDBのリストへ登録

        ////■■幕中なので前面表示
        ////取得
        //Image tmpImage = tempTobecontinuedObj.GetComponent<Image>();
        ////透明に
        //tmpImage.color = new Color(1, 1, 1, 0);
        ////徐々に不透明に
        //DOTween.To(() => tmpImage.color, (x) => tmpImage.color = x, new Color(1, 1, 1, 1)
        //    , 5f)
        //     .SetEase(Ease.InOutQuad)
        //     .SetUpdate(true);

        //yield return new WaitForSeconds(5f);

        ////徐々に透明に
        //DOTween.To(() => tmpImage.color, (x) => tmpImage.color = x, new Color(1, 1, 1, 0)
        //    , 5f)
        //     .SetEase(Ease.InOutQuad)
        //     .SetUpdate(true);

        ////NovelSetVis("ToBeContinued");

        ////智恵理メッシュON
        //GirlMeshTrs.gameObject.SetActive(true);

        //isNovelFadeTween = isNovelSetVisIng = false;
        //yield return new WaitForSeconds(5f);


        //EventMove("予告 ペットボトル", true, true);
        #endregion

        yield break;
    }
    IEnumerator yokokuPetBottle()//予告 ペットボトル
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            nowPlayerLocalScale = new Vector3(0.015f, 0.015f, 0.015f);
            #region 宿題ペン消しゴムなくし
            //宿題 位置に
            Drill_chieriTrs.gameObject.SetActive(false);

            //プレイヤーの
            DrillTrs.gameObject.SetActive(false);

            //ペンなくし
            SharpenObj.SetActive(false);
            //消しゴム無くし
            KeshigomuObj.SetActive(false);
            #endregion //宿題置き

            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        }

        EventReset();
        yield return new WaitForSeconds(0.1f);

        //■■■シーンロード用暗幕かかってること前提
        //とりあえずデバッグのため普通の暗幕かけ
        FadeBlack(1, 0);

        //セーブデータ新規作成しました待ち（むしろ消去が被るスクリプトをなおしたい）
        yield return new WaitForSeconds(1.1f);

        //サブタイトル
        if (DB.isEnglish)
        {
            SubTitleVis(true, "　　　　　Preview");
        }
        else
        {
            SubTitleVis(true, "　　　　　　予告");
        }

        #region ペットボトル 暗幕中事前設定
        girlAnim.speed = 0.7f;

        //■プレイヤー 机の上位置に
        GameObject Player_000_DeskUeStartPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_000_DeskUeStartPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_000_DeskUeStartPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_000_DeskUeStartPosObj.transform.localEulerAngles;

        #region ■智恵理
        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);
        DB.isChieriPosLock = false;
        ChieriMotion("デスク肘つきポーズ", 0f, 0);
        ChieriMotion("笑顔01口眉_目閉じない", 0f, 2);

        //智恵理 椅子すわり位置に
        GameObject Chieri_02_DeskChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02_DeskChairPosObj") as GameObject;
        GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;

        //頭にWindnoiseSoundObj付与
        GameObject HeadSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , HeadSphereTrs);//（頭）
        DB.evMoveDelObjList.Add(HeadSoundObj);

        AudioSource tmpHeadAS = HeadSoundObj.GetComponent<AudioSource>();
        //ミュート
        tmpHeadAS.mute = true;

        //SoundObjのPos
        GameObject SoundObj_01_Ningyou_PareHeadPosObj = Resources.Load("_PosObj/D_Henai_Day1/SoundObj_01_Ningyou_PareHeadPosObj") as GameObject;
        HeadSoundObj.transform.localPosition = SoundObj_01_Ningyou_PareHeadPosObj.transform.localPosition;


        //右人差し指にWindnoiseSoundObj付与
        GameObject RHitosasiSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRhitosashi02Trs);
        DB.evMoveDelObjList.Add(RHitosasiSoundObj);

        AudioSource tmpRhitosasiAS = RHitosasiSoundObj.GetComponent<AudioSource>();
        //ミュート
        tmpRhitosasiAS.mute = true;
        //SoundObjのPos
        GameObject SoundObj_04_TsumamiYubi_RHitosasiPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_04_TsumamiYubi_RHitosasiPosObj") as GameObject;
        RHitosasiSoundObj.transform.localPosition = SoundObj_04_TsumamiYubi_RHitosasiPosObj.transform.localPosition;

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        #endregion

        #region ペットボトル取得

        //ペットボトル既に取得されていればなにもせず、なければシーンから、それでもなければリソースからクローン
        ObjSceneOrResouceLoad(ref PetBottleObj, "PetBottle", "Main/KomonoObj/PetBottle/PetBottle");
        DB.evMoveDelObjList.Add(PetBottleObj);

        //ペットボトル智恵理左手にペア
        PetBottleObj.transform.SetParent(Bip001_L_HandTrs);
        //位置
        GameObject PetBottle_ChieriLHandPosObj = Resources.Load("_PosObj/_ParentPoseObjs/PetBottle_ChieriLHandPosObj") as GameObject;
        PetBottleObj.transform.localPosition = PetBottle_ChieriLHandPosObj.transform.localPosition;
        PetBottleObj.transform.localEulerAngles = PetBottle_ChieriLHandPosObj.transform.localEulerAngles;
        PetBottleObj.transform.localScale = PetBottle_ChieriLHandPosObj.transform.localScale;

        //キャップ既に取得されていればなにもしない
        if (CapObj != null) { }
        else
        {
            //キャップ、クローンで取得(ペアレント変えるので、プレファブ上書きで消さないようにクローン)
            CapObj = Instantiate(PetBottleObj.transform.Find("Cap").gameObject);
            DB.evMoveDelObjList.Add(CapObj);

            //クローンON
            CapObj.transform.gameObject.SetActive(true);
            //ペアレント
            CapObj.transform.SetParent(GameObjectsTrs);
            //オリジナルをオフ
            PetBottleObj.transform.Find("Cap").gameObject.SetActive(false);
            //クローンキャップ机の上へ
            GameObject Cap_DeskUePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Cap_DeskUePosObj") as GameObject;
            CapObj.transform.localPosition = Cap_DeskUePosObj.transform.localPosition;
            CapObj.transform.localEulerAngles = Cap_DeskUePosObj.transform.localEulerAngles;
            CapObj.transform.localScale = Cap_DeskUePosObj.transform.localScale;
        }

        //一旦両方ともOFF
        PetBottleObj.SetActive(false);
        CapObj.SetActive(false);

        #endregion


        //椅子の位置
        GameObject Chair_01_SuwariPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chair_01_SuwariPosObj") as GameObject;
        ChairTrs.localPosition = Chair_01_SuwariPosObj.transform.localPosition;
        ChairTrs.localEulerAngles = Chair_01_SuwariPosObj.transform.localEulerAngles;

        //事前読み込み
        GameObject Player_010_DeskUeChieriTsumamiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_010_DeskUeChieriTsumamiPosObj") as GameObject;


        //ペットボトルシェイクテスト用
        Vector3 tmpShakePrevPos = new Vector3();
        Quaternion tmpShakePrevQua = new Quaternion();
        float tmpShakeTime = 1;

        #endregion

        #region 摘む直前の読み込み
        DB.isChieriPosLock = true;

        //プレイヤー 机の上位置に
        CameraObjectsTrs.localPosition = Player_010_DeskUeChieriTsumamiPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_010_DeskUeChieriTsumamiPosObj.transform.localEulerAngles;

        //カメラリセット値変更してリセット
        CameraReset(Player_010_DeskUeChieriTsumamiPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos//立ち
            , false
            , Vector3.zero//倒れのアンカーリセット
            , false);

        //ペットボトル準備
        PetBottleObj.SetActive(true);
        CapObj.SetActive(true);
        ChieriMotion("デスクペットボトル持ち", 0f, 0);

        //マスクで左手ペットボトル持ち（「取り出し」では中指、「落とす」では親指が少し埋まる）（指の大きさ変わった？　デスクペットボトルへ落とすのclipをコピーしてきて左手だけにして少し親指開いた）
        ChieriMotion("LH_デスクペットボトルへ落とす", 0f, 6);

        #endregion

        yield return new WaitForSeconds(3);

        //環境音フェードイン
        KankyouBGMVolumer(1f, 2);
        ////ヒグラシに変え
        //KankyouBGMChanger(semiSE.audioSource, "Higurashi_nc104892_間追加");


        FadeBlack(0, 1);

        #region 摘み上げ

        ChieriMotion("デスクペットボトル摘み上げ", 0f, 0);
        yield return null;

        //■手構えるまで待機
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 0.215f)
        { yield return null; }

        //ミュート解除
        tmpRhitosasiAS.mute = false;

        //■つまみ直前まで待機
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 0.324f)
        { yield return null; }
        ChieriMotion("f_眉高い笑顔少しジト目", 3f, 2);

        NovelSetVis("E4100090");//え？な？え？

        isPlayerUniqueMotion = true;
        PlayerMotion("_noData", 0f, 0);
        yield return null;
        GameObject PlayerDummy010_TsumamarePosObj
            = Resources.Load("_PosObj/0505YokokuPetbottle/PlayerDummy010_TsumamarePosObj") as GameObject;

        Player_DummyTrs.localPosition = PlayerDummy010_TsumamarePosObj.transform.localPosition;
        Player_DummyTrs.localEulerAngles = PlayerDummy010_TsumamarePosObj.transform.localEulerAngles;


        FixedAction(() =>
        {
            //指にペアレントし、Tweenで所定位置に
            CameraObjectsTrs.SetParent(GirlRhitosashi02Trs);
            GameObject Player_020_RHito2PareTsumamiLocalPosObj
            = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_020_RHito2PareTsumamiLocalPosObj") as GameObject;
            CameraObjectsTrs.DOLocalMove(Player_020_RHito2PareTsumamiLocalPosObj.transform.localPosition, 0.5f)
            .OnComplete(() =>
            {
                CameraReset(Player_020_RHito2PareTsumamiLocalPosObj.transform.localEulerAngles
                    , null
                    , false
                    , null
                    , false
                    , false
                    );
            });
        });

        //■つまみ持ち上げまで待機
        StartCoroutine(GirlAnimReadSystem());

        while (girlAnimNomTime <= 0.624f)
        { yield return null; }


        //表情
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        isGirlAnimReadSystem = false;

        while (isNovelSetVisIng) { yield return null; }

        NovelSetVis("E4100100");//まって、待ってくれ…！

        while (isNovelSetVisIng) { yield return null; }
        ChieriMotion("f_眉高い笑顔少しジト目", 1f, 2);

        //■落とす直前まで待機
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 1f)
        { yield return null; }

        #endregion

        #region 指離して落ちる
        ChieriMotion("デスクペットボトルへ落とす", 0f, 0);
        yield return null;

        //■指離すまで待機
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 0.05f)
        { yield return null; }
        isGirlAnimReadSystem = false;

        FixedAction(() =>
        {
            CameraObjectsTrs.SetParent(GameObjectsTrs);
        });
        yield return null; yield return null;

        //ANの重力設定のみロード
        AN_SetPlayerRigidbody();
        AN_GravitiDragBool = true;//FixedUpdateのやつON
                                  //rigid監視スタート
        StartCoroutine(RigidReadSystem());

        //ペアレントで傾いたカメラ戻し
        CameraObjectsTrs.DOLocalRotateQuaternion(new Quaternion(0, CameraObjectsTrs.rotation.y, 0, CameraObjectsTrs.rotation.z), 1f);

        //飲み口に落ちるように移動
        FixedAction(() =>
        {
            CameraObjectsTrs.DOMoveX(PetBottleObj.transform.position.x, 1f);
            CameraObjectsTrs.DOMoveZ(PetBottleObj.transform.position.z, 1f);
        });
        #endregion
        //環境音フェードアウト
        KankyouBGMVolumer(0.1f, 2);
        tmpRhitosasiAS.DOFade(0.1f, 2);
        #region 落ちて立ち上がるまで
        //大体おちた高さになるまで待機
        while (CameraObjectsTrs.localPosition.y >= 0.71f) { yield return null; }

        //ペットボトルだいたいセンター位置（落ちた場所）
        GameObject Player_030_PetBottleCenterPosObj
            = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_030_PetBottleCenterPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_030_PetBottleCenterPosObj.transform.localPosition;
        CameraObjectsTrs.localRotation = Player_030_PetBottleCenterPosObj.transform.localRotation;

        //摘まれポーズやめ
        isPlayerUniqueMotion = false;


        //フラッシュと音とダメージ
        FadeWhite(1, 0);
        SEPlay("dan01");

        CameraObjectsTrs.DOLocalRotate(
            new Vector3(270, CameraObjectsTrs.localEulerAngles.y, CameraObjectsTrs.localEulerAngles.z)
            , 0.3f)
            .SetEase(Ease.OutBounce)
            .OnComplete(() =>
            {
                CameraReset(new Vector3(270, CameraObjectsTrs.localEulerAngles.y, CameraObjectsTrs.localEulerAngles.z));
            });
        yield return new WaitForSeconds(0.05f);
        FadeWhite(0, 0);



        yield return new WaitForSeconds(1f);

        NovelSetVis("E4100110");//あいっづつ……！　うう
        while (novelCurrentPageInt < 2) { yield return null; }

        //立ち上がり暗幕
        FadeBlack(1, 0.5f);
        yield return new WaitForSeconds(0.5f);


        //■重力設定消し
        AN_GravitiDragBool = false;
        isRigidReadSystem = false;
        Destroy(CameraObjectsTrs.GetComponent<Rigidbody>());

        yield return null;

        isSeePointTempOff = true;//ポインターオフ

        //■隠れ鬼移動システムON
        KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
        //ローディング待ち
        while (isKOSystemLoading) { yield return null; }

        //ペットボトルコリダーをFixed追従動かし（智恵理のFixedColliderと同じ理屈）
        SetFixedMoveColliders(PetBottleObj.transform.Find("Bottle/Bottle_MeshCollider").gameObject);
        yield return null;


        //ペットボトル出して移動用位置（だいたい落ちた場所）
        GameObject Player_033_PetBottleCenterIdouPosObj
            = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_033_PetBottleCenterIdouPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_033_PetBottleCenterIdouPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_033_PetBottleCenterIdouPosObj.transform.localEulerAngles;

        CameraReset(Player_033_PetBottleCenterIdouPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos
            , true
            , Vector3.zero);

        FadeBlack(0, 0.5f);


        while (isNovelSetVisIng) { yield return null; }
        #endregion

        #region 移動Pos出し、移動でノベル、智恵理覗きこみとご飯食べてくるね

        Hukidashi("E4100100");//これでもう逃げられないし
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        Hukidashi("E4100110");//喉が渇いても大丈夫
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        yield return new WaitForSeconds(0.5f);

        NovelSetVis("E4100120");//う、嘘だろ……
        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("f_リラックス02", 3f, 2);

        #region 探索とかくれおに移動設置
        isSeePointTempOff = false;//ポインターオン

        int tmpInt = 8;

        //走りスピードにしてモーションも走りに
        playerMoveSpeed = 4;
        isKO_PlayerWalk = false;

        KO_KakurePosObjsList[tmpInt].SetActive(true);
        //寝る場所移動ポイント出現 演出
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleForwardPos").gameObject, 0.1f);
        yield return new WaitForSeconds(0.5f);
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleLeftPos").gameObject, 0.1f);
        yield return new WaitForSeconds(0.5f);
        KO_NewPosPointObjVis
             (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleRightPos").gameObject, 0.1f);
        yield return new WaitForSeconds(0.5f);
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleBackPos").gameObject, 0.1f);
        #endregion


        #region //ペットボトルシェイクテスト
        //FixedAction(() =>
        //{
        //    IKLHandTargetTrs.position = GirlLHandTrs.position;
        //    IKLHandTargetTrs.rotation = GirlLHandTrs.rotation;
        //    DOTweenToIKEfPos(IKLHandEf, 1, 0);
        //    DOTweenToIKEfRot(IKLHandEf, 1, 0);

        //    tmpShakePrevPos = IKLHandTargetTrs.localPosition;
        //    tmpShakePrevQua = IKLHandTargetTrs.localRotation;
        //});

        //while (true)
        //{
        //    if (Input.GetKeyDown(KeyCode.B))
        //    {
        //        GameObject IKLHand_010_MotiageNozokiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/IKLHand_010_MotiageNozokiPosObj") as GameObject;
        //        IKLHandTargetTrs.DOLocalMove(IKLHand_010_MotiageNozokiPosObj.transform.localPosition
        //            , tmpShakeTime);
        //        IKLHandTargetTrs.DOLocalRotateQuaternion(IKLHand_010_MotiageNozokiPosObj.transform.localRotation
        //            , tmpShakeTime);

        //        //ChieriMotion("デスクペットボトル傾け覗き込み原点", 0f, 0);
        //    }
        //    if (Input.GetKeyDown(KeyCode.N))
        //    {
        //        IKLHandTargetTrs.DOLocalMove(tmpShakePrevPos
        //            , tmpShakeTime);
        //        IKLHandTargetTrs.DOLocalRotateQuaternion(tmpShakePrevQua
        //            , tmpShakeTime);

        //        //ChieriMotion("デスクペットボトル傾け覗き込み原点", 0f, 0);
        //    }

        //    yield return null;
        //}

        #endregion

        yield return new WaitForSeconds(3f);


        Hukidashi("E4100120");//中に入ったのって
        yield return new WaitForSeconds(4f);

        DelAll_Hukidashi();
        Hukidashi("E4100130");//マコトが初めてじゃない？

        //IKプレイヤー見る 頭はIK切る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        DOTweenToLAIKSHead(LAIKHeadS, 0, 4);

        ChieriMotion("デスクペットボトル傾け覗き込み", 0f, 0);
        //左手マスク同期（元の動きそのまま持ってきて、親指だけ少し開く）
        ChieriMotion("デスクペットボトル傾け覗き込み", 0f, 6);

        ChieriMotion("f_本当に小さいね～", 1f, 2);

        yield return null;

        //顔近づくまで待機
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 1f)
        { yield return null; }
        isGirlAnimReadSystem = false;
        yield return new WaitForSeconds(2f);

        ChieriMotion("f_リラックス02", 1f, 2);

        yield return new WaitForSeconds(2f);

        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        Hukidashi("E4100140");//お風呂入ってくるね
        yield return new WaitForSeconds(1f);

        ChieriMotion("デスクペットボトル傾け覗き込み逆再生", 0f, 0);
        //頭IKON
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        yield return new WaitForSeconds(1f);
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(2f);

        ChieriMotion("LH_デスクペットボトルへ落とす", 2f, 6);

        //移動で「出してくれ」台詞オフ
        isBottleCenterPosArea_Exit = true;

        NovelSetVis("E4100130", true);//ま、待ってくれ！

        ChieriMotion("f_リラックス02", 3f, 2);

        while (novelCurrentPageInt < 2) { yield return null; }
        //移動オフ
        isKOSystem = false;

        FadeBlack(1, 2);

        yield return new WaitForSeconds(2);


        #endregion

        #region 暗幕終了設定

        //ペットボトルのFixedコリダー（TODO システムの様にして安全に削除すべき）
        Destroy(FixedMoveColliderFollderObj);
        fixedMoveColliderCloneParentObjList.Clear();

        //左手マスク解除
        ChieriMotion("_noData", 0f, 6);

        //ミュート(本来は削除すべき シーン移動での自動削除に任せる)
        tmpRhitosasiAS.DOFade(0, 0.1f);
        tmpHeadAS.DOFade(0, 0.1f);

        isNovelFadeTween = isNovelSetVisIng = false;

        #endregion
        yield return new WaitForSeconds(1);

        isFlowChartEventMove = true;
        EventMove("予告 足親指攻め", true, true);

        yield break;
    }
    IEnumerator yokokuAsioyayubiZeme()//予告 足親指攻め
    {
        if (debugEventMoveFlag == true)
        {
            #region 大きさや位置
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;
            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;


            #endregion
        }

        EventReset();
        yield return new WaitForSeconds(0.1f);

        //■■■シーンロード用暗幕かかってること前提
        //とりあえずデバッグのため普通の暗幕かけ
        FadeBlack(1, 0);

        //セーブデータ新規作成しました待ち（むしろ消去が被るスクリプトをなおしたい）
        yield return new WaitForSeconds(1.1f);

        //サブタイトル
        if (DB.isEnglish)
        {
            SubTitleVis(true, "　　　　　Preview");
        }
        else
        {
            SubTitleVis(true, "　　　　　　予告");
        }

        yield return new WaitForSeconds(3);

        #region 足親指攻め 暗幕中事前設定

        //ためしにnear設定
        VRCamera.nearClipPlane = 0.01f;

        girlAnim.speed = 0.5f;

        #region ケーブル バッテリー設置

        GameObject BatteryObj;
        //既に編集用に置いてあったら取得
        if (GameObject.Find("Battery") != null)
        { BatteryObj = GameObject.Find("Battery"); }
        else //無ければリソースから
        {
            BatteryObj = Instantiate(Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/Battery") as GameObject
              , GameObjectsTrs, false);
        }
        BatteryObj.name = "Battery";
        DB.sceneMoveDelObjList.Add(BatteryObj);

        GameObject //リソースから摘んでるケーブルロード
            USBCable02_Bone0LHito3Pare_OriteMisetePrefab;
        //編集用に既にあればそれを取得
        if (GameObject.Find("USBCable02_Bone0LHito3Pare_OriteMisetePrefab"))
        {
            USBCable02_Bone0LHito3Pare_OriteMisetePrefab =
                  GameObject.Find("USBCable02_Bone0LHito3Pare_OriteMisetePrefab");
        }
        else//なければ
        {
            USBCable02_Bone0LHito3Pare_OriteMisetePrefab =
                Instantiate(Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/USBCable02_Bone0LHito3Pare_OriteMisetePrefab") as GameObject);
        }
        USBCable02_Bone0LHito3Pare_OriteMisetePrefab.name = "USBCable02_Bone0LHito3Pare_OriteMisetePrefab";
        DB.sceneMoveDelObjList.Add(USBCable02_Bone0LHito3Pare_OriteMisetePrefab);


        #endregion

        #region プレイヤー設置

        //プレイヤー ケーブル降りた位置に　そしてカメラリセット
        GameObject Player010_TaorePosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/Player010_TaorePosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player010_TaorePosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player010_TaorePosObj.transform.localEulerAngles;

        GameObject CameraAnchor010_TaorePosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/CameraAnchor010_TaorePosObj") as GameObject;

        CameraAnchorTrs.localPosition = CameraAnchor010_TaorePosObj.transform.localPosition;
        CameraAnchorTrs.localEulerAngles = CameraAnchor010_TaorePosObj.transform.localEulerAngles;


        //カメラリセット値変更してリセット
        CameraReset(Player010_TaorePosObj.transform.localEulerAngles
            , CameraAnchor010_TaorePosObj.transform.localPosition //アンカーPos指定
            , true
            , CameraAnchor010_TaorePosObj.transform.localEulerAngles);//アンカーRot指定


        isPlayerUniqueMotion = true;
        PlayerMotion("liedown_00_Re", 0f, 0);

        #endregion
        #region プレイヤーIK(足指にペアレント)
        //左手 人差し指に
        PlayerIKLHandTargetTrs.SetParent(GirlRToe31Trs);
        //右手 親指に
        PlayerIKRHandTargetTrs.SetParent(GirlRToe41Trs);

        yield return null;
        GameObject PlayerIKLHand010_PareRToe31PosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/PlayerIKLHand010_PareRToe31PosObj") as GameObject;

        PlayerIKLHandTargetTrs.localPosition = PlayerIKLHand010_PareRToe31PosObj.transform.localPosition;
        PlayerIKLHandTargetTrs.localEulerAngles = PlayerIKLHand010_PareRToe31PosObj.transform.localEulerAngles;

        GameObject PlayerIKRHand010_PareRToe41PosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/PlayerIKRHand010_PareRToe41PosObj") as GameObject;
        PlayerIKRHandTargetTrs.localPosition = PlayerIKRHand010_PareRToe41PosObj.transform.localPosition;
        PlayerIKRHandTargetTrs.localEulerAngles = PlayerIKRHand010_PareRToe41PosObj.transform.localEulerAngles;

        //ArmBendGoal 1
        PlayerFBBIK.solver.rightArmChain.bendConstraint.weight =
        PlayerFBBIK.solver.leftArmChain.bendConstraint.weight = 1;
        //Reach 0
        PlayerFBBIK.solver.rightArmChain.reach =
        PlayerFBBIK.solver.leftArmChain.reach = 0;

        //Dummyハンド表示
        isDummyHandVis = true;
        Dummy_Hand.SetActive(true);



        //IKのONは智恵理のポーズ設定してからでないと何故かずれるので、後で

        #endregion

        #region 智恵理のポーズとIK 足位置一覧

        ChieriMotion("USBに手ポーズ", 0, 0);
        ChieriMotion("f_眉高い笑顔少しジト目", 0f, 2);

        yield return null;
        yield return null;
        //まず現在位置呼び出し
        GirlPosToIKTargetPosRot(); while (isGirlPosToIKTargetPosRotLoading) { yield return null; }


        //IKプレイヤー見る即
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);

        IKLookAtEyeTargetTrs.position = PlayerEyeTargetTrs.position;
        IKLookAtHeadTargetTrs.position = PlayerHeadTargetTrs.position;
        yield return null; yield return null;

        //IKプレイヤー見る値1に（スムーズにするため）
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);


        //IKBody傾け
        DOTweenToLAIKSBody(LAIKHeadS, 0.2f, 0);

        //上半身傾けに対応するために右手IK位置に固定 //もし不都合あったら、直接位置保存もしてあるのでそれを使う"_PosObj/0140AsiOyayubiZeme/IKRHand_010Hikidashi"
        IKRHandTargetTrs.position = Bip001_R_HandTrs.position;
        IKRHandTargetTrs.rotation = Bip001_R_HandTrs.rotation;
        DOTweenToIKEfPos(IKRHandEf, 1, 0);
        DOTweenToIKEfRot(IKRHandEf, 1, 0);

        //IK左手を下ろし位置に
        GameObject IKLHand_010Orosi
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/IKLHand_010Orosi") as GameObject;
        IKLHandTargetTrs.localPosition = IKLHand_010Orosi.transform.localPosition;
        IKLHandTargetTrs.localEulerAngles = IKLHand_010Orosi.transform.localEulerAngles;
        DOTweenToIKEfPos(IKLHandEf, 1, 0);
        DOTweenToIKEfRot(IKLHandEf, 1, 0);


        //右足踏みIK
        GameObject IKRFoot_010OsitukePosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/IKRFoot_010OsitukePosObj") as GameObject;

        IKRFootTargetTrs.localPosition = IKRFoot_010OsitukePosObj.transform.localPosition;
        IKRFootTargetTrs.localEulerAngles = IKRFoot_010OsitukePosObj.transform.localEulerAngles;
        DOTweenToIKEfPos(IKRFootEf, 1, 0);
        DOTweenToIKEfRot(IKRFootEf, 1, 0);

        //左足固定
        DOTweenToIKEfPos(IKLFootEf, 1, 0);

        //Chieriずらし
        DB.isChieriPosLock = false;
        GirlTrs.DOLocalMoveX(-0.07f, 0);


        //■足位置読み込み
        GameObject IKRFoot_020HikiPosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/IKRFoot_020HikiPosObj") as GameObject;
        GameObject IKRFoot_025HikiMorePosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/IKRFoot_025HikiMorePosObj") as GameObject;
        GameObject IKRFoot_030HikiAgePosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/IKRFoot_030HikiAgePosObj") as GameObject;
        GameObject IKRFoot_040HikiLittlePosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/IKRFoot_040HikiLittlePosObj") as GameObject;
        GameObject IKRFoot_050OsitukeMostPosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/IKRFoot_050OsitukeMostPosObj") as GameObject;
        GameObject IKRFoot_060HikiAgeMorePosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/IKRFoot_060HikiAgeMorePosObj") as GameObject;

        #endregion
        #region 智恵理右足先Rtoe4にサウンドオブジェ付与
        //WindnoiseSoundObj付与
        GameObject RFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRToe4Trs);
        DB.evMoveDelObjList.Add(RFootWindnoiseSoundObj);
        RFootWindnoiseSoundObj.name = nameof(RFootWindnoiseSoundObj);

        //つま先に
        GameObject tmpSoundObjPosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/SoundObj_PareRToe4PosObj") as GameObject;
        RFootWindnoiseSoundObj.transform.localPosition = tmpSoundObjPosObj.transform.localPosition;

        //設定
        WindnoiseSound tmpRFootWindnoiseSound = RFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpRFootWindnoiseSound.aSource.maxDistance = 11;
        tmpRFootWindnoiseSound.pitchMax = 0.4f;
        tmpRFootWindnoiseSound.pitchUpRateAdjustFloat = 14;
        tmpRFootWindnoiseSound.pitchDownRateAdjustFloat = 10;

        tmpRFootWindnoiseSound.aSource.volume = 0.35f;
        #endregion

        //プレイヤーのIKON（智恵理にペアレントするためか、智恵理のポーズ完了後でないとずれるのでここで）
        DOTweenToIKEfPos(PlayerIKLHandEf, 1, 0f);
        DOTweenToIKEfRot(PlayerIKLHandEf, 1, 0f);
        DOTweenToIKEfPos(PlayerIKRHandEf, 1, 0f);
        DOTweenToIKEfRot(PlayerIKRHandEf, 1, 0f);

        #region プレイヤー右手たたきTweener事前設定
        GameObject PlayerIKRHand020_PareRToe41_TatakiPosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/PlayerIKRHand020_PareRToe41_TatakiPosObj") as GameObject;

        Tweener playerRHandTatakiTweener =
            PlayerIKRHandTargetTrs.DOLocalMove(PlayerIKRHand020_PareRToe41_TatakiPosObj.transform.localPosition
            , 0.1f)
            .SetEase(Ease.OutQuad)
            .OnComplete(() =>
            {
                SEPlay(Other3DSEObj, "足音3_footsteps_shoe_grass_walk_05", PlayerIKRHandTargetTrs.gameObject, 0.5f);
                PlayerIKRHandTargetTrs.DOLocalMove(PlayerIKRHand010_PareRToe41PosObj.transform.localPosition
                    , 0.05f)
                    .SetEase(Ease.OutBounce);
            })
            .SetAutoKill(false);
        playerRHandTatakiTweener.Pause();
        #endregion

        #endregion

        //開幕
        FadeBlack(0.5f, 4f);

        #region 休憩～三回戦開始

        //足引き
        IKRFootTargetTrs.DOLocalMove(IKRFoot_030HikiAgePosObj.transform.localPosition, 3);
        IKRFootTargetTrs.DOLocalRotate(IKRFoot_030HikiAgePosObj.transform.localEulerAngles, 3);
        SEPlay(SocksSEObj, "nuno_rustling-of-clothes1");
        SEPlay(Other3DSEObj, "WOOD FLOOR CREAKING_00_01_ピッチ-6", GirlLFootTrs.gameObject, 1);


        ChieriMotion("RToe_引き親指下げ", 1, 13);
        Hukidashi("足指攻め070");//はい休憩～
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(2f, "笑顔01口眉_目閉じない", 0.2f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1);
        //プレイヤーのIK一旦OFF（ペアレントするために）
        DOTweenToIKEfPos(PlayerIKLHandEf, 0, 4f);
        DOTweenToIKEfRot(PlayerIKLHandEf, 0, 4f);
        DOTweenToIKEfPos(PlayerIKRHandEf, 0, 4f);
        DOTweenToIKEfRot(PlayerIKRHandEf, 0, 4f);
        yield return KeyOrWait(3);

        NovelSetVis("足指攻められ110");//伝えないと……！
        while (isNovelSetVisIng) { yield return null; }

        //足更に上げ
        IKRFootTargetTrs.DOLocalMove(IKRFoot_060HikiAgeMorePosObj.transform.localPosition, 3);
        IKRFootTargetTrs.DOLocalRotate(IKRFoot_060HikiAgeMorePosObj.transform.localEulerAngles, 3);

        SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発04_短", RFootWindnoiseSoundObj, 4, 0f);
        SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発05_短", RFootWindnoiseSoundObj, 4, 1f);
        SEPlay(Other3DSEObj, "WOOD FLOOR CREAKING_00_02_ピッチ-6", GirlLFootTrs.gameObject, 1);

        ChieriMotion("RToe_つま先ピクピク", 1, 13);
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.2f, 2);//時間差表情戻し
        Hukidashi("足指攻め080");//恐くなってきた？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        SEPlay(Other3DSEObj, "WOOD FLOOR CREAKING_00_05_ピッチ-6", GirlLFootTrs.gameObject, 1);

        ChieriMotion("f_眉高い笑顔少しジト目", 0.1f, 2);
        ChieriMotion("RToe_つま先くにゅ1（無意識系）", 1, 13);
        Hukidashi("足指攻め090");//降りると危ないんだよ？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //カメラ揺れ
        CameraAnchorTrs.DOShakePosition(0.5f, 0.06f);

        NovelSetVis("足指攻められ120");//ぶはぁっ！
        while (isNovelSetVisIng) { yield return null; }

        #region プレイヤーIK足指にペアレント
        //左手 人差し指に
        PlayerIKLHandTargetTrs.SetParent(GirlRToe31Trs);
        //右手 親指に
        PlayerIKRHandTargetTrs.SetParent(GirlRToe41Trs);

        yield return null;

        PlayerIKLHandTargetTrs.localPosition = PlayerIKLHand010_PareRToe31PosObj.transform.localPosition;
        PlayerIKLHandTargetTrs.localEulerAngles = PlayerIKLHand010_PareRToe31PosObj.transform.localEulerAngles;

        PlayerIKRHandTargetTrs.localPosition = PlayerIKRHand010_PareRToe41PosObj.transform.localPosition;
        PlayerIKRHandTargetTrs.localEulerAngles = PlayerIKRHand010_PareRToe41PosObj.transform.localEulerAngles;

        #endregion

        ChieriMotion("f_眉高い笑顔少しジト目", 0.1f, 2);

        //足少し顔見せ
        IKRFootTargetTrs.DOLocalMove(IKRFoot_040HikiLittlePosObj.transform.localPosition, 3);
        IKRFootTargetTrs.DOLocalRotate(IKRFoot_040HikiLittlePosObj.transform.localEulerAngles, 3);


        Hukidashi("足指攻め100");//元気？
        ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);


        ChieriMotion("RToe_つま先くにゅ1（無意識系）", 1, 13);
        yield return new WaitForSeconds(1);
        SEPlay(Other3DSEObj, "WOOD FLOOR CREAKING_00_03_ピッチ-6", GirlLFootTrs.gameObject);
        //プレイヤーのIKON（ペアレント位置調整してある）
        DOTweenToIKEfPos(PlayerIKLHandEf, 1, 2f);
        DOTweenToIKEfRot(PlayerIKLHandEf, 1, 2f);
        DOTweenToIKEfPos(PlayerIKRHandEf, 1, 2f);
        DOTweenToIKEfRot(PlayerIKRHandEf, 1, 2f);
        yield return KeyOrWait(3);


        NovelSetVis("足指攻められ130");//いやだ・・・もう・・・！
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("足指攻め110");//三回戦～
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.2f, 2);//時間差表情戻し

        //足押し付け位置
        IKRFootTargetTrs.DOLocalMove(IKRFoot_050OsitukeMostPosObj.transform.localPosition, 3);
        IKRFootTargetTrs.DOLocalRotate(IKRFoot_050OsitukeMostPosObj.transform.localEulerAngles, 3);
        ChieriMotion("RToe_つま先くにゅ1（無意識系）", 1, 13);


        //予告用たたき
        playerRHandTatakiTweener.Restart();
        yield return new WaitForSeconds(0.3f);
        playerRHandTatakiTweener.Restart();

        SEPlay(Other3DSEObj, "WOOD FLOOR CREAKING_00_01_ピッチ-6", GirlLFootTrs.gameObject);

        yield return new WaitForSeconds(2);

        //予告用たたき
        playerRHandTatakiTweener.Restart();
        yield return new WaitForSeconds(0.3f);
        playerRHandTatakiTweener.Restart();
        yield return new WaitForSeconds(0.4f);
        playerRHandTatakiTweener.Restart();
        yield return new WaitForSeconds(0.3f);
        playerRHandTatakiTweener.Restart();



        SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発08", RFootWindnoiseSoundObj, 4, 0f);
        Hukidashi("足指攻め120");//はいぎゅー
        FadeBlack(1f, 2);
        yield return new WaitForSeconds(1);
        SEPlay(Other3DSEObj, "WOOD FLOOR CREAKING_00_03_ピッチ-6", GirlLFootTrs.gameObject);

        SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発11", RFootWindnoiseSoundObj, 4, 0f);
        SEPlay(Other3DSEObj, "WOOD FLOOR CREAKING_00_05_ピッチ-6", GirlLFootTrs.gameObject, 1);
        NovelSetVis("足指攻められ140");//どうしてこんな目に

        yield return new WaitForSeconds(4);

        #region 暗幕中終了設定

        //Dummyハンド非表示
        isDummyHandVis = false;
        Dummy_Hand.SetActive(false);

        //倒れ解除
        isPlayerUniqueMotion = false;

        isNovelFadeTween = isNovelSetVisIng = false;
        #endregion
        yield return new WaitForSeconds(1);

        #endregion


        isFlowChartEventMove = true;
        EventMove("予告 転送都市1", true, true);

        yield break;
    }
    IEnumerator yokokuCity01()//予告 転送都市1
    {
        if (debugEventMoveFlag == true)
        {
        }
        EventReset();
        yield return new WaitForSeconds(0.1f);



        //■■■シーンロード用暗幕かかってること前提
        //とりあえずデバッグのため普通の暗幕かけ
        FadeBlack(1, 0);

        //サブタイトル
        if (DB.isEnglish)
        {
            SubTitleVis(true, "　　　　　Preview");
        }
        else
        {
            SubTitleVis(true, "　　　　　　予告");
        }
        yield return null;
        yield return null;

        FadeWhite(1, 3);
        yield return new WaitForSeconds(3);

        DB.isChieriPosLock = false;
        girlAnim.speed = doorAnim.speed = 0.3f;

        #region 暗幕設定

        //暗幕はずし（白幕になってるはず）
        FadeBlack(0, 0);

        //City_ALL読み込み
        GameObject tmpCity_ALL;
        if (GameObject.Find("City_ALL") != null)
        {
            tmpCity_ALL = GameObject.Find("City_ALL");
        }
        else//無ければ生成
        {
            tmpCity_ALL =
                Instantiate(Resources.Load("CIty_Fractured/City_All/City_ALL") as GameObject
                , GameObjectsTrs, false);
        }

        //プレイヤー大きさ
        nowPlayerLocalScale = DB.playerScale_City01;
        //プレイヤー位置
        GameObject Player01_DouroPosObj
            = Resources.Load("_PosObj/0510YokokuCity01Walk/Player01_DouroPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player01_DouroPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player01_DouroPosObj.transform.localEulerAngles;

        //カメラリセット、立ち
        CameraReset(Player01_DouroPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos
            , true
            , Vector3.zero//倒れのアンカーリセット
            , false
            , true);

        #region 智恵理

        //位置
        GameObject Chieri00_StartPosObj
            = Resources.Load("_PosObj/0510YokokuCity01Walk/Chieri00_StartPosObj") as GameObject;
        GirlTrs.localPosition = Chieri00_StartPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri00_StartPosObj.transform.localEulerAngles;

        #region SoundObj左足に付与
        //WindnoiseSoundObj付与
        GameObject LFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlLFootTrs);
        DB.evMoveDelObjList.Add(LFootWindnoiseSoundObj);
        LFootWindnoiseSoundObj.name = nameof(LFootWindnoiseSoundObj);
        LFootWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpLFootWindnoiseSound = LFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpLFootWindnoiseSound.aSource.maxDistance = 180;
        tmpLFootWindnoiseSound.pitchMax = 1f;
        tmpLFootWindnoiseSound.pitchUpRateAdjustFloat = 2;
        tmpLFootWindnoiseSound.pitchDownRateAdjustFloat = 100;

        tmpLFootWindnoiseSound.aSource.volume = 0f;
        #endregion
        #region SoundObj右足に付与
        //WindnoiseSoundObj付与
        GameObject RFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRFootTrs);
        DB.evMoveDelObjList.Add(RFootWindnoiseSoundObj);
        RFootWindnoiseSoundObj.name = nameof(RFootWindnoiseSoundObj);
        RFootWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpRFootWindnoiseSound = RFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpRFootWindnoiseSound.aSource.maxDistance = 180;
        tmpRFootWindnoiseSound.pitchMax = 1f;
        tmpRFootWindnoiseSound.pitchUpRateAdjustFloat = 2;
        tmpRFootWindnoiseSound.pitchDownRateAdjustFloat = 100;

        tmpRFootWindnoiseSound.aSource.volume = 0f;
        #endregion

        #endregion



        GirlTrs.GetComponent<ChieriFootStepSpawn>().isFootStepObj = true;
        GirlTrs.GetComponent<ChieriFootStepSpawn>().isFootStepDecal = true;

        #region 小物消し
        GrasstableTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);
        Drill_chieriTrs.gameObject.SetActive(false);
        KeshigomuObj.SetActive(false);
        isHomeworkSystem = false;
        CarpetTrs.gameObject.SetActive(false);
        SchoolBagTrs.gameObject.SetActive(false);
        SharpenObj.SetActive(false);
        #endregion


        ////もし都市でかくれおに移動をするならシステム起動後に0.6に
        //KO_CharacterController.center = new Vector3(0, 0.6f, 0);//Geo00（都市床）に置く時は0.6fに
        #endregion

        #region FogVolume読み込み
        ////FogVolumeが自動で当てはめてエラー起こし続けるのでONOFF（1フレ待たないとダメだった）
        //yield return null;
        //VRFadeCameraTrs.GetComponent<FogVolumeRenderer>().enabled = false;
        ////yield return null;
        ////VRFadeCameraTrs.GetComponent<FogVolumeRenderer>().enabled = true;

        ////↑をやめ、CitySky（FogVolume系）を単独でヒエラルキーに常設　シーンにきたらONOFFで
        //GameObjectsTrs.Find("CitySKy").gameObject.SetActive(true);
        ////TODO オフ処理を、イベントムーブに入れる

        //板化するので更に↑をやめて、Fogのみのシーンを後から読み込みに

        UnityEngine.SceneManagement.SceneManager.LoadSceneAsync("FogVolumeSetting00", UnityEngine.SceneManagement.LoadSceneMode.Additive);
        //yield return new WaitForSeconds(1);

        //FogVolume出てくるまで待機
        while (GameObject.Find("CitySKy/Fog Volume Data") == null)
        {
            yield return null;
        }

        GameObject.Find("CitySKy/Fog Volume Data").GetComponent<FogVolumeData>()
            .GameCamera = VRCamera;

        #endregion

        StartCoroutine(GirlAnimReadSystem());
        //足Volume
        tmpRFootWindnoiseSound.aSource.DOFade(0.4f, 1);
        tmpLFootWindnoiseSound.aSource.DOFade(0.4f, 1);


        #region 03

        #region Crows（鳥演出）タイムライン取り出して再生
        GameObject Crows
            = Instantiate(Resources.Load("CIty_Fractured/City_All/Timeline/Crows") as GameObject
            , tmpCity_ALL.transform
            , false);
        PlayableDirector crowPD
            = Crows.transform.Find("Hieralchy_CrowsTimeline").GetComponent<PlayableDirector>();

        crowPD.Play();

        GameObject SECrow_ReObj = Crows.transform.Find("Crow_Re").gameObject;


        //while (true)
        //{
        //    Debug.Log(crowPD.time);
        //    yield return null;
        //}

        #endregion

        #region モブタイムライン取り出して再生 トラック取得
        GameObject Mob_Character
            = Instantiate(Resources.Load("CIty_Fractured/City_All/Timeline/Mob_Character") as GameObject
            , tmpCity_ALL.transform
            , false);

        //サラリーマン00
        PlayableDirector Salaryman00PD
            = Mob_Character.transform.Find("Hieralchy_Salaryman00_MobCharacterTimeline").GetComponent<PlayableDirector>();
        //女00
        PlayableDirector Woman00PD
            = Mob_Character.transform.Find("Hieralchy_Woman00_MobCharacterTimeline").GetComponent<PlayableDirector>();

        Salaryman00PD.Play();
        Woman00PD.Play();

        //トラック読み込み
        var salaryman00Track
            = ((TimelineAsset)Salaryman00PD.playableAsset).GetOutputTracks()
            .First(c => c.name.Equals("Loop Pause Track")) as LoopPauseTrack;
        var woman00Track
            = ((TimelineAsset)Woman00PD.playableAsset).GetOutputTracks()
            .First(c => c.name.Equals("Loop Pause Track")) as LoopPauseTrack;

        salaryman00Track.nowLoopClipInt =
        woman00Track.nowLoopClipInt = 0;

        //while (true)
        //{
        //    Debug.Log(crowPD.time);
        //    yield return null;
        //}

        #endregion

        #region SE音設定
        //時計エアコン環境音
        KankyouBGMVolumer(0.5f, 0.5f, aircon.audioSource);
        KankyouBGMVolumer(0.5f, 0.5f, clockSE.audioSource);

        //街環境音　犬　事故　悲鳴
        GameObject SEObjs_YokokuCity01
            = Instantiate(Resources.Load("_PosObj/0510YokokuCity01Walk/SEObjs_YokokuCity01") as GameObject
            , GameObjectsTrs
            , false);

        AudioSource inu00as
            = SEObjs_YokokuCity01.transform.Find("Inu3DSEObj").GetComponent<AudioSource>();
        AudioSource himei00as
            = SEObjs_YokokuCity01.transform.Find("Himei003DSEObj").GetComponent<AudioSource>();

        SEPlay(Other3DSEObj, "nc105293", SECrow_ReObj, 0.4f, 5);

        #endregion


        #region 智恵理 目IKを頭にペアレント（ずっと下見てる感じに）
        GameObject IKLookAtPareHead00_EyeTargetPosObj
            = Resources.Load("_PosObj/0510YokokuCity01Walk/IKLookAtPareHead00_EyeTargetPosObj") as GameObject;

        IKLookAtEyeTargetTrs.SetParent(Bip001HeadTrs, false);
        IKLookAtEyeTargetTrs.localPosition = IKLookAtPareHead00_EyeTargetPosObj.transform.localPosition;

        //LAIKEye.solver.clampWeightEyes = 0.924f;
        //FollowDOMove(IKLookAtEyeTargetTrs, IKLookAt03_EyeTargetPosObj.transform.position, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0);
        #endregion

        //開幕
        FadeBlack(0, 4f);
        FadeWhite(0, 4f);

        ChieriMotion("出現見渡し", 0f, 0);
        ChieriMotion("f_本当に小さいね～", 0.1f, 2);
        Hukidashi("Y0200");//わぁ～
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        woman00Track.nowLoopClipInt++;
        Hukidashi("Y0203");//1/100の町って
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("f_笑顔口眉ジト目40", 0.1f, 2);
        TereHohoAlphaChange(0.5f);
        TereHoho();
        Hukidashi("Y0207");//かわいい・・
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        while (nowGirlAnimClipName != "出現見渡し") { yield return null; }

        while (girlAnimNomTime <= 0.3f) { yield return null; }

        NovelSetVis("Y200");//こんなことが可能とは

        while (girlAnimNomTime <= 1) { yield return null; }

        while (isNovelSetVisIng) { yield return null; }

        TereHoho(false, 4);
        ChieriMotion("腰に手を当てる", 0f, 0);
        while (nowGirlAnimClipName != "腰に手を当てる") { yield return null; }
        while (girlAnimNomTime <= 0.4f) { yield return null; }

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1f, "f_眉高い笑顔少しジト目", 0.05f, 2);//時間差表情戻し

        Hukidashi("Y0210");//ふふっ・・
        salaryman00Track.nowLoopClipInt++;
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("Y0215");//伝わってくるよ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        while (girlAnimNomTime <= 1) { yield return null; }

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        Hukidashi("Y0220");//もっと恐く
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        Hukidashi("Y0230");//早く逃げないと
        salaryman00Track.nowLoopClipInt++;
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("f_笑顔口眉ジト目40", 0.1f, 2);
        yield return new WaitForSeconds(1);
        Hukidashi("Y0240");//逃げる場所なんて無いけどね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("一歩目足上げ", 0f, 0);
        while (nowGirlAnimClipName != "一歩目足上げ") { yield return null; }
        while (girlAnimNomTime <= 1f) { yield return null; }

        Hukidashi("Y0250");//記念すべき一歩
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        Hukidashi("Y0260");//いくよ～
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("一歩目足下ろし", 0f, 0);
        while (nowGirlAnimClipName != "一歩目足下ろし") { yield return null; }
        while (girlAnimNomTime <= 1) { yield return null; }


        woman00Track.isForceLoopEnd = true;
        yield return null;
        woman00Track.nowLoopClipInt++;

        inu00as.Stop();

        #region IK 家見る
        //ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        //GameObject IKLookAt03_HeadTargetPosObj
        //    = Resources.Load("_PosObj/0510YokokuCity01Walk/IKLookAt03_HeadTargetPosObj") as GameObject;
        //FollowDOMove(IKLookAtHeadTargetTrs, IKLookAt03_HeadTargetPosObj.transform.position);
        //DOTweenToLAIKSHead(LAIKHeadS, 0.5f, 2);
        #endregion

        yield return new WaitForSeconds(2);

        TereHoho();

        yield return new WaitForSeconds(2);

        //ChieriMotion("f_笑顔眉下がり", 0.1f, 2);
        //ChieriMotionDelay(2f, "f_あはは目開き", 0.1f, 2);//時間差表情戻し

        ChieriMotion("f_笑顔口眉ジト目40", 0.1f, 2);
        Hukidashi("Y0270");//一踏みで
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("踏み後足上げ", 0f, 0);
        while (nowGirlAnimClipName != "踏み後足上げ") { yield return null; }
        while (girlAnimNomTime <= 1) { yield return null; }

        Hukidashi("Y0275");//お菓子の箱
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        TereHoho(false, 4);
        ChieriMotion("踏み後足降ろし", 0f, 0);
        while (nowGirlAnimClipName != "踏み後足降ろし") { yield return null; }
        while (girlAnimNomTime <= 1) { yield return null; }

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1f, "f_眉高い笑顔少しジト目", 0.05f, 2);//時間差表情戻し
        Hukidashi("Y0280");//家になんか隠れても無駄なんだからね
        yield return new WaitForSeconds(1);

        //肩腕なし上半身マスクできょろきょろ（ArmOffSpineMask）
        ChieriMotion("出現見渡し", 1f, 14);

        yield return KeyOrWait(3);


        NovelSetVis("Y210");//うそだろ　大勢の人　許されるわけ
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);

        ChieriMotion("_noData", 1f, 9);


        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        Hukidashi("Y0290");//ふふっ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("f_眉高い笑顔少しジト目", 0.2f, 2);
        Hukidashi("Y0295");//お散歩
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        ChieriMotion("歩き出し", 0f, 0);
        while (nowGirlAnimClipName != "歩き出し") { yield return null; }
        while (girlAnimNomTime <= 0.02f) { yield return null; }


        while (girlAnimNomTime <= 0.3f) { yield return null; }
        DelAll_Hukidashi();
        himei00as.Play();
        woman00Track.nowLoopClipInt++;


        while (girlAnimNomTime <= 0.8f) { yield return null; }

        FadeBlack(1, 2f);
        yield return new WaitForSeconds(2f);


        yield return new WaitForSeconds(3f);

        isFlowChartEventMove = true;
        EventMove("タイトル", true, true);

        yield return KeyOrWait(3);
        FadeBlack(0, 0.5f);

        #region 終了暗幕設定
        //位置 もとに
        GirlTrs.localPosition = GirlTrs.localEulerAngles = Vector3.zero;
        #endregion

        #endregion

        #region //モブ有り？
        //Hukidashi("Y0010");//わ～こんなに小さいの？
        //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ////開幕
        //FadeBlack(0, 4f);
        //FadeWhite(0, 4f);

        //ChieriMotion("出現見渡し", 0f, 0);

        //while (nowGirlAnimClipName != "出現見渡し") { yield return null; }

        //while (girlAnimNomTime <= 0.3f) { yield return null; }

        //ChieriMotion("笑顔01口眉", 0.1f, 2);
        //ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        //Hukidashi("Y0020");//夢みたい　or　逃げてる
        //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //ChieriMotion("f_眉高い笑顔少しジト目", 0.1f, 2);
        //Hukidashi("Y0030");//もったいないかな　or　私の部屋なのに
        //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //while (girlAnimNomTime <= 1) { yield return null; }


        //ChieriMotion("腰に手を当てる", 0f, 0);
        //while (nowGirlAnimClipName != "腰に手を当てる") { yield return null; }
        //while (girlAnimNomTime <= 0.4f) { yield return null; }

        //ChieriMotion("笑顔01口眉", 0.1f, 2);
        //ChieriMotionDelay(2f, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        //Hukidashi("Y0040");//お散歩
        //yield return new WaitForSeconds(1);
        //yield return KeyOrWait(3);

        //while (girlAnimNomTime <= 1) { yield return null; }

        //#region IK前の方見る
        //ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        //GameObject IKLookAt01_EyeHeadTargetPosObj
        //    = Resources.Load("_PosObj/0510YokokuCity01Walk/IKLookAt01_EyeHeadTargetPosObj") as GameObject;
        //IKLookAtEyeTargetTrs.localPosition = IKLookAt01_EyeHeadTargetPosObj.transform.localPosition;
        //IKLookAtHeadTargetTrs.localPosition = IKLookAt01_EyeHeadTargetPosObj.transform.localPosition;
        //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 2);
        //#endregion

        //ChieriMotion("一歩目足上げ", 0f, 0);
        //while (nowGirlAnimClipName != "一歩目足上げ") { yield return null; }
        //while (girlAnimNomTime <= 0.7f) { yield return null; }


        //ChieriMotion("一歩目足下ろし", 0.5f, 0);
        //while (nowGirlAnimClipName != "一歩目足下ろし") { yield return null; }
        //while (girlAnimNomTime <= 1) { yield return null; }

        //ChieriMotion("ん？", 0.1f, 2);

        //ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        //FollowDOMove(IKLookAtEyeTargetTrs, GirlLFootTrs);
        //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        //FollowDOMove(IKLookAtHeadTargetTrs, GirlLFootTrs);
        //DOTweenToLAIKSHead(LAIKHeadS, 0.5f, 2);


        //yield return new WaitForSeconds(4);

        //ChieriMotion("f_笑顔眉下がり", 0.1f, 2);
        //ChieriMotionDelay(2f, "f_あはは目開き", 0.1f, 2);//時間差表情戻し
        //Hukidashi("Y0050");//あ早速踏んじゃった
        //yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        //ChieriMotion("踏み後足上げ", 0f, 0);
        //while (nowGirlAnimClipName != "踏み後足上げ") { yield return null; }
        //while (girlAnimNomTime <= 1) { yield return null; }

        //yield return new WaitForSeconds(1);
        //ChieriMotion("f_眉高い笑顔少しジト目", 0.2f, 2);
        //yield return new WaitForSeconds(1);

        //ChieriMotion("歩き出し", 0f, 0);
        //while (nowGirlAnimClipName != "歩き出し") { yield return null; }
        //while (girlAnimNomTime <= 0.02f) { yield return null; }

        ////ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        //Hukidashi("Y0060");//後で靴下換えようっと

        //while (girlAnimNomTime <= 0.4f) { yield return null; }
        //DelAll_Hukidashi();

        //while (girlAnimNomTime <= 0.8f) { yield return null; }

        //FadeBlack(1, 2f);
        //yield return new WaitForSeconds(2f);


        //yield return new WaitForSeconds(3f);

        //isFlowChartEventMove = true;
        //EventMove("タイトル",true,true);

        //yield return KeyOrWait(3);
        //FadeBlack(0, 0.5f);

        //#region 終了暗幕設定
        ////位置 もとに
        //GirlTrs.localPosition = GirlTrs.localEulerAngles = Vector3.zero;
        //#endregion

        #endregion

        #region //モブなし？
        //Hukidashi("Y0010");//わ～こんなに小さいの？
        //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //ChieriMotion("出現見渡し", 0f, 0);

        //while (nowGirlAnimClipName != "出現見渡し") { yield return null; }

        //while (girlAnimNomTime <= 0.3f) { yield return null; }

        //ChieriMotion("笑顔01口眉", 0.1f, 2);
        //ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        //Hukidashi("Y0120");//夢みたい　or　逃げてる
        //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //ChieriMotion("f_眉高い笑顔少しジト目", 0.1f, 2);
        //Hukidashi("Y0130");//もったいないかな　or　私の部屋なのに
        //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //while (girlAnimNomTime <= 1) { yield return null; }

        //#region IKプレイヤー見る
        //ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
        //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 2);
        //#endregion

        //ChieriMotion("腰に手を当てる", 0f, 0);
        //while (nowGirlAnimClipName != "腰に手を当てる") { yield return null; }
        //while (girlAnimNomTime <= 0.4f) { yield return null; }

        //ChieriMotion("ん？", 0.1f, 2);
        //Hukidashi("Y0140");//お散歩 or 家には入らないほうがいいよ
        //yield return new WaitForSeconds(1);
        //yield return KeyOrWait(3);

        //while (girlAnimNomTime <= 1) { yield return null; }

        //ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        //FollowDOMove(IKLookAtEyeTargetTrs, GirlLFootTrs);
        //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        //FollowDOMove(IKLookAtHeadTargetTrs, GirlLFootTrs, 2);
        //DOTweenToLAIKSHead(LAIKHeadS, 0.5f, 2);

        //ChieriMotion("一歩目足上げ", 0f, 0);
        //while (nowGirlAnimClipName != "一歩目足上げ") { yield return null; }
        //while (girlAnimNomTime <= 1f) { yield return null; }

        //ChieriMotion("f_眉高い笑顔少しジト目", 0.2f, 2);
        //yield return new WaitForSeconds(1);

        //ChieriMotion("一歩目足下ろし", 0f, 0);
        //while (nowGirlAnimClipName != "一歩目足下ろし") { yield return null; }
        //while (girlAnimNomTime <= 1) { yield return null; }

        //yield return new WaitForSeconds(2);

        //ChieriMotion("笑顔01口眉", 0.1f, 2);
        //ChieriMotionDelay(2f, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        //Hukidashi("Y0150");//あ早速踏んじゃった　or　ほらぺっちゃんこ

        //yield return new WaitForSeconds(1);
        //#region IKプレイヤー見る
        //ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 2);
        //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 2);
        //#endregion
        //yield return KeyOrWait(3);


        //ChieriMotion("踏み後足上げ", 0f, 0);
        //while (nowGirlAnimClipName != "踏み後足上げ") { yield return null; }
        //while (girlAnimNomTime <= 1f) { yield return null; }

        //ChieriMotion("歩き出し", 0f, 0);
        //while (nowGirlAnimClipName != "歩き出し") { yield return null; }
        //while (girlAnimNomTime <= 0.02f) { yield return null; }

        //ChieriMotion("f_眉高い笑顔少しジト目", 0.1f, 2);
        ////ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        ////Hukidashi("Y0160");//後で靴下換えようっと or おいぬいちゃう
        ////yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //while (girlAnimNomTime <= 0.8f) { yield return null; }

        //FadeBlack(1, 2f);
        //yield return new WaitForSeconds(2f);


        //yield return KeyOrWait(3);
        //FadeBlack(0, 0.5f);

        //#region 終了暗幕設定
        ////位置 もとに
        //GirlTrs.localPosition = GirlTrs.localEulerAngles = Vector3.zero;
        //#endregion

        #endregion

        while (true)
        {
            if (Input.GetKeyDown(KeyCode.F))
            {


            }

            yield return null;
        }

        #region //以前のかくれんぼの
        ////■■■■■■■■■■■■■暗幕前提
        ////智恵理0位置ロック解除
        //DB.isChieriPosLock = false; ChieriMotion("立ちスマホ取り出し", 0f, 0);
        //ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);


        ////予告用トランスフォーム情報取得
        //Transform YokokuChieriPossTrs = GameObject.Find("YokokuChieriPoss").transform,
        //          YokokuCameraPossTrs = GameObject.Find("YokokuCameraPoss").transform;
        //List<Transform> YokokuChieriTrsList = new List<Transform>(),
        //                YokokuCameraTrsList = new List<Transform>();
        //foreach (Transform k in YokokuChieriPossTrs)
        //{ YokokuChieriTrsList.Add(k.transform); }
        //foreach (Transform k in YokokuCameraPossTrs)
        //{ YokokuCameraTrsList.Add(k.transform); }



        ////予告01位置に
        //GirlTrs.localPosition = YokokuChieriTrsList[2].transform.localPosition;
        //GirlTrs.localEulerAngles = YokokuChieriTrsList[2].transform.localEulerAngles;
        //CameraObjectsTrs.localPosition = YokokuCameraTrsList[2].localPosition;
        //CameraObjectsTrs.localEulerAngles = YokokuCameraTrsList[2].localEulerAngles;
        //nowPlayerLocalScale = YokokuCameraTrsList[2].localScale;

        ////スマホオン
        //ChieriSumahoObj.SetActive(true);
        ////スマホ見
        //FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform);
        //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        //FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform);
        //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);


        ////小物消し
        //if (GameObject.Find("Speaker") != null)
        //{ GameObject.Find("Speaker").SetActive(false); }
        //if (GameObject.Find("Combined Meshes") != null)
        //{ GameObject.Find("Combined Meshes").SetActive(false); }

        ////HomeworkTrs.gameObject.SetActive(false);
        //Drill_chieriTrs.gameObject.SetActive(false);

        ////fog
        //RenderSettings.fogDensity = 0.001f;


        ////右下テキスト透明
        //RightUnderText.color = new Color(1, 1, 1, 0);
        //yield return null;
        ////右下テキスト入れ替え 予告
        //RightUnderText.text = serihuDict["UI1000"];
        ////表示
        //RightUnderText.color = new Color(1, 1, 1, 1);



        //yield return new WaitForSeconds(2);

        ////サブタイトル
        //SubTitleVis(true, serihuDict["S0030"]);

        //yield return new WaitForSeconds(2);

        ////「えーと今の大きさは」
        //Hukidashi("Y0110");
        //yield return new WaitForSeconds(2);

        //girlAnim.speed = 0.35f;

        ////■■■■■■■■■■■■■■■フェードイン開幕
        //FadeWhite(0, 1, Ease.InOutQuad);
        //FadeBlack(0, 1, Ease.InOutQuad);
        //yield return new WaitForSeconds(5);

        //SubTitleVis(false, 2);

        ////「5.1cm」
        //Hukidashi("Y0120");
        //ChieriMotion("立ちスマホしまい", 0.4f, 0);

        ////目だけに
        //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        //DOTweenToLAIKSHead(LAIKHeadS, 0, 1);
        //yield return new WaitForSeconds(3);

        //Destroy(subTitleTextObj);

        ////スマホオフ
        //ChieriSumahoObj.SetActive(false);
        //yield return new WaitForSeconds(3);

        ////「うーん・・」
        //Hukidashi("Y0130");
        //ChieriMotion("監視向き変更開始", 0.4f, 0);
        //yield return new WaitForSeconds(5);

        ////「あ、じゃあベッドの足裏？」
        //Hukidashi("Y0140");
        //ChieriMotion("片膝立ち宿題促し開始", 0.4f, 0);
        ////アニメスピードだんだん速く
        //DOTween.To(() => girlAnim.speed, (x) => girlAnim.speed = x,
        //    0.5f, 3f);
        ////■暗転
        //FadeBlack(1, 4.5f, Ease.InOutQuad);
        //yield return new WaitForSeconds(1f);
        //SEPlay("bosu23_fire02__goro03_胸山潰し2000倍_長く");
        //yield return new WaitForSeconds(1.5f);


        //yield return null;



        //yield return new WaitForSeconds(2);
        //DelAll_Hukidashi();
        //yield return new WaitForSeconds(3);


        //EventMove("予告 行ってきます");
        #endregion

        yield break;
    }

    //　　　　　Ver0.5以降
    #region ■探索システム

    #region ■■変数
    [HeaderAttribute("・探索システム")]
    bool //全終了用Bool
        isTansakuSystem;

    RaycastHit
        TansakuSeeRayHit;

    GameObject //アウトライン処理用
        TansakuNowSeeObj = null;

    #endregion //変数
    //■メインシステムコルーチン
    IEnumerator TansakuSystemLoad()
    {
        #region 初期化
        //初期化・終了処理用bool判定true さらにそれを利用して重複阻止
        if (isTansakuSystem == true) { yield break; }
        isTansakuSystem = true;

        //ポインターシステム起動してなければ起動
        if (isSeePointCursorSystem == false)
        { StartCoroutine(SeePointCursorSystemIEnum()); }

        //アウトライン処理用 ひとまずnull
        TansakuNowSeeObj = null;

        //■探索レイヤーマスク作成（ビット演算で指定は複雑なので名前で指定）
        //探索オブジェと被り時に レイヤー変更でスルーできるように2種
        LayerMask seeRayTansakuLayerMask =
            (1 << LayerMask.NameToLayer("seeRayBlock")) +
            (1 << LayerMask.NameToLayer("seeRayKakurePos")) +
            (1 << LayerMask.NameToLayer("TansakuOnly")) +
            (1 << LayerMask.NameToLayer("SeeGirlIgnoreCollider"));


        #endregion 初期化
        Debug.Log("探索システム初期化");

        #region ループ
        while (isTansakuSystem == true)
        {
            #region ■Rayでの処理
            if (Physics.Raycast(playerSeeRay, out TansakuSeeRayHit, Mathf.Infinity, seeRayTansakuLayerMask))
            {
                //タグ判定して
                if (TansakuSeeRayHit.collider.tag == "TansakuSeeCollOnObj")
                {
                    //決定離したらメソッドにObj送信
                    if (isKetteiDown == true)
                    { TansakuEnter(TansakuSeeRayHit.collider.transform.parent.parent.gameObject, RayOrColl.SeeRay); }
                }

                #region アウトライン処理
                //現在探索イベント実行していないなら処理
                if (isTansakuEnter == false)
                {
                    //探索オブジェかどうか
                    if (TansakuSeeRayHit.collider.tag == "TansakuSeeCollOnObj")
                    {
                        //別のオブジェかどうか
                        if (TansakuNowSeeObj != TansakuSeeRayHit.collider.transform.parent.parent.Find("TansakuOutlineMesh").gameObject)
                        {
                            //前のオフ
                            if (TansakuNowSeeObj != null) { TansakuNowSeeObj.SetActive(false); }
                            //更新して（コリダーの親の親（オブジェ本体）の子にあるアウトライン用オブジェ）
                            TansakuNowSeeObj = TansakuSeeRayHit.collider.transform.parent.parent.Find("TansakuOutlineMesh").gameObject;
                            //ON
                            TansakuNowSeeObj.SetActive(true);
                        }
                    }
                    //探索オブジェじゃなくてもオフにし、nullにする（次同じのを見てもONになるように）
                    else
                    { if (TansakuNowSeeObj != null) { TansakuNowSeeObj.SetActive(false); TansakuNowSeeObj = null; } }
                }

                #endregion

            }

            else//RayがSeeRayBlockに当たってない場合（あたらないことはないはずだけど一応）
            {
                ////ポインタ消し
                //if (TansakuSeePointTrs.gameObject.activeSelf != false) { TansakuSeePointTrs.gameObject.SetActive(false); }
                //アウトライン消し
                if (isTansakuEnter == false && TansakuNowSeeObj != null)
                { TansakuNowSeeObj.SetActive(false); TansakuNowSeeObj = null; }
            }
            #endregion

            yield return null;
        }

        #endregion

        #region 終了処理

        //終了処理

        //アウトライン消し (見ながらオフにした時用)
        if (TansakuNowSeeObj != null)
        { TansakuNowSeeObj.SetActive(false); TansakuNowSeeObj = null; }

        //他にポインターシステム使用するものが起動してなければ終了させる
        SeePointSystemOff();


        #endregion
        Debug.Log("探索システム終了処理完了");
    }

    #endregion //探索システム
    #region ■探索用イベント実行処理
    public bool
        isTansakuEnter = false,//探索実行中判定
        isTansakuLock = false;//なにかしら探索実行できないようにしておきたい時用
    public enum //イベント発生元判断用enum（視線でのチェックか、コリダー判定か）
        RayOrColl
    { SeeRay, Enter, Exit, HwS };


    public void TansakuEnter(GameObject enterObj, RayOrColl rayOrColl)//実行用。重複キャンセル
    {
        if (isTansakuEnter || isTansakuLock) { return; }//実行中 or ロック中ならキャンセル
        isTansakuEnter = true;

        StartCoroutine(TansakuEnterCor(enterObj, rayOrColl));
    }
    IEnumerator TansakuEnterCor(GameObject enterObj, RayOrColl rayOrColl)//↑を経て終了待機、終了処理用
    {
        //●探索イベント一個作るのに必要な工程
        //・オブジェクトそのもの
        //　・そのオブジェクトの段階Enumフラグ DB（複数イベントがある場合）
        //　・T_オブジェクト名のIEnumerator
        //　・オブジェクトにタグ、アウトラインなど
        //・移動ポイント
        //　・移動ポイント存在のboolフラグ DB（保存する必要ある場合）
        //　・範囲内範囲外のコリダーオブジェ
        //　　・それのEnumフラグ DB（複数イベントある場合）

        #region //開始デバッグログ
        if (rayOrColl == RayOrColl.Enter)
        {
            Debug.Log(enterObj.name + "Enter探索かいし");
        }
        else if (rayOrColl == RayOrColl.Exit)
        {
            Debug.Log(enterObj.name + "Exit探索かいし");
        }
        else if (rayOrColl == RayOrColl.SeeRay)
        {
            Debug.Log(enterObj.name + "SeeRay探索かいし");
        }
        #endregion

        Coroutine tmpCor = null;
        #region Obj名からイベントコルーチン実行して終了するまで待機
        //SeeRay系の場合
        if (rayOrColl == RayOrColl.SeeRay)
        {
            //探索メソッド名リストにあれば、実行して終了するまで待機
            if (DB.TansakuMethodNameList.Contains("T_" + enterObj.name))
            {
                SEPlay(UISEObj, "UI_po", 0.4f);//SeeRayだけ音
                yield return null;//文字スキップしない用
                yield return tmpCor = StartCoroutine("T_" + enterObj.name);
            }
            else
            { Debug.Log("T_" + enterObj.name + "メソッドは無し"); }
        }
        else if (rayOrColl == RayOrColl.Enter)
        {
            if (DB.TansakuMethodNameList.Contains("T_" + enterObj.name + "Enter"))
            { yield return tmpCor = StartCoroutine("T_" + enterObj.name + "Enter"); }
            //else
            //{ Debug.Log("T_" + enterObj.name + "Enterメソッドは無し");  }
        }
        else if (rayOrColl == RayOrColl.Exit)
        {
            if (DB.TansakuMethodNameList.Contains("T_" + enterObj.name + "Exit"))
            { yield return tmpCor = StartCoroutine("T_" + enterObj.name + "Exit"); }
            //else
            //{ Debug.Log("T_" + enterObj.name + "Exitメソッドは無し");  }
        }
        else if (rayOrColl == RayOrColl.HwS)
        {
            if (DB.TansakuMethodNameList.Contains("T_" + enterObj.name + "HwS"))
            { yield return tmpCor = StartCoroutine("T_" + enterObj.name + "HwS"); }
            //else
            //{ Debug.Log("T_" + enterObj.name + "HwSメソッドは無し");  }
        }
        #endregion

        //イベントがあったのなら、終了後ちょっと待つ（すぐ次のイベントクリックできてしまうので）
        if (tmpCor != null) { yield return new WaitForSeconds(0.5f); }

        //終了処理
        isTansakuEnter = false;

        #region //終了デバッグログ
        //if (enterObj != null)
        //{
        //    if (rayOrColl == RayOrColl.Enter) { Debug.Log(enterObj.name + "Enter探索終了"); }
        //    else if (rayOrColl == RayOrColl.Exit) { Debug.Log(enterObj.name + "Exit探索終了"); }
        //    else if (rayOrColl == RayOrColl.SeeRay) { Debug.Log(enterObj.name + "SeeRay探索終了"); }
        //}
        //else
        //{
        //    if (rayOrColl == RayOrColl.Enter) { Debug.Log("enterObjは消滅しているけど" + "Enter探索終了"); }
        //    else if (rayOrColl == RayOrColl.Exit) { Debug.Log("enterObjは消滅しているけど" + "Exit探索終了"); }
        //    else if (rayOrColl == RayOrColl.SeeRay) { Debug.Log("enterObjは消滅しているけど" + "SeeRay探索終了"); }
        //}
        #endregion
    }

    #endregion
    #region ■■それぞれオブジェクト別イベント群

    //■SeeRay系
    IEnumerator T_StandLight()
    {
        #region ■初回(ライト前にいない場合)
        if (EnumStandlight == enumStandlight.初回
            && EnumStandLightMae == enumStandLightMae.範囲外)
        {
            NovelSetVis("T_Standlight_初回");//近づいてみようか？
            while (isNovelSetVisIng) { yield return null; }

            KO_NewPosPointObjVis
                (KO_KakurePosObjsList[1].transform.Find("StandLightMae02Sphere").gameObject);
        }
        #endregion
        #region ■スイッチ前
        else if (EnumStandlight == enumStandlight.初回
            && EnumStandLightMae == enumStandLightMae.範囲内)
        {
            KO_isMovePosLock = true;//移動止め
            NovelSetVis("T_Standlight_スイッチ付けられる位置");//つけようとする
            while (novelCurrentPageInt < 13) { yield return null; }
            CameraAnchorTrs.DOShakePosition(0.5f, 0.1f);

            while (isNovelSetVisIng) { yield return null; }

            EnumStandlight = enumStandlight.電源に気づく;

            KO_isMovePosLock = false;//移動止め解除
        }
        #endregion
        #region ■電源に気づく
        else if (EnumStandlight == enumStandlight.電源に気づく)
        {
            #region 電気ケーブルに気づく
            NovelSetVis("T_Standlight_電源に気づく");//気づく
            while (isNovelSetVisIng) { yield return null; }


            //New移動ポイント拡大縮小演出
            KO_NewPosPointObjVis
                (KO_KakurePosObjsList[1].transform.Find("MadoDansaMae03Sphere").gameObject);

            //既にコード自体に気づいてるならそのまま
            if (EnumCord == enumCord.気づいてる見つけてる) { }
            else { EnumCord = enumCord.気づいてから見つける; }


            #endregion

            #region 探索対象から外してアウトラインも消す
            foreach (GameObject tmpObj in TansakuObjList)
            {
                //該当していたらOFFに
                if (tmpObj.name == "StandLight")
                {
                    foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                    { CollObjs.tag = "TansakuSeeCollOffObj"; }
                    //アウトライン消し
                    tmpObj.transform.Find("TansakuOutlineMesh").gameObject.SetActive(false);
                }
            }
            #endregion
        }
        #endregion
    }
    bool isBattlePonyFarCheck = false;
    IEnumerator T_BattlePony()
    {
        #region 初回 遠くから
        if (EnumBattlePony == enumBattlePony.初回
            && EnumMadoDansaMae == enumMadoDansaMae.範囲外)
        {
            NovelSetVis("T_BattlePony_010");//近づいてみよう
            while (isNovelSetVisIng) { yield return null; }
            isBattlePonyFarCheck = true;
            //New移動ポイント拡大縮小演出
            KO_NewPosPointObjVis
                (KO_KakurePosObjsList[1].transform.Find("MadoDansaMae03Sphere").gameObject);
        }
        #endregion
        #region 初回 窓段差前から
        else if (EnumBattlePony == enumBattlePony.初回
            && EnumMadoDansaMae == enumMadoDansaMae.範囲内)
        {
            //遠くからチェックしてなければ台詞挟む
            if (isBattlePonyFarCheck == false)
            {
                NovelSetVis("T_BattlePony_015");
                while (isNovelSetVisIng) { yield return null; }
            }
            NovelSetVis("T_BattlePony_020");//無理だ・・
            EnumBattlePony = enumBattlePony.諦め;
            while (isNovelSetVisIng) { yield return null; }
        }
        #endregion
        #region 諦め
        else if (EnumBattlePony == enumBattlePony.諦め)
        {
            NovelSetVis("T_BattlePony_030");//状態が良い
            EnumBattlePony = enumBattlePony.状態が良い;
            while (isNovelSetVisIng) { yield return null; }
        }
        #endregion
        #region 状態が良い
        else if (EnumBattlePony == enumBattlePony.状態が良い)
        {
            NovelSetVis("T_BattlePony_040");//祟られる前にやめとこ
            EnumBattlePony = enumBattlePony.祟られる;
            while (isNovelSetVisIng) { yield return null; }
            #region 探索対象から外してアウトラインも消す
            foreach (GameObject tmpObj in TansakuObjList)
            {
                //該当していたらOFFに
                if (tmpObj.name == "BattlePony")
                {
                    foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                    { CollObjs.tag = "TansakuSeeCollOffObj"; }
                    //アウトライン消し
                    tmpObj.transform.Find("TansakuOutlineMesh").gameObject.SetActive(false);
                }
            }
            #endregion
        }
        #endregion
        #region 祟られ（探索対象から外してアウトラインも消す）
        else if (EnumBattlePony == enumBattlePony.祟られる)
        {
            #region 探索対象から外してアウトラインも消す
            foreach (GameObject tmpObj in TansakuObjList)
            {
                //該当していたらOFFに
                if (tmpObj.name == "BattlePony")
                {
                    foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                    { CollObjs.tag = "TansakuSeeCollOffObj"; }
                    //アウトライン消し
                    tmpObj.transform.Find("TansakuOutlineMesh").gameObject.SetActive(false);
                }
            }
            #endregion
        }
        #endregion
    }
    IEnumerator T_Speaker()
    {
        NovelSetVis("T_Speaker");
        while (isNovelSetVisIng) { yield return null; }
    }
    IEnumerator T_Curtain()
    {
        #region ■初回(窓段差前でもない)
        if (EnumCurtain == enumCurtain.初回)
        {
            NovelSetVis("T_Curtain_初回");//暗くなる前になんとかしよう
            while (isNovelSetVisIng) { yield return null; }
            #region 探索対象から外してアウトラインも消す
            foreach (GameObject tmpObj in TansakuObjList)
            {
                //該当していたらOFFに
                if (
                    tmpObj.name == "Waku"
                    || tmpObj.name == "Curtain"
                    )
                {
                    foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                    { CollObjs.tag = "TansakuSeeCollOffObj"; }
                    //アウトライン消し
                    tmpObj.transform.Find("TansakuOutlineMesh").gameObject.SetActive(false);
                }
            }
            #endregion
        }
        #endregion

    }
    IEnumerator T_Waku()
    {
        #region ■初回(窓段差前でもない)
        if (EnumCurtain == enumCurtain.初回
            && EnumMadoDansaMae == enumMadoDansaMae.範囲外)
        {
            NovelSetVis("T_Curtain_初回");//不安になった
            while (isNovelSetVisIng) { yield return null; }

            //New移動ポイント拡大縮小演出
            KO_NewPosPointObjVis
                (KO_KakurePosObjsList[1].transform.Find("MadoDansaMae03Sphere").gameObject);

            #region 探索対象から外してアウトラインも消す
            foreach (GameObject tmpObj in TansakuObjList)
            {
                //該当していたらOFFに
                if (tmpObj.name == "Waku")
                {
                    foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                    {
                        CollObjs.tag = "TansakuSeeCollOffObj";
                    }
                    //アウトライン消し
                    tmpObj.transform.Find("TansakuOutlineMesh").gameObject.SetActive(false);
                }
            }
            #endregion

        }
        #endregion

        #region ■初回段差前（登るかどうかだったけど、今は↑と同じに）
        //else if (EnumCurtain == enumCurtain.初回
        //    && EnumMadoDansaMae == enumMadoDansaMae.範囲内)
        //{
        //    NovelSetVis("T_Curtain_窓段差前");//のぼるかどうか
        //    while (isNovelSetVisIng) { yield return null; }
        //}

        else if (EnumCurtain == enumCurtain.初回
            && EnumMadoDansaMae == enumMadoDansaMae.範囲内)
        {
            NovelSetVis("T_Curtain_初回");//不安になった
            while (isNovelSetVisIng) { yield return null; }

            #region 探索対象から外してアウトラインも消す
            foreach (GameObject tmpObj in TansakuObjList)
            {
                //該当していたらOFFに
                if (tmpObj.name == "Waku")
                {
                    foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                    {
                        CollObjs.tag = "TansakuSeeCollOffObj";
                    }
                    //アウトライン消し
                    tmpObj.transform.Find("TansakuOutlineMesh").gameObject.SetActive(false);
                }
            }
            #endregion
        }
        #endregion
    }
    IEnumerator T_TV()
    {
        NovelSetVis("T_TV");
        while (isNovelSetVisIng) { yield return null; }
    }
    IEnumerator T_Corkbord()
    {
        NovelSetVis("T_Corkbord");
        while (isNovelSetVisIng) { yield return null; }
    }
    IEnumerator T_Skelton()
    {
        CameraAnchorTrs.DOShakePosition(0.5f, 0.1f);
        NovelSetVis("T_Skelton_01");//うおわあガイコツ！
        while (isNovelSetVisIng) { yield return null; }
        #region 探索対象から外してアウトラインも消す
        foreach (GameObject tmpObj in TansakuObjList)
        {
            //該当していたらOFFに
            if (tmpObj.name == "Skelton")
            {
                foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                {
                    CollObjs.tag = "TansakuSeeCollOffObj";
                }
                //アウトライン消し
                tmpObj.transform.Find("TansakuOutlineMesh").gameObject.SetActive(false);
            }
        }
        #endregion
    }
    IEnumerator T_USBCable_Noboriyou()
    {
        NovelSetVis("■T_USBCable_Noboriyou010");//USBケーブル・・・！
        while (isNovelSentakushiWait) { yield return null; }
        yield return new WaitForSeconds(1);
        Sentakushi("■T_USBCableMae_Enter_初回a", Mathf.Infinity, "USBケーブルを登る？");
        Sentakushi("■T_USBCableMae_Enter_初回b", Mathf.Infinity);
        //選択肢選ばれるまでループ
        while (sentakuListNum == 99) { yield return null; }
        yield return null;
        switch (sentakuListNum)
        {
            case 0://選択肢a 登る
                sentakuListNum = 99;
                isNovelFadeTween = isNovelSetVisIng = false;

                isKOSystem = false;
                KO_isMovePosLock = false;//移動止め解除
                isTansakuSystem = false;

                FadeBlack(1, 0.5f);
                NovelSetVis("T_USBCableMae_Enter_初回a010");//ここまで来たんだ・・よし！
                yield return new WaitForSeconds(0.5f);
                while (isNovelSentakushiWait) { yield return null; }

                EventMove("USBケーブル登り");
                break;

            case 1://選択肢b　そこまでする必要ないか
                sentakuListNum = 99;
                NovelSetVis("T_USBCableMae_Enter_初回b010");//そこまでする必要あるか・・？
                while (isNovelSetVisIng) { yield return null; }

                break;
        }
        yield break;
    }
    IEnumerator T_Door()
    {
        if (EnumDoor == enumDoor.初回)
        {
            NovelSetVis("T_Door_01");//智恵理は戻ってくるだろうか
            while (isNovelSetVisIng) { yield return null; }
        }
        else if (EnumDoor == enumDoor.隙間あるかな)
        {
            NovelSetVis("T_Door_近づこうか");
            while (isNovelSetVisIng) { yield return null; }
            //New移動ポイント拡大縮小演出
            KO_NewPosPointObjVis
                (KO_KakurePosObjsList[2].transform.Find("DoorMae").gameObject);
            #region 探索対象から外してアウトラインも消す
            foreach (GameObject tmpObj in TansakuObjList)
            {
                //該当していたらOFFに
                if (tmpObj.name == "Door")
                {
                    foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                    { CollObjs.tag = "TansakuSeeCollOffObj"; }
                    //アウトライン消し
                    tmpObj.transform.Find("TansakuOutlineMesh").gameObject.SetActive(false);
                }
            }
            #endregion
            EnumDoor = enumDoor.出待ちするか;
        }
        else if (EnumDoor == enumDoor.出待ちするか
            || EnumDoor == enumDoor.出待ちするか短)
        {
            KO_isMovePosLock = true;//移動止め
            //一回目二回目以降でメッセージ変更
            if (EnumDoor == enumDoor.出待ちするか)
            { NovelSetVis("■T_Door_試す価値"); }
            else if (EnumDoor == enumDoor.出待ちするか短)
            { NovelSetVis("■T_Door_試す価値2"); }
            EnumDoor = enumDoor.出待ちするか短;

            while (isNovelSentakushiWait) { yield return null; }
            yield return new WaitForSeconds(0.5f);
            Sentakushi("■T_Door_開けた隙に出る？a", Mathf.Infinity, "ドアを開けた隙に出る？");
            Sentakushi("■T_Door_開けた隙に出る？b", Mathf.Infinity);
            //選択肢選ばれるまでループ
            while (sentakuListNum == 99) { yield return null; }
            yield return null;
            switch (sentakuListNum)
            {
                case 0://選択肢a やってみる
                    sentakuListNum = 99;
                    isKOSystem = false;
                    isTansakuSystem = false;
                    KO_isMovePosLock = false;//移動止め解除
                    EnumDoor = enumDoor.出待ちするか短;

                    yield return new WaitForSeconds(1f);
                    NovelSetVis("T_Door_開けた隙に出る？a1");//よしやるか
                    while (isNovelSetVisIng) { yield return null; }

                    EventMove("ドアが開いたら");

                    break;

                case 1://選択肢b　やめておく
                    sentakuListNum = 99;
                    yield return new WaitForSeconds(1f);
                    NovelSetVis("T_Door_開けた隙に出る？b1");//いやいや、さすがに危ない
                    while (isNovelSetVisIng) { yield return null; }

                    break;
            }

            KO_isMovePosLock = false;//移動止め解除

        }
    }
    IEnumerator T_Bed()
    {
        NovelSetVis("T_Bed_01");
        while (isNovelSetVisIng) { yield return null; }
        #region 探索対象から外してアウトラインも消す
        foreach (GameObject tmpObj in TansakuObjList)
        {
            //該当していたらOFFに
            if (tmpObj.name == "Bed")
            {
                foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                { CollObjs.tag = "TansakuSeeCollOffObj"; }
                //アウトライン消し
                tmpObj.transform.Find("TansakuOutlineMesh").gameObject.SetActive(false);
            }
        }
        #endregion
        yield break;
    }
    IEnumerator T_Chair()
    {
        #region ■初回で、椅子前にいない場合
        if (EnumChair == enumChair.初回
            && EnumIsuMae == enumIsuMae.範囲外)
        {
            NovelSetVis("T_Chair_初回");//近づいてみようか？
            while (isNovelSetVisIng) { yield return null; }

            //New移動ポイント拡大縮小演出
            KO_NewPosPointObjVis
                (KO_KakurePosObjsList[1].transform.Find("IsuMae01Sphere").gameObject);
        }
        #endregion
        #region ■初回で椅子前にいる場合
        else if (EnumChair == enumChair.初回
            && EnumIsuMae == enumIsuMae.範囲内)
        {
            KO_isMovePosLock = true;//移動止め
            NovelSetVis("■T_Chair_飛び降りる？");
            while (isNovelSentakushiWait) { yield return null; }
            yield return new WaitForSeconds(1);
            Sentakushi("■T_Chair_飛び降りる？a", Mathf.Infinity, "椅子に飛び降りる？");
            Sentakushi("■T_Chair_飛び降りる？b", Mathf.Infinity);
            //選択肢選ばれるまでループ
            while (sentakuListNum == 99) { yield return null; }
            yield return null;
            switch (sentakuListNum)
            {
                case 0://選択肢a 飛び降りる
                    sentakuListNum = 99;
                    isNovelFadeTween = isNovelSetVisIng = false;
                    isKOSystem = false;
                    isTansakuSystem = false;

                    EnumIsuMae = enumIsuMae.範囲外;

                    EventMove("椅子へ飛び降り");
                    break;

                case 1://選択肢b　絶対怪我するやめておく
                    sentakuListNum = 99;
                    isNovelFadeTween = isNovelSetVisIng = false;
                    break;
            }

            KO_isMovePosLock = false;//移動止め解除

        }
        #endregion
        else if (EnumChair == enumChair.見上げ)
        {
            NovelSetVis("T_Chair_床から眺める");
            while (isNovelSetVisIng) { yield return null; }
            #region 探索対象から外してアウトラインも消す
            foreach (GameObject tmpObj in TansakuObjList)
            {
                //該当していたらOFFに
                if (tmpObj.name == "Chair")
                {
                    foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                    { CollObjs.tag = "TansakuSeeCollOffObj"; }
                    //アウトライン消し
                    tmpObj.transform.Find("TansakuOutlineMesh").gameObject.SetActive(false);
                }
            }
            #endregion
            EnumChair = enumChair.終了;

        }
    }
    IEnumerator T_Aircon()
    {
        NovelSetVis("T_Aircon");
        while (isNovelSetVisIng) { yield return null; }
    }
    IEnumerator T_Ceiling_light()
    {
        NovelSetVis("T_Ceiling_light");
        while (isNovelSetVisIng) { yield return null; }
    }
    IEnumerator T_Bookstand()
    {
        NovelSetVis("T_Bookstand");
        while (isNovelSetVisIng) { yield return null; }
    }
    IEnumerator T_Calender()
    {
        NovelSetVis("T_Calender");
        while (isNovelSetVisIng) { yield return null; }
    }
    bool isBirthdayCheckYoyaku = false;//これがtrueで電気降りるとフラグDBに書き込む
    IEnumerator T_HwSEnm00_PareCalenderObjHwS()
    {
        Debug.Log("HwSイベント");
        NovelSetVis("T_HwSCalender00");//誕生日じゃないか！
        while (isNovelSetVisIng) { yield return null; }
        isBirthdayCheckYoyaku = true;
        yield break;
    }
    bool isHwSEnm00_PareChieriSmartPhoneCanvasObjCheck = false;
    IEnumerator T_HwSEnm00_PareChieriSmartPhoneCanvasObjHwS()
    {
        //誕生日思い出してるかで分岐
        if (staticFlagDict["カレンダー誕生日チェック"])
        {
            NovelSetVis("引き出し上スマホ050b");//ああ、ちえりの誕生日
        }
        else
        {
            NovelSetVis("引き出し上スマホ050a");//０９０１・・？
        }
        while (isNovelSetVisIng) { yield return null; }
        isHwSEnm00_PareChieriSmartPhoneCanvasObjCheck = true;
        yield break;
    }
    IEnumerator T_Pentate()
    {
        NovelSetVis("T_Pentate");
        while (isNovelSetVisIng) { yield return null; }
    }
    IEnumerator T_Jougi()
    {
        NovelSetVis("T_Jougi");
        while (isNovelSetVisIng) { yield return null; }
    }
    IEnumerator T_Clock_Base()
    {
        NovelSetVis("T_Clock_Base");
        while (isNovelSetVisIng) { yield return null; }
    }
    IEnumerator T_Cord()
    {
        #region ■見つけて気づく
        if (EnumCord == enumCord.初回_見てから気づく)
        {
            NovelSetVis("T_Cord_見つけて気づく");
            while (isNovelSetVisIng) { yield return null; }

            //New移動ポイント拡大縮小演出
            KO_NewPosPointObjVis
                (KO_KakurePosObjsList[1].transform.Find("CordMae04Sphere").gameObject);

            EnumCord = enumCord.気づいてる見つけてる;
        }
        #endregion
        #region ■気づいて見つける
        else if (EnumCord == enumCord.気づいてから見つける)
        {
            NovelSetVis("T_Cord_気づいて見つける");
            while (isNovelSetVisIng) { yield return null; }

            //New移動ポイント拡大縮小演出
            KO_NewPosPointObjVis
                (KO_KakurePosObjsList[1].transform.Find("CordMae04Sphere").gameObject);
            EnumCord = enumCord.気づいてる見つけてる;
        }
        #endregion
        #region ■気づいてる見つけてる 範囲外
        else if (EnumCord == enumCord.気づいてる見つけてる
            && EnumCordMae == enumCordMae.範囲外)
        {
            NovelSetVis("T_Cord_気づいてる見つけている範囲外");
            while (isNovelSetVisIng) { yield return null; }
        }
        #endregion
        #region ■気づいてる見つけてる 範囲内
        else if (EnumCord == enumCord.気づいてる見つけてる
            && EnumCordMae == enumCordMae.範囲内)
        {
            KO_isMovePosLock = true;//移動止め
            NovelSetVis("■T_Cord_気づいてる見つけている範囲内");
            while (isNovelSentakushiWait) { yield return null; }
            yield return new WaitForSeconds(1);
            Sentakushi("■T_Cord_降りる？a", Mathf.Infinity, "スタンドライトのケーブルを降りる？");
            Sentakushi("■T_Cord_降りる？b", Mathf.Infinity);
            //選択肢選ばれるまでループ
            while (sentakuListNum == 99) { yield return null; }
            yield return null;
            switch (sentakuListNum)
            {
                case 0://選択肢a がんばって降りる
                    sentakuListNum = 99;

                    //誕生日チェックしてればDBフラグON　してなければオフ
                    if (isBirthdayCheckYoyaku) { staticFlagDict["カレンダー誕生日チェック"] = true; }
                    else { staticFlagDict["カレンダー誕生日チェック"] = false; }

                    isNovelFadeTween = isNovelSetVisIng = false;
                    isKOSystem = false;
                    isTansakuSystem = false;
                    KO_isMovePosLock = false;//移動止め解除
                    EnumCordMae = enumCordMae.範囲外;

                    NovelSetVis("D2020");//足を降ろした。

                    EventMove("電気ケーブル降り");
                    break;

                case 1://選択肢b　そこまでする必要ないか
                    sentakuListNum = 99;
                    isNovelFadeTween = isNovelSetVisIng = false;
                    break;
            }

            KO_isMovePosLock = false;//移動止め解除


        }
        #endregion

    }
    IEnumerator T_Gomibako()
    {
        if (EnumGomibako == enumGomibako.初回_早く戻らないと)
        {
            KO_isMovePosLock = true;//移動止め

            #region //旧/隠れるかどうか選択肢
            //選択肢:
            //NovelSetVis("■T_Gomibako_初回_隠れるかどうか");
            //while (isNovelSentakushiWait) { yield return null; }
            //yield return new WaitForSeconds(1f);
            //Sentakushi("■T_Gomibako_隠れる？a", Mathf.Infinity, "くず籠の陰に隠れる？");
            //Sentakushi("■T_Gomibako_隠れる？c", Mathf.Infinity);
            ////Sentakushi("■T_Gomibako_隠れる？b", Mathf.Infinity);
            ////選択肢選ばれるまでループ
            //while (sentakuListNum == 99) { yield return null; }
            //yield return null;
            //switch (sentakuListNum)
            //{
            //    case 0://選択肢a 隠れる
            //        #region ゴミ箱裏に隠れて智恵理に見つかるイベントへ移動
            //        sentakuListNum = 99;
            //        isNovelFadeTween = isNovelSetVisIng = false;
            //        yield return new WaitForSeconds(0.5f);

            //        //暗幕
            //        FadeBlack(1, 0.5f);
            //        yield return new WaitForSeconds(0.5f);

            //        isKOSystem = false;
            //        isTansakuSystem = false;
            //        KO_isMovePosLock = false;//移動止め解除


            //        EventMove("ゴミ箱裏隠れ");
            //        yield break;
            //    #endregion

            //    case 1://選択肢c　やめておく
            //        sentakuListNum = 99;
            //        isNovelFadeTween = isNovelSetVisIng = false;
            //        while (isNovelSetVisIng) { yield return null; }

            //        break;

            //    case 2://選択肢b　登って中に隠れる
            //        sentakuListNum = 99;

            //        NovelSetVis("tmpまだなし");
            //        while (isNovelSetVisIng) { yield return null; }
            //        goto 選択肢;

            //        //yield return new WaitForSeconds(0.5f);
            //        //NovelSetVis("T_Gomibako_登って中に");//登れるなら登ってみたい
            //        //while (novelCurrentPageInt < 2) { yield return null; }

            //        ////暗幕
            //        //FadeBlack(1, 0.5f);
            //        //yield return new WaitForSeconds(0.5f);

            //        //while (isNovelSetVisIng) { yield return null; }

            //        //isKOSystem = false;
            //        //isTansakuSystem = false;
            //        //KO_isMovePosLock = false;//移動止め解除

            //        ////■PosObjで読み込み
            //        ////プレイヤー ゴミ箱裏に
            //        //GameObject Player_02_GomibakoHaziPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Player_02_GomibakoHaziPosObj") as GameObject;
            //        //CameraObjectsTrs.localPosition = Player_02_GomibakoHaziPosObj.transform.localPosition;
            //        //CameraObjectsTrs.localEulerAngles = Player_02_GomibakoHaziPosObj.transform.localEulerAngles;

            //        //yield return new WaitForSeconds(3f);

            //        ////開幕
            //        //FadeBlack(0, 0.5f);
            //        //yield return new WaitForSeconds(0.5f);

            //        break;

            //}
            #endregion

            NovelSetVis("T_Gomibako_初回_早く戻らないと");
            while (isNovelSetVisIng) { yield return null; }
            #region 探索対象から外してアウトラインも消す
            foreach (GameObject tmpObj in TansakuObjList)
            {
                //該当していたらOFFに
                if (tmpObj.name == "Gomibako")
                {
                    foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                    { CollObjs.tag = "TansakuSeeCollOffObj"; }
                    //アウトライン消し
                    tmpObj.transform.Find("TansakuOutlineMesh").gameObject.SetActive(false);
                }
            }
            #endregion
            EnumGomibako = enumGomibako.終了;

            KO_isMovePosLock = false;//移動止め解除

        }
    }
    IEnumerator T_Grasstable()
    {
        NovelSetVis("T_Grasstable_隠れられないかも");
        while (isNovelSetVisIng) { yield return null; }
        #region 探索対象から外してアウトラインも消す
        foreach (GameObject tmpObj in TansakuObjList)
        {
            //該当していたらOFFに
            if (tmpObj.name == "Grasstable")
            {
                foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                { CollObjs.tag = "TansakuSeeCollOffObj"; }
                //アウトライン消し
                tmpObj.transform.Find("TansakuOutlineMesh").gameObject.SetActive(false);
            }
        }
        #endregion
        yield break;
    }
    IEnumerator T_ChieriSumahoObj()//布団へ飛び降りスマホ前へ移動開始
    {
        #region ■監禁2範囲外から初回チェック時は
        if (EnumChieriSumaho == enumChieriSumaho.探索2監禁範囲外_初回)
        {
            NovelSetVis("F3060030");//（……見つけた！　あれだ！）
            while (isNovelSetVisIng) { yield return null; }

            isF3060SumahoHakken = true;
        }
        yield break;

        #endregion

    }
    IEnumerator T_ChieriSumahoObj_Old()//布団へ飛び降りスマホ前へ移動開始_旧状態（もしも再現したいなら↑をこの内容にする）
    {
        #region ■監禁2範囲外から初回チェック（布団へ飛び降りスマホ前へ移動ポイント）
        if (EnumChieriSumaho == enumChieriSumaho.探索2監禁範囲外_初回)
        {
            NovelSetVis("T_ChieriSumaho_探索2監禁範囲外_初回010");//調べればなにかわかるかもしれない
            while (isNovelSetVisIng) { yield return null; }

            #region 暗幕 設定 開幕

            //暗幕
            FadeBlack(1, 0.5f);
            yield return new WaitForSeconds(0.5f);

            isKOSystem = false;
            isTansakuSystem = false;

            //■PosObjで読み込み
            //プレイヤー ベッド上探索位置に
            GameObject Player_05_BedDivePosObj = Resources.Load("_PosObj/E_Kankin_Day1/Player_05_BedDivePosObj") as GameObject;
            CameraObjectsTrs.localPosition = Player_05_BedDivePosObj.transform.localPosition;
            CameraObjectsTrs.localEulerAngles = Player_05_BedDivePosObj.transform.localEulerAngles;

            CameraAnchorTrs.localEulerAngles = Vector3.zero;

            //開幕
            FadeBlack(0, 0.5f);
            yield return new WaitForSeconds(0.5f);
            #endregion

            #region 布団へ飛び降り
            NovelSetVis("T_ChieriSumaho_探索2監禁範囲外_初回020");//……まあ、そのためにはここを
            while (isNovelSetVisIng) { yield return null; }
            yield return new WaitForSeconds(0.5f);

            //ANの重力設定のみロード
            AN_SetPlayerRigidbody();
            AN_GravitiDragBool = true;//FixedUpdateのやつON
            //rigid監視スタート
            StartCoroutine(RigidReadSystem());

            //ベッドマットコリダーにPhysicMaterialセット
            GameObject.Find("BedMatCollider").GetComponent<Collider>().material
                = Resources.Load("Main/PhysicMaterial/BedMatBound01") as PhysicMaterial;

            //DragAdjust調整(ベッドで跳ねるために)(ベッドにもPhisicsMaterial適用されている)
            float
                tmpDefDragAdjust = dragAdjust,
                tmpDefGravityAdjust = gravityAdjust;

            dragAdjust = 0.4f;
            gravityAdjust = 2;


            //ジャンプ
            AN_PlayerRigidbody.velocity
                += (new Vector3(0.1f, 0.2f, 0f))
                * nowPlayerLocalScale.x * AN_GrapJumpVelocity;

            isShockWait = true;
            while (isShockWait) { yield return null; }

            //ジャンプ(はねてつんのめる表現)
            AN_PlayerRigidbody.velocity
                += (new Vector3(0.1f, 0f, 0f))
                * nowPlayerLocalScale.x * AN_GrapJumpVelocity;

            yield return new WaitForSeconds(4);


            //元に戻す
            dragAdjust = tmpDefDragAdjust;
            gravityAdjust = tmpDefGravityAdjust;
            GameObject.Find("BedMatCollider").GetComponent<Collider>().material
                = null;
            //■重力設定消し
            AN_GravitiDragBool = false;
            isRigidReadSystem = false;
            Destroy(CameraObjectsTrs.GetComponent<Rigidbody>());

            #endregion

            NovelSetVis("T_ChieriSumaho_探索2監禁範囲外_初回030");//ふ、ふう・・
            while (isNovelSetVisIng) { yield return null; }

            #region スマホ前へ移動

            //■隠れ鬼移動システムON
            KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
            //ローディング待ち
            while (isKOSystemLoading) { yield return null; }
            //移動場所03オン
            KO_KakurePosObjsList[5].SetActive(true);
            //スマホ電源前移動ポイント演出
            KO_NewPosPointObjVis
                (KO_KakurePosObjsList[5].transform.Find("SumahoMae").gameObject);
            #endregion

        }
        #endregion


        //NovelSetVis("T_ChieriSumaho_探索2_監禁");
        //while (isNovelSetVisIng) { yield return null; }

        //FadeBlack(1, 0.1f);
        //yield return new WaitForSeconds(0.1f);

        ////プレイヤー ベッド降り位置に
        //GameObject Player_02_BedHimoLandingPosObj = Resources.Load("_PosObj/E_Kankin_Day1/Player_02_BedHimoLandingPosObj") as GameObject;
        //CameraObjectsTrs.localPosition = Player_02_BedHimoLandingPosObj.transform.localPosition;
        //CameraObjectsTrs.localEulerAngles = Player_02_BedHimoLandingPosObj.transform.localEulerAngles;

        //FadeBlack(0, 0.1f);

        //yield return new WaitForSeconds(2);

        //NovelSetVis("T_ChieriSumaho_探索2_監禁tmp02");
        //while (isNovelSetVisIng) { yield return null; }

        //FadeBlack(1, 0.1f);
        //yield return new WaitForSeconds(0.1f);

        //EventMove("床上起床");
        //isKOSystem = false;
        //isTansakuSystem = false;
    }
    bool isTmpUSBCableEvent = false;
    IEnumerator T_Hikidashi()
    {
        #region 初回　なんだあれ
        if (EnumHikidashi == enumHikidashi.初回)
        {
            NovelSetVis("T_Hikidashi_初回");//なんだあれ
            while (isNovelSetVisIng) { yield return null; }

            #region 探索対象から外してアウトラインも消す
            foreach (GameObject tmpObj in TansakuObjList)
            {
                //該当していたらOFFに
                if (tmpObj.name == "Hikidashi")
                {
                    foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                    { CollObjs.tag = "TansakuSeeCollOffObj"; }
                    //アウトライン消し
                    tmpObj.transform.Find("TansakuOutlineMesh").gameObject.SetActive(false);
                }
            }
            #endregion
            //USBケーブル前ポイント拡大縮小演出
            KO_NewPosPointObjVis
                (KO_KakurePosObjsList[2].transform.Find("USBCableMae").gameObject);
        }
        #endregion

        #region 即USB（一度登るのやめてからの再チェック）
        if (EnumHikidashi == enumHikidashi.即USB)
        {
            NovelSetVis("■T_USBCable_Noboriyou010");//USBケーブル・・・！
            while (isNovelSentakushiWait) { yield return null; }
            yield return new WaitForSeconds(1);
            Sentakushi("■T_USBCableMae_Enter_初回a", Mathf.Infinity, "USBケーブルを登る？");
            Sentakushi("■T_USBCableMae_Enter_初回b", Mathf.Infinity);
            //選択肢選ばれるまでループ
            while (sentakuListNum == 99) { yield return null; }
            yield return null;
            switch (sentakuListNum)
            {
                case 0://選択肢a 登る
                    sentakuListNum = 99;
                    isNovelFadeTween = isNovelSetVisIng = false;

                    isKOSystem = false;
                    KO_isMovePosLock = false;//移動止め解除
                    isTansakuSystem = false;

                    FadeBlack(1, 0.5f);
                    NovelSetVis("T_USBCableMae_Enter_初回a010");//ここまで来たんだ・・よし！
                    yield return new WaitForSeconds(0.5f);
                    while (isNovelSentakushiWait) { yield return null; }

                    EventMove("USBケーブル登り");
                    break;

                case 1://選択肢b　そこまでする必要ないか
                    sentakuListNum = 99;
                    NovelSetVis("T_USBCableMae_Enter_初回b010");//そこまでする必要あるか・・？
                    while (isNovelSetVisIng) { yield return null; }

                    break;
            }
            yield break;
        }
        #endregion
        #region //デバッグ用の
        //else if (isTmpUSBCableEvent == false)
        //{
        //    isTmpUSBCableEvent = true;

        //    NovelSetVis("T_Hikidashi_tmpUSBケーブル代用");
        //    while (isNovelSetVisIng) { yield return null; }

        //    //USBケーブル前ポイント拡大縮小演出
        //    KO_NewPosPointObjVis
        //        (KO_KakurePosObjsList[2].transform.Find("USBCableMae").gameObject);
        //}
        //else if (isTmpUSBCableEvent)
        //{
        //    FadeBlack(1, 1);
        //    NovelSetVis("tmpUSBケーブル登りイベ");
        //    while (isNovelSetVisIng) { yield return null; }
        //    EventMove("はい、ただいま", true);
        //}
        #endregion

    }
    IEnumerator T_USBCable_BedUnderObj()
    {
        NovelSetVis("T_USBCable_BedUnder_010");
        while (isNovelSetVisIng) { yield return null; }

        yield break;
    }
    //■コリダー系

    #region UTL拡張用の
    //単純なEnterExitBool
    public bool isKO_SimplePointObj_Enter = false, isKO_SimplePointObj_Exit = false;

    //フラグ用
    public bool isMovePointFlagReserve = false; //フラグ機能発動用
    public List<bool> reserveMovePointEnterFlagBoolList; //移動ポイント到着で書き込むフラグ内容受け取り用

    IEnumerator T_KO_SimplePointObj_Enter()//シンプル移動システム用
    {
        if (isKO_SimplePointObj_Enter) { yield break; }
        isKO_SimplePointObj_Enter = true;

        //到着フラグ書き込み発動していたら
        if (isMovePointFlagReserve)
        {
            isMovePointFlagReserve = false;//一度だけ

            //受け取っている前提のフラグ内容を書き込み
            codeFlagBoolList = reserveMovePointEnterFlagBoolList.ToList();
        }

        yield break;
    }
    IEnumerator T_KO_SimplePointObj_Exit()//シンプル移動システム用
    {
        if (isKO_SimplePointObj_Exit) { yield break; }
        isKO_SimplePointObj_Exit = true;
        yield break;
    }
    #endregion
    bool isTikaduitemiruPos_Enter = false, isTikaduitemiruPos_Exit = false;
    IEnumerator T_TikaduitemiruPos_Enter()//智恵理・近づいてみる？ 到着フラグのみ
    {
        if (isTikaduitemiruPos_Enter) { yield break; }
        isTikaduitemiruPos_Enter = true;
        yield break;
    }
    IEnumerator T_TikaduitemiruPos_Exit()//智恵理・近づいてみる？ 到着フラグのみ
    {
        if (isTikaduitemiruPos_Exit) { yield break; }
        isTikaduitemiruPos_Exit = true;
        yield break;
    }
    IEnumerator T_TsukueHaziEnter()
    {
        if (EnumTsukueHazi == enumTsukueHazi.範囲外初回)
        {
            CameraAnchorTrs.DOShakePosition(0.5f, 0.1f);
            NovelSetVis("T_TsukueHazi_初回");
            while (isNovelSetVisIng) { yield return null; }

            #region 移動先消滅処理
            KO_KakurePosObjsList[1].transform.Find("SiroiHikidashiPos").gameObject.SetActive(false);
            KO_nowMovePosCollider = null;
            KO_isMovePosSet = false;
            #endregion

            #region 操作説明 探索説明表示
            GameObject SousaSetumeiTansakuWindowCanvas;
            if (DB.isEnglish)
            {
                SousaSetumeiTansakuWindowCanvas = Instantiate(Resources.Load("EventSystem/Menu/Prefab/SousaSetumeiTansakuEngWindowCanvas") as GameObject
                    , VRCameraTrs, false);
            }
            else
            {
                SousaSetumeiTansakuWindowCanvas = Instantiate(Resources.Load("EventSystem/Menu/Prefab/SousaSetumeiTansakuWindowCanvas") as GameObject
                    , VRCameraTrs, false);
            }

            FadeBlack(0.5f, 0.5f);

            //すぐ飛ばさないようためしにウェイト
            yield return new WaitForSeconds(1);

            while (isKetteiDown == false)
            {
                yield return null;
            }

            FadeBlack(0, 0.5f);
            Destroy(SousaSetumeiTansakuWindowCanvas);
            #endregion
        }
    }
    IEnumerator T_TsukueHaziExit()
    {
        yield break;
    }
    IEnumerator T_IsuMaeEnter()
    {
        EnumIsuMae = enumIsuMae.範囲内;
        OutlineColorChange("Chair", Color.cyan);
        yield break;
    }
    IEnumerator T_IsuMaeExit()
    {
        EnumIsuMae = enumIsuMae.範囲外;
        OutlineColorChange("Chair", Color.yellow);
        yield break;
    }
    IEnumerator T_StandLightMaeEnter()
    {
        EnumStandLightMae = enumStandLightMae.範囲内;
        OutlineColorChange("StandLight", Color.cyan);
        yield break;
    }
    IEnumerator T_StandLightMaeExit()
    {
        EnumStandLightMae = enumStandLightMae.範囲外;
        OutlineColorChange("StandLight", Color.yellow);
        yield break;
    }
    IEnumerator T_MadoDansaMaeEnter()
    {
        EnumMadoDansaMae = enumMadoDansaMae.範囲内;
        OutlineColorChange("BattlePony", Color.cyan);
        yield break;
    }
    IEnumerator T_MadoDansaMaeExit()
    {
        EnumMadoDansaMae = enumMadoDansaMae.範囲外;
        OutlineColorChange("BattlePony", Color.yellow);
        yield break;
    }
    IEnumerator T_CordMaeEnter()
    {
        EnumCordMae = enumCordMae.範囲内;
        OutlineColorChange("Cord", Color.cyan);
        yield break;
    }
    IEnumerator T_CordMaeExit()
    {
        EnumCordMae = enumCordMae.範囲外;
        OutlineColorChange("Cord", Color.yellow);
        yield break;
    }
    IEnumerator T_SkeltonTansakuArea_Enter()//ガイコツ調べられるエリア
    {
        #region 探索コリダーオンにする
        foreach (GameObject tmpObj in TansakuObjList)
        {
            //該当していたらONに
            if (tmpObj.name == "Skelton")
            {
                tmpObj.transform.Find("Collider_Skelton/MeshCollider_Skelton_Convex").GetComponent<Collider>()
                    .enabled = true;
            }
        }
        #endregion

        yield break;
    }
    IEnumerator T_SkeltonTansakuArea_Exit()
    {
        #region 探索コリダーオフにしてアウトラインも消す（探索対象から外すわけではない）
        foreach (GameObject tmpObj in TansakuObjList)
        {
            //該当していたらOFFに
            if (tmpObj.name == "Skelton")
            {
                tmpObj.transform.Find("Collider_Skelton/MeshCollider_Skelton_Convex").GetComponent<Collider>()
                    .enabled = false;

                //アウトライン消し
                tmpObj.transform.Find("TansakuOutlineMesh").gameObject.SetActive(false);
            }
        }
        #endregion
        yield break;
    }
    IEnumerator T_DeskUraEnRoute_Enter()//机裏走ってる途中
    {
        if (EnumDeskUraEnRoute_ == enumDeskUraEnRoute_.初回通過)
        {
            EnumDeskUraEnRoute_ = enumDeskUraEnRoute_.終了;
            NovelSetVis("T_DeskUraEnRoute_010", true);//遠い！
        }

        yield break;
    }
    IEnumerator T_DeskUraEnRoute_Exit()
    { yield break; }
    IEnumerator T_DeskUraEscape_Enter()//机裏出た
    {
        if (EnumDeskUraEscape_ == enumDeskUraEscape_.初回通過)
        {
            EnumDeskUraEscape_ = enumDeskUraEscape_.終了;
            NovelSetVis("T_DeskUraEscape_010", true);//広い！
        }

        yield break;
    }
    IEnumerator T_DeskUraEscape_Exit()
    { yield break; }
    IEnumerator T_TsukueTVgawa01Enter()//自分のちっぽけさを痛感する
    {
        if (EnumTsukueTVgawa01 == enumTsukueTVgawa01.範囲外初回)
        {
            //オート文表示中の場合手動に切り替え
            isNowNovelAutoVis = false;
            while (isNovelSetVisIng) { yield return null; }

            NovelSetVis("T_TsukueTVgawa01_初回");//自分のちっぽけさを痛感する
            while (isNovelSetVisIng) { yield return null; }
            EnumTsukueTVgawa01 = enumTsukueTVgawa01.範囲外二回目以降;

            #region 探索対象に追加（多い）
            foreach (GameObject tmpObj in TansakuObjList)
            {
                //該当していたらONに
                if (tmpObj.name == "Door"
                    || tmpObj.name == "Grasstable"
                    || tmpObj.name == "Hikidashi"
                    || tmpObj.name == "Chair"
                    || tmpObj.name == "Bed"
                    )
                {
                    foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                    { CollObjs.tag = "TansakuSeeCollOnObj"; }
                }
            }
            #endregion
        }
        else if (EnumTsukueTVgawa01 == enumTsukueTVgawa01.範囲外二回目以降)
        {
            #region 椅子が見上げ（まだチェックして終了になってない）なら探索対象に追加
            if (EnumChair == enumChair.見上げ)
            {
                #region 探索対象に追加
                foreach (GameObject tmpObj in TansakuObjList)
                {
                    //該当していたらONに
                    if (tmpObj.name == "Chair")
                    {
                        foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                        { CollObjs.tag = "TansakuSeeCollOnObj"; }
                    }
                }
                #endregion
            }
            #endregion
        }
        yield break;
    }
    IEnumerator T_TsukueTVgawa01Exit()
    {
        if (EnumTsukueTVgawa01 == enumTsukueTVgawa01.範囲外二回目以降)
        {
            #region 探索対象から外してアウトラインも消す
            foreach (GameObject tmpObj in TansakuObjList)
            {
                //該当していたらOFFに
                if (tmpObj.name == "Chair")
                {
                    foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                    { CollObjs.tag = "TansakuSeeCollOffObj"; }
                    //アウトライン消し
                    tmpObj.transform.Find("TansakuOutlineMesh").gameObject.SetActive(false);
                }
            }
            #endregion
        }
        yield break;
    }
    IEnumerator T_USBCableMae_Enter()//これはUSBケーブル・・！
    {
        #region 探索対象に追加（Prefabで追加したObjなので、GamgeObject.Findでリストに追加）

        //入ってなければ
        if (TansakuObjList.Contains(GameObject.Find("USBCable_Noboriyou"))) { }
        else { TansakuObjList.Add(GameObject.Find("USBCable_Noboriyou")); }
        //後は同じ処理
        foreach (GameObject tmpObj in TansakuObjList)
        {
            //該当していたらONに
            if (tmpObj.name == "USBCable_Noboriyou")
            {
                foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                { CollObjs.tag = "TansakuSeeCollOnObj"; }
            }
        }
        #endregion

        if (EnumUSBCableMae == enumUSBCableMae.初回到着)
        {
            EnumUSBCableMae = enumUSBCableMae.終了;

            NovelSetVis("■T_USBCableMae_Enter_初回");//これはUSBケーブル・・・！
            while (isNovelSentakushiWait) { yield return null; }
            yield return new WaitForSeconds(1);

            Sentakushi("■T_USBCableMae_Enter_初回a", Mathf.Infinity, "USBケーブルを登る？");
            Sentakushi("■T_USBCableMae_Enter_初回b", Mathf.Infinity);
            //選択肢選ばれるまでループ
            while (sentakuListNum == 99) { yield return null; }
            yield return null;
            switch (sentakuListNum)
            {
                case 0://選択肢a 登る
                    sentakuListNum = 99;
                    isNovelFadeTween = isNovelSetVisIng = false;

                    isKOSystem = false;
                    KO_isMovePosLock = false;//移動止め解除
                    isTansakuSystem = false;

                    FadeBlack(1, 0.5f);
                    NovelSetVis("T_USBCableMae_Enter_初回a010");//ここまで来たんだ・・よし！
                    yield return new WaitForSeconds(0.5f);
                    while (isNovelSentakushiWait) { yield return null; }

                    EventMove("USBケーブル登り");
                    break;

                case 1://選択肢b　そこまでする必要ないか
                    sentakuListNum = 99;
                    NovelSetVis("T_USBCableMae_Enter_初回b010");//そこまでする必要あるか・・？
                    while (isNovelSetVisIng) { yield return null; }

                    #region 引き出し探索対象に戻し
                    foreach (GameObject tmpObj in TansakuObjList)
                    {
                        //該当していたらONに
                        if (tmpObj.name == "Hikidashi")
                        {
                            foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                            { CollObjs.tag = "TansakuSeeCollOnObj"; }
                        }
                    }
                    #endregion
                    //アウトライン青に
                    OutlineColorChange("Hikidashi", Color.cyan);
                    OutlineColorChange("USBCable_Noboriyou", Color.cyan);
                    //enum変更
                    EnumHikidashi = enumHikidashi.即USB;
                    break;
            }

            KO_isMovePosLock = false;//移動止め解除
        }


        yield break;
    }
    IEnumerator T_USBCableMae_Exit()
    {
        yield break;
    }
    bool isHikidashiUePlayerStartPosArea_Enter = false;
    IEnumerator T_HikidashiUePlayerStartPosArea_Enter()
    {
        if (isHikidashiUePlayerStartPosArea_Enter == false)
        { isHikidashiUePlayerStartPosArea_Enter = true; }
        yield break;
    }
    IEnumerator T_HikidashiUePlayerStartPosArea_Exit()
    {
        yield break;
    }
    bool isHikidashiSumahoMae_Enter = false;
    IEnumerator T_HikidashiSumahoMae_Enter()
    {
        if (isHikidashiSumahoMae_Enter == false)
        { isHikidashiSumahoMae_Enter = true; }
        yield break;
    }
    IEnumerator T_HikidashiSumahoMae_Exit()
    {
        yield break;
    }
    IEnumerator T_DoorMae01Enter()
    {
        if (EnumDoor == enumDoor.出待ちするか
            || EnumDoor == enumDoor.出待ちするか短)
        {
            #region 探索対象に追加
            foreach (GameObject tmpObj in TansakuObjList)
            {
                //該当していたらONに
                if (tmpObj.name == "Door")
                {
                    foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                    { CollObjs.tag = "TansakuSeeCollOnObj"; }
                }
            }
            #endregion
            OutlineColorChange("Door", Color.cyan);
        }
        yield break;
    }
    IEnumerator T_DoorMae01Exit()
    {
        if (EnumDoor == enumDoor.出待ちするか)
        {
            #region 探索対象から外してアウトラインも消す
            foreach (GameObject tmpObj in TansakuObjList)
            {
                //該当していたらOFFに
                if (tmpObj.name == "Door")
                {
                    foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                    { CollObjs.tag = "TansakuSeeCollOffObj"; }
                    //アウトライン消し
                    tmpObj.transform.Find("TansakuOutlineMesh").gameObject.SetActive(false);
                }
            }
            #endregion
            OutlineColorChange("Door", Color.yellow);
        }
        yield break;
    }
    bool isKiduitemorauPos_Enter = false;
    IEnumerator T_KiduitemorauPos_Enter()
    {
        //一旦なし
        //if (isKiduitemorauPos_Enter == false)
        //{
        //    //USBケーブル前ポイント拡大縮小演出
        //    KO_NewPosPointObjVis
        //        (KO_KakurePosObjsList[3].transform.Find("KiduitemorauMorePos").gameObject);

        //    isKiduitemorauPos_Enter = true;
        //}
        yield break;
    }
    IEnumerator T_KiduitemorauPos_Exit()
    {
        yield break;
    }
    IEnumerator T_KiduitemorauMorePos_Enter()
    {
        yield break;
    }
    IEnumerator T_KiduitemorauMorePos_Exit()
    {
        yield break;
    }
    IEnumerator T_Rouka02_ClearLineEnter()
    {
        if (EnumRouka02_ClearLine == enumRouka02_ClearLine.範囲外)
        { EnumRouka02_ClearLine = enumRouka02_ClearLine.範囲内; }
        yield break;
    }
    IEnumerator T_Rouka02_ClearLineExit()
    {
        yield break;
    }
    IEnumerator T_SumahoMae01Enter()//監禁ルート夜ベッドスマホ（スマホに乗りあがる）_旧状態 古いイベント状態でしか使用してない
    {
        //連続再生させない
        if (EnumSumahoMae01 == enumSumahoMae01.終了) { yield break; }
        EnumSumahoMae01 = enumSumahoMae01.終了;

        KO_isMovePosLock = true;//移動止め
        NovelSetVis("SumahoMae01Enter010");//でっか！　電源ボタンに手を添えて・・
        while (isNovelSetVisIng) { yield return null; }


        #region ゲームシステム設定
        isKOSystem = false;
        isTansakuSystem = false;
        KO_isMovePosLock = false;//移動止め解除

        //■■■脚のぼりシステム コルーチン始動
        StartCoroutine(AsinoboriSystem());
        //脚のぼりシステム設定
        AN_isGrapPowerMode = false;

        #endregion
        #region ■電源ボタン押し
        bool isTmpRetry = false;//画面消えた場合台詞かえる用

        電源ONやり直し:
        #region 頭前に動かして電源押し演出（押したら電源ON）
        bool isTmpEventLoop = true;
        while (isTmpEventLoop)
        {
            if (AN_nowLSerchCollObj != null && AN_nowRSerchCollObj != null)
            {
                if (AN_nowLSerchCollObj.name == "Collider_ChieriSumaho02_Dengen" &&
                AN_nowRSerchCollObj.name == "Collider_ChieriSumaho02_Dengen" &&
                AN_isLGrap == true &&
                AN_isRGrap == true)
                {

                    //電源押しこむネタ保留 即電源付き
                    goto 電源ON;

                    #region 頭前進 設定
                    GameObject VRCamGoalPosObj = Instantiate(Resources.Load("_PosObj/E_Kankin_Day1/SumahoDengen/VRCamGoalPosObj") as GameObject);
                    DB.evMoveDelObjList.Add(VRCamGoalPosObj);
                    VRCamGoalPosObj.transform.SetParent(GameObjectsTrs, false);

                    //スライダー取得
                    Slider VRCamGoalSlider = VRCamGoalPosObj.transform.Find("VRCamGoalSliderObj").GetComponent<Slider>();

                    ////スライダーをカメラにくっつける場合
                    //VRCamGoalSlider.gameObject.transform.SetParent(VRCameraTrs);

                    //GameObject VRCamGoalSliderObj = Resources.Load("_PosObj/E_Kankin_Day1/SumahoDengen/VRCamGoalSliderObj") as GameObject;
                    //VRCamGoalSlider.gameObject.transform.localPosition = VRCamGoalSliderObj.transform.localPosition;
                    //VRCamGoalSlider.gameObject.transform.localEulerAngles = VRCamGoalSliderObj.transform.localEulerAngles;
                    //VRCamGoalSlider.gameObject.transform.localScale = VRCamGoalSliderObj.transform.localScale;

                    #endregion

                    #region 頭前進 計算と分岐 （手をつけたまま押し切った or 手を離した）
                    bool isTmpVRForward = false;
                    float //カメラから見たローカル位置で計算
                        tmpVRCamMag = (VRCameraTrs.localPosition - CameraAdjustTrackingTrs.InverseTransformPoint(VRCamGoalPosObj.transform.position)).magnitude;
                    //現在Magを最低値に 0.1を最高値に（近づくほど値が低くなるので、スライダー用にマイナスにする）
                    VRCamGoalSlider.minValue = -tmpVRCamMag;
                    VRCamGoalSlider.maxValue = -0.1f;
                    while (isTmpVRForward == false)
                    {
                        tmpVRCamMag = (VRCameraTrs.localPosition - CameraAdjustTrackingTrs.InverseTransformPoint(VRCamGoalPosObj.transform.position)).magnitude;
                        VRCamGoalSlider.value = -tmpVRCamMag;

                        if (VRCamGoalSlider.maxValue == VRCamGoalSlider.value)
                        {
                            isTmpVRForward = true;
                            Destroy(VRCamGoalPosObj);
                            Destroy(VRCamGoalSlider.gameObject);
                            goto 電源ON;
                        }

                        if (AN_isLGrap == false || AN_isRGrap == false)
                        {
                            Destroy(VRCamGoalPosObj);
                            Destroy(VRCamGoalSlider.gameObject);
                            goto 手を離した;
                        }

                        yield return null;
                    }
                    #endregion
                }
            }
            手を離した:
            yield return null;
        }
        #endregion

        電源ON:
        #region 電源ON(手どちらか画面さわり判定)（さわらなければ画面消える）
        ChieriSumahoPower();

        if (!isTmpRetry)
        {
            NovelSetVis("SumahoMae01Enter020");//うわっ！
            //手をあてたら先に進む
            while (isNovelSetVisIng)
            {
                #region 手どちから画面さわり判定で分岐
                //左手
                if (AN_nowLSerchCollObj != null &&
                    AN_nowLSerchCollObj.name == "Collider_ChieriSumaho03_Gamen" &&
                    AN_isLGrap == true)
                { goto 画面に手をあてた; }
                //右手
                if (AN_nowRSerchCollObj != null &&
                    AN_nowRSerchCollObj.name == "Collider_ChieriSumaho03_Gamen" &&
                    AN_isRGrap == true)
                { goto 画面に手をあてた; }
                #endregion
                yield return null;
            }
            goto 画面消えた;
        }
        else
        {
            NovelSetVis("SumahoMae01Enter040");//よしすぐに手を画面に
            //画面に手をあてたら先に進む
            while (true)
            {
                #region 手どちらか画面さわり判定で分岐
                //左手
                if (AN_nowLSerchCollObj != null &&
                    AN_nowLSerchCollObj.name == "Collider_ChieriSumaho03_Gamen" &&
                    AN_isLGrap == true)
                { goto 画面に手をあてた; }
                //右手
                if (AN_nowRSerchCollObj != null &&
                    AN_nowRSerchCollObj.name == "Collider_ChieriSumaho03_Gamen" &&
                    AN_isRGrap == true)
                { goto 画面に手をあてた; }
                #endregion
                yield return null;
            }
        }

        #endregion

        画面消えた:
        #region 画面消えた
        ChieriSumahoPower(false);
        NovelSetVis("SumahoMae01Enter030");//あっ！
        while (isNovelSetVisIng) { yield return null; }
        isTmpRetry = true;//2回目以降フラグ
        goto 電源ONやり直し;
        #endregion

        #endregion

        画面に手をあてた:
        #region ■画面に手をあてた（乗りあがる）

        NovelSetVis("SumahoMae01Enter050");//このまま乗りあがろう
        while (isNovelSetVisIng) { yield return null; }

        //プレイヤー 机の上探索位置に乗りあがりTween
        GameObject Player02SumahoNoriagariPosObj = Resources.Load("_PosObj/E_Kankin_Day1/SumahoDengen/Player02SumahoNoriagariPosObj") as GameObject;
        CameraObjectsTrs.DOLocalMoveY(Player02SumahoNoriagariPosObj.transform.localPosition.y, 1)
            .SetEase(Ease.InOutBack);
        CameraObjectsTrs.DOLocalMoveX(Player02SumahoNoriagariPosObj.transform.localPosition.x, 1)
            .SetEase(Ease.InBack);
        CameraObjectsTrs.DOLocalMoveZ(Player02SumahoNoriagariPosObj.transform.localPosition.z, 1)
            .SetEase(Ease.InBack);

        //ウェイト
        yield return new WaitForSeconds(3);

        isANSystem = false;
        NovelSetVis("SumahoMae01Enter060");//ふう・・問題はここからだぞ。
        while (isNovelSetVisIng) { yield return null; }

        #region バッテリーLow出現
        GameObject tmpBatteryLowObj = Instantiate(Resources.Load("Main/KomonoObj/SmartPhone/Prefab/BatteryLow") as GameObject);
        DB.evMoveDelObjList.Add(tmpBatteryLowObj);
        tmpBatteryLowObj.transform.SetParent(ChieriSmartPhoneCanvasTrs, false);
        //バッテリーLow以外明るさ手動で下げる
        for (int i = 0; i < chieriSumahoFadeImageList.Count; i++)
        { chieriSumahoFadeImageList[i].DOColor(new Color(1, 1, 1, 0.5f), 0.2f); }

        for (int i = 0; i < chieriSumahoFadeTextList.Count; i++)
        { chieriSumahoFadeTextList[i].DOColor(new Color(1, 1, 1, 0.5f), 0.2f); }

        //SE
        GameObject tmpSpeakerPosObj = Instantiate(Resources.Load("_PosObj/E_Kankin_Day1/SumahoDengen/SumahoSpeakerPosObj") as GameObject);
        tmpSpeakerPosObj.transform.SetParent(ChieriSumahoObj.transform, false);
        SEPlay(UISEObj, "ui_notification_01_error", tmpSpeakerPosObj);
        #endregion

        NovelSetVis("SumahoMae01Enter070");//うわ！
        while (novelCurrentPageInt < 2) { yield return null; }

        Hukidashi("D36010b010");//んん

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(3);

        Hukidashi("D36010b020");//・・・
        yield return new WaitForSeconds(3);

        NovelSetVis("SumahoMae01Enter080");//な、なんとか起きずに済んだ……か……？
        while (isNovelSetVisIng) { yield return null; }


        #endregion

        #region ケーブル前へ移動PosObj設置して終わり
        KO_isMovePosLock = false;
        //■隠れ鬼移動システムON
        KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
        //ローディング待ち
        while (isKOSystemLoading) { yield return null; }
        //移動場所03オン
        KO_KakurePosObjsList[5].SetActive(true);
        //スマホ電源前移動ポイント演出
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[5].transform.Find("SumahoUeCableMae").gameObject);
        #endregion


        yield break;
    }
    IEnumerator T_SumahoMae01Exit()
    {
        yield break;
    }
    IEnumerator T_SumahoUeCableMae01Enter()//ケーブル引っ張り引っ張られ落ち_旧状態 古いイベント状態でしか使用してない
    {
        Debug.Log("コリダーイベント");
        KO_isMovePosLock = true;//移動止め
        NovelSetVis("SumahoUeCableMae01Enter010");//やっぱりきちんと刺さってる
        while (isNovelSetVisIng) { yield return null; }

        #region ゲームシステム設定
        isKOSystem = false;
        isTansakuSystem = false;
        KO_isMovePosLock = false;//移動止め解除

        //■■■脚のぼりシステム コルーチン始動
        StartCoroutine(AsinoboriSystem());
        //脚のぼりシステム設定
        AN_isGrapPowerMode = false;
        //rigid監視スタート
        StartCoroutine(RigidReadSystem());
        #endregion

        #region 両手ケーブル掴み待ち
        while (true)
        {
            if (AN_nowLSerchCollObj != null && AN_nowRSerchCollObj != null)
            {
                if (AN_nowLSerchCollObj.name == "Cable_Bone14" &&
                AN_nowRSerchCollObj.name == "Cable_Bone14" &&
                AN_isLGrap == true &&
                AN_isRGrap == true)
                {
                    AN_isInputLock = true;//離さないように
                    AN_isAutoPullLeaveMode = false;//落ちるときも離さないように
                    NovelSetVis("SumahoUeCableMae01Enter020");//ぐにぐにと
                    while (isNovelSetVisIng) { yield return null; }
                    goto 両手ケーブル掴んだ;
                }
            }
            yield return null;
        }
        #endregion

        両手ケーブル掴んだ:
        #region ぐにぐに動かすシステム
        //VRカメラをゆっくり追いかけるObjとの距離が離れるほどメーターが上がる仕組み

        #region 設定

        //Objを生成
        GameObject tmpVRChaseObj = new GameObject();
        tmpVRChaseObj.name = "tmpVRChaseObj";
        tmpVRChaseObj.transform.SetParent(CameraAdjustTrackingTrs, false);
        tmpVRChaseObj.transform.localPosition = VRCameraTrs.localPosition;

        //スライダーをカメラにくっつける
        GameObject VRCamGoalSliderObj = Instantiate(Resources.Load("_PosObj/E_Kankin_Day1/SumahoDengen/VRCamGoalSliderObj") as GameObject);
        DB.evMoveDelObjList.Add(VRCamGoalSliderObj);
        VRCamGoalSliderObj.transform.SetParent(VRCameraTrs, false);

        //スライダー取得
        Slider VRCamGoalSlider = VRCamGoalSliderObj.GetComponent<Slider>();

        //ケーブル根元取得
        GameObject USBCable14Obj = ChieriSumahoUSBCableObj.transform.Find("Cable_Bone14").gameObject;

        float //VRカメラとObjとの距離
            tmpVRCamMag = (VRCameraTrs.localPosition - tmpVRChaseObj.transform.localPosition).magnitude;
        Tweener
            tmpVRCamChaseTweener = tmpVRChaseObj.transform.DOLocalMove(VRCameraTrs.localPosition, 0.4f)
            .SetEase(Ease.Linear)
            .SetAutoKill(false);

        //距離 最小値 最大値 設定
        VRCamGoalSlider.minValue = 0;
        VRCamGoalSlider.maxValue = 0.1f;
        #endregion
        goto デバッグ移動; //（ぐにぐにいじるイベントスキップ）

        //■三回引っ張ったらループ抜けてケーブル外れる
        //引っ張り回数カウンタ
        int tmpCount = 0;
        while (tmpCount <= 2)
        {
            //スライダー代入
            tmpVRCamMag = (VRCameraTrs.localPosition - tmpVRChaseObj.transform.localPosition).magnitude;
            VRCamGoalSlider.value = tmpVRCamMag;

            //Obj追従
            tmpVRCamChaseTweener.ChangeEndValue(VRCameraTrs.localPosition, true).Restart();

            //スライダーマックス時
            if (VRCamGoalSlider.maxValue == VRCamGoalSlider.value)
            {
                //少しケーブル抜ける
                USBCable14Obj.transform.DOLocalMove(USBCable14Obj.transform.localPosition
                    + new Vector3(0, 0.0002f, 0), 0.5f);

                //カメラのxがObjのxより多い = カメラより左にObjがある = 右に引っ張る
                if (VRCameraTrs.localPosition.x - tmpVRChaseObj.transform.localPosition.x >= 0)
                {
                    USBCable14Obj.transform.DOLocalRotate(USBCable14Obj.transform.localEulerAngles
                        + new Vector3(0, 0, -1f), 0.5f);
                }
                //その逆
                else if (VRCameraTrs.localPosition.x - tmpVRChaseObj.transform.localPosition.x <= 0)
                {
                    USBCable14Obj.transform.DOLocalRotate(USBCable14Obj.transform.localEulerAngles
                        + new Vector3(0, 0, 1f), 0.5f);
                }

                SEPlay(UISEObj, "UI_pek");
                tmpVRChaseObj.transform.localPosition = VRCameraTrs.localPosition;
                tmpCount++;
            }
            yield return null;
        }
        #endregion

        デバッグ移動:
        #region ケーブル外れる
        Destroy(tmpVRChaseObj);
        Destroy(VRCamGoalSliderObj);

        NovelSetVis("SumahoUeCableMae01Enter030");//なんか引っ張られるような力が

        USBCable14Obj.transform.DOLocalMove(USBCable14Obj.transform.localPosition
            + new Vector3(0, 0.021f, 0), 0.5f);
        yield return new WaitForSeconds(1.5f);

        USBCable14Obj.transform.DOLocalMove(USBCable14Obj.transform.localPosition
            + new Vector3(0, 0.051f, 0), 0.5f);
        yield return new WaitForSeconds(1f);
        isNovelFadeTween = isNovelSetVisIng = false;

        #region //ペアレントしてカメラ回転するなら
        //isANSystem = false;
        //CameraObjectsTrs.SetParent(USBCable12Obj.transform);
        //USBCable12Obj.GetComponent<Rigidbody>().isKinematic = false;
        //while (true)
        //{
        //    if (Input.GetKeyDown(KeyCode.V))
        //    {
        //        CameraObjectsTrs.SetParent(GameObjectsTrs);
        //        goto 落下;
        //    }
        //    yield return null;
        //}
        #endregion

        USBCable14Obj.GetComponent<Rigidbody>().isKinematic = false;
        #endregion

        #region 地面に激突して、起き上がるまで
        while (CameraObjectsTrs.localPosition.y >= 0.01f)
        {
            if ((DB.isDebugMode && Input.GetKeyDown(KeyCode.V))) { goto 落下; }
            yield return null;
        }
        落下:
        FadeWhite(1, 0);

        SEPlay("cableFallShock01_cannon1", 0.6f);
        PlayerHPAddSub(-800);
        isANSystem = false;

        GameObject Player03CableFallBoundPosObj = Resources.Load("_PosObj/E_Kankin_Day1/SumahoDengen/Player03CableFallBoundPosObj") as GameObject;
        CameraObjectsTrs.localEulerAngles = Player03CableFallBoundPosObj.transform.localEulerAngles;


        CameraObjectsTrs.DOLocalMoveX(Player03CableFallBoundPosObj.transform.localPosition.x, 2)
            .SetEase(Ease.OutSine);
        CameraObjectsTrs.DOLocalMoveZ(Player03CableFallBoundPosObj.transform.localPosition.z, 2)
            .SetEase(Ease.OutSine);
        CameraObjectsTrs.DOLocalMoveY(0.03f, 0.3f)
            .SetEase(Ease.OutCubic)
            .OnComplete(() =>
            {
                SEPlay("CableFallSlip01_fuse1", 0.8f);
                CameraObjectsTrs.DOLocalMoveY(Player03CableFallBoundPosObj.transform.localPosition.y, 0.3f)
                .SetEase(Ease.OutBounce);
                PlayerHPAddSub(-400);
            });

        yield return new WaitForSeconds(0.05f);

        FadeWhite(0, 0);

        yield return new WaitForSeconds(3f);

        NovelSetVis("SumahoUeCableMae01Enter040");//い・・づぁ・・。　駄目だ、こんな怪我じゃ
        while (isNovelSetVisIng) { yield return null; }

        //暗幕
        FadeBlack(1, 0.5f);
        yield return new WaitForSeconds(0.5f);

        GameObject Player04CableFallBoundStandPosObj = Resources.Load("_PosObj/E_Kankin_Day1/SumahoDengen/Player04CableFallBoundStandPosObj") as GameObject;
        CameraObjectsTrs.localEulerAngles = Player04CableFallBoundStandPosObj.transform.localEulerAngles;
        CameraObjectsTrs.localPosition = Player04CableFallBoundStandPosObj.transform.localPosition;
        CameraAnchorTrs.localEulerAngles = Vector3.zero;

        //開幕
        FadeBlack(0, 0.5f);
        yield return new WaitForSeconds(0.5f);

        yield return new WaitForSeconds(2f);

        #endregion


        NovelSetVis("SumahoUeCableMae01Enter050");//（ひ、ひとまず、うっかり踏まれない場所を探そう）
        while (isNovelSetVisIng) { yield return null; }

        EventMove("寝床探し");

        yield break;
    }
    IEnumerator T_SumahoUeCableMae01Exit()
    {
        yield break;
    }
    IEnumerator T_BedUnder01Enter()//ベッド下空間に入った時
    {
        if (EnumBedUnder01 == enumBedUnder01.初回到着)
        {
            EnumBedUnder01 = enumBedUnder01.終了;
            NovelSetVis("T_BedUnder01_初回", true);//うっぷ
        }

        yield break;
    }
    IEnumerator T_BedUnder01Exit()
    {
        yield break;
    }
    IEnumerator T_Carpet_AreaEnter()//カーペット空間に入った時
    {
        if (EnumCarpet_Area == enumCarpet_Area.初回_ドア遠い)
        {
            EnumCarpet_Area = enumCarpet_Area.終了;
            NovelSetVis("T_Carpet_Area_ドア遠い", true);//どんだけ遠いんだ・・！
        }
        else if (EnumCarpet_Area == enumCarpet_Area.繊維と思えない)
        {
            EnumCarpet_Area = enumCarpet_Area.終了;
            //NovelSetVis("T_Carpet_Area_初回到着");//これがカーペットの繊維……
        }

        yield break;
    }
    IEnumerator T_Carpet_AreaExit()
    {
        if (EnumCarpet_Area == enumCarpet_Area.起きぬけ脱出前)
        {
            EnumCarpet_Area = enumCarpet_Area.終了;
            NovelSetVis("F3080b040");//ここにいるぞー！
        }
        yield break;
    }//カーペット出た時
    IEnumerator T_PlayerStartPosArea01Enter()
    {
        yield break;
    }
    IEnumerator T_PlayerStartPosArea01Exit()//寝床探し歩き始め
    {
        if (EnumPlayerStartPosArea01 == enumPlayerStartPosArea01.初回脱出)
        {
            EnumPlayerStartPosArea01 = enumPlayerStartPosArea01.終了;
            //SE
            SEPlay("heart_def", 0.4f);
            //白フラッシュ
            FadeWhite(0.3f, 0.05f); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);

            NovelSetVis("F3070010");//あいっづ…！
        }
        yield break;
    }
    IEnumerator T_BedUnderSleepPos01Enter()//ベッド下眠り場所
    {
        KO_isMovePosLock = true;
        if (EnumBedUnderSleepPos01 == enumBedUnderSleepPos01.初回到着)
        {
            EnumBedUnderSleepPos01 = enumBedUnderSleepPos01.二回目;
            NovelSetVis("■T_BedUnderSleepPos01Enter_初回");//ここで寝る 別の場所探す
        }
        else if (EnumBedUnderSleepPos01 == enumBedUnderSleepPos01.二回目)
        {
            NovelSetVis("■T_BedUnderSleepPos01Enter_二回目");//やっぱりここで寝る 別の場所探す
        }

        #region 選択肢 ここで寝る 別の場所を探す
        sentakuListNum = 99;//初期化
                            //ノベル選択肢タイミング（終了直前）までループ
        while (isNovelSentakushiWait) { yield return null; }
        yield return new WaitForSeconds(1);
        Sentakushi("■ここで寝るかどうかa", Mathf.Infinity, "ベッドの下で寝る？");
        Sentakushi("■ここで寝るかどうかb", Mathf.Infinity);

        //選択肢選ばれるまでループ
        while (sentakuListNum == 99) { yield return null; }
        yield return null;

        switch (sentakuListNum)
        {
            case 0://選択肢a 寝る
                goto ここで寝る;

            case 1://選択肢b　起きる
                goto 別の場所を探す;
        }

        yield break;

        ここで寝る:
        KO_isMovePosLock = false;
        isKOSystem = false;
        isTansakuSystem = false;

        staticFlagDict["起床ガラステーブル下"] = false;


        yield return new WaitForSeconds(0.5f);
        NovelSetVis("T_BedUnderSleepPos01Enter_初回a010");//しょうがないよな　なんでこんな目に
        while (novelCurrentPageInt < 3) { yield return null; };

        //暗幕
        KankyouBGMVolumer(0.4f, 2);
        FadeBlack(1, 3);
        while (isNovelSetVisIng) { yield return null; };
        KankyouBGMVolumer(0, 4);
        yield return new WaitForSeconds(2);
        EventMove("床上起床");

        yield break;


        別の場所を探す:
        yield return new WaitForSeconds(0.5f);
        NovelSetVis("T_BedUnderSleepPos01Enter_初回b010");//元に戻る方法はないか
        while (isNovelSetVisIng) { yield return null; }
        KO_isMovePosLock = false;
        yield break;
        #endregion


    }
    IEnumerator T_BedUnderSleepPos01Exit()
    {
        yield break;
    }
    IEnumerator T_GrasstableUnderSleepPos01Enter()//ガラステーブル下眠り場所
    {
        KO_isMovePosLock = true;
        if (EnumGrasstableUnderSleepPos01 == enumGrasstableUnderSleepPos01.初回到着)
        {
            EnumGrasstableUnderSleepPos01 = enumGrasstableUnderSleepPos01.二回目;
            NovelSetVis("■T_GrasstableUnderSleepPos01Enter_初回");//ここで寝る 別の場所探す
        }
        else if (EnumGrasstableUnderSleepPos01 == enumGrasstableUnderSleepPos01.二回目)
        {
            NovelSetVis("■T_GrasstableUnderSleepPos01Enter_二回目");//やっぱりここで寝る 別の場所探す
        }

        #region 選択肢 ここで寝る 別の場所を探す
        sentakuListNum = 99;//初期化
                            //ノベル選択肢タイミング（終了直前）までループ
        while (isNovelSentakushiWait) { yield return null; }
        yield return new WaitForSeconds(1);
        Sentakushi("■ここで寝るかどうかa", Mathf.Infinity, "テーブルの下で寝る？");
        Sentakushi("■ここで寝るかどうかb", Mathf.Infinity);

        //選択肢選ばれるまでループ
        while (sentakuListNum == 99) { yield return null; }
        yield return null;

        switch (sentakuListNum)
        {
            case 0://選択肢a 寝る
                goto ここで寝る;

            case 1://選択肢b　起きる
                goto 別の場所を探す;
        }

        yield break;

        ここで寝る:
        KO_isMovePosLock = false;
        isKOSystem = false;
        isTansakuSystem = false;

        staticFlagDict["起床ガラステーブル下"] = true;


        yield return new WaitForSeconds(0.5f);
        NovelSetVis("T_GrasstableUnderSleepPos01Enter_初回a010");//まあここでいいか
        while (novelCurrentPageInt < 3) { yield return null; };

        KankyouBGMVolumer(0.4f, 2);

        //暗幕
        FadeBlack(1, 3);
        while (isNovelSetVisIng) { yield return null; };
        KankyouBGMVolumer(0, 4);
        yield return new WaitForSeconds(2);

        EventMove("床上起床");

        yield break;


        別の場所を探す:
        yield return new WaitForSeconds(0.5f);
        NovelSetVis("T_GrasstableUnderSleepPos01Enter_初回b010");//元に戻る方法はないか
        while (isNovelSetVisIng) { yield return null; }
        KO_isMovePosLock = false;
        yield break;
        #endregion


    }
    IEnumerator T_GrasstableUnderSleepPos01Exit()
    {
        yield break;
    }
    bool isTableAsiKage_Enter = false, isTableAsiKage_Exit = false;
    IEnumerator T_TableAsiKage_Enter()//智恵理・テーブル横到着フラグのみ
    {
        if (isTableAsiKage_Enter) { yield break; }
        isTableAsiKage_Enter = true;
        yield break;
    }
    IEnumerator T_TableAsiKage_Exit()//智恵理・テーブル横離れフラグのみ
    {
        if (isTableAsiKage_Exit) { yield break; }
        isTableAsiKage_Exit = true;
        yield break;
    }
    bool isTabletYoko_Enter = false;
    IEnumerator T_TabletYoko_Enter()//タブレット横到着フラグ
    {
        if (isTabletYoko_Enter) { yield break; }
        isTabletYoko_Enter = true;

        yield break;

    }
    IEnumerator T_TabletYoko_Exit()
    {
        yield break;
    }
    bool isBottleCenterPosArea_Exit = false;//↓ペットボトル中心左右前後
    IEnumerator T_BottleCenterPosArea_Enter()
    {
        yield break;
    }
    IEnumerator T_BottleCenterPosArea_Exit()
    {
        if (isBottleCenterPosArea_Exit == false)
        {
            isBottleCenterPosArea_Exit = true;
            NovelSetVis("T_BottleCenterPosArea_Exit", true);//出してくれ！
        }
        yield break;
    }
    bool isBottleLeftPosArea_Enter = false;
    IEnumerator T_BottleLeftPosArea_Enter()
    {
        if (isBottleLeftPosArea_Enter == false)
        { isBottleLeftPosArea_Enter = true; }
        yield break;
    }
    IEnumerator T_BottleLeftPosArea_Exit()
    {
        yield break;
    }
    bool isBottleRightPosArea_Enter = false;
    IEnumerator T_BottleRightPosArea_Enter()
    {
        if (isBottleRightPosArea_Enter == false)
        { isBottleRightPosArea_Enter = true; }
        yield break;
    }
    IEnumerator T_BottleRightPosArea_Exit()
    {
        yield break;
    }
    bool isBottleForwardPosArea_Enter = false;
    IEnumerator T_BottleForwardPosArea_Enter()
    {
        if (isBottleForwardPosArea_Enter == false)
        { isBottleForwardPosArea_Enter = true; }
        yield break;
    }
    IEnumerator T_BottleForwardPosArea_Exit()
    {
        yield break;
    }
    bool isBottleBackPosArea_Enter = false;
    IEnumerator T_BottleBackPosArea_Enter()
    {
        if (isBottleBackPosArea_Enter == false)
        { isBottleBackPosArea_Enter = true; }
        yield break;
    }
    IEnumerator T_BottleBackPosArea_Exit()
    {
        yield break;
    }
    bool isPetBottleExitPos_Enter = false;
    IEnumerator T_PetBottleExitPos_Enter()
    {
        if (isPetBottleExitPos_Enter == false)
        { isPetBottleExitPos_Enter = true; }
        yield break;
    }
    IEnumerator T_PetBottleExitPos_Exit()
    {
        yield break;
    }


    //探索Objリストからアウトライン取得して色変更
    void OutlineColorChange(string tansakuObjName, Color color)
    {
        for (int i = 0; i < TansakuObjList.Count; i++)
        {
            if (TansakuObjList[i].name == tansakuObjName)
            {
                GameObject tmpOutlineObj
                    = TansakuObjList[i].transform.Find("TansakuOutlineMesh").gameObject;

                //自動でInstance化されたので直接変更
                Renderer tmpRenderer
                    = tmpOutlineObj.GetComponent<Renderer>();
                //tmpRenderer.material.SetColor("_OutlineColor", color);

                //マテリアル複数の場合（Doorなど）もあるのでmaterial　ではなく　materials　をforで
                for (int k = 0; k < tmpRenderer.materials.Length; k++)
                {
                    tmpRenderer.materials[k].SetColor("_OutlineColor", color);
                }

                #region アウトライン複数の場合（Hikidashiなど）は子になっているのでforeachで同じ処理
                foreach (Transform p in tmpOutlineObj.transform)
                {
                    tmpRenderer
                        = p.GetComponent<Renderer>();
                    //マテリアル複数の場合（Doorなど）もあるのでmaterial　ではなく　materials　をforで
                    for (int k = 0; k < tmpRenderer.materials.Length; k++)
                    {
                        tmpRenderer.materials[k].SetColor("_OutlineColor", color);
                    }
                }
                #endregion

                break;//for終了
            }
        }
    }

    #endregion
    #region ■■探索イベントフラグ群
    [SerializeField, HeaderAttribute("探索イベントフラグ群")]
    bool dummy;

    #region SeeRay系フラグ
    public enum enumChair
    { 初回, 覗き込み, 見上げ, 終了 };
    public enumChair EnumChair;

    public enum enumHikidashi
    { 初回, 覗き込み, 即USB };
    public enumHikidashi EnumHikidashi;

    public enum enumBattlePony
    { 初回, 近づき, 諦め, 状態が良い, 祟られる };
    public enumBattlePony EnumBattlePony;

    public enum enumStandlight
    { 初回, 初回スイッチ前, 電源に気づく, スイッチ付いてる, スイッチ付いてない };
    public enumStandlight EnumStandlight;

    public enum enumCurtain
    { 初回, 窓段差前の位置 };
    public enumCurtain EnumCurtain;

    public enum enumCord
    { 初回_見てから気づく, 気づいてから見つける, 気づいてる見つけてる };
    public enumCord EnumCord;

    public enum enumGomibako
    { 初回_早く戻らないと, 終了 };
    public enumGomibako EnumGomibako;

    public enum enumDoor
    { 初回, 隙間あるかな, 出待ちするか, 出待ちするか短 };
    public enumDoor EnumDoor;

    public enum enumChieriSumaho
    { 探索2監禁範囲外_初回, 探索2監禁範囲内_初回, 探索2監禁範囲内_充電して下さい };
    public enumChieriSumaho EnumChieriSumaho;
    #endregion

    #region ■コリダー系フラグ
    public enum enumTsukueHazi
    { 範囲外初回, 範囲外二回目以降 };
    public enumTsukueHazi EnumTsukueHazi;

    public enum enumIsuMae
    { 範囲外, 範囲内 };
    public enumIsuMae EnumIsuMae;

    public enum enumStandLightMae
    { 範囲外, 範囲内 };
    public enumStandLightMae EnumStandLightMae;

    public enum enumMadoDansaMae
    { 範囲外, 範囲内 };
    public enumMadoDansaMae EnumMadoDansaMae;

    public enum enumCordMae
    { 範囲外, 範囲内 };
    public enumCordMae EnumCordMae;

    //public enum enumSkeltonTansakuArea_
    //{ 範囲外, 範囲内 };
    //public enumDeskUraEnRoute_ EnumSkeltonTansakuArea_;

    public enum enumDeskUraEnRoute_
    { 初回通過, 終了 };
    public enumDeskUraEnRoute_ EnumDeskUraEnRoute_;

    public enum enumDeskUraEscape_
    { 初回通過, 終了 };
    public enumDeskUraEscape_ EnumDeskUraEscape_;

    public enum enumUSBCableMae
    { 初回到着, 終了 };
    public enumUSBCableMae EnumUSBCableMae;

    public enum enumTsukueTVgawa01
    { 範囲外初回, 範囲外二回目以降 };
    public enumTsukueTVgawa01 EnumTsukueTVgawa01;

    public enum enumRouka02_ClearLine
    { 範囲外, 範囲内 };
    public enumRouka02_ClearLine EnumRouka02_ClearLine;

    public enum enumSumahoMae01
    { 初回到着, 終了 };
    public enumSumahoMae01 EnumSumahoMae01;

    public enum enumBedUnder01
    { 初回到着, 終了 };
    public enumBedUnder01 EnumBedUnder01;

    public enum enumCarpet_Area
    { 初回_ドア遠い, 繊維と思えない, 起きぬけ脱出前, 終了 };
    public enumCarpet_Area EnumCarpet_Area;

    public enum enumPlayerStartPosArea01
    { 初回脱出, 終了 };
    public enumPlayerStartPosArea01 EnumPlayerStartPosArea01;

    public enum enumBedUnderSleepPos01
    { 初回到着, 二回目 };
    public enumBedUnderSleepPos01 EnumBedUnderSleepPos01;

    public enum enumGrasstableUnderSleepPos01
    { 初回到着, 二回目 };
    public enumGrasstableUnderSleepPos01 EnumGrasstableUnderSleepPos01;

    #endregion

    #endregion
    IEnumerator D2000()//探索1
    {
        if (debugEventMoveFlag == true)
        {
            #region 大きさや位置 小物
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;

            //智恵理0位置ロック解除
            DB.isChieriPosLock = false;
            GirlMeshTrs.gameObject.SetActive(false);

            //■PosObjで読み込み
            //プレイヤー 机の上探索位置に
            #region プレイヤー 位置とポーズとカメラリセット
            //プレイヤー ケーブル降りる位置に
            GameObject Player_00_DeskUeTansaku1PosObj
                = Resources.Load("_PosObj/D_Henai_Day1/Player_00_DeskUeTansaku1PosObj") as GameObject;
            CameraObjectsTrs.localPosition = Player_00_DeskUeTansaku1PosObj.transform.localPosition;

            //カメラリセット値変更してリセット
            CameraReset(Player_00_DeskUeTansaku1PosObj.transform.localEulerAngles
                , DB.cameraStandAnchorDefLocalPos //アンカー倒れ位置の
                , false
                , Vector3.zero);//アンカー倒れの斜め

            #endregion

            #region 小物
            //小物消し
            Drill_chieriTrs.gameObject.SetActive(false);
            DrillTrs.gameObject.SetActive(false);
            KeshigomuObj.SetActive(true);
            SharpenObj.SetActive(true);

            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;
            #endregion

            //椅子飛び降りるよう位置
            GameObject Chair_010_IsuDivePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1/Chair_010_IsuDivePosObj") as GameObject;
            ChairTrs.localPosition = Chair_010_IsuDivePosObj.transform.localPosition;
            ChairTrs.localEulerAngles = Chair_010_IsuDivePosObj.transform.localEulerAngles;

            #region ケーブル バッテリー設置
            GameObject USBCable02_Battery_NoboriPrefab;
            //既に編集用に置いてあったら取得
            if (GameObject.Find("USBCable02_Battery_NoboriPrefab") != null)
            {
                USBCable02_Battery_NoboriPrefab
                    = GameObject.Find("USBCable02_Battery_NoboriPrefab");
            }
            else //無ければリソースから
            {
                USBCable02_Battery_NoboriPrefab
                    = Instantiate(Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/USBCable02_Battery_NoboriPrefab") as GameObject
                    , GameObjectsTrs, false);
                USBCable02_Battery_NoboriPrefab.name = "USBCable02_Battery_NoboriPrefab";
            }
            DB.sceneMoveDelObjList.Add(USBCable02_Battery_NoboriPrefab);

            GameObject BatteryObj;
            //既に編集用に置いてあったら取得
            if (GameObject.Find("Battery") != null)
            { BatteryObj = GameObject.Find("Battery"); }
            else //無ければリソースから
            {
                BatteryObj = Instantiate(Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/Battery") as GameObject
                  , GameObjectsTrs, false);
                BatteryObj.name = "Battery";
            }
            DB.sceneMoveDelObjList.Add(BatteryObj);

            //智恵理スマホ
            ChieriSumahoObj.SetActive(true);
            ChieriSumahoObj.transform.SetParent(GameObjectsTrs, false);//智恵理の手から外して

            GameObject ChieriSumaho010_HikidashiUePosObj
                = Resources.Load("_PosObj/13Tansaku00/ChieriSumaho010_HikidashiUePosObj") as GameObject;

            ChieriSumahoObj.transform.localPosition = ChieriSumaho010_HikidashiUePosObj.transform.localPosition;
            ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho010_HikidashiUePosObj.transform.localEulerAngles;
            #endregion

            #endregion
        }
        EventReset();
        yield return null;
        //引き出しの上に表示演出
        //環境音フェードイン
        KankyouBGMVolumer(1f, 2);

        #region ■隠れ鬼移動システム 探索システムON

        //■隠れ鬼移動システムON
        KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
        //ローディング待ち
        while (isKOSystemLoading) { yield return null; }
        //移動場所オン
        int tmpListInt = 1;
        KO_KakurePosObjsList[tmpListInt].SetActive(true);
        //走りスピードにしてモーションも走りに
        playerMoveSpeed = 4;
        isKO_PlayerWalk = false;

        #region ■使用する探索オブジェ選別

        //■該当の探索オブジェのコリダータグ書き換え
        foreach (GameObject tmpObj in TansakuObjList)
        {
            //■まずは全部オフ
            //（子の0番目にコリダーのフォルダがあること前提）
            foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
            { CollObjs.tag = "TansakuSeeCollOffObj"; }

            //該当していたら再度ONに戻し
            if (
                tmpObj.name == "Chair"
                || tmpObj.name == "StandLight"
                || tmpObj.name == "Curtain"
                || tmpObj.name == "Cord"
                || tmpObj.name == "Waku"
                || tmpObj.name == "BattlePony"
                )
            {
                foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                { CollObjs.tag = "TansakuSeeCollOnObj"; }
            }

        }
        #endregion

        #region //移動ポイントフラグ管理

        //#region ■移動ポイントフラグチェック パーティクルObj版
        //if (KO_isParticleObjMode)
        //{
        //    //※スフィアのレンダラー全部消し
        //    foreach (Transform i in KO_KakurePosObjsList[1].transform)
        //    { i.GetComponent<Renderer>().enabled = false; }

        //    //引き出し上（フラグないのでただOFF）
        //    GameObject tmpSiroiHikidashiPos = KO_KakurePosObjsList[1].transform.Find("SiroiHikidashiPos").gameObject;
        //    tmpSiroiHikidashiPos.transform.Find("RootNaviEffect").gameObject.SetActive(false);
        //    tmpSiroiHikidashiPos.transform.Find("RootNaviEffectGreen").gameObject.SetActive(false);
        //    tmpSiroiHikidashiPos.transform.Find("RootNaviEffectStop").gameObject.SetActive(false);
        //    tmpSiroiHikidashiPos.GetComponent<CapsuleCollider>().enabled = false;
        //    //椅子前
        //    if (DB.isIsuMaeKOPosFlag)
        //    {
        //        GameObject tmpObj = KO_KakurePosObjsList[1].transform.Find("IsuMae01Sphere").gameObject;
        //        tmpObj.transform.Find("RootNaviEffect").gameObject.SetActive(true);
        //        tmpObj.transform.Find("RootNaviEffectGreen").gameObject.SetActive(false);
        //        tmpObj.transform.Find("RootNaviEffectStop").gameObject.SetActive(false);
        //        tmpObj.GetComponent<CapsuleCollider>().enabled = true;
        //    }
        //    else
        //    {
        //        GameObject tmpObj = KO_KakurePosObjsList[1].transform.Find("IsuMae01Sphere").gameObject;
        //        tmpObj.transform.Find("RootNaviEffect").gameObject.SetActive(false);
        //        tmpObj.transform.Find("RootNaviEffectGreen").gameObject.SetActive(false);
        //        tmpObj.transform.Find("RootNaviEffectStop").gameObject.SetActive(false);
        //        tmpObj.GetComponent<CapsuleCollider>().enabled = false;
        //    }
        //    //スタンドライト前
        //    if (DB.isStandLightMaeKOPosFlag)
        //    {
        //        GameObject tmpObj = KO_KakurePosObjsList[1].transform.Find("StandLightMae02Sphere").gameObject;
        //        tmpObj.transform.Find("RootNaviEffect").gameObject.SetActive(true);
        //        tmpObj.transform.Find("RootNaviEffectGreen").gameObject.SetActive(false);
        //        tmpObj.transform.Find("RootNaviEffectStop").gameObject.SetActive(false);
        //        tmpObj.GetComponent<CapsuleCollider>().enabled = true;
        //    }
        //    else
        //    {
        //        GameObject tmpObj = KO_KakurePosObjsList[1].transform.Find("StandLightMae02Sphere").gameObject;
        //        tmpObj.transform.Find("RootNaviEffect").gameObject.SetActive(false);
        //        tmpObj.transform.Find("RootNaviEffectGreen").gameObject.SetActive(false);
        //        tmpObj.transform.Find("RootNaviEffectStop").gameObject.SetActive(false);
        //        tmpObj.GetComponent<CapsuleCollider>().enabled = false;
        //    }
        //    //窓前
        //    if (DB.isMadoDansaMaeKOPosFlag)
        //    {
        //        GameObject tmpObj = KO_KakurePosObjsList[1].transform.Find("MadoDansaMae03Sphere").gameObject;
        //        tmpObj.transform.Find("RootNaviEffect").gameObject.SetActive(true);
        //        tmpObj.transform.Find("RootNaviEffectGreen").gameObject.SetActive(false);
        //        tmpObj.transform.Find("RootNaviEffectStop").gameObject.SetActive(false);
        //        tmpObj.GetComponent<CapsuleCollider>().enabled = true;
        //    }
        //    else
        //    {
        //        GameObject tmpObj = KO_KakurePosObjsList[1].transform.Find("MadoDansaMae03Sphere").gameObject;
        //        tmpObj.transform.Find("RootNaviEffect").gameObject.SetActive(false);
        //        tmpObj.transform.Find("RootNaviEffectGreen").gameObject.SetActive(false);
        //        tmpObj.transform.Find("RootNaviEffectStop").gameObject.SetActive(false);
        //        tmpObj.GetComponent<CapsuleCollider>().enabled = false;
        //    }
        //    //コード前
        //    if (DB.isCordMaeKOPosFlag)
        //    {
        //        GameObject tmpObj = KO_KakurePosObjsList[1].transform.Find("CordMae04Sphere").gameObject;
        //        tmpObj.transform.Find("RootNaviEffect").gameObject.SetActive(true);
        //        tmpObj.transform.Find("RootNaviEffectGreen").gameObject.SetActive(false);
        //        tmpObj.transform.Find("RootNaviEffectStop").gameObject.SetActive(false);
        //        tmpObj.GetComponent<CapsuleCollider>().enabled = true;
        //    }
        //    else
        //    {
        //        GameObject tmpObj = KO_KakurePosObjsList[1].transform.Find("CordMae04Sphere").gameObject;
        //        tmpObj.transform.Find("RootNaviEffect").gameObject.SetActive(false);
        //        tmpObj.transform.Find("RootNaviEffectGreen").gameObject.SetActive(false);
        //        tmpObj.transform.Find("RootNaviEffectStop").gameObject.SetActive(false);
        //        tmpObj.GetComponent<CapsuleCollider>().enabled = false;
        //    }
        //}
        //#endregion
        //#region ■移動ポイントフラグチェック 従来のスフィア版
        //else
        //{
        //    //引き出し上（フラグないのでただOFF）
        //    GameObject tmpSiroiHikidashiPos = KO_KakurePosObjsList[1].transform.Find("SiroiHikidashiPos").gameObject;
        //    tmpSiroiHikidashiPos.GetComponent<Renderer>().enabled = true;
        //    tmpSiroiHikidashiPos.GetComponent<SphereCollider>().enabled = true;

        //    //椅子前
        //    if (DB.isIsuMaeKOPosFlag)
        //    {
        //        GameObject tmpObj = KO_KakurePosObjsList[1].transform.Find("IsuMae01Sphere").gameObject;
        //        tmpObj.GetComponent<Renderer>().enabled = true;
        //        tmpObj.GetComponent<SphereCollider>().enabled = true;
        //    }
        //    else
        //    {
        //        GameObject tmpObj = KO_KakurePosObjsList[1].transform.Find("IsuMae01Sphere").gameObject;
        //        tmpObj.GetComponent<Renderer>().enabled = false;
        //        tmpObj.GetComponent<SphereCollider>().enabled = false;
        //    }
        //    //スタンドライト前
        //    if (DB.isStandLightMaeKOPosFlag)
        //    {
        //        GameObject tmpObj = KO_KakurePosObjsList[1].transform.Find("StandLightMae02Sphere").gameObject;
        //        tmpObj.GetComponent<Renderer>().enabled = true;
        //        tmpObj.GetComponent<SphereCollider>().enabled = true;
        //    }
        //    else
        //    {
        //        GameObject tmpObj = KO_KakurePosObjsList[1].transform.Find("StandLightMae02Sphere").gameObject;
        //        tmpObj.GetComponent<Renderer>().enabled = false;
        //        tmpObj.GetComponent<SphereCollider>().enabled = false;
        //    }
        //    //窓前
        //    if (DB.isMadoDansaMaeKOPosFlag)
        //    {
        //        GameObject tmpObj = KO_KakurePosObjsList[1].transform.Find("MadoDansaMae03Sphere").gameObject;
        //        tmpObj.GetComponent<Renderer>().enabled = true;
        //        tmpObj.GetComponent<SphereCollider>().enabled = true;
        //    }
        //    else
        //    {
        //        GameObject tmpObj = KO_KakurePosObjsList[1].transform.Find("MadoDansaMae03Sphere").gameObject;
        //        tmpObj.GetComponent<Renderer>().enabled = false;
        //        tmpObj.GetComponent<SphereCollider>().enabled = false;
        //    }
        //    //コード前
        //    if (DB.isCordMaeKOPosFlag)
        //    {
        //        GameObject tmpObj = KO_KakurePosObjsList[1].transform.Find("CordMae04Sphere").gameObject;
        //        tmpObj.GetComponent<Renderer>().enabled = true;
        //        tmpObj.GetComponent<SphereCollider>().enabled = true;
        //    }
        //    else
        //    {
        //        GameObject tmpObj = KO_KakurePosObjsList[1].transform.Find("CordMae04Sphere").gameObject;
        //        tmpObj.GetComponent<Renderer>().enabled = false;
        //        tmpObj.GetComponent<SphereCollider>().enabled = false;
        //    }
        //}
        //#endregion

        #endregion

        #region 移動イベントフラグ管理


        #endregion

        //白引き出しポイント出現 演出
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[tmpListInt].transform.Find("SiroiHikidashiPos").gameObject);

        #endregion

        NovelSetVis("D1010c040");//あれをいじれば
        while (isNovelSetVisIng) { yield return null; }

        //■探索システム コルーチン始動
        StartCoroutine(TansakuSystemLoad());

        #region シンプル宿題システムスタート
        StartCoroutine(HWSimpleSystemIEnum());
        //HwSEnmをカレンダーに設置
        GameObject HwSEnm00_PareCalenderObj = Instantiate(Resources.Load("_PosObj/0100Tansaku01/HwSEnm00_PareCalenderObj") as GameObject
            , CalenderTrs, false);
        DB.evMoveDelObjList.Add(HwSEnm00_PareCalenderObj);
        HwSEnm00_PareCalenderObj.name = nameof(HwSEnm00_PareCalenderObj);

        //Ray出すコリダーリストに登録
        HWSColliderList.Add(HwSEnm00_PareCalenderObj.transform.Find("HwSEnmA_2").GetComponent<Collider>());

        #endregion

        //かくれおに移動ループ処理開始
        isSeePointTempOff = false;

        #region //デバッグ
        //Debug.Log("探索1デバッグ開始");

        //bool tmpTansakuSkip = true;
        //while (tmpTansakuSkip)
        //{
        //    //会話1へ移動（デバッグ）
        //    if (Input.GetKeyDown(KeyCode.G))
        //    {
        //        //暗幕
        //        FadeBlack(1, 1);
        //        isTansakuSystem = false;
        //        isKOSystem = false;
        //        yield return new WaitForSeconds(2f);
        //        NovelSetVis("D2000");//足音が聞こえてきた
        //        while (isNovelSetVisIng) { yield return null; }
        //        EventMove("会話1");
        //        tmpTansakuSkip = false;
        //    }

        //    yield return null;
        //}
        #endregion


        Debug.Log("探索1メインコルーチン終了");
        yield break;
    }
    IEnumerator D2010()//椅子へ飛び降り
    {
        if (debugEventMoveFlag == true)
        {
            #region 大きさや位置　小物
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;
            //智恵理0位置ロック解除
            DB.isChieriPosLock = false;
            //智恵理OFF
            GirlMeshTrs.gameObject.SetActive(false);

            #region 小物
            //小物消し
            Drill_chieriTrs.gameObject.SetActive(false);
            DrillTrs.gameObject.SetActive(false);
            KeshigomuObj.SetActive(true);
            SharpenObj.SetActive(true);

            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;
            #endregion
            //椅子飛び降りるよう位置
            GameObject Chair_010_IsuDivePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1/Chair_010_IsuDivePosObj") as GameObject;
            ChairTrs.localPosition = Chair_010_IsuDivePosObj.transform.localPosition;
            ChairTrs.localEulerAngles = Chair_010_IsuDivePosObj.transform.localEulerAngles;

            #region ケーブル バッテリー設置
            GameObject USBCable02_Battery_NoboriPrefab;
            //既に編集用に置いてあったら取得
            if (GameObject.Find("USBCable02_Battery_NoboriPrefab") != null)
            {
                USBCable02_Battery_NoboriPrefab
                    = GameObject.Find("USBCable02_Battery_NoboriPrefab");
            }
            else //無ければリソースから
            {
                USBCable02_Battery_NoboriPrefab
                    = Instantiate(Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/USBCable02_Battery_NoboriPrefab") as GameObject
                    , GameObjectsTrs, false);
                USBCable02_Battery_NoboriPrefab.name = "USBCable02_Battery_NoboriPrefab";
            }
            DB.sceneMoveDelObjList.Add(USBCable02_Battery_NoboriPrefab);

            GameObject BatteryObj;
            //既に編集用に置いてあったら取得
            if (GameObject.Find("Battery") != null)
            { BatteryObj = GameObject.Find("Battery"); }
            else //無ければリソースから
            {
                BatteryObj = Instantiate(Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/Battery") as GameObject
                  , GameObjectsTrs, false);
                BatteryObj.name = "Battery";
            }
            DB.sceneMoveDelObjList.Add(BatteryObj);

            //智恵理スマホ
            ChieriSumahoObj.SetActive(true);
            ChieriSumahoObj.transform.SetParent(GameObjectsTrs, false);//智恵理の手から外して

            GameObject ChieriSumaho010_HikidashiUePosObj
                = Resources.Load("_PosObj/13Tansaku00/ChieriSumaho010_HikidashiUePosObj") as GameObject;

            ChieriSumahoObj.transform.localPosition = ChieriSumaho010_HikidashiUePosObj.transform.localPosition;
            ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho010_HikidashiUePosObj.transform.localEulerAngles;
            #endregion

            #endregion
        }
        EventReset();
        //環境音フェードイン
        KankyouBGMVolumer(1f, 2);

        HukidashiNovelDistanceChange(3f, 1);


        #region 暗幕 設定 開幕
        //暗幕
        FadeBlack(1, 0.5f);
        yield return new WaitForSeconds(0.5f);

        #region プレイヤー 位置とポーズとカメラリセット
        GameObject Player_01_IsuDivePosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1/Player_01_IsuDivePosObj") as GameObject;

        CameraObjectsTrs.localPosition = Player_01_IsuDivePosObj.transform.localPosition;

        //カメラリセット（+回転と立ち設定）
        //カメラリセット値変更してリセット
        CameraReset(Player_01_IsuDivePosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos);//Anchorを立ちに

        #endregion

        //開幕
        FadeBlack(0, 0.5f);
        yield return new WaitForSeconds(0.5f);


        #endregion

        #region ジャンプ終了まで
        NovelSetVis("D2010");//極圧のクッションがあると思い込み
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        //ANの重力設定のみロード
        AN_SetPlayerRigidbody();
        AN_GravitiDragBool = true;//FixedUpdateのやつON
        //rigid監視スタート
        StartCoroutine(RigidReadSystem());

        //ジャンプ
        AN_PlayerRigidbody.velocity
            += (new Vector3(0, 1, -0.5f))
            * nowPlayerLocalScale.x * AN_GrapJumpVelocity;

        isShockWait = true;
        while (isShockWait)
        { yield return null; }

        //■重力設定消し
        AN_GravitiDragBool = false;
        isRigidReadSystem = false;
        Destroy(CameraObjectsTrs.GetComponent<Rigidbody>());
        #endregion

        //環境音フェードイン
        KankyouBGMVolumer(0f, 1);

        #region 骨折
        //TPSプレイヤー倒れモーション
        isPlayerUniqueMotion = true;
        PlayerMotion("liedown_00_Re", 0.2f, 0);

        #region 骨折カメラアンカー位置にTweenで
        GameObject Player_02Ancor_IsuDiveKossetuPosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1/Player_02Ancor_IsuDiveKossetuPosObj") as GameObject;

        //カメラリセットのアンカーも設定
        DB.cameraAnchorResetLocalPos = Player_02Ancor_IsuDiveKossetuPosObj.transform.localPosition;
        DB.cameraAnchorResetLocalRot = Player_02Ancor_IsuDiveKossetuPosObj.transform.localEulerAngles;

        //DOTweenで骨折PosRotに
        CameraAnchorTrs.DOLocalMove(Player_02Ancor_IsuDiveKossetuPosObj.transform.localPosition
            , 1f)
            .SetEase(Ease.OutElastic);
        CameraAnchorTrs.DOLocalRotate(Player_02Ancor_IsuDiveKossetuPosObj.transform.localEulerAngles
            , 0.6f)
            .SetEase(Ease.OutElastic);
        #endregion

        //白フラッシュ
        FadeWhite(1, 0.05f);
        yield return new WaitForSeconds(0.05f);

        #region カメラ位置移動
        GameObject Player_02_IsuDiveKossetuPosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1/Player_02_IsuDiveKossetuPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_02_IsuDiveKossetuPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_02_IsuDiveKossetuPosObj.transform.localEulerAngles;
        #endregion

        FadeWhite(0, 0.05f);

        yield return new WaitForSeconds(0.1f);
        SEPlay("footsteps_shoe_dirt_run_03", 1f);

        yield return new WaitForSeconds(1);

        NovelSetVis("D2012");//骨折描写
        while (novelCurrentPageInt < 4) { yield return null; }

        PPv2Memai();
        SEPlay("heart_def", 0.5f);

        while (isNovelSetVisIng) { yield return null; }
        PPv2Memai(false, 20);
        #endregion

        #region 暗幕 椅子にペアレント 椅子アニメーターON ノベル 開幕
        //暗幕
        FadeBlack(1, 1f);
        yield return new WaitForSeconds(1);

        CameraObjectsTrs.SetParent(ChairTrs);
        yield return null;
        #region プレイヤー 位置とポーズとカメラリセット
        //プレイヤー 位置に
        GameObject Player_021_PareChair_SuwarumadePosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1/Player_021_PareChair_SuwarumadePosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_021_PareChair_SuwarumadePosObj.transform.localPosition;

        //カメラリセット（+回転と立ち設定）
        //カメラリセット値変更してリセット
        CameraReset(Player_021_PareChair_SuwarumadePosObj.transform.localEulerAngles
            , Player_02Ancor_IsuDiveKossetuPosObj.transform.localPosition //アンカー倒れ位置の
            , false
            , Player_02Ancor_IsuDiveKossetuPosObj.transform.localEulerAngles);//アンカー倒れの斜め

        #endregion

        chairAnim.enabled = true;

        NovelSetVis("D2012bad1");//骨の折れる痛みなんて知らなかった。
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(2);

        //開幕
        FadeBlack(0, 10f);
        #endregion
        //環境音フェードイン
        KankyouBGMVolumer(1f, 5);

        //audioMixer.SetFloat("AsiotoVol", 15);
        //footHighVolMul = 300;

        #region 智恵理ドアから椅子に座るまで
        //アニメスピード
        girlAnim.speed = 0.6f;
        doorAnim.speed = 0.6f;
        chairAnim.speed = 0.6f;

        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);
        //智恵理0位置ロック
        DB.isChieriPosLock = true;

        //WindnoiseSoundObj付与（左太ももお尻）
        GameObject WindnoiseLThighSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlLThighTrs);
        WindnoiseLThighSoundObj.name = nameof(WindnoiseLThighSoundObj);
        DB.evMoveDelObjList.Add(WindnoiseLThighSoundObj);

        //SoundObjのPos
        GameObject SoundObj_01_IsuSuwari_LThighPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1/SoundObj_01_IsuSuwari_LThighPosObj") as GameObject;
        WindnoiseLThighSoundObj.transform.localPosition = SoundObj_01_IsuSuwari_LThighPosObj.transform.localPosition;

        //設定
        WindnoiseSound tmpWindnoiseLThighSound = WindnoiseLThighSoundObj.GetComponent<WindnoiseSound>();
        //tmpWindnoiseLThighSound.aSource.maxDistance = 50;
        //tmpWindnoiseLThighSound.pitchMax = 1f;
        //tmpWindnoiseLThighSound.pitchUpRateAdjustFloat = 6;
        //tmpWindnoiseLThighSound.pitchDownRateAdjustFloat = 1.00005f;

        tmpWindnoiseLThighSound.aSource.volume = 0.5f;

        //IKブックスタンド見る
        GameObject BookstandObj = GameObject.Find("Bookstand");
        FollowDOMove(IKLookAtEyeTargetTrs, BookstandObj.transform);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, BookstandObj.transform);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);


        ChieriMotion("ドア入室", 0f, 0);
        doorAnim.CrossFadeInFixedTime("ドア開き閉じ", 0f, 0);

        yield return new WaitForSeconds(2.2f / girlAnim.speed);

        Hukidashi("D3010");//お待たせ
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        NovelSetVis("D2012bad2");//「こっち」気が遠くなる


        //■ポーズ状態まで待ち
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 0.9f) { yield return null; }
        isGirlAnimReadSystem = false;

        ChieriMotion("ドアからデスク横へ歩く", 0.1f, 0);
        yield return new WaitForSeconds(3.5f / girlAnim.speed);

        Hukidashi("D3020");//ごめんね私だけ
        ChieriMotion("あはは・・・", 0.2f, 2);
        ChieriMotionDelay(3, "f_笑顔01口眉下がり_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1.5f / girlAnim.speed);

        chairAnim.enabled = true;


        //■ポーズ状態まで待ち
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 1f) { yield return null; }
        isGirlAnimReadSystem = false;

        //アニメスピード
        girlAnim.speed =
        doorAnim.speed =
        chairAnim.speed = 0.5f;

        NovelSetVis("D2012bad3");//ちがっ、こっち　不運は重なる

        Hukidashi("D3030bad1");//あれ？
        ChieriMotion("ん？", 0.2f, 2);

        yield return new WaitForSeconds(2f / girlAnim.speed);

        ChieriMotion("ドアからデスク横ポーズから座りはじめイベント用", 1f, 0);
        chairAnim.CrossFadeInFixedTime("智恵理座り", 0f, 0);

        yield return new WaitForSeconds(1f / girlAnim.speed);
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        Hukidashi("D3030bad2");//隠れてる？

        //アニメスピード
        girlAnim.speed =
        doorAnim.speed =
        chairAnim.speed = 0.3f;

        yield return new WaitForSeconds(1f / girlAnim.speed);

        NovelSetVis("D2012bad4");//「あが……う、そだ……待っ……！」


        yield return new WaitForSeconds(2f / girlAnim.speed);

        NovelSetVis("D2012bad5");//そして冗談としか思えない光景


        //アニメスピード
        girlAnim.speed =
        doorAnim.speed =
        chairAnim.speed = 0.1f;

        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        #endregion

        //環境音フェード
        KankyouBGMVolumer(0f, 6);

        //モーション座るまで持つ
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "ドアからデスク横ポーズから座りはじめイベント用") { yield return null; }
        while (girlAnimNomTime <= 0.93f) { yield return null; }
        isGirlAnimReadSystem = false;

        //椅子モーション止め
        chairAnim.speed = 0f;


        FadeBlack(1, 1f);
        yield return new WaitForSeconds(1.5f);

        #region 座られて目開けるまで
        #region 専用ライト設置と設定
        LayerMask
            tmpDefLayerChair = ChairTrs.gameObject.layer,
            tmpDefLayerSkirt = GirlMeshTrs.Find("Skirt").gameObject.layer,
            tmpDefLayerPants = GirlMeshTrs.Find("Pants").gameObject.layer;

        ChairTrs.gameObject.layer = LayerMask.NameToLayer("Water");
        GirlMeshTrs.Find("Skirt").gameObject.layer = LayerMask.NameToLayer("TransparentFX");
        GirlMeshTrs.Find("Pants").gameObject.layer = LayerMask.NameToLayer("Ignore Raycast");

        LightFolder.transform.Find("Sun_Baked").gameObject.SetActive(false);
        LightFolder.transform.Find("kari_sun_chieri").gameObject.SetActive(false);

        StartCoroutine(D2010ChairUchimataEffect());
        #endregion

        //椅子のコリダーはずし（カメラ埋まり阻止）
        ChairTrs.Find("SACollider_Chair").gameObject.SetActive(false);

        #region プレイヤー 位置とポーズとカメラリセット
        //プレイヤー 位置に
        GameObject Player_023_PareChair_SuwattaAtoPosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1/Player_023_PareChair_SuwattaAtoPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_023_PareChair_SuwattaAtoPosObj.transform.localPosition;

        //カメラリセット（+回転と立ち設定）
        //カメラリセット値変更してリセット
        CameraReset(Player_023_PareChair_SuwattaAtoPosObj.transform.localEulerAngles
            , Player_02Ancor_IsuDiveKossetuPosObj.transform.localPosition //アンカー倒れ位置の
            , false
            , Player_02Ancor_IsuDiveKossetuPosObj.transform.localEulerAngles);//アンカー倒れの斜め

        #endregion

        SEPlay("don22_8低い_ゴォオォ", 0.75f);
        SEPlay("rustling-of-clothes3_フェードインアウト", 0.5f);
        NovelSetVis("D2012bad6");//轟音と風圧を浴びながら、次の一瞬を
        while (isNovelSetVisIng) { yield return null; }
        SEPlay("WOOD FLOOR CREAKING_00_05_ピッチ-6", 0.75f);
        SEPlay("futon-dive1_ピッチ-16", 1.125f);

        SEPlay("don22_8低い_ゴォオォ", 0.75f);
        NovelSetVis("D2012bad7");//・・・・。熱気が頬を撫で始める。
        while (isNovelSetVisIng) { yield return null; }

        girlAnim.speed = 0.4f;

        HukidashiNovelDistanceChange(0.8f, 3);


        //開幕
        FadeBlack(0, 8f);
        SEPlay("don22_8低い_ゴォオォ", 0.7f);
        yield return new WaitForSeconds(4);

        NovelSetVis("D2012bad8");//助かってる・・？
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);
        NovelSetVis("D2012bad9");//声じゃ駄目だ　手は届かない
        while (isNovelSetVisIng) { yield return null; }

        #endregion

        #region ■座りなおし　つぶれるまで
        girlAnim.speed = 0.1f;

        ChieriMotion("腰浮かし座り腰フリフリ", 0f, 0);
        HukidashiNovelDistanceChange(1.5f, 3);

        NovelSetVis("D2012bad10");//あっ！え　あまりの不意に、再び脳が時を止める。

        #region 智恵理照りライト調整
        //取得
        Light
            tmpLightPants = PostProcessVolumeChairUchimataObj.transform.Find("LightPants").GetComponent<Light>(),
            tmpLightPantsTeri = PostProcessVolumeChairUchimataObj.transform.Find("LightPantsTeri").GetComponent<Light>(),
            tmpLightPantsTeri2 = PostProcessVolumeChairUchimataObj.transform.Find("LightPantsTeri2").GetComponent<Light>(),
            tmpLightPantsLast = PostProcessVolumeChairUchimataObj.transform.Find("LightPantsLast").GetComponent<Light>(),
            tmpLightChieriTeri2 = PostProcessVolumeChairUchimataObj.transform.Find("LightChieriTeri2").GetComponent<Light>(),
            tmpLightChair = PostProcessVolumeChairUchimataObj.transform.Find("LightChair").GetComponent<Light>();

        //DOTWeenTO
        DOTween.To(() => tmpLightChieriTeri2.intensity, (x) => tmpLightChieriTeri2.intensity = x
        , 1.2f
        , 4f);

        #endregion


        //モーション持ち（腰浮かし）
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "腰浮かし座り腰フリフリ") { yield return null; }
        SEPlay("WOOD FLOOR CREAKING_00_05_ピッチ-6", 0.75f);

        while (girlAnimNomTime <= 0.12f) { yield return null; }
        isGirlAnimReadSystem = false;


        //DOTWeenTO
        DOTween.To(() => girlAnim.speed, (x) => girlAnim.speed = x
        , 0f
        , 2f);

        //アニメスピード0の時はとめてないとエラー出す（エラーだけで問題はなかったけど一応）
        OriBreathController.enabled = false;

        while (girlAnim.speed != 0) { yield return null; }
        while (isNovelSetVisIng) { yield return null; }


        NovelSetVis("D2012bad11");//た、立ち上がってくれ……！ 祈りは届かない


        //DOTWeenTO
        DOTween.To(() => girlAnim.speed, (x) => girlAnim.speed = x
        , 0.05f
        , 4f);
        yield return null;
        OriBreathController.enabled = true;

        //モーション持ち（1潰れ目）
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "腰浮かし座り腰フリフリ") { yield return null; }
        while (girlAnimNomTime <= 0.30f) { yield return null; }
        isGirlAnimReadSystem = false;

        FadeBlack(1, 3);
        yield return new WaitForSeconds(2.3f);


        SEPlay("rustling-of-clothes3_フェードインアウト", 1.125f);
        SEPlay("WOOD FLOOR CREAKING_00_05_ピッチ-6", 0.75f);

        yield return new WaitForSeconds(2f);
        SEPlay("pakipoki", 0.75f);
        //白フラッシュ
        FadeWhite(0.1f, 0.05f); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);
        yield return new WaitForSeconds(0.2f);
        //白フラッシュ
        FadeWhite(0.1f, 0.05f); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);
        yield return new WaitForSeconds(0.5f);


        yield return new WaitForSeconds(2);
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(2);
        NovelSetVis("D2012bad12");//世界はマコトの上に着地した。
        while (isNovelSetVisIng) { yield return null; }
        #endregion


        #region 暗幕中に処理
        #region プレイヤー 位置とポーズとカメラリセット
        //プレイヤー 位置に
        GameObject Player_025_PareChair_DenbuTsuburePosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1/Player_025_PareChair_DenbuTsuburePosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_025_PareChair_DenbuTsuburePosObj.transform.localPosition;

        //カメラリセット（+回転と立ち設定）
        //カメラリセット値変更してリセット
        CameraReset(Player_025_PareChair_DenbuTsuburePosObj.transform.localEulerAngles
            , Player_02Ancor_IsuDiveKossetuPosObj.transform.localPosition //アンカー倒れ位置の
            , false
            , Player_02Ancor_IsuDiveKossetuPosObj.transform.localEulerAngles);//アンカー倒れの斜め

        #endregion

        //SoundObj消し
        WindnoiseSound tmpWindnoiseSound = WindnoiseLThighSoundObj.GetComponent<WindnoiseSound>();
        tmpWindnoiseSound.aSource.DOFade(0, 0.2f);

        //near
        VRCamera.nearClipPlane = 0.01f;

        #region ライト内部調整

        tmpLightPants.gameObject.SetActive(false);
        tmpLightPantsTeri.gameObject.SetActive(false);
        tmpLightPantsTeri2.gameObject.SetActive(true);

        tmpLightChieriTeri2.intensity = 2.26f;
        tmpLightChair.intensity = 0.75f;


        ////元ライト内部切り替え
        //PostProcessVolumeChairUchimataObj.transform.Find("LightPants").gameObject.SetActive(false);
        //PostProcessVolumeChairUchimataObj.transform.Find("LightPantsTeri").gameObject.SetActive(false);
        //PostProcessVolumeChairUchimataObj.transform.Find("LightChieriTeri2").gameObject.SetActive(false);
        //PostProcessVolumeChairUchimataObj.transform.Find("LightChair").gameObject.SetActive(false);
        //PostProcessVolumeChairUchimataObj.transform.Find("LightPantsLast").gameObject.SetActive(true);
        #endregion

        #endregion


        yield return new WaitForSeconds(2);
        HukidashiNovelDistanceChange(0.25f, 0);

        girlAnim.speed = 0.05f;
        #region 瀕死　終わるまで
        Hukidashi("D3030bad3");//むずむず・・
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("D2012bad13");//ただの座りなおしは致命的　　悟った
        while (novelCurrentPageInt > 2) { yield return null; }
        FadeBlack(0, 3);
        SEPlay("don22_8低い_ゴォオォ", 0.5f);
        ChieriMotion("座りフリフリのみ", 0f, 0);

        #region トラッキングオフとリセンター
        InputTracking.disablePositionalTracking = true;
        if (XRSettings.enabled)//VRポジションリセット
        {
            //CameraReset(null, null, true);
            yield return null;
            VRUICameraTrs.localPosition = Vector3.zero;
            VRCameraTrs.localPosition = Vector3.zero;
        }
        #endregion

        while (isNovelSetVisIng) { yield return null; }
        #endregion

        FadeBlack(1, 3);

        Hukidashi("D3030bad4");//マコト？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        yield return new WaitForSeconds(4);

        #region ラスト暗幕処理（コンティニュー画面）
        tmpLightPantsLast.gameObject.SetActive(true);

        tmpLightPantsTeri.gameObject.SetActive(false);
        tmpLightPantsTeri2.gameObject.SetActive(false);
        tmpLightChieriTeri2.gameObject.SetActive(false);
        tmpLightChair.gameObject.SetActive(false);

        ChieriMotion("座りフリフリのみポーズ", 0f, 0);

        #region プレイヤー 位置とポーズとカメラリセット
        //プレイヤー 位置に
        GameObject Player_027_PareChair_DenbuTsubureLastPosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1/Player_027_PareChair_DenbuTsubureLastPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_027_PareChair_DenbuTsubureLastPosObj.transform.localPosition;

        //カメラリセット（+回転と立ち設定）
        //カメラリセット値変更してリセット
        CameraReset(Player_027_PareChair_DenbuTsubureLastPosObj.transform.localEulerAngles
            , Player_02Ancor_IsuDiveKossetuPosObj.transform.localPosition //アンカー倒れ位置の
            , false
            , Player_02Ancor_IsuDiveKossetuPosObj.transform.localEulerAngles//アンカー倒れの斜め
            , false
            , false);//Userコントロール変えない

        #endregion
        #endregion

        #region //動作デバッグ


        //while (true)
        //{
        //    if (Input.GetKeyDown(KeyCode.F))
        //    {
        //        ChieriMotion("腰浮かし座り腰フリフリ", 0f, 0);
        //    }
        //    if (Input.GetKeyDown(KeyCode.G))
        //    {
        //        ChieriMotion("腰浮かしフリフリ後座る", 0f, 0);
        //    }
        //    if (Input.GetKeyDown(KeyCode.V))
        //    {
        //        ChieriMotion("座りフリフリのみ", 0f, 0);
        //    }
        //    if (Input.GetKeyDown(KeyCode.B))
        //    {
        //        ChieriMotion("浮かしフリフリのみ", 0f, 0);
        //    }

        //    if (Input.GetKeyDown(KeyCode.H))
        //    {
        //        ChieriMotion("ドアからデスク横ポーズから座りはじめイベント用", 1f, 0);

        //    }

        //    if (Input.GetKeyDown(KeyCode.Z))
        //    {
        //    }

        //    if (Input.GetKeyDown(KeyCode.C))
        //    {
        //    }
        //    yield return null;
        //}


        #endregion
        FadeBlack(0, 8, false, true);

        //メニュー強制開き
        StartCoroutine(MenuSystemIEnum(true, false, true));

        //進まない。
        while (true) { yield return null; }



        #region 専用ライト削除
        isD2010ChairUchimataEffect = false;

        ChairTrs.gameObject.layer = tmpDefLayerChair;
        GirlMeshTrs.Find("Skirt").gameObject.layer = tmpDefLayerSkirt;
        GirlMeshTrs.Find("Pants").gameObject.layer = tmpDefLayerPants;

        LightFolder.transform.Find("Sun_Baked").gameObject.SetActive(true);
        LightFolder.transform.Find("kari_sun_chieri").gameObject.SetActive(true);
        #endregion

        //椅子のコリダー戻し
        ChairTrs.Find("SACollider_Chair").gameObject.SetActive(true);

        //トラッキングオン
        InputTracking.disablePositionalTracking = false;
        if (XRSettings.enabled)//VRポジションリセット
        { CameraReset(null, null, true); }


        #region //旧版の死ぬ流れ
        ////暗幕
        //FadeBlack(1, 1f);
        //yield return new WaitForSeconds(0.5f);
        //SEPlay("pakipoki", 0.4f);
        ////白フラッシュ
        //FadeWhite(1, 0.05f); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);
        //yield return new WaitForSeconds(0.2f);
        ////白フラッシュ
        //FadeWhite(1, 0.05f); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);
        //yield return new WaitForSeconds(0.5f);

        //Destroy(WindnoiseSoundObj);

        ////アニメスピード
        //OriBreathController.enabled = false;//とめないとエラー出す（問題はなかったけど一応）
        //girlAnim.speed = 0f;
        //doorAnim.speed = 0f;
        //chairAnim.speed = 0f;


        #endregion

        #region 暗幕終了処理
        //■色々リセット
        AN_GravitiDragBool = false;
        isRigidReadSystem = false;
        Destroy(CameraObjectsTrs.GetComponent<Rigidbody>());
        isPlayerUniqueMotion = false;

        chairAnim.CrossFadeInFixedTime("_noData", 0f, 0);
        chairAnim.enabled = false;
        #endregion

        #region //旧コンティニューセレクト
        //GameObject ContinueSelectText = Instantiate(Resources.Load("EventSystem/GameSelect/ContinueSelectText") as GameObject, FadeCanvasObj.transform);
        //DB.evMoveDelObjList.Add(ContinueSelectText);

        //while (true)
        //{
        //    if (Input.GetKeyDown(KeyCode.V))
        //    {
        //        Destroy(ContinueSelectText);
        //        ////アニメスピード戻し
        //        //OriBreathController.enabled = true;
        //        //girlAnim.speed =
        //        //doorAnim.speed =
        //        //chairAnim.speed = 1f;

        //        EventMove("探索1", true);
        //        yield break;
        //    }
        //    else if (Input.GetKeyDown(KeyCode.B))
        //    {
        //        Destroy(ContinueSelectText);
        //        ////アニメスピード戻し
        //        //OriBreathController.enabled = true;
        //        //girlAnim.speed =
        //        //doorAnim.speed =
        //        //chairAnim.speed = 1f;

        //        EventMove("タイトル");
        //        yield break;
        //    }
        //    yield return null;
        //}
        #endregion

        yield break;
    }
    #region ┗■椅子座り内股内時のポストプロセスやライト、TPS切り替えでONOFF用
    bool
        isD2010ChairUchimataEffect = false;
    GameObject PostProcessVolumeChairUchimataObj;
    IEnumerator D2010ChairUchimataEffect()
    {
        isD2010ChairUchimataEffect = true;

        PostProcessVolumeChairUchimataObj =
            Instantiate(Resources.Load("PostProcessing/Prefab/PostProcessVolumeChairUchimata") as GameObject);

        while (isD2010ChairUchimataEffect)
        {
            if (tPSModeInt != 0)
            {
                if (PostProcessVolumeChairUchimataObj.activeSelf)
                { PostProcessVolumeChairUchimataObj.SetActive(false); }
            }
            else
            {
                if (PostProcessVolumeChairUchimataObj.activeSelf == false)
                { PostProcessVolumeChairUchimataObj.SetActive(true); }
            }

            yield return null;
        }
        Destroy(PostProcessVolumeChairUchimataObj);
    }

    #endregion
    IEnumerator D2020()//電気ケーブル降り
    {
        if (debugEventMoveFlag == true)
        {
            #region 大きさや位置　小物
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;
            //智恵理0位置ロック解除
            DB.isChieriPosLock = false;
            GirlMeshTrs.gameObject.SetActive(false);

            #region 小物
            //小物消し
            Drill_chieriTrs.gameObject.SetActive(false);
            DrillTrs.gameObject.SetActive(false);
            KeshigomuObj.SetActive(true);
            SharpenObj.SetActive(true);

            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;
            #endregion
            #region ケーブル バッテリー設置
            GameObject USBCable02_Battery_NoboriPrefab;
            //既に編集用に置いてあったら取得
            if (GameObject.Find("USBCable02_Battery_NoboriPrefab") != null)
            {
                USBCable02_Battery_NoboriPrefab
                    = GameObject.Find("USBCable02_Battery_NoboriPrefab");
            }
            else //無ければリソースから
            {
                USBCable02_Battery_NoboriPrefab
                    = Instantiate(Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/USBCable02_Battery_NoboriPrefab") as GameObject
                    , GameObjectsTrs, false);
                USBCable02_Battery_NoboriPrefab.name = "USBCable02_Battery_NoboriPrefab";
            }
            DB.sceneMoveDelObjList.Add(USBCable02_Battery_NoboriPrefab);

            GameObject BatteryObj;
            //既に編集用に置いてあったら取得
            if (GameObject.Find("Battery") != null)
            { BatteryObj = GameObject.Find("Battery"); }
            else //無ければリソースから
            {
                BatteryObj = Instantiate(Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/Battery") as GameObject
                  , GameObjectsTrs, false);
                BatteryObj.name = "Battery";
            }
            DB.sceneMoveDelObjList.Add(BatteryObj);

            //智恵理スマホ
            ChieriSumahoObj.SetActive(true);
            ChieriSumahoObj.transform.SetParent(GameObjectsTrs, false);//智恵理の手から外して

            GameObject ChieriSumaho010_HikidashiUePosObj
                = Resources.Load("_PosObj/13Tansaku00/ChieriSumaho010_HikidashiUePosObj") as GameObject;

            ChieriSumahoObj.transform.localPosition = ChieriSumaho010_HikidashiUePosObj.transform.localPosition;
            ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho010_HikidashiUePosObj.transform.localEulerAngles;
            #endregion

            #endregion
        }
        EventReset();
        KankyouBGMVolumer(1f, 2);

        bool
            isTmpContinue = false;//コンティニュー用変数

        float //コンティニューのためにHP取得 
            tmpPlayerHP = DB.playerHPFloat;

        コンティニュー:
        #region 暗幕 設定 開幕
        //暗幕
        FadeBlack(1, 0.5f);
        yield return new WaitForSeconds(0.5f);

        #region プレイヤー 位置とポーズとカメラリセット
        //プレイヤー ケーブル降りる位置に
        GameObject Player_03_CableDownPosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1/Player_03_CableDownPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_03_CableDownPosObj.transform.localPosition;

        //カメラリセット（+回転と立ち設定）
        //カメラリセット値変更してリセット
        CameraReset(Player_03_CableDownPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos);//Anchorを立ちに

        #endregion

        #region ANシステム起動
        //掴むのNGObjリスト
        AN_GrapNGObjList.Add(RoomTrs.Find("Kabe").gameObject);
        AN_GrapNGObjList.Add(RoomTrs.Find("Desk").gameObject);

        //Inputロック
        AN_isInputLock = true;

        //イージー
        AN_isInputToggleMode = false;
        AN_isInputSwitchEasyMode = false;
        AN_isInputSwitchHardMode = true;

        //パワーモードオフ クライムモードオフ
        AN_isGrapPowerMode = false;
        AN_isClimbMode = false;

        //■脚のぼりシステム コルーチン始動
        StartCoroutine(AsinoboriSystem(0));
        ANGrapHandUIObj.SetActive(false);

        #endregion

        yield return null;

        //rigid監視スタート
        StartCoroutine(RigidReadSystem());

        #region ■事前掴み場所直接指定処理
        isRInput = isLInput = true;

        //掴む場所objをリソースから読み込んで直接指定
        GameObject Lhand_01_CordDownFirstPosObj = Instantiate(Resources.Load
            ("_PosObj/D_Henai_Day1_Tansaku1/Lhand_01_CordDownFirstPosObj") as GameObject
            , GameObject.Find("Cord").transform
            , false);
        AsinoboriHandGrap(
            AN_Hand_L_RootTrs,
            GameObject.Find("Cord").transform,
            Lhand_01_CordDownFirstPosObj.transform.position
            );

        GameObject Rhand_01_CordDownFirstPosObj = Instantiate(Resources.Load
            ("_PosObj/D_Henai_Day1_Tansaku1/Rhand_01_CordDownFirstPosObj") as GameObject
            , GameObject.Find("Cord").transform
            , false);
        AsinoboriHandGrap(
            AN_Hand_R_RootTrs,
            GameObject.Find("Cord").transform,
            Rhand_01_CordDownFirstPosObj.transform.position
            );

        //設置したので削除
        Destroy(Lhand_01_CordDownFirstPosObj);
        Destroy(Rhand_01_CordDownFirstPosObj);

        //リミットを調整 (そのままだと最長になってしまう？ 6.4とかだった)
        AN_tmpRLimit.limit =
        AN_tmpLLimit.limit = 5;

        #endregion
        yield return new WaitForSeconds(0.5f);
        while (isNovelSetVisIng) { yield return null; }

        //開幕
        FadeBlack(0, 0.5f);
        yield return new WaitForSeconds(0.5f);

        #endregion

        //コンティニュー時の場合は一言
        if (isTmpContinue)
        {
            DB.playerHPFloat = tmpPlayerHP;

            NovelSetVis("D20220");//なんてことにならないようにしないとな
            while (isNovelSetVisIng) { yield return null; }
            ANGrapHandUIObj.SetActive(true);
        }
        else
        {
            NovelSetVis("D20211");//よし、慎重に行こう
            while (isNovelSetVisIng) { yield return null; }
            ANGrapHandUIObj.SetActive(true);
        }


        yield return new WaitForSeconds(0.5f);
        //Inputロック解除
        AN_isInputLock = false;


        #region //旧チュート時の
        //NovelSetVis("■D20211");//まずはLボタンで左手を離して

        //#region 左手離す
        //while (true)
        //{
        //    if (Input.GetButtonDown(DB.inputDict["左手"]))
        //    {
        //        isLInput = false;
        //        AsinoboriHandLeave(AN_Hand_L_RootTrs, AN_playerLHandJoint);
        //        goto 左手離した;
        //    }
        //    yield return null;
        //}
        //左手離した:
        //#endregion

        //yield return new WaitForSeconds(0.5f);
        //NovelSetVis("■D20212");//ケーブルに左手を添えて……

        //#region 左手添えて掴む
        //float tmpCordLTouchFloat = 0;
        //bool isTmpCordLTouch = true;
        //while (true)
        //{
        //    //左手コードに添えてたら
        //    if (AN_nowLSerchObj != null
        //        && AN_nowLSerchObj.name == "Cord")
        //    {
        //        tmpCordLTouchFloat += 1 * Time.deltaTime;
        //        if (isTmpCordLTouch == false && tmpCordLTouchFloat > 0.5f)
        //        {
        //            NovelSetVis("■D20213");//Lボタンで掴む
        //            isTmpCordLTouch = true;
        //        }

        //        if (Input.GetButtonDown(DB.inputDict["左手"]))
        //        {
        //            isLInput = true;
        //            AsinoboriHandGrap(AN_Hand_L_RootTrs);
        //            SEPlay("UI_po");
        //            goto 左手ケーブル掴んだ;
        //        }
        //    }
        //    //左手コード添えてなければ
        //    else
        //    {
        //        if (isTmpCordLTouch)
        //        {
        //            NovelSetVis("■D20212");//ケーブルに左手を添えて……
        //            isTmpCordLTouch = false;
        //            tmpCordLTouchFloat = 0;
        //        }
        //        if (Input.GetButtonDown(DB.inputDict["左手"]))
        //        {
        //            SEPlay("ui_scifi_hightech_error");
        //            PlayerMotion("登りパー開始", 0f, 3);
        //        }
        //    }
        //    yield return null;
        //}
        //左手ケーブル掴んだ:
        //#endregion

        //yield return new WaitForSeconds(0.5f);
        //NovelSetVis("■D20214");//次は右手……

        //#region 右手離す
        //while (true)
        //{
        //    if (Input.GetButtonDown(DB.inputDict["右手"]))
        //    {
        //        isRInput = false;
        //        AsinoboriHandLeave(AN_Hand_R_RootTrs, AN_playerRHandJoint);
        //        goto 右手離した;
        //    }
        //    yield return null;
        //}
        //右手離した:
        //#endregion

        //yield return new WaitForSeconds(0.5f);
        //NovelSetVis("■D20215");//ケーブルに右手を添えて……

        //#region 右手添えて掴む
        //float tmpCordRTouchFloat = 0;
        //bool isTmpCordRTouch = true;
        //while (true)
        //{
        //    //右手コードに添えてたら
        //    if (AN_nowRSerchObj != null
        //        && AN_nowRSerchObj.name == "Cord")
        //    {
        //        tmpCordRTouchFloat += 1 * Time.deltaTime;
        //        if (isTmpCordRTouch == false && tmpCordRTouchFloat > 0.5f)
        //        {
        //            NovelSetVis("■D20216");//Rボタンで掴む
        //            isTmpCordRTouch = true;
        //        }

        //        if (Input.GetButtonDown(DB.inputDict["右手"]))
        //        {
        //            isRInput = true;
        //            AsinoboriHandGrap(AN_Hand_R_RootTrs);
        //            SEPlay("UI_po");
        //            goto 右手ケーブル掴んだ;
        //        }
        //    }
        //    //右手コード添えてなければ
        //    else
        //    {
        //        if (isTmpCordRTouch)
        //        {
        //            NovelSetVis("■D20215");//ケーブルに左手を添えて……
        //            isTmpCordRTouch = false;
        //            tmpCordRTouchFloat = 0;
        //        }
        //        if (Input.GetButtonDown(DB.inputDict["右手"]))
        //        {
        //            SEPlay("ui_scifi_hightech_error");
        //            PlayerMotion("登りパー開始", 0f, 2);
        //        }
        //    }
        //    yield return null;
        //}
        //右手ケーブル掴んだ:
        //#endregion

        //yield return new WaitForSeconds(0.5f);
        //NovelSetVis("D20217");//あとは繰り返していくだけだ

        ////Inputロック解除
        //AN_isInputLock = false;

        //#region どちらか片手離すとノベル消える
        //while (true)
        //{
        //    if (AN_isLGrap == false || AN_isRGrap == false)
        //    {
        //        isNovelFadeTween = isNovelSetVisIng = false;
        //        goto チュートリアル終了;
        //    }
        //    yield return null;
        //}
        //チュートリアル終了:
        //#endregion


        #endregion


        bool //落ちずにすんだ場合にセリフ変える用
            isTmp1Rakka = false,
            isTmp2Rakka = false;


        #region プレイヤー降り中ループ
        while (true)
        {
            復帰:

            //両手掴んだらノベル消える
            if (AN_isRLGrap)
            { isNovelFadeTween = isNovelSetVisIng = false; }

            #region 途中で両手離した場合
            if (AN_isLGrap == false && AN_isRGrap == false)
            {
                isShockWait = true;//rigid監視の着地衝撃待ち（不安定なので使わないかも）

                //現在のプレイヤー高さ取得
                float rakkaStartYPos = CameraObjectsTrs.localPosition.y;

                #region 落下セリフ三段階
                if (isTmp1Rakka == false && isTmp2Rakka == false)
                { NovelSetVis("D20218", true); }//し、しまっ……！
                else if (isTmp1Rakka && isTmp2Rakka == false)
                { NovelSetVis("D20218A", true); }//……！　ぐっ……！
                //else if (isTmp1Rakka && isTmp2Rakka)
                //{ isNovelFadeTween = isNovelSetVisIng = false; }
                #endregion

                #region 落下中に復帰待機ループ
                //落下するまで or 掴むまでループ
                while (CameraObjectsTrs.localPosition.y > 0.004f)
                {
                    #region 途中で掴んだら復帰
                    if (AN_isLGrap || AN_isRGrap)
                    {
                        #region 途中掴みセリフ三段階（三段階目はしゃべらない）
                        if (isTmp1Rakka == false && isTmp2Rakka == false)
                        {
                            NovelSetVis("D20219", true);//死ぬかと思った
                            isTmp1Rakka = true;
                        }
                        else if (isTmp1Rakka && isTmp2Rakka == false)
                        {
                            NovelSetVis("D20219A", true);//こういう降り方もありかな？
                            isTmp2Rakka = true;
                        }
                        else if (isTmp1Rakka && isTmp2Rakka)
                        { isNovelFadeTween = isNovelSetVisIng = false; }
                        #endregion
                        goto 復帰;
                    }
                    #endregion
                    yield return null;
                }
                #endregion

                //■ここから地面に着いた処理
                Debug.Log("手離し時カメラの高さ" + rakkaStartYPos);
                Debug.Log("着地時カメラの高さ" + CameraObjectsTrs.localPosition.y);

                //落下ある程度低ければ、転ぶだけでシナリオ進展
                if (rakkaStartYPos - CameraObjectsTrs.localPosition.y < 0.2f)
                {
                    isANSystem = false;
                    #region プレイヤーダメージとカメラ倒れ 直
                    //TPSプレイヤー倒れモーション
                    isPlayerUniqueMotion = true;
                    PlayerMotion("liedown_00_Re", 0.2f, 0);

                    Vector3
                        tmpDefCameraPos = CameraAnchorTrs.localPosition,
                        tmpDefCameraEul = CameraAnchorTrs.localEulerAngles,
                        tmpFlowCameraPos = new Vector3(0, 1.2f, 0),
                        tmpSlipCameraPos = new Vector3(0, 0.3f, 0),
                        tmpSlipCameraEul = new Vector3(-45, 0, 0);

                    CameraAnchorTrs.DOLocalMove(tmpFlowCameraPos, 0.05f);
                    yield return new WaitForSeconds(0.05f);
                    CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.5f).SetEase(Ease.OutBounce);
                    yield return new WaitForSeconds(0.05f);
                    CameraAnchorTrs.DOLocalMove(tmpDefCameraPos, 0.05f);
                    yield return new WaitForSeconds(0.05f);

                    CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.5f).SetEase(Ease.OutBounce);
                    CameraAnchorTrs.DOLocalRotate(tmpSlipCameraEul, 0.2f).SetEase(Ease.InSine);


                    //フラッシュと音とダメージ
                    FadeWhite(1, 0);
                    SEPlay("dan01");
                    //PlayerHPAddSub(-400);

                    yield return new WaitForSeconds(0.05f);
                    FadeWhite(0, 0);

                    #endregion
                    NovelSetVis("D20225");//あいっづつ……！　うう

                    yield return new WaitForSeconds(1f);

                    while (isNovelSetVisIng) { yield return null; }

                    //立ち上がり暗幕
                    FadeBlack(1, 0.5f);
                    yield return new WaitForSeconds(0.5f);

                    //倒れモーション解除
                    isPlayerUniqueMotion = false;

                    #region プレイヤー 位置とポーズとカメラリセット
                    //プレイヤー ケーブル降りた位置に
                    GameObject Player_00_TsukueUraCordSitaPosObj
                        = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Player_00_TsukueUraCordSitaPosObj") as GameObject;
                    CameraObjectsTrs.localPosition = Player_00_TsukueUraCordSitaPosObj.transform.localPosition;

                    //カメラリセット値変更してリセット
                    CameraReset(Player_00_TsukueUraCordSitaPosObj.transform.localEulerAngles
                        , DB.cameraStandAnchorDefLocalPos);//Anchorを立ちに

                    #endregion
                    FadeBlack(0, 0.5f);

                    goto 床着地;
                }
                else
                {
                    #region 結構な高さから落下してしまった処理（コンティニューへ）
                    AN_isInputLock = true;
                    ANGrapHandUIObj.SetActive(false);

                    FadeBlack(1, 0f);
                    NovelSetVis("■空白");
                    isNovelFadeTween = isNovelSetVisIng = false;

                    isTmpContinue = true;
                    yield return new WaitForSeconds(1);
                    goto コンティニュー;
                    #endregion
                }
            }
            #endregion

            #region 到着判定待ち（ゴールコリダーを片手で掴んだら）
            else if (AN_isLGrap)
            {
                if (AN_nowLSerchCollObj != null)//エラー回避
                {
                    if (AN_nowLSerchCollObj.name == "CordDownGoalColl" && AN_isRGrap == false)
                    { goto ゴールから手を離す; }
                }
            }
            else if (AN_isRGrap)
            {
                if (AN_nowRSerchCollObj != null)//エラー回避
                {
                    if (AN_nowRSerchCollObj.name == "CordDownGoalColl" && AN_isLGrap == false)
                    { goto ゴールから手を離す; }
                }
            }

            #endregion

            yield return null;
        }
        #endregion

        ゴールから手を離す:
        yield return null;
        #region ゴールから手を離す
        //Inputロック
        AN_isInputLock = true;
        NovelSetVis("D20230");//着地できそうだ
        while (isNovelSetVisIng)
        {
            #region 文字送りしなくても、操作で手を離して進むように
            //右手離し
            if (AN_isRGrap && Input.GetButtonDown(DB.inputDict["右手"]))
            {
                isRInput = false;
                AsinoboriHandLeave(AN_Hand_R_RootTrs, AN_playerRHandJoint);
                isNovelFadeTween = isNovelSetVisIng = false;
                goto 床着地待ち;
            }
            //左手離し
            if (AN_isLGrap && Input.GetButtonDown(DB.inputDict["左手"]))
            {
                isLInput = false;
                AsinoboriHandLeave(AN_Hand_L_RootTrs, AN_playerLHandJoint);
                isNovelFadeTween = isNovelSetVisIng = false;
                goto 床着地待ち;
            }
            #endregion
            yield return null;
        }
        yield return new WaitForSeconds(0.5f);
        #region 強制両手とも離し
        isLInput = false;
        AsinoboriHandLeave(AN_Hand_L_RootTrs, AN_playerLHandJoint);
        isNovelFadeTween = isNovelSetVisIng = false;

        isRInput = false;
        AsinoboriHandLeave(AN_Hand_R_RootTrs, AN_playerRHandJoint);
        isNovelFadeTween = isNovelSetVisIng = false;
        #endregion
        #endregion

        床着地待ち:
        while (isYukaEnter == false) { yield return null; }
        //着地音
        SEPlay("FootStep04MaxComp");

        床着地:


        isANSystem = false;

        yield return new WaitForSeconds(1);
        NovelSetVis("D20240");//なんとか降りれたぞ……うぷ
        while (isNovelSetVisIng) { yield return null; }

        EventMove("探索1_机裏");

        yield break;
    }
    IEnumerator D2100()//探索1_机裏
    {
        if (debugEventMoveFlag == true)
        {
            #region 大きさや位置　小物
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;

            //智恵理オフ
            GirlMeshTrs.gameObject.SetActive(false);

            #region プレイヤー 位置とポーズとカメラリセット
            //プレイヤー ケーブル降りた位置に
            GameObject Player_00_TsukueUraCordSitaPosObj
                = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Player_00_TsukueUraCordSitaPosObj") as GameObject;
            CameraObjectsTrs.localPosition = Player_00_TsukueUraCordSitaPosObj.transform.localPosition;

            //カメラリセット値変更してリセット
            CameraReset(Player_00_TsukueUraCordSitaPosObj.transform.localEulerAngles
                , DB.cameraStandAnchorDefLocalPos);//Anchorを立ちに

            #endregion

            #region 小物
            //小物消し
            Drill_chieriTrs.gameObject.SetActive(false);
            DrillTrs.gameObject.SetActive(false);
            KeshigomuObj.SetActive(true);
            SharpenObj.SetActive(true);

            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;
            #endregion
            //椅子飛び降りるよう位置
            GameObject Chair_010_IsuDivePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1/Chair_010_IsuDivePosObj") as GameObject;
            ChairTrs.localPosition = Chair_010_IsuDivePosObj.transform.localPosition;
            ChairTrs.localEulerAngles = Chair_010_IsuDivePosObj.transform.localEulerAngles;

            #region ケーブル バッテリー設置
            GameObject USBCable02_Battery_NoboriPrefab;
            //既に編集用に置いてあったら取得
            if (GameObject.Find("USBCable02_Battery_NoboriPrefab") != null)
            {
                USBCable02_Battery_NoboriPrefab
                    = GameObject.Find("USBCable02_Battery_NoboriPrefab");
            }
            else //無ければリソースから
            {
                USBCable02_Battery_NoboriPrefab
                    = Instantiate(Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/USBCable02_Battery_NoboriPrefab") as GameObject
                    , GameObjectsTrs, false);
                USBCable02_Battery_NoboriPrefab.name = "USBCable02_Battery_NoboriPrefab";
            }
            DB.sceneMoveDelObjList.Add(USBCable02_Battery_NoboriPrefab);

            GameObject BatteryObj;
            //既に編集用に置いてあったら取得
            if (GameObject.Find("Battery") != null)
            { BatteryObj = GameObject.Find("Battery"); }
            else //無ければリソースから
            {
                BatteryObj = Instantiate(Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/Battery") as GameObject
                  , GameObjectsTrs, false);
                BatteryObj.name = "Battery";
            }
            DB.sceneMoveDelObjList.Add(BatteryObj);

            //智恵理スマホ
            ChieriSumahoObj.SetActive(true);
            ChieriSumahoObj.transform.SetParent(GameObjectsTrs, false);//智恵理の手から外して

            GameObject ChieriSumaho010_HikidashiUePosObj
                = Resources.Load("_PosObj/13Tansaku00/ChieriSumaho010_HikidashiUePosObj") as GameObject;

            ChieriSumahoObj.transform.localPosition = ChieriSumaho010_HikidashiUePosObj.transform.localPosition;
            ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho010_HikidashiUePosObj.transform.localEulerAngles;
            #endregion


            #endregion
        }
        EventReset();
        yield return null;
        KankyouBGMVolumer(1f, 2);


        #region 探索 移動 システム起動
        //■探索システム コルーチン始動
        StartCoroutine(TansakuSystemLoad());

        //■隠れ鬼移動システムON
        KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
        //ローディング待ち
        while (isKOSystemLoading) { yield return null; }
        //移動場所オン
        int tmpListInt = 2;
        KO_KakurePosObjsList[tmpListInt].SetActive(true);
        //走りスピードにしてモーションも走りに
        playerMoveSpeed = 4;
        isKO_PlayerWalk = false;

        #region ■使用する探索オブジェ選別

        //■該当の探索オブジェのコリダータグ書き換え
        foreach (GameObject tmpObj in TansakuObjList)
        {
            //■まずはコリダータグ全部オフ
            //（子の0番目にコリダーのフォルダがあること前提）
            foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
            { CollObjs.tag = "TansakuSeeCollOffObj"; }

            //該当していたら再度ONに戻し
            if (false ||
                tmpObj.name == "Skelton"
                || tmpObj.name == "Gomibako"
                //|| tmpObj.name == "Door"
                //|| tmpObj.name == "Grasstable"
                //|| tmpObj.name == "Hikidashi"
                //|| tmpObj.name == "Chair"
                //|| tmpObj.name == "Bed"
                //|| tmpObj.name == "Cord"
                )
            {
                foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                { CollObjs.tag = "TansakuSeeCollOnObj"; }
            }

        }
        EnumChair = enumChair.見上げ;

        #endregion

        #region //■移動ポイントフラグチェック（セーブデータにかかわるので保留）
        ////椅子前
        //if (DB.isIsuMaeKOPosFlag)
        //{
        //    GameObject tmpObj = KO_KakurePosObjsList[1].transform.Find("IsuMae01Sphere").gameObject;
        //    tmpObj.GetComponent<Renderer>().enabled = true;
        //    tmpObj.GetComponent<Collider>().enabled = true;
        //}
        //else
        //{
        //    GameObject tmpObj = KO_KakurePosObjsList[1].transform.Find("IsuMae01Sphere").gameObject;
        //    tmpObj.GetComponent<Renderer>().enabled = false;
        //    tmpObj.GetComponent<Collider>().enabled = false;
        //}
        #endregion

        //ドアとりあえず移動ポイントでるように
        EnumDoor = enumDoor.隙間あるかな;

        //ポイント出現 演出
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[tmpListInt].transform.Find("GomibakoUra01").gameObject);
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[tmpListInt].transform.Find("TsukueTVgawa").gameObject, 0);
        #endregion

        //デバッグ
        //Debug.Log(DB.nowEventNum + "デバッグ開始");

        bool tmpTansakuSkip = true;
        while (tmpTansakuSkip)
        {
            //会話1へ移動（デバッグ）
            if ((DB.isDebugMode && Input.GetKeyDown(KeyCode.G)))
            {
                #region 智恵理入室テスト
                //智恵理オン
                GirlMeshTrs.gameObject.SetActive(true);
                //アニメスピード
                girlAnim.speed = 0.7f;
                doorAnim.speed = 0.7f;
                chairAnim.speed = 0.7f;

                ChieriMotion("ドア入室", 0f, 0);
                doorAnim.CrossFadeInFixedTime("ドア開き閉じ", 0f, 0);

                yield return new WaitForSeconds(2.2f / girlAnim.speed);

                //IKプレイヤー見る
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
                DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

                Hukidashi("D3010");//お待たせ
                ChieriMotion("笑顔01口眉", 0.1f, 2);
                ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し



                //■ポーズ状態まで待ち
                StartCoroutine(GirlAnimReadSystem());
                while (girlAnimNomTime <= 0.9f) { yield return null; }
                isGirlAnimReadSystem = false;

                ChieriMotion("ドアからデスク横へ歩く", 0.1f, 0);

                ////暗幕 会話1へイベント移動
                //FadeBlack(1, 1);
                //isTansakuSystem = false;
                //isKOSystem = false;
                //yield return new WaitForSeconds(2f);
                //NovelSetVis("D2000");//足音が聞こえてきた
                //while (isNovelSetVisIng) { yield return null; }
                //EventMove("会話1");
                //tmpTansakuSkip = false;
                #endregion
            }

            if ((DB.isDebugMode && Input.GetKeyDown(KeyCode.V)))
            {
                #region ■使用する探索オブジェ選別

                //■該当の探索オブジェのコリダータグ書き換え
                foreach (GameObject tmpObj in TansakuObjList)
                {
                    //■まずは全部オフ
                    //（子の0番目にコリダーのフォルダがあること前提）
                    foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                    { CollObjs.tag = "TansakuSeeCollOffObj"; }

                    //該当していたら再度ONに戻し
                    if (
                        tmpObj.name == "Cord"
                        || tmpObj.name == "Gomibako"
                        || tmpObj.name == "Door"
                        )
                    {
                        foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                        { CollObjs.tag = "TansakuSeeCollOnObj"; }
                    }

                }
                #endregion
            }

            yield return null;
        }


        Debug.Log(DB.nowEventNum + "メインコルーチン終了");
        yield break;
    }
    IEnumerator D2110()//ゴミ箱裏に隠れ
    {
        if (debugEventMoveFlag == true)
        {
            #region 大きさや位置
            //プレイヤー大きさ
            nowPlayerLocalScale = new Vector3(0.03f, 0.03f, 0.03f);

            #region 小物
            //小物消し
            Drill_chieriTrs.gameObject.SetActive(false);
            DrillTrs.gameObject.SetActive(false);
            KeshigomuObj.SetActive(true);
            SharpenObj.SetActive(true);

            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;
            #endregion
            //暗幕
            FadeBlack(1, 0f);

            #endregion
        }
        EventReset();

        #region 設定+ノベル一つ
        //智恵理オフ
        GirlMeshTrs.gameObject.SetActive(false);

        //■PosObjで読み込み

        #region プレイヤー 位置とポーズとカメラリセット
        //プレイヤー ゴミ箱裏に
        GameObject Player_01_GomibakoKakurePosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Player_01_GomibakoKakurePosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_01_GomibakoKakurePosObj.transform.localPosition;

        //カメラリセット値変更してリセット
        CameraReset(Player_01_GomibakoKakurePosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos);//Anchorを立ちに

        #endregion

        //goto デバッグスキップ;

        yield return new WaitForSeconds(1f);

        //開幕
        FadeBlack(0, 0.5f);
        yield return new WaitForSeconds(0.5f);
        yield return new WaitForSeconds(1f);

        NovelSetVis("T_Gomibako_隠れる");//よしここなら見えない
        while (novelCurrentPageInt < 1) { yield return null; }
        //暗幕
        FadeBlack(1, 2f);
        yield return new WaitForSeconds(2f);

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(3f);
        #endregion
        //デバッグスキップ:



        //WindnoiseSoundObj付与（ゴミ箱）
        GameObject GomibakoBottomSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GomibakoTrs);
        DB.evMoveDelObjList.Add(GomibakoBottomSoundObj);

        GomibakoBottomSoundObj.GetComponent<AudioSource>().mute = true;//設置時に音鳴るので一時ミュート
        //SoundObjのPos
        GameObject SoundObj_05_GomibakoBottomPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_05_GomibakoBottomPosObj") as GameObject;
        GomibakoBottomSoundObj.transform.localPosition = SoundObj_05_GomibakoBottomPosObj.transform.localPosition;

        //開幕
        FadeBlack(0, 0.5f);
        yield return new WaitForSeconds(0.5f);

        #region 智恵理ドアからゴミ箱探すまで（ためしに原点モーションで）
        //Posロック解除
        DB.isChieriPosLock = false;
        //智恵理オン
        GirlMeshTrs.gameObject.SetActive(true);

        //アニメスピード
        girlAnim.speed = 0.5f;
        doorAnim.speed = 0.5f;
        chairAnim.speed = 0.5f;

        //まずゼロ位置
        GirlTrs.position = Vector3.zero;
        //■オリジナルモーションからボーンの位置読み取り
        ChieriMotion("ドア入室", 0f, 0);
        yield return null;//アニメは1フレ後反映
                          //ボーンから現在位置読み取り、GirlTrsに Linearで（Yは0なので動かさない）
        GirlTrs.DOLocalMoveX(Bip001Trs.localPosition.x, 0 / girlAnim.speed)
            .SetEase(Ease.Linear);
        GirlTrs.DOLocalMoveZ(Bip001Trs.localPosition.z, 0 / girlAnim.speed)
            .SetEase(Ease.Linear);
        yield return null;//この1フレを挟むことでスムーズになった

        //原点モーションの入室開始
        ChieriMotion("ドア入室原点", 0f / girlAnim.speed, 0);
        doorAnim.CrossFadeInFixedTime("ドア開き閉じ", 0f, 0);
        yield return null;//アニメ反映は1フレーム後

        yield return new WaitForSeconds(1.5f / girlAnim.speed);

        NovelSetVis("ゴミ箱裏発見001");//来た来た


        Hukidashi("D3010");//お待たせ
        ChieriMotion("笑顔01口眉", 0.03f / girlAnim.speed, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.03f / girlAnim.speed, 2);//時間差表情戻し



        //■ドア閉め終わりくらいまで待ち
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 0.63f) { yield return null; }
        isGirlAnimReadSystem = false;

        ChieriMotion("ドアからデスク横へ歩く原点", 0.1f / girlAnim.speed, 0);
        yield return new WaitForSeconds(1.5f / girlAnim.speed);

        NovelSetVis("ゴミ箱裏発見003");//えっ、え？　地震？！

        //IKスピーカー見る
        FollowDOMove(IKLookAtEyeTargetTrs, SpeakerTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, SpeakerTrs);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        yield return new WaitForSeconds(2f / girlAnim.speed);



        Hukidashi("D3030bad1");//ってあれいない？
        ChieriMotion("f_あ、えっとー・・", 0.07f / girlAnim.speed, 2);
        yield return new WaitForSeconds(1.5f / girlAnim.speed);

        //IKオフ
        DOTweenToLAIKSEyes(LAIKEyeS, 0, 1);
        DOTweenToLAIKSHead(LAIKHeadS, 0, 1);


        //■ポーズ状態まで待ち
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 1f) { yield return null; }
        isGirlAnimReadSystem = false;

        yield return new WaitForSeconds(1);

        //智恵理 デスク横ポーズ位置に
        GameObject Chieri_20_DeskYokoPosePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_20_DeskYokoPosePosObj") as GameObject;
        GirlTrs.localPosition = Chieri_20_DeskYokoPosePosObj.transform.localPosition;

        #region ゴミ箱探し
        girlAnim.speed = 0.8f;
        //■ゴミ箱持って置くまで開始
        ChieriMotion("デスク横探しゴミ箱持ち上げるまで原点", 0 / girlAnim.speed, 0);
        //"デスク横探しゴミ箱持ち"に切り替わるまで待ち
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "デスク横探しゴミ箱持ち上げるまで原点") { yield return null; }

        while (girlAnimNomTime <= 0.200f) { yield return null; }
        Hukidashi("探し台詞020");//もしかして降りたの
        ChieriMotion("f_・・・（悲）", 0.07f / girlAnim.speed, 2);

        while (girlAnimNomTime <= 0.600f) { yield return null; }
        Hukidashi("探し台詞023");//このへん？

        NovelSetVis("ゴミ箱裏発見005");//ど、どうする



        //ゴミ箱の現在位置保持
        Vector3 tmpGomibakoDefPos = GomibakoTrs.position;
        Quaternion tmpGomibakoDefRot = GomibakoTrs.rotation;

        //ゴミ箱掴むフレームまで待ち
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 0.940f) { yield return null; }

        girlAnim.speed = 0.4f;

        //左手にペアレント
        GomibakoTrs.SetParent(Bip001_L_HandTrs);

        //ミュート解除
        GomibakoBottomSoundObj.GetComponent<AudioSource>().mute = false;//設置時に音鳴るので一時ミュート


        #region プレイヤー  ゴミ箱持ち上げに吸い込まれ
        GameObject Player_05_GomibakoSuikomarePosObj =
            Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Player_05_GomibakoSuikomarePosObj") as GameObject;
        CameraObjectsTrs.DOLocalMove(Player_05_GomibakoSuikomarePosObj.transform.localPosition, 3);
        CameraAnchorTrs.DOShakePosition(3f, 0.1f);

        #endregion
        NovelSetVis("ゴミ箱裏発見007");//お、おわ・・！　吸い込まれ

        //ゴミ箱掴むモーション終わりまで待ち
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 1f) { yield return null; }
        isGirlAnimReadSystem = false;

        //事前にIKターゲットを位置に
        IKLookAtEyeTargetTrs.position = PlayerEyeTargetTrs.position;
        IKLookAtHeadTargetTrs.position = PlayerHeadTargetTrs.position;

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0.03f / girlAnim.speed);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0.5f / girlAnim.speed);

        yield return new WaitForSeconds(0.2f / girlAnim.speed);
        ChieriMotion("f_え？？", 0.07f / girlAnim.speed, 2);
        yield return new WaitForSeconds(0.2f / girlAnim.speed);

        Hukidashi("ゴミ箱裏発見010");//え？え？？
        AseTare();
        yield return new WaitForSeconds(2f / girlAnim.speed);
        Hukidashi("ゴミ箱裏発見020");//なんでそんな所にいるの？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        NovelSetVis("ゴミ箱裏発見010");//「え、あ、いや」普通に見つかってしまった。
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        FadeBlack(1, 1);

        Hukidashi("ゴミ箱裏発見030");//危ないから出てきて
        ChieriMotion("f_怒ってる・・？", 2f / girlAnim.speed, 2);

        ChieriMotion("ひとさし指差し", 0.5f / girlAnim.speed, 5);

        //右手IK指差しPos設置
        GameObject Chieri_25_IK_RHandDetekiteYubisasiPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_25_IK_RHandDetekiteYubisasiPosObj") as GameObject;
        IKRHandTargetTrs.localPosition = Chieri_25_IK_RHandDetekiteYubisasiPosObj.transform.localPosition;
        IKRHandTargetTrs.localEulerAngles = Chieri_25_IK_RHandDetekiteYubisasiPosObj.transform.localEulerAngles;

        //右手
        DOTweenToIKEfPos(IKRHandEf, 1, 1.5f / girlAnim.speed);
        DOTweenToIKEfRot(IKRHandEf, 1, 1.5f / girlAnim.speed);

        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);
        NovelSetVis("ゴミ箱裏発見020");//ああ・・うん
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        EventMove("帰ろうとしてた？", true);



        #region //テレビ台の下逃げて手伸ばされるの、保留
        //#region ゲーム用設定
        ////■隠れ鬼移動システムON
        //KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
        ////ローディング待ち
        //while (isKOSystemLoading) { yield return null; }
        ////移動場所04オン
        //KO_KakurePosObjsList[4].SetActive(true);
        ////■PosObj出現(ここ限定なのでフラグなし)
        ////New移動ポイント拡大縮小演出
        //KO_NewPosPointObjVis
        //    (KO_KakurePosObjsList[4].transform.Find("YubiSIta01").gameObject);
        //yield return new WaitForSeconds(1);
        //KO_NewPosPointObjVis
        //    (KO_KakurePosObjsList[4].transform.Find("MataSita01").gameObject);
        //yield return new WaitForSeconds(1);
        //KO_NewPosPointObjVis
        //    (KO_KakurePosObjsList[4].transform.Find("TVHondanaSita02").gameObject);

        //#endregion
        //yield return new WaitForSeconds(2);

        //NovelSetVis("tmpゴミ箱探し後");
        //while (isNovelSetVisIng) { yield return null; }







        ////ペアレント戻し
        //GomibakoTrs.SetParent(RoomTrs);

        ////保持しておいた位置に戻し
        //GomibakoTrs.position = tmpGomibakoDefPos;
        //GomibakoTrs.rotation = tmpGomibakoDefRot;


        ////ゴミ箱探し後のイベントテスト
        //while (true)
        //{
        //    if (Input.GetKeyDown(KeyCode.V))
        //    {
        //        girlAnim.speed = 0.5f;
        //        //右手オフ
        //        DOTweenToIKEfPos(IKRHandEf, 0, 1f / girlAnim.speed);
        //        DOTweenToIKEfRot(IKRHandEf, 0, 1f / girlAnim.speed);
        //        ChieriMotion("_noData", 0.5f / girlAnim.speed, 5);

        //        //■ゴミ箱降ろし開始
        //        ChieriMotion("デスク横探しゴミ箱置いて振り返る原点", 0 / girlAnim.speed, 0);
        //        yield return null;

        //        //ゴミ箱降ろすフレームまで待ち
        //        StartCoroutine(GirlAnimReadSystem());
        //        while (girlAnimNomTime <= 0.136f) { yield return null; }

        //        //ペアレント戻し
        //        GomibakoTrs.SetParent(RoomTrs);

        //        //保持しておいた位置に戻し
        //        GomibakoTrs.position = tmpGomibakoDefPos;
        //        GomibakoTrs.rotation = tmpGomibakoDefRot;

        //    }


        //    yield return null;
        //}

        #endregion

        #endregion


        #endregion

    }
    IEnumerator D2130()//USBケーブル登り
    {
        if (debugEventMoveFlag == true)
        {
            #region 大きさや位置　小物
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;
            //智恵理0位置ロック解除
            DB.isChieriPosLock = false;
            GirlMeshTrs.gameObject.SetActive(false);

            #region 小物
            //小物消し
            Drill_chieriTrs.gameObject.SetActive(false);
            DrillTrs.gameObject.SetActive(false);
            KeshigomuObj.SetActive(true);
            SharpenObj.SetActive(true);

            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;
            #endregion

            #endregion
        }
        EventReset();
        KankyouBGMVolumer(1f, 2);

        float //コンティニューのためにHP取得 
            tmpPlayerHP = DB.playerHPFloat;

        #region 暗幕 設定 開幕
        //暗幕
        FadeBlack(1, 0.5f);
        yield return new WaitForSeconds(0.5f);

        #region ケーブル バッテリー設置
        GameObject USBCable02_Battery_NoboriPrefab;
        //既に編集用に置いてあったら取得
        if (GameObject.Find("USBCable02_Battery_NoboriPrefab") != null)
        {
            USBCable02_Battery_NoboriPrefab
                = GameObject.Find("USBCable02_Battery_NoboriPrefab");
        }
        else //無ければリソースから
        {
            USBCable02_Battery_NoboriPrefab
                = Instantiate(Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/USBCable02_Battery_NoboriPrefab") as GameObject
                , GameObjectsTrs, false);
            USBCable02_Battery_NoboriPrefab.name = "USBCable02_Battery_NoboriPrefab";
        }
        DB.sceneMoveDelObjList.Add(USBCable02_Battery_NoboriPrefab);

        GameObject BatteryObj;
        //既に編集用に置いてあったら取得
        if (GameObject.Find("Battery") != null)
        { BatteryObj = GameObject.Find("Battery"); }
        else //無ければリソースから
        {
            BatteryObj = Instantiate(Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/Battery") as GameObject
              , GameObjectsTrs, false);
            BatteryObj.name = "Battery";
        }
        DB.sceneMoveDelObjList.Add(BatteryObj);

        //智恵理スマホ
        ChieriSumahoObj.SetActive(true);
        ChieriSumahoObj.transform.SetParent(GameObjectsTrs, false);//智恵理の手から外して

        GameObject ChieriSumaho010_HikidashiUePosObj
            = Resources.Load("_PosObj/13Tansaku00/ChieriSumaho010_HikidashiUePosObj") as GameObject;

        ChieriSumahoObj.transform.localPosition = ChieriSumaho010_HikidashiUePosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho010_HikidashiUePosObj.transform.localEulerAngles;
        #endregion

        #region ケーブルから探索用コリダーをオフ
        USBCable02_Battery_NoboriPrefab.transform
            .Find("USBCable_Noboriyou")
            .Find("USBCableTansakuColliders").gameObject.SetActive(false);

        #endregion
        #region 調整用にRigidBodyをListで取得
        List<Rigidbody> cableRigidbodyList = new List<Rigidbody>();
        //リセット用にボーンのPosとRotを取得
        List<Vector3> cableBoneDefLocalPosList = new List<Vector3>();
        List<Vector3> cableBoneDefLocalEulList = new List<Vector3>();

        int tmpCableBoneInt = 0;

        //Obj名が"Cable_Bone"連番 のものを取得
        for (int i = 0; i < USBCable02_Battery_NoboriPrefab.transform.childCount; i++)
        {
            if (USBCable02_Battery_NoboriPrefab.transform.GetChild(i).name == "Cable_Bone" + tmpCableBoneInt)
            {
                cableRigidbodyList.Add
                    (USBCable02_Battery_NoboriPrefab.transform.GetChild(i).GetComponent<Rigidbody>());
                //リセット用にボーンのPosとRotを取得
                cableBoneDefLocalPosList.Add
                    (USBCable02_Battery_NoboriPrefab.transform.GetChild(i).localPosition);
                cableBoneDefLocalEulList.Add
                    (USBCable02_Battery_NoboriPrefab.transform.GetChild(i).localEulerAngles);

                tmpCableBoneInt++;
            }
        }
        #endregion
        リセット://Instantiateでメモリリークしないようにこんな位置
        #region リセット処理群

        if (isNoboriReset)
        {
            #region リセット処理
            isNoboriReset = false;

            FadeBlack(1, 0f);
            isANSystem = false;
            //ANシステム終了処理のジョイント削除後のRigidBody削除になぜか2フレーム必要だった
            yield return null; yield return null;

            isNovelFadeTween = isNovelSetVisIng = false;
            DelAll_Hukidashi();

            //ケーブル重力状態とPosとRotを戻す
            for (int i = 0; i < cableRigidbodyList.Count; i++)
            {
                cableRigidbodyList[i].velocity = Vector3.zero;
                cableRigidbodyList[i].angularVelocity = Vector3.zero;
                cableRigidbodyList[i].ResetInertiaTensor();

                //PosとRotを戻す
                cableRigidbodyList[i].transform.localPosition = cableBoneDefLocalPosList[i];
                cableRigidbodyList[i].transform.localEulerAngles = cableBoneDefLocalEulList[i];
            }
            //左手を離していた時用に
            cableRigidbodyList[0].isKinematic = true;

            #endregion
        }


        ////■Gameobjectsへparent時に、ケーブルごちゃらないようにオフ
        //for (int i = 0; i < cableRigidbodyList.Count; i++)
        //{ cableRigidbodyList[i].gameObject.SetActive(false); }

        ////ペアレント
        //USBCable02_Battery_NoboriPrefab.transform.SetParent(GameObjectsTrs, false);

        //ケーブルのDragを5に（デフォルトは0）
        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].drag = 5; }

        ////オン
        //for (int i = 0; i < cableRigidbodyList.Count; i++)
        //{ cableRigidbodyList[i].gameObject.SetActive(true); }
        #endregion


        #region プレイヤー 位置とポーズとカメラリセット
        //プレイヤー ケーブル降りる位置に
        GameObject Player010_USBCableClimb_StartPosObj
            = Resources.Load("_PosObj/14USBCableClimb/Player010_USBCableClimb_StartPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player010_USBCableClimb_StartPosObj.transform.localPosition;

        //カメラリセット（+回転と立ち設定）
        //カメラリセット値変更してリセット
        CameraReset(Player010_USBCableClimb_StartPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos);//Anchorを立ちに

        #endregion

        #region ANシステム起動
        //掴むのNGObjリスト
        AN_GrapNGObjList.Add(RoomTrs.Find("Kabe").gameObject);
        AN_GrapNGObjList.Add(RoomTrs.Find("Desk").gameObject);
        AN_GrapNGObjList.Add(RoomTrs.Find("Hikidashi").gameObject);
        AN_GrapNGObjList.Add(RoomTrs.Find("Hondana_hi").gameObject);

        //イージー
        AN_isInputToggleMode = false;
        AN_isInputSwitchEasyMode = true;
        AN_isInputSwitchHardMode = false;

        //パワーモードオフ クライムモード
        AN_isGrapPowerMode = false;
        AN_isClimbMode = true;

        //■脚のぼりシステム コルーチン始動
        StartCoroutine(AsinoboriSystem());

        #endregion
        //InputロックとUI表示
        AN_isInputLock = true;
        ANGrapHandUIObj.SetActive(false);

        //プレイヤーAN_RigidBodyをXZ動かさない //フリーズ、PositionY(4)だけオフ
        AN_PlayerRigidbody.constraints = RigidbodyConstraints.FreezeAll - 4;

        yield return null;

        //rigid監視スタート
        StartCoroutine(RigidReadSystem());

        yield return new WaitForSeconds(0.5f);
        while (isNovelSetVisIng) { yield return null; }

        //InputロックとUI表示
        AN_isInputLock = false;
        ANGrapHandUIObj.SetActive(true);

        //開幕
        FadeBlack(0, 0.5f);
        yield return new WaitForSeconds(0.5f);

        #endregion

        //ゴール付近で風音出ちゃうので
        playerWindAudioSource.mute = true;

        //初掴みまで待機
        while (AN_isRGrap == false && AN_isLGrap == false) { yield return null; }

        #region プレイヤーに当たるイベントコリダー設置（コリダー側にboolOnするスクリプト）
        GameObject USBCable02010_PareUSBCable_NoboriTriggerObj
            = Instantiate(Resources.Load("_PosObj/14USBCableClimb/USBCable02010_PareUSBCable_NoboriTriggerObj") as GameObject
            , USBCable02_Battery_NoboriPrefab.transform, false);
        DB.evMoveDelObjList.Add(USBCable02010_PareUSBCable_NoboriTriggerObj);

        GameObject USBCable02013_PareUSBCable_NoboriTriggerObj
            = Instantiate(Resources.Load("_PosObj/14USBCableClimb/USBCable02013_PareUSBCable_NoboriTriggerObj") as GameObject
            , USBCable02_Battery_NoboriPrefab.transform, false);
        DB.evMoveDelObjList.Add(USBCable02013_PareUSBCable_NoboriTriggerObj);

        GameObject USBCable02015_PareUSBCable_NoboriTriggerObj
            = Instantiate(Resources.Load("_PosObj/14USBCableClimb/USBCable02015_PareUSBCable_NoboriTriggerObj") as GameObject
            , USBCable02_Battery_NoboriPrefab.transform, false);
        DB.evMoveDelObjList.Add(USBCable02015_PareUSBCable_NoboriTriggerObj);

        GameObject USBCable02020_PareUSBCable_NoboriGoalObj
            = Instantiate(Resources.Load("_PosObj/14USBCableClimb/USBCable02020_PareUSBCable_NoboriGoalObj") as GameObject
            , USBCable02_Battery_NoboriPrefab.transform, false);
        DB.evMoveDelObjList.Add(USBCable02020_PareUSBCable_NoboriGoalObj);

        #endregion
        //サブイベプレイリストシステムスタート
        StartCoroutine(SubEventPlaylistSystemIEnum());

        bool isTmpUSBClimbTimeCount = true;//タイム計測用
        while (isD2130End == false)//ゴールイベント終了時に抜ける
        {
            //タイム計測
            if (isTmpUSBClimbTimeCount) { USBClimbTime += 1 * Time.deltaTime; }

            if (isD2130Omoi)
            {
                subEventIEnumList.Add(D2130Zyuuryoku());
                Destroy(USBCable02010_PareUSBCable_NoboriTriggerObj);
                isD2130Omoi = false;
            }

            if (isD2130Kuruma)
            {
                subEventIEnumList.Add(D2130Nande());
                Destroy(USBCable02013_PareUSBCable_NoboriTriggerObj);
                isD2130Kuruma = false;

                SEPlay(UISEObj, "UI_cho");
            }

            if (isD2130Ripcream)
            {
                subEventIEnumList.Add(D2130Omoeba());
                Destroy(USBCable02015_PareUSBCable_NoboriTriggerObj);
                isD2130Ripcream = false;

                SEPlay(UISEObj, "UI_cho");
            }

            if (isD2130Goal)
            {
                AN_isInputLock = true;
                isTmpUSBClimbTimeCount = false;
                subEventIEnumList.Insert(0, D2130Goal());
                Destroy(USBCable02020_PareUSBCable_NoboriGoalObj);
                isD2130Goal = false;

                SEPlay(UISEObj, "UI_cho");
            }
            yield return null;
        }

        //イベントムーブはゴールサブイベに
        yield break;
    }
    #region ┗■USB登り中のサブイベント群

    float USBClimbTime;//スピードクリアしたらタイム表示用
    public bool isD2130SpeedClear = true;

    public bool isD2130Omoi = false;
    IEnumerator D2130Zyuuryoku()//重力が辛い！
    {
        NovelSetVis("USBケーブル登り中010", true);//重い！

        ////ここでゴールイベントが予約されてなかったらスピードクリアならず
        //if (subEventIEnumList.Count == 1)
        //{ isB2090SpeedClear = false; }

        //サブイベントPlayListシステム用に終了を通知
        isRunSubEventPlayListSystemEvent = false;
        yield break;
    }

    public bool isD2130Kuruma = false;
    IEnumerator D2130Nande()//本の背表紙
    {
        NovelSetVis("USBケーブル登り中013", true);//あそこから……！　来たんだよな……！

        //サブイベントPlayListシステム用に終了を通知
        isRunSubEventPlayListSystemEvent = false;
        yield break;
    }

    public bool isD2130Ripcream = false;
    IEnumerator D2130Omoeba()//思えば遠くまで来た
    {
        NovelSetVis("USBケーブル登り中015", true);//あそこから……！　来たんだよな……！

        //サブイベントPlayListシステム用に終了を通知
        isRunSubEventPlayListSystemEvent = false;
        yield break;
    }

    public bool isD2130Goal = false;
    public bool isD2130End = false;
    IEnumerator D2130Goal()//ゴール
    {
        //ゴールイベント終了でメインイベント終了
        isD2130End = true;

        ANGrapHandUIObj.SetActive(false);

        //isKinematicつけることでぶつかりと移動を防ぐ
        AN_PlayerRigidbody.isKinematic = true;

        if (isD2130SpeedClear)
        {
            #region スピードクリアしたら
            NovelSetVis("USBケーブル登りゴール010");//よし、ここまでくれば……！
            #endregion
        }
        else
        {
            NovelSetVis("USBケーブル登りゴール010");//よし、ここまでくれば……！
        }
        while (novelCurrentPageInt < 1) { yield return null; }

        FadeBlack(1, 0.5f);
        yield return new WaitForSeconds(0.5f);
        isANSystem = false;
        //脚登りシステム終了まで待ち
        while (isANSystemRemoveComplete == false) { yield return null; }

        while (isNovelSetVisIng) { yield return null; }


        //サブイベントPlayListシステム用に終了を通知
        isRunSubEventPlayListSystemEvent = false;


        EventMove("引き出しの上");
        yield break;
    }

    #endregion
    IEnumerator D2131()//引き出しの上
    {
        if (debugEventMoveFlag == true)
        {
            #region 大きさや位置　小物
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;
            //智恵理0位置ロック解除
            DB.isChieriPosLock = false;
            GirlMeshTrs.gameObject.SetActive(false);

            #region 小物
            //小物消し
            Drill_chieriTrs.gameObject.SetActive(false);
            DrillTrs.gameObject.SetActive(false);
            KeshigomuObj.SetActive(true);
            SharpenObj.SetActive(true);

            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;
            #endregion

            #endregion
        }
        EventReset();
        KankyouBGMVolumer(1f, 2);

        girlAnim.speed =
        doorAnim.speed = 0.5f;
        #region 暗幕 設定 開幕
        //暗幕
        FadeBlack(1, 0.5f);
        yield return new WaitForSeconds(0.5f);

        #region ケーブル バッテリー設置
        GameObject USBCable02_Battery_NoboriPrefab;
        //既に編集用に置いてあったら取得
        if (GameObject.Find("USBCable02_Battery_NoboriPrefab") != null)
        {
            USBCable02_Battery_NoboriPrefab
                = GameObject.Find("USBCable02_Battery_NoboriPrefab");
        }
        else //無ければリソースから
        {
            USBCable02_Battery_NoboriPrefab
                = Instantiate(Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/USBCable02_Battery_NoboriPrefab") as GameObject
                , GameObjectsTrs, false);
            USBCable02_Battery_NoboriPrefab.name = "USBCable02_Battery_NoboriPrefab";
        }
        DB.sceneMoveDelObjList.Add(USBCable02_Battery_NoboriPrefab);

        GameObject BatteryObj;
        //既に編集用に置いてあったら取得
        if (GameObject.Find("Battery") != null)
        { BatteryObj = GameObject.Find("Battery"); }
        else //無ければリソースから
        {
            BatteryObj = Instantiate(Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/Battery") as GameObject
              , GameObjectsTrs, false);
            BatteryObj.name = "Battery";
        }
        DB.sceneMoveDelObjList.Add(BatteryObj);

        //智恵理スマホ
        ChieriSumahoObj.SetActive(true);
        ChieriSumahoObj.transform.SetParent(GameObjectsTrs, false);//智恵理の手から外して

        GameObject ChieriSumaho010_HikidashiUePosObj
            = Resources.Load("_PosObj/13Tansaku00/ChieriSumaho010_HikidashiUePosObj") as GameObject;

        ChieriSumahoObj.transform.localPosition = ChieriSumaho010_HikidashiUePosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho010_HikidashiUePosObj.transform.localEulerAngles;
        #endregion

        #region プレイヤー 位置とポーズとカメラリセット
        //プレイヤー ケーブル降りる位置に
        GameObject Player010_HikidashiUe_StartPosObj
            = Resources.Load("_PosObj/15HikidashiUe/Player010_HikidashiUe_StartPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player010_HikidashiUe_StartPosObj.transform.localPosition;

        //カメラリセット（+回転と立ち設定）
        //カメラリセット値変更してリセット
        CameraReset(Player010_HikidashiUe_StartPosObj.transform.localEulerAngles
            , DB.cameraSitAnchorDefLocalPos);//Anchorを座りに

        isPlayerUniqueMotion = true;
        PlayerMotion("liedown_00_Re", 0f, 0);
        #endregion

        #region 移動システム起動

        //■隠れ鬼移動システムON
        KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
        //ローディング待ち
        while (isKOSystemLoading) { yield return null; }
        //移動場所オン
        int tmpListInt = 9;
        KO_KakurePosObjsList[tmpListInt].SetActive(true);
        //歩きスピードにしてモーションも
        playerMoveSpeed = 0.5f;
        KO_AsiotoTimeCountMaxFloat = 0.7f;

        isKO_PlayerWalk = true;

        #endregion

        isSeePointTempOff = true;//ポインターオフ

        #endregion
        //開幕
        FadeBlack(0, 1f);
        yield return new WaitForSeconds(1f);

        NovelSetVis("USBケーブル登りゴール020");//二度とごめんだ
        while (novelCurrentPageInt < 4) { yield return null; }

        FadeBlack(1, 1f);
        yield return new WaitForSeconds(1f);

        #region プレイヤー 位置とポーズとカメラリセット
        CameraObjectsTrs.localPosition = Player010_HikidashiUe_StartPosObj.transform.localPosition;

        //カメラリセット（+回転と立ち設定）
        //カメラリセット値変更してリセット
        CameraReset(Player010_HikidashiUe_StartPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos);//Anchorを立ちに

        isPlayerUniqueMotion = false;
        #endregion

        while (novelCurrentPageInt < 7) { yield return null; }

        FadeBlack(0, 1f);
        yield return new WaitForSeconds(1f);

        while (isNovelSetVisIng) { yield return null; }

        isSeePointTempOff = false;//ポインターオン


        //ポイント出現 演出
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[tmpListInt].transform.Find("HikidashiSumahoMae").gameObject, 0.1f);


        while (isHikidashiUePlayerStartPosArea_Enter == false) { yield return null; }

        NovelSetVis("引き出し上スマホ010", true);//踏み外さないように
        while (isHikidashiSumahoMae_Enter == false) { yield return null; }

        isSeePointTempOff = true;//ポインターオフ
        isNowNovelAutoVis = false;

        while (isNovelSetVisIng) { yield return null; }

        NovelSetVis("引き出し上スマホ020");//おっし早速　いやどうなんだ・・・？
        while (isNovelSetVisIng) { yield return null; }


        #region 電源押して、暗証番号の所にHwSEnm
        //事前設置
        GameObject HwSEnm00_PareChieriSmartPhoneCanvasObj
            = Instantiate(Resources.Load("_PosObj/0110HikidashiNoUe/HwSEnm00_PareChieriSmartPhoneCanvasObj") as GameObject
            , ChieriSmartPhoneCanvasTrs
            , false);
        HwSEnm00_PareChieriSmartPhoneCanvasObj.name = nameof(HwSEnm00_PareChieriSmartPhoneCanvasObj);
        DB.evMoveDelObjList.Add(HwSEnm00_PareChieriSmartPhoneCanvasObj);

        //ロック画面に設定
        ChieriSmartPhoneCanvasTrs.Find("SeeSizeBack").gameObject.SetActive(false);
        ChieriSmartPhoneCanvasTrs.Find("LockGamen").gameObject.SetActive(true);
        ChieriSmartPhoneCanvasTrs.Find("Status_SeeSize(Clone)").gameObject.SetActive(false);


        NovelSetVis("引き出し上スマホ030");//重！　うおおおお
        while (novelCurrentPageInt < 8) { yield return null; }
        //カメラ揺れ
        CameraAnchorTrs.DOShakePosition(0.5f, 0.1f);
        yield return new WaitForSeconds(0.5f);
        ChieriSumahoPower();//オン

        while (isNovelSetVisIng) { yield return null; }

        NovelSetVis("引き出し上スマホ040");//なんだか見覚えが・・
        while (isNovelSetVisIng) { yield return null; }

        //HwSシステムスタート
        StartCoroutine(HWSimpleSystemIEnum());
        //Ray出すコリダーリストに登録
        HWSColliderList.Add(HwSEnm00_PareChieriSmartPhoneCanvasObj.transform.Find("HwSEnmA_2").GetComponent<Collider>());

        isSeePointTempOff = false;//ポインターオン（宿題用設定するまで暫定）

        //解くまで待機
        while (isHwSEnm00_PareChieriSmartPhoneCanvasObjCheck == false) { yield return null; }

        isSeePointTempOff = true;//ポインターオフ

        #endregion




        #region 智恵理入室
        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);

        ChieriMotion("ドア入室", 0f, 0);
        ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);
        doorAnim.CrossFadeInFixedTime("ドア開き閉じ", 0f, 0);

        yield return new WaitForSeconds(1f / girlAnim.speed);
        NovelSetVis("引き出し上スマホ100", true);//え、もう！？

        yield return new WaitForSeconds(1f / girlAnim.speed);

        Hukidashi("D3010");//お待たせ

        #region IKドア見る
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, DoorTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, DoorTrs, 4f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
        #endregion

        yield return new WaitForSeconds(0.5f / girlAnim.speed);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(0.5f / girlAnim.speed);

        //まばたき
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        yield return new WaitForSeconds(0.2f / girlAnim.speed);
        ChieriMotion("まばたき", 0f, 4);
        blinkTime = 0;

        #region IKプレイヤー顔向け
        DOTweenToLAIKSEyes(LAIKEyeS, 0, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, 8f);
        #endregion

        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 0.8f) { yield return null; }

        #region IKプレイヤー目向け
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0);
        #endregion


        //■ポーズ状態まで待ち
        while (girlAnimNomTime <= 0.9f) { yield return null; }
        isGirlAnimReadSystem = false;

        ChieriMotion("ん？", 0.2f, 2);
        #endregion
        FadeBlack(1, 1f);
        yield return new WaitForSeconds(1);


        #region 終了処理
        isSeePointTempOff =
        isKOSystem =
        isTansakuSystem =
        isANSystem = false;
        Destroy(USBCable02_Battery_NoboriPrefab);
        Destroy(BatteryObj);

        //登り用のケーブルバッテリーここで削除
        Destroy(USBCable02_Battery_NoboriPrefab);
        Destroy(BatteryObj);
        #endregion

        EventMove("はい、ただいま");
        yield break;
    }
    IEnumerator D2132()//はい、ただいま
    {
        if (debugEventMoveFlag == true)
        {
            #region 大きさや位置
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;
            #region 小物
            //小物消し
            Drill_chieriTrs.gameObject.SetActive(false);
            DrillTrs.gameObject.SetActive(false);
            KeshigomuObj.SetActive(true);
            SharpenObj.SetActive(true);

            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;
            #endregion

            GirlMeshTrs.gameObject.SetActive(false);
            #endregion
        }
        EventReset();
        while (isNovelSetVisIng) { yield return null; }
        KankyouBGMVolumer(0.5f, 5);

        FadeBlack(1, 0);//シーンロード時用（SEなどで時間かかるので）

        NovelSetVis("USBケーブル降り中見つかり005");//気づかれる前に！

        #region ケーブルに急いで戻るSE
        SEPlay("nuno_washing-machine-laundry-put1");
        SEPlay("walk-flooring1-11");
        yield return new WaitForSeconds(0.6f);
        SEPlay("walk-flooring1-15");
        yield return new WaitForSeconds(1f);
        SEPlay("laundry-spread1");
        SEPlay("GrapHada01");
        yield return new WaitForSeconds(0.3f);
        SEPlay("GrapHada07");
        yield return new WaitForSeconds(0.2f);
        SEPlay("GrapHada04");

        #endregion

        ////手が表示されないバグ対応（夜の起動時の点滅（ライトONOFF？）の謎処理のせいかもしれない。解決したら直す）
        //なくなったっぽいのでひとまず1フレに戻し
        yield return null;

        #region  IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
        LAIKHead.solver.clampWeightHead = 0.75f;
        #endregion

        girlAnim.speed = 0.5f;

        //事前ケーブル掴み
        #region ケーブル バッテリー設置
        GameObject USBCable02_Battery_OriPrefab;
        //既に編集用に置いてあったら取得
        if (GameObject.Find("USBCable02_Battery_OriPrefab") != null)
        {
            USBCable02_Battery_OriPrefab
                = GameObject.Find("USBCable02_Battery_OriPrefab");
        }
        else //無ければリソースから
        {
            USBCable02_Battery_OriPrefab
                = Instantiate(Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/USBCable02_Battery_OriPrefab") as GameObject);
        }
        USBCable02_Battery_OriPrefab.name = "USBCable02_Battery_OriPrefab";
        DB.sceneMoveDelObjList.Add(USBCable02_Battery_OriPrefab);


        GameObject BatteryObj;
        //既に編集用に置いてあったら取得
        if (GameObject.Find("Battery") != null)
        { BatteryObj = GameObject.Find("Battery"); }
        else //無ければリソースから
        {
            BatteryObj = Instantiate(Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/Battery") as GameObject
              , GameObjectsTrs, false);
        }
        DB.sceneMoveDelObjList.Add(BatteryObj);
        #region ケーブルから探索用コリダーをオフ
        USBCable02_Battery_OriPrefab.transform
            .Find("USBCable_Noboriyou")
            .Find("USBCableTansakuColliders").gameObject.SetActive(false);

        #endregion

        #region 調整用にRigidBodyをListで取得
        List<Rigidbody> cableRigidbodyList = new List<Rigidbody>();
        int tmpCableBoneInt = 0;

        //Obj名が"Cable_Bone"連番 のものを取得
        for (int i = 0; i < USBCable02_Battery_OriPrefab.transform.childCount; i++)
        {
            if (USBCable02_Battery_OriPrefab.transform.GetChild(i).name == "Cable_Bone" + tmpCableBoneInt)
            {
                cableRigidbodyList.Add
                    (USBCable02_Battery_OriPrefab.transform.GetChild(i).GetComponent<Rigidbody>());

                tmpCableBoneInt++;
            }
        }
        #endregion


        //■Gameobjectsへparent時に、ケーブルごちゃらないようにオフ
        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].gameObject.SetActive(false); }
        //ペアレント
        USBCable02_Battery_OriPrefab.transform.SetParent(GameObjectsTrs, false);
        //オン
        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].gameObject.SetActive(true); }

        //ケーブルのDragを5に（デフォルトは0）
        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].drag = 5; }


        #endregion

        //変数
        GameObject //プレイヤーが掴まってる・智恵理が摘んでるケーブルのボーンObj
            GrapCableObj = cableRigidbodyList[3].gameObject,
            TsumamiCableObj = cableRigidbodyList[0].gameObject;



        #region プレイヤーとANシステム設置

        #region プレイヤー 位置とポーズとカメラリセット
        //プレイヤー ケーブル降りる位置に
        GameObject Player_00_CableTotyuuPosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/Player_00_CableTotyuuPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_00_CableTotyuuPosObj.transform.localPosition;

        //カメラリセット（+回転と立ち設定）
        //カメラリセット値変更してリセット
        CameraReset(Player_00_CableTotyuuPosObj.transform.localEulerAngles
            , DB.cameraSitAnchorDefLocalPos);//Anchorを座りに
        #endregion

        //掴むのNGObjリスト
        AN_GrapNGObjList.Clear();
        AN_GrapNGObjList.Add(RoomTrs.Find("Kabe").gameObject);
        AN_GrapNGObjList.Add(RoomTrs.Find("Desk").gameObject);


        //■事前にケーブル掴んでおく
        //パワーモードオフ
        AN_isGrapPowerMode = false;
        //外れないように
        AN_isAutoPullLeaveMode = false;
        //登りモードオフ
        AN_isClimbMode = false;
        //Inputロック
        AN_isInputLock = true;


        //■脚のぼりシステム コルーチン始動
        StartCoroutine(AsinoboriSystem(0));
        //UI OFF
        ANGrapHandUIObj.SetActive(false);
        yield return null;


        #endregion

        #region 事前掴み場所直接指定処理(左手を掴んで、落ちてから右手）
        isRInput = isLInput = true;

        //掴む場所objをリソースから読み込んで直接指定
        GameObject GrapCableBone_Hand_L_RootLocalPosObj = Instantiate(Resources.Load
            ("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/GrapCableBone_Hand_L_RootLocalPosObj") as GameObject
            , GrapCableObj.transform
            , false);
        AsinoboriHandGrap(
            AN_Hand_L_RootTrs,
            GrapCableObj.transform,
            GrapCableBone_Hand_L_RootLocalPosObj.transform.position
            );
        Destroy(GrapCableBone_Hand_L_RootLocalPosObj);


        //yield return new WaitForSeconds(1);

        GameObject GrapCableBone_Hand_R_RootLocaPosObj = Instantiate(Resources.Load
            ("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/GrapCableBone_Hand_R_RootLocaPosObj") as GameObject
            , GrapCableObj.transform
            , false);
        AsinoboriHandGrap(
            AN_Hand_R_RootTrs,
            GrapCableObj.transform,
            GrapCableBone_Hand_R_RootLocaPosObj.transform.position
            );
        Destroy(GrapCableBone_Hand_R_RootLocaPosObj);

        yield return null;
        //リミットを調整
        AN_tmpRLimit.limit =
        AN_tmpLLimit.limit = 3.5f;

        #endregion

        #region ■智恵理にSoundObj設置
        #region SoundObj左手に付与
        //WindnoiseSoundObj付与（左手）
        GameObject LHandWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlLHandTrs);
        DB.evMoveDelObjList.Add(LHandWindnoiseSoundObj);
        LHandWindnoiseSoundObj.name = nameof(LHandWindnoiseSoundObj);
        LHandWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpLHandWindnoiseSound = LHandWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpLHandWindnoiseSound.aSource.maxDistance = 30;
        tmpLHandWindnoiseSound.pitchMax = 0.7f;
        tmpLHandWindnoiseSound.pitchUpRateAdjustFloat = 40;
        tmpLHandWindnoiseSound.pitchDownRateAdjustFloat = 100;

        tmpLHandWindnoiseSound.aSource.volume = 0f;
        #endregion
        #region SoundObj右手に付与
        //WindnoiseSoundObj付与（左手）
        GameObject RHandWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRHandTrs);
        DB.evMoveDelObjList.Add(RHandWindnoiseSoundObj);
        RHandWindnoiseSoundObj.name = nameof(RHandWindnoiseSoundObj);
        RHandWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpRHandWindnoiseSound = RHandWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpRHandWindnoiseSound.aSource.maxDistance = 50;
        tmpRHandWindnoiseSound.pitchMax = 1f;
        tmpRHandWindnoiseSound.pitchUpRateAdjustFloat = 4;
        tmpRHandWindnoiseSound.pitchDownRateAdjustFloat = 100;

        tmpRHandWindnoiseSound.aSource.volume = 0;
        #endregion
        #region SoundObj頭に付与
        //WindnoiseSoundObj付与（左手）
        GameObject HeadWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , Bip001HeadTrs);
        DB.evMoveDelObjList.Add(HeadWindnoiseSoundObj);
        HeadWindnoiseSoundObj.name = nameof(HeadWindnoiseSoundObj);
        HeadWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpHeadWindnoiseSound = HeadWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpHeadWindnoiseSound.aSource.maxDistance = 100;
        tmpHeadWindnoiseSound.pitchMax = 1f;
        tmpHeadWindnoiseSound.pitchUpRateAdjustFloat = 3;

        tmpHeadWindnoiseSound.aSource.volume = 0;
        #endregion
        #endregion


        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);
        ChieriMotion("USB覗きこみ前ポーズ", 0f, 0);


        yield return new WaitForSeconds(2);

        //■ケーブルにグルグルまとわらないようKinematic (ケーブルにペアレントしてケーブル運んでも動かないので注意 フリーズでも一緒）
        AN_PlayerRigidbody.isKinematic = true;

        //rigid監視スタート
        StartCoroutine(RigidReadSystem());

        while (novelCurrentPageInt < 3) { yield return null; }

        //開幕
        FadeBlack(0, 1f);

        while (isNovelSetVisIng) { yield return null; }

        //SoundObjボリュームON
        tmpLHandWindnoiseSound.aSource.volume = 1;
        tmpRHandWindnoiseSound.aSource.volume = 1;
        tmpHeadWindnoiseSound.aSource.volume = 1;


        #region 持ち上げる直前まで
        yield return new WaitForSeconds(1);

        ChieriMotion("USB覗きこみ", 0f, 0);

        yield return new WaitForSeconds(1);

        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(3, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        Hukidashi("ケーブル発見弄り010");//はい、ただいま

        yield return new WaitForSeconds(0.5f);
        CameraAnchorTrs.DOShakePosition(0.5f, 0.2f);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("USBケーブル降り中見つかり010");//うおわ　みつかっていたようだ

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        DelAll_Hukidashi();
        ChieriMotion("f_なにしてたのかな～？", 0.5f, 2);
        Hukidashi("ケーブル発見弄り020");//私のスマホでなにしてたのかな？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        NovelSetVis("USBケーブル降り中見つかり020");//「……あ……！　いや……！」
        ChieriMotion("USB覗きこみやめて前へ", 0.5f, 0);

        ChieriMotionDelay(1.5f, "ん？", 0.5f, 2);
        while (novelCurrentPageInt < 5) { yield return null; }

        yield return new WaitForSeconds(2);


        Hukidashi("ケーブル発見弄り030");//ふぅ～ん
        yield return new WaitForSeconds(1);
        //IKバッテリー見る
        FollowDOMove(IKLookAtEyeTargetTrs, BatteryObj.transform);
        yield return KeyOrWait(3);

        while (isNovelSetVisIng) { yield return null; }

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);

        NovelSetVis("USBケーブル降り中見つかり030");//あまり信じてもらえていない。
        yield return new WaitForSeconds(2);

        //IKバッテリー見る
        FollowDOMove(IKLookAtEyeTargetTrs, BatteryObj.transform);

        //■立ち位置来るまで待機
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 1f)
        { yield return null; }
        isGirlAnimReadSystem = false;

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        Hukidashi("ケーブル発見弄り040");//でも凄いね～
        yield return new WaitForSeconds(1);
        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);

        yield return new WaitForSeconds(1);
        //IKバッテリー見る
        FollowDOMove(IKLookAtEyeTargetTrs, BatteryObj.transform);

        ChieriMotion("USBに手", 0f, 0);
        yield return null;

        //■USBに手を添えるまで待機
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 0.8f) { yield return null; }

        NovelSetVis("USBケーブル降り中見つかり040");//ん、あれ？　なにを……
        while (novelCurrentPageInt < 1) { yield return null; }

        Hukidashi("ケーブル発見弄り050");//しっかり掴まっててね。
        while (isNovelSetVisIng) { yield return null; }

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);

        //■USBに手を添えきるまで待機
        while (girlAnimNomTime <= 1f) { yield return null; }
        isGirlAnimReadSystem = false;
        #endregion

        #region ケーブル持ち上げ

        //ついていくようにKinematicオフ
        AN_PlayerRigidbody.isKinematic = false;

        //ケーブルのDragを0（デフォルト）
        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].drag = 0; }

        FixedAction(() =>
        { TsumamiCableObj.transform.SetParent(GirlLhitosashi02Trs); });
        while (isFixedAction) { yield return null; }

        ChieriMotion("USB抜いて持ち上げ", 0f, 0);

        //■持ち上げ終わる少し前まで待機
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "USB抜いて持ち上げ") { yield return null; }
        while (girlAnimNomTime <= 0.6f) { yield return null; }

        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        Hukidashi("ケーブル発見弄り060");//ほーらもう逃げられない


        while (girlAnimNomTime <= 0.8f) { yield return null; }

        NovelSetVis("USBケーブル降り中見つかり050");//ああああ危ない！


        //■持ち上げきるまで待機
        while (girlAnimNomTime <= 1f) { yield return null; }

        isGirlAnimReadSystem = false;



        //ケーブルのDragを5（止め）
        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].drag = 5; }
        #region プレイヤーゆっくり移動
        AN_PlayerRigidbody.isKinematic = true;

        //コリダーをトリガーにして
        AN_PlayerHuseSphereCollider.isTrigger = true;
        AN_PlayerNormalCapsuleCollider.isTrigger = true;

        yield return null;

        //ケーブルBone3にペアレントする位置OBJ
        GameObject Player_PareCableBone3_MochiagerareIdouPosObj
            = Instantiate(Resources.Load("_PosObj/0120USBCableMitukari/Player_PareCableBone3_MochiagerareIdouPosObj") as GameObject
            , cableRigidbodyList[3].transform
            , false);


        //指定位置にゆっくり移動（位置更新するためTweener）
        Tweener tmpMochiagerareTweener =
            CameraObjectsTrs.DOMove(Player_PareCableBone3_MochiagerareIdouPosObj.transform.position
            , 5);

        //ダミー（↑更新用Updateを作るため）
        float tmpDummyFloat = 0;
        DOTween.To(() => tmpDummyFloat, (x) => tmpDummyFloat = x
            , 1f
            , 5f)
            .OnUpdate(() =>
            {
                //これがしたいだけ
                tmpMochiagerareTweener.ChangeEndValue(Player_PareCableBone3_MochiagerareIdouPosObj.transform.position);

            });

        #endregion
        yield return new WaitForSeconds(1);



        #endregion

        #region 何してたの～降りてみる？
        while (isNovelSetVisIng) { yield return null; }
        DOTweenToLAIKSHead(LAIKHeadS, 0.4f, 2);

        yield return new WaitForSeconds(1);

        Hukidashi("ケーブル発見弄り070");//正直に言わないと降ろしてあげないよ
        ChieriMotion("f_なにしてたのかな～？", 0.3f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(5);

        NovelSetVis("USBケーブル降り中見つかり060");//うう、くそ。ジャック
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        Hukidashi("ケーブル発見弄り080");//それともこのまま自分で降りてみる？
        ChieriMotion("f_降りてみる？", 0.3f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(5);
        #endregion

        #region あっそれいいかも表情

        yield return new WaitForSeconds(1);


        //まばたき
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        //IK上見る
        //まず止め
        FollowDOMoveFromTrsList.Clear();
        yield return null;
        GameObject ChieriIKEyeMigiue_HeadLocalPosObj = Resources.Load("_PosObj/_ParentPoseObjs/ChieriIKEyeMigiue_HeadLocalPosObj") as GameObject;
        IKLookAtEyeTargetTrs.position = Bip001HeadTrs.TransformPoint(ChieriIKEyeMigiue_HeadLocalPosObj.transform.localPosition);
        ChieriMotion("f_本当に小さいね～", 0.1f, 2);

        yield return new WaitForSeconds(1);

        Hukidashi("ケーブル発見弄り090");//あっでもそれいいかも
        //IK頭プレイヤー見る
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 2);

        yield return new WaitForSeconds(1);

        //IK目プレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);


        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し


        yield return new WaitForSeconds(1); yield return KeyOrWait(5);

        Hukidashi("ケーブル発見弄り100");//降りて見せて見せて
        ChieriMotion("f_あ！ほら！口閉じ", 0.3f, 2);

        //紐の手IKターゲット事前に位置に
        GameObject IKChieriLHand01_OriteMisetePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/IKChieriLHand01_OriteMisetePosObj") as GameObject;
        IKLHandTargetTrs.localPosition = IKChieriLHand01_OriteMisetePosObj.transform.localPosition;
        IKLHandTargetTrs.localRotation = IKChieriLHand01_OriteMisetePosObj.transform.localRotation;

        yield return new WaitForSeconds(1);

        //IK時肘のためにケーブル持ってない最終フレーム再生
        ChieriMotion("USBに手", 3f, 0);

        //IKON
        DOTweenToIKEfPos(IKLHandEf, 1, 3, Ease.InOutSine);
        DOTweenToIKEfRot(IKLHandEf, 1, 3, Ease.InOutSine);
        //物理開始
        AN_PlayerRigidbody.isKinematic = false;

        NovelSetVis("USBケーブル降り中見つかり070");//なにもよくない！

        #endregion

        #region 運ばれるケーブルとプレイヤー止め

        #region プレイヤーコリダー状態復活（ゆっくり指定位置に移動したときのを戻して、移動してまたやる）
        AN_PlayerRigidbody.isKinematic = false;

        //コリダーをトリガー戻し
        AN_PlayerHuseSphereCollider.isTrigger =
        AN_PlayerNormalCapsuleCollider.isTrigger = false;

        #endregion


        //引っかからないように引き出しコリダー消す
        GameObject tmpHikidashiCollObj =
            GameObject.Find("Hikidashi").transform.Find("SACollider_Hikidashi").gameObject;
        tmpHikidashiCollObj.SetActive(false);

        //ケーブルのDragを0（紐運び時ゆれ）
        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].drag = 0; }

        //運び中（揺れ戻しようにwaitはさみ）
        yield return new WaitForSeconds(4);
        while (isNovelSetVisIng) { yield return null; }
        NovelSetVis("USBケーブル降り中見つかり072");//まてまって勘弁してくれ！

        yield return new WaitForSeconds(2);

        //Drag止め
        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].drag = 5; }
        ////フリーズ、PositionY(4)だけオフ
        //AN_PlayerRigidbody.constraints = RigidbodyConstraints.FreezeAll - 4;

        #region プレイヤーゆっくり移動
        AN_PlayerRigidbody.isKinematic = true;

        //コリダーをトリガーにして
        AN_PlayerHuseSphereCollider.isTrigger = true;
        AN_PlayerNormalCapsuleCollider.isTrigger = true;

        yield return null;

        //ケーブルBone3にペアレントする位置OBJ
        GameObject Player_PareCableBone3_OritemiseteIdouPosObj
            = Instantiate(Resources.Load("_PosObj/0120USBCableMitukari/Player_PareCableBone3_OritemiseteIdouPosObj") as GameObject
            , cableRigidbodyList[3].transform
            , false);


        //指定位置にゆっくり移動（位置更新するためTweener）
        Tweener tmpOritemiseteTweener =
            CameraObjectsTrs.DOMove(Player_PareCableBone3_OritemiseteIdouPosObj.transform.position
            , 5);

        //ダミー（↑更新用Updateを作るため）
        DOTween.To(() => tmpDummyFloat, (x) => tmpDummyFloat = x
            , 1f
            , 5f)
            .OnUpdate(() =>
            {
                //これがしたいだけ
                tmpOritemiseteTweener.ChangeEndValue(Player_PareCableBone3_OritemiseteIdouPosObj.transform.position);
            });

        #endregion


        yield return new WaitForSeconds(1);

        //引き出しコリダー戻し
        tmpHikidashiCollObj.SetActive(true);

        //SoundObjボリュームオフ
        tmpLHandWindnoiseSound.aSource.volume =
        tmpRHandWindnoiseSound.aSource.volume =
        tmpHeadWindnoiseSound.aSource.volume = 0;

        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("ケーブル発見弄り105");//だーめ
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(0.5f, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        yield return new WaitForSeconds(0.5f); yield return KeyOrWait(3);

        Hukidashi("ケーブル発見弄り107");//離したっていいんだよ？
        ChieriMotion("f_降りてみる？", 0.3f, 2);
        yield return new WaitForSeconds(0.5f); yield return KeyOrWait(3);

        NovelSetVis("USBケーブル降り中見つかり075");//心臓が冷えた
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("ケーブル発見弄り108");//指疲れてきたな～
        #region 上見（それいいかも　と同じ）
        //まばたき
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        //IK上見る
        //まず止め
        FollowDOMoveFromTrsList.Clear();
        yield return null;
        IKLookAtEyeTargetTrs.position = Bip001HeadTrs.TransformPoint(ChieriIKEyeMigiue_HeadLocalPosObj.transform.localPosition);
        ChieriMotion("f_本当に小さいね～", 0.1f, 2);
        #endregion
        yield return new WaitForSeconds(0.5f); yield return KeyOrWait(3);


        #endregion

        #region 誕生日気づいてるかで分岐
        if (staticFlagDict["カレンダー誕生日チェック"])
        {
            #region 誕生日覚えていてくれたのイベント

            yield return new WaitForSeconds(1);
            NovelSetVis("USBケーブル降り中見つかり077a010");//待った！　誕生日

            yield return new WaitForSeconds(1);
            ChieriMotion("f_え？(軽驚)", 1f, 2);
            //IK目プレイヤー見る
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
            while (novelCurrentPageInt < 2) { yield return null; };

            #region IK頭プレイヤー向く　//プレイヤーHeadTarget位置を下げてから(上目遣いにするため)

            //戻すように取得
            Vector3 tmpPlayerHeadTargetTrsPos = PlayerHeadTargetTrs.localPosition;

            GameObject IKPlayerHeadTarget_01_OboeteitekuretanoPosObj
                = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/IKPlayerHeadTarget_01_OboeteitekuretanoPosObj") as GameObject;
            PlayerHeadTargetTrs.localPosition = IKPlayerHeadTarget_01_OboeteitekuretanoPosObj.transform.localPosition;

            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 2f);
            DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 2);

            #endregion


            Hukidashi("ケーブル発見弄り109a010");//うん？
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            while (isNovelSetVisIng) { yield return null; }

            #region 移動前にプレイヤーKinematicやisTrigger解除
            AN_PlayerRigidbody.isKinematic = false;

            //コリダーをトリガー戻し
            AN_PlayerHuseSphereCollider.isTrigger =
            AN_PlayerNormalCapsuleCollider.isTrigger = false;

            #endregion

            #region ちえり左手上げ
            GameObject IKChieriLHand010_OboeteitekuretanoPosObj
                = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/IKChieriLHand010_OboeteitekuretanoPosObj") as GameObject;

            IKLHandTargetTrs.DOLocalMove(IKChieriLHand010_OboeteitekuretanoPosObj.transform.localPosition
                , 6f);

            #endregion

            #region 覚えてたの？　嬉しいありがとう
            Hukidashi("ケーブル発見弄り109a020");//覚えていてくれたの？
            ChieriMotion("h_右少し傾け", 0.5f, 7);
            ChieriMotion("f_これからも一緒の学校", 1f, 2);
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            TereHoho();
            NovelSetVis("USBケーブル降り中見つかり077a020");//もちろん・・・！
            while (isNovelSetVisIng) { yield return null; }

            Hukidashi("ケーブル発見弄り109a030");//嬉しいありがとう！
            ChieriMotion("h_noData", 1f, 7);
            ChieriMotion("笑顔01口眉", 0.05f, 2);
            ChieriMotionDelay(2f, "f_あ！ほら！口閉じ", 0.05f, 2);//時間差表情戻し
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            #endregion

            yield return new WaitForSeconds(1);

            //まばたき
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

            //IK上見る
            //まず止め
            FollowDOMoveFromTrsList.Clear();
            yield return null;
            IKLookAtEyeTargetTrs.position = Bip001HeadTrs.TransformPoint(ChieriIKEyeMigiue_HeadLocalPosObj.transform.localPosition);
            ChieriMotion("f_本当に小さいね～", 1f, 2);

            yield return new WaitForSeconds(2);

            Hukidashi("ケーブル発見弄り109a040");//あ、そっか
            TereHoho(false);
            yield return new WaitForSeconds(1);

            #region ちえり左手 近づけ
            GameObject IKChieriLHand020_DakaraPasswordPosObj
                = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/IKChieriLHand020_DakaraPasswordPosObj") as GameObject;

            IKLHandTargetTrs.DOLocalMove(IKChieriLHand020_DakaraPasswordPosObj.transform.localPosition
                , 3f);

            #endregion


            ChieriMotion("f_むっ", 1f, 2);
            //IK目プレイヤー見る
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);

            yield return KeyOrWait(3);

            yield return new WaitForSeconds(1);
            NovelSetVis("USBケーブル降り中見つかり077a030");//あ、いや！　しまった・・
            while (isNovelSetVisIng) { yield return null; }



            yield return new WaitForSeconds(2);

            //ちえり左手上げ位置に戻す
            IKLHandTargetTrs.DOLocalMove(IKChieriLHand010_OboeteitekuretanoPosObj.transform.localPosition
                , 3f);

            ChieriMotion("f_ほんの少しジト目笑顔", 1f, 2);

            Hukidashi("ケーブル発見弄り109a050");//まあいっか
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            Hukidashi("ケーブル発見弄り109a060");//ちゃんと降りたら
            yield return new WaitForSeconds(1);
            ChieriMotion("h_右少し傾け", 0.5f, 7);
            ChieriMotion("笑顔01口眉", 0.05f, 2);
            ChieriMotionDelay(0.5f, "f_公ってえっちなものばかり", 0.05f, 2);//時間差表情戻し
            yield return KeyOrWait(3);

            yield return new WaitForSeconds(1);
            NovelSetVis("USBケーブル降り中見つかり077a040");//結局降りなきゃ
            FadeBlack(1, 2f);
            yield return new WaitForSeconds(2);
            while (isNovelSetVisIng) { yield return null; }
            ChieriMotion("h_noData", 0f, 7);
            yield return new WaitForSeconds(1);

            #endregion
        }
        else
        {
            NovelSetVis("USBケーブル降り中見つかり077b");//ドS女め！
            yield return new WaitForSeconds(1);
            //IK頭プレイヤー見る
            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
            DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 2);
            //IK目プレイヤー見る
            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);

            ChieriMotion("笑顔01口眉", 0.05f, 2);
            ChieriMotionDelay(0.5f, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し

            while (isNovelSetVisIng) { yield return null; }
        }
        #endregion


        CameraObjectsTrs.SetParent(GameObjectsTrs);

        //暗幕
        FadeBlack(1, 0.5f);
        yield return new WaitForSeconds(0.5f);

        //プレイヤー風切り音消し
        isRigidReadSystem = false;

        //終了処理（降りるイベントにANシステム起動があるので終了しておく）
        isANSystem = false;
        yield return null;

        //ケーブルバッテリー削除しておく
        Destroy(USBCable02_Battery_OriPrefab);
        Destroy(BatteryObj);
        Destroy(TsumamiCableObj);


        EventMove("降りて見せて");
        yield break;
    }
    IEnumerator D2135()//降りて見せて
    {
        if (debugEventMoveFlag == true)
        {
            #region 大きさや位置
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;
            #region 小物
            //小物消し
            Drill_chieriTrs.gameObject.SetActive(false);
            DrillTrs.gameObject.SetActive(false);
            KeshigomuObj.SetActive(true);
            SharpenObj.SetActive(true);

            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;
            #endregion

            #endregion

            //暗幕
            FadeBlack(1, 0f);
        }
        EventReset();

        KankyouBGMVolumer(1f, 2);

        girlAnim.speed = 0.5f;

        //デバッグでパンツ見量表示設置用
        GameObject USBCableResetText = null;
        if (DB.isDebugMode)
        {
            //デバッグで一時的にL＝リセット表示設置
            USBCableResetText = Instantiate(Resources.Load("EventSystem/GameSelect/USBCableResetText") as GameObject, FadeCanvasObj.transform);
            DB.evMoveDelObjList.Add(USBCableResetText);
        }

        #region ケーブル バッテリー設置 ■中にリセット処理がある

        GameObject BatteryObj;
        //既に編集用に置いてあったら取得
        if (GameObject.Find("Battery") != null)
        { BatteryObj = GameObject.Find("Battery"); }
        else //無ければリソースから
        {
            BatteryObj = Instantiate(Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/Battery") as GameObject
              , GameObjectsTrs, false);
        }
        BatteryObj.name = "Battery";
        DB.sceneMoveDelObjList.Add(BatteryObj);

        GameObject //リソースから摘んでるケーブルロード
            USBCable02_Bone0LHito3Pare_OriteMisetePrefab;
        //編集用に既にあればそれを取得
        if (GameObject.Find("USBCable02_Bone0LHito3Pare_OriteMisetePrefab"))
        {
            USBCable02_Bone0LHito3Pare_OriteMisetePrefab =
                  GameObject.Find("USBCable02_Bone0LHito3Pare_OriteMisetePrefab");
        }
        else//なければ
        {
            USBCable02_Bone0LHito3Pare_OriteMisetePrefab =
                Instantiate(Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/USBCable02_Bone0LHito3Pare_OriteMisetePrefab") as GameObject);
        }
        USBCable02_Bone0LHito3Pare_OriteMisetePrefab.name = "USBCable02_Bone0LHito3Pare_OriteMisetePrefab";
        DB.sceneMoveDelObjList.Add(USBCable02_Bone0LHito3Pare_OriteMisetePrefab);

        #region 調整用にRigidBodyをListで取得
        List<Rigidbody> cableRigidbodyList = new List<Rigidbody>();
        //リセット用にボーンのPosとRotを取得
        List<Vector3> cableBoneDefLocalPosList = new List<Vector3>();
        List<Vector3> cableBoneDefLocalEulList = new List<Vector3>();


        int tmpCableBoneInt = 0;

        //Obj名が"Cable_Bone"連番 のものを取得
        for (int i = 0; i < USBCable02_Bone0LHito3Pare_OriteMisetePrefab.transform.childCount; i++)
        {
            if (USBCable02_Bone0LHito3Pare_OriteMisetePrefab.transform.GetChild(i).name == "Cable_Bone" + tmpCableBoneInt)
            {
                cableRigidbodyList.Add
                    (USBCable02_Bone0LHito3Pare_OriteMisetePrefab.transform.GetChild(i).GetComponent<Rigidbody>());
                //リセット用にボーンのPosとRotを取得
                cableBoneDefLocalPosList.Add
                    (USBCable02_Bone0LHito3Pare_OriteMisetePrefab.transform.GetChild(i).localPosition);
                cableBoneDefLocalEulList.Add
                    (USBCable02_Bone0LHito3Pare_OriteMisetePrefab.transform.GetChild(i).localEulerAngles);

                tmpCableBoneInt++;
            }
        }


        リセット://Instantiateでメモリリークしないようにこんな位置
        if (isNoboriReset)
        {
            #region リセット処理
            isNoboriReset = false;

            FadeBlack(1, 0f);
            isANSystem = false;
            //ANシステム終了処理のジョイント削除後のRigidBody削除になぜか2フレーム必要だった
            yield return null; yield return null;

            isNovelFadeTween = isNovelSetVisIng = false;
            DelAll_Hukidashi();

            TereHoho(false, 0);

            //Tween関係
            oriteLHandPosTweener.Kill();
            oriteLHandRotTweener.Kill();

            //IKオフ
            DOTweenToIKEfPos(IKLHandEf, 0, 0);
            DOTweenToIKEfRot(IKLHandEf, 0, 0);
            DOTweenToLAIKSBody(LAIKHeadS, 0, 0f);

            //ケーブル重力状態とPosとRotを戻す
            for (int i = 0; i < cableRigidbodyList.Count; i++)
            {
                cableRigidbodyList[i].velocity = Vector3.zero;
                cableRigidbodyList[i].angularVelocity = Vector3.zero;
                cableRigidbodyList[i].ResetInertiaTensor();

                //PosとRotを戻す
                cableRigidbodyList[i].transform.localPosition = cableBoneDefLocalPosList[i];
                cableRigidbodyList[i].transform.localEulerAngles = cableBoneDefLocalEulList[i];
            }
            //左手を離していた時用に
            cableRigidbodyList[0].isKinematic = true;

            #endregion
        }


        //■Gameobjectsへparent時に、ケーブルごちゃらないようにオフ
        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].gameObject.SetActive(false); }

        //ペアレント
        USBCable02_Bone0LHito3Pare_OriteMisetePrefab.transform.SetParent(GameObjectsTrs, false);

        //ケーブルのDragを5に（デフォルトは0）
        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].drag = 5; }

        //オン
        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].gameObject.SetActive(true); }


        #endregion
        //変数
        GameObject //プレイヤーが掴まってる・智恵理が摘んでるケーブルのボーンObj
            GrapCableObj = cableRigidbodyList[2].gameObject,
            TsumamiCableObj = cableRigidbodyList[0].gameObject;

        //智恵理スマホ
        ChieriSumahoObj.SetActive(true);
        ChieriSumahoObj.transform.SetParent(GameObjectsTrs, false);//智恵理の手から外して

        GameObject ChieriSumaho010_HikidashiUePosObj
            = Resources.Load("_PosObj/13Tansaku00/ChieriSumaho010_HikidashiUePosObj") as GameObject;

        ChieriSumahoObj.transform.localPosition = ChieriSumaho010_HikidashiUePosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho010_HikidashiUePosObj.transform.localEulerAngles;

        #endregion

        //手が表示されないバグ対応（バッテリーとケーブル設置の影響？）
        yield return new WaitForSeconds(1);

        //事前ケーブル掴み
        #region プレイヤーとANシステム設置

        //プレイヤー ケーブル降りて見せて位置に　そしてカメラリセット
        GameObject Player_01_CableOritePosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/Player_01_CableOritePosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_01_CableOritePosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_01_CableOritePosObj.transform.localEulerAngles;
        CameraAnchorTrs.localEulerAngles = Vector3.zero;

        //カメラリセット値変更してリセット
        CameraReset(Player_01_CableOritePosObj.transform.localEulerAngles);
        //, DB.cameraStandAnchorDefLocalPos);//Anchorを立ちに


        //掴むのNGObjリスト
        AN_GrapNGObjList.Clear();
        AN_GrapNGObjList.Add(RoomTrs.Find("Kabe").gameObject);
        AN_GrapNGObjList.Add(RoomTrs.Find("Desk").gameObject);
        //智恵理の体全部（そのコリダーのparent.parent.gameobjectを指定する（直接コリダー指定も作っておくべきか））
        AN_GrapNGObjList.Add(FixedMoveChieriColliderFollderObj);


        //■事前にケーブル掴んでおく（トグルタイプ）
        //トグル型に
        //AN_isInputSwitchHardMode = true;
        AN_isInputSwitchEasyMode = true;

        //パワーモードオフ
        AN_isGrapPowerMode = false;
        //登りモードオフ
        AN_isClimbMode = false;
        //外れないように
        AN_isAutoPullLeaveMode = false;
        //Inputロック解除
        AN_isInputLock = false;

        //■脚のぼりシステム コルーチン始動
        StartCoroutine(AsinoboriSystem(0));
        yield return null;

        //■ケーブルにグルグルまとわらないようフリーズ、PositionY(4)だけオフ
        //AN_PlayerRigidbody.constraints = RigidbodyConstraints.FreezeAll - 4;
        AN_PlayerRigidbody.constraints = RigidbodyConstraints.FreezeRotation;

        //■手掴んで設置
        isRInput = isLInput = true;
        //掴む場所objをリソースから読み込んで直接指定
        GameObject GrapCableBone_Orite_Hand_L_RootLocalPosObj = Instantiate(Resources.Load
            ("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/GrapCableBone_Orite_Hand_L_RootLocalPosObj") as GameObject
            , GrapCableObj.transform
            , false);
        AsinoboriHandGrap(
            AN_Hand_L_RootTrs,
            GrapCableObj.transform,
            GrapCableBone_Orite_Hand_L_RootLocalPosObj.transform.position
            );

        GameObject GrapCableBone_Orite_Hand_R_RootLocaPosObj = Instantiate(Resources.Load
            ("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/GrapCableBone_Orite_Hand_R_RootLocaPosObj") as GameObject
            , GrapCableObj.transform
            , false);
        AsinoboriHandGrap(
            AN_Hand_R_RootTrs,
            GrapCableObj.transform,
            GrapCableBone_Orite_Hand_R_RootLocaPosObj.transform.position
            );

        Destroy(GrapCableBone_Orite_Hand_L_RootLocalPosObj);
        Destroy(GrapCableBone_Orite_Hand_R_RootLocaPosObj);

        //2で設定
        nowLGrapCableInt = nowRGrapCableInt = 2;

        #endregion
        #region 最後に智恵理手にケーブル0ペアレント や IK設定 と 智恵理見てる量システム

        #region 智恵理のポーズとIK
        DB.isChieriPosLock = true;

        ChieriMotion("USBに手ポーズ", 0, 0);
        yield return null;

        //左手IKターゲット事前に位置に
        GameObject IKChieriLHand01_OriteMisetePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/IKChieriLHand01_OriteMisetePosObj") as GameObject;
        IKLHandTargetTrs.localPosition = IKChieriLHand01_OriteMisetePosObj.transform.localPosition;
        IKLHandTargetTrs.localRotation = IKChieriLHand01_OriteMisetePosObj.transform.localRotation;

        //IKON
        DOTweenToIKEfPos(IKLHandEf, 1, 0);
        DOTweenToIKEfRot(IKLHandEf, 1, 0);

        //表情
        ChieriMotion("f_あ！ほら！口閉じ", 0f, 2);
        yield return null;
        #endregion

        FixedAction(() =>
        {
            //智恵理指へBone0をペアレント
            TsumamiCableObj.transform.SetParent(GirlLhitosashi02Trs, true);
            //上半身傾けに対応するために右手IK位置に固定
            IKRHandTargetTrs.position = Bip001_R_HandTrs.position;
            IKRHandTargetTrs.rotation = Bip001_R_HandTrs.rotation;
            DOTweenToIKEfPos(IKRHandEf, 1, 0);
            DOTweenToIKEfRot(IKRHandEf, 1, 0);
        });

        //IKプレイヤー見る即
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);

        IKLookAtEyeTargetTrs.position = PlayerEyeTargetTrs.position;
        IKLookAtHeadTargetTrs.position = PlayerHeadTargetTrs.position;
        yield return null; yield return null;

        //IKプレイヤー見る値1
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        //■智恵理見てる量計測システム コルーチン始動
        StartCoroutine(SeeGirlSystem());

        //リミットを調整 (そのままだと最長になってしまう？ 6.4とかだった)
        AN_tmpRLimit.limit =
        AN_tmpLLimit.limit = 3;

        #endregion

        //開幕
        FadeBlack(0, 0.5f);

        //ケーブルのDragを2に（デフォルトは0）
        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].drag = 2; }



        #region 事前取得と変数



        isHayaku = false;
        isOrireteru = false;
        isNozokikomi = false;
        isMinaide1 = false;
        isMinaide2 = true;
        isMinaide3 = true;
        isIkari = false;
        isToutyaku = false;
        isRakka = false;

        oriteRakkaType = OriteRakkaType.普通に落ちた;

        hayakuCountFloat = 0;
        CableOriSeePantsCountFloat = 0;
        preSeePantsFloat = 0;

        nowLGrapCableInt = 0;
        nowRGrapCableInt = 0;
        #endregion
        #region ■智恵理紐摘む手のコリダーオフ（ちゃんとあとで元に戻す）
        for (int i = 0; i < ChieriColliderObjs.Length; i++)
        {
            if (
                ChieriColliderObjs[i].name == "UpperArm_L_coll" ||
                ChieriColliderObjs[i].name == "Forearm_L_coll" ||
                ChieriColliderObjs[i].name == "Hand_L_coll" ||
                ChieriColliderObjs[i].name == "Hitosashi00_L_coll" ||
                ChieriColliderObjs[i].name == "Hitosashi01_L_coll" ||
                ChieriColliderObjs[i].name == "Hitosashi02_L_coll" ||
                ChieriColliderObjs[i].name == "Ko00_L_coll" ||
                ChieriColliderObjs[i].name == "Ko01_L_coll" ||
                ChieriColliderObjs[i].name == "Ko02_L_coll" ||
                ChieriColliderObjs[i].name == "Kusuri00_L_coll" ||
                ChieriColliderObjs[i].name == "Kusuri01_L_coll" ||
                ChieriColliderObjs[i].name == "Kusuri02_L_coll" ||
                ChieriColliderObjs[i].name == "Naka00_L_coll" ||
                ChieriColliderObjs[i].name == "Naka01_L_coll" ||
                ChieriColliderObjs[i].name == "Naka02_L_coll" ||
                ChieriColliderObjs[i].name == "Oya00_L_coll" ||
                ChieriColliderObjs[i].name == "Oya01_L_coll" ||
                ChieriColliderObjs[i].name == "Oya02_L_coll"
                )
            {
                ChieriColliderObjs[i].SetActive(false);
            }
        }
        #endregion

        //位置移動でのブォをなくすよう待機してから
        yield return new WaitForSeconds(0.5f);
        //rigid監視スタート
        StartCoroutine(RigidReadSystem());

        #region ■■ループ 降りる最中のイベント判定処理
        //isOrireteru = true;
        //isIkari = true;

        while (true)
        {
            #region デバッグ
            if (DB.isDebugMode && Input.GetKey(KeyCode.L))
            {
                #region リセット

                if (nowRunOriteIEnum != null) { StopCoroutine(nowRunOriteIEnum); }
                //リセット用にペアレント前の状態で値を保存しているので、ペアレントも戻す
                TsumamiCableObj.transform.SetParent(USBCable02_Bone0LHito3Pare_OriteMisetePrefab.transform, true);
                yield return null;
                yield return null;

                isNoboriReset = true;
                goto リセット;
                #endregion
            }
            if (DB.isDebugMode && Input.GetKey(KeyCode.K))
            {
                isANSystem = false;
                yield return null;
                yield return null;
                goto 降りた;
            }

            if (DB.isDebugMode && Input.GetKey(KeyCode.I))
            {
                #region  //紐def状態へ戻し
                //TsumamiCableObj.transform.SetParent(USBCable02_Bone0LHito3Pare_OriteMisetePrefab.transform, true);

                //GameObject USBCableDef = GameObject.Find("USBCableDef");

                ////リセット用にボーンのPosとRotを取得
                //List<Vector3> defCableBoneDefLocalPosList = new List<Vector3>();
                //List<Vector3> defCableBoneDefLocalEulList = new List<Vector3>();


                //int tmpDefCableBoneInt = 0;

                ////Obj名が"Cable_Bone"連番 のものを取得
                //for (int i = 0; i < USBCableDef.transform.childCount; i++)
                //{
                //    if (USBCableDef.transform.GetChild(i).name == "Cable_Bone" + tmpDefCableBoneInt)
                //    {
                //        //リセット用にボーンのPosとRotを取得
                //        defCableBoneDefLocalPosList.Add
                //            (USBCableDef.transform.GetChild(i).localPosition);
                //        defCableBoneDefLocalEulList.Add
                //            (USBCableDef.transform.GetChild(i).localEulerAngles);

                //        tmpDefCableBoneInt++;
                //    }
                //}
                ////ケーブル重力状態とPosとRotを戻す
                //for (int i = 0; i < cableRigidbodyList.Count; i++)
                //{
                //    cableRigidbodyList[i].isKinematic = true;

                //    cableRigidbodyList[i].velocity = Vector3.zero;
                //    cableRigidbodyList[i].angularVelocity = Vector3.zero;
                //    cableRigidbodyList[i].ResetInertiaTensor();

                //    //PosとRotを戻す
                //    cableRigidbodyList[i].transform.localPosition = defCableBoneDefLocalPosList[i];
                //    cableRigidbodyList[i].transform.localEulerAngles = defCableBoneDefLocalEulList[i];
                //}

                #endregion
            }

            #endregion

            #region ■■パンツ見てる時間計測(ケーブル8以下で 高さ0.56以下で　20以上見てたら)


            #region デバッグでパンツ見量表示設置
            if (DB.isDebugMode)
            {
                if (USBCableResetText == null)
                {
                    USBCableResetText = Instantiate(Resources.Load("EventSystem/GameSelect/USBCableResetText") as GameObject, FadeCanvasObj.transform);
                    DB.evMoveDelObjList.Add(USBCableResetText);
                }

                USBCableResetText.GetComponent<Text>().text = seePantsNomFlt.ToString("f3");
            }
            #endregion

            if ((nowLGrapCableInt >= 8 || nowRGrapCableInt >= 8)
                     && CameraObjectsTrs.localPosition.y < 0.56f
                    && seePantsNomFlt > 20)
            {
                CableOriSeePantsCountFloat += 1 * Time.deltaTime;
            }
            else
            {
                //2より大きければカウント"ダウン"
                if (CableOriSeePantsCountFloat > 2)
                {
                    CableOriSeePantsCountFloat -= 1 * Time.deltaTime;
                }
            }

            #endregion

            #region ■■今掴んでいるケーブルナンバーをInt変数に
            //掴んでいて
            //空じゃなくて（エラー回避）
            //RigidBodyが存在して
            //それがListの現在のナンバーのRigidBodyと違ったら
            if (AN_isLGrap &&
                AN_nowLSerchCollObj != null &&
                AN_nowLSerchCollObj.GetComponent<Rigidbody>() != null &&
                cableRigidbodyList[nowLGrapCableInt] != AN_nowLSerchCollObj.GetComponent<Rigidbody>())
            {
                //代入
                nowLGrapCableInt = cableRigidbodyList.IndexOf(AN_nowLSerchCollObj.GetComponent<Rigidbody>());
                Debug.Log("L" + nowLGrapCableInt);
            }

            //右手も同じく
            if (AN_isRGrap &&
                AN_nowRSerchCollObj != null &&
                AN_nowRSerchCollObj.GetComponent<Rigidbody>() != null &&
                cableRigidbodyList[nowRGrapCableInt] != AN_nowRSerchCollObj.GetComponent<Rigidbody>())
            {
                nowRGrapCableInt = cableRigidbodyList.IndexOf(AN_nowRSerchCollObj.GetComponent<Rigidbody>());
                Debug.Log("R" + nowRGrapCableInt);
            }
            #endregion


            #region ■早く降りて
            if (isHayaku == false
                || (DB.isDebugMode && Input.GetKeyDown(KeyCode.F)))
            {
                //ケーブル2の場所を掴んでいると「早く降りて」カウントを取る
                if (AN_isLGrap && nowLGrapCableInt <= 2) { hayakuCountFloat += 1 * Time.deltaTime; }
                else if (AN_isRGrap && nowRGrapCableInt <= 2) { hayakuCountFloat += 1 * Time.deltaTime; }

                //カウントが10以上になったら「早く降りて」
                if (hayakuCountFloat > 10
                    || (DB.isDebugMode && Input.GetKeyDown(KeyCode.F)))
                {
                    //既に他のイベント走ってたらやらない
                    if (nowRunOriteIEnum != null)
                    { hayakuCountFloat = 0; }
                    else
                    {
                        isHayaku = true;
                        StartCoroutine(nowRunOriteIEnum = OriteHayaku(cableRigidbodyList));
                    }
                }
            }
            #endregion

            #region ■ちゃんとおりてる
            //すごい、ちゃんと降りてる。なんかこういうおもちゃみたい
            if (isOrireteru == false
                || (DB.isDebugMode && Input.GetKeyDown(KeyCode.V)))
            {
                if (nowLGrapCableInt == 4 || nowRGrapCableInt == 4)
                {
                    //既に他のイベント走ってたらやらない
                    if (nowRunOriteIEnum != null)
                    { isOrireteru = true; }
                    else
                    {
                        isOrireteru = true; isHayaku = true;
                        StartCoroutine(nowRunOriteIEnum = OriteOrireteru(cableRigidbodyList));
                    }
                }
            }
            #endregion

            #region ■ある程度降りたら上半身少し覗き込み
            if (isNozokikomi == false
                || (DB.isDebugMode && Input.GetKeyDown(KeyCode.B)))
            {
                if (nowLGrapCableInt >= 5 || nowRGrapCableInt >= 5)
                {
                    //既に他のイベント走ってたら待機
                    if (nowRunOriteIEnum != null)
                    { yield return nowRunOriteIEnum; }
                    StartCoroutine(nowRunOriteIEnum = OriteNozokikomi());
                }
            }
            #endregion

            #region ■上見ないの
            //上見ないの
            if (isMinaide1 == false &&
                CableOriSeePantsCountFloat > 4
                || (DB.isDebugMode && Input.GetKeyDown(KeyCode.G)))
            {
                if (nowRunOriteIEnum != null) { StopCoroutine(nowRunOriteIEnum); }
                isMinaide1 = true;
                StartCoroutine(nowRunOriteIEnum = OriteMinaide1(cableRigidbodyList));
            }
            //だから上見ないの！
            if (isMinaide1 == true &&
                isMinaide2 == false &&
                CableOriSeePantsCountFloat > 3
                || (DB.isDebugMode && Input.GetKeyDown(KeyCode.H)))
            {
                isMinaide2 = true;
                isIkari = true;//おこ
                if (nowRunOriteIEnum != null) { StopCoroutine(nowRunOriteIEnum); }
                isMinaide1 = true;
                StartCoroutine(nowRunOriteIEnum = OriteMinaide2(cableRigidbodyList));
            }
            //落とし
            if (isMinaide1 == true &&
                isMinaide2 == true &&
                isMinaide3 == false &&
                CableOriSeePantsCountFloat > 2
                || (DB.isDebugMode && Input.GetKeyDown(KeyCode.J)))
            {
                isMinaide3 = true; isMinaide2 = true;
                if (nowRunOriteIEnum != null) { StopCoroutine(nowRunOriteIEnum); }
                isMinaide1 = true;
                StartCoroutine(nowRunOriteIEnum = OriteMinaide3(cableRigidbodyList));
            }
            #endregion

            #region 到着
            if (isToutyaku == false
                || (DB.isDebugMode && Input.GetKeyDown(KeyCode.N)))
            {
                if (nowLGrapCableInt == 14 || nowRGrapCableInt == 14)
                {
                    //既に他のイベント走ってたら
                    if (nowRunOriteIEnum != null) { StopCoroutine(nowRunOriteIEnum); }

                    isToutyaku = true; isMinaide1 = isMinaide2 = isMinaide3 = true;
                    StartCoroutine(nowRunOriteIEnum = OriteToutyaku(cableRigidbodyList, BatteryObj, TsumamiCableObj));
                    //goto 降りた;
                }
            }
            #endregion

            #region 落下
            if (isRakka == false &&
                CameraObjectsTrs.localPosition.y <= 0.016f
                || (DB.isDebugMode && Input.GetKeyDown(KeyCode.M)))
            {
                isRakka = true;

                FadeWhite(1, 0);

                SEPlay("cableFallShock01_cannon1", 0.6f);
                //PlayerHPAddSub(-800);

                isANSystem = false;

                DelAll_Hukidashi();
                isNovelFadeTween = isNovelSetVisIng = false;

                if (oriteRakkaType == OriteRakkaType.普通に落ちた)
                {
                    #region ただ落ちてしまった（ケーブル離し落ちでもある）
                    GameObject Player_05_ToutyakuPosObjTwo = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/Player_05_ToutyakuPosObj") as GameObject;
                    CameraObjectsTrs.localEulerAngles = Player_05_ToutyakuPosObjTwo.transform.localEulerAngles;


                    CameraObjectsTrs.DOLocalMoveX(Player_05_ToutyakuPosObjTwo.transform.localPosition.x, 2)
                        .SetEase(Ease.OutSine);
                    CameraObjectsTrs.DOLocalMoveZ(Player_05_ToutyakuPosObjTwo.transform.localPosition.z, 2)
                        .SetEase(Ease.OutSine);
                    CameraObjectsTrs.DOLocalMoveY(0.03f, 0.3f)
                        .SetEase(Ease.OutCubic)
                        .OnComplete(() =>
                        {
                            //TPSプレイヤー倒れモーション
                            isPlayerUniqueMotion = true;
                            PlayerMotion("liedown_00_Re", 0.2f, 0);

                            SEPlay("CableFallSlip01_fuse1", 0.8f);
                            CameraObjectsTrs.DOLocalMoveY(Player_05_ToutyakuPosObjTwo.transform.localPosition.y, 0.3f)
                            .SetEase(Ease.OutBounce);
                            //PlayerHPAddSub(-400);
                        });

                    yield return new WaitForSeconds(0.05f);

                    FadeWhite(0, 0);


                    #endregion
                    #region 蹴り移植

                    ChieriMotion("f_眉高い笑顔少しジト目", 0f, 2);
                    #region 智恵理USBしまう
                    //IKオフ
                    DOTweenToIKEfPos(IKLHandEf, 0, 7);
                    DOTweenToIKEfRot(IKLHandEf, 0, 7);
                    DOTweenToLAIKSBody(LAIKHeadS, 0f, 7);

                    //IKバッテリー見る
                    FollowDOMove(IKLookAtEyeTargetTrs, BatteryObj.transform, 3);
                    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 3);
                    FollowDOMove(IKLookAtHeadTargetTrs, BatteryObj.transform, 3);
                    DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 3);

                    //呼吸止め
                    OriBreathController.enabled = false;

                    ChieriMotion("USB抜いて持ち上げ逆再生", 2f, 0, 1);

                    yield return new WaitForSeconds(4);

                    NovelSetVis("USBケーブル降り中見つかり295");//怪我したらどうす・・・



                    //アニメ終了で呼吸開始
                    StartCoroutine(GirlAnimReadSystem());
                    while (nowGirlAnimClipName != "USB抜いて持ち上げ") { yield return null; }//クリップネーム自体は逆再生ではない
                    while (girlAnimNomTime <= 1f) { yield return null; }
                    isGirlAnimReadSystem = false;

                    FixedAction(() =>
                    {
                        OriBreathController.enabled = true;
                        TsumamiCableObj.transform.SetParent(GameObjectsTrs);
                    });

                    #endregion
                    #region 智恵理右足にサウンドオブジェ付与
                    //WindnoiseSoundObj付与
                    GameObject RFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
                        , GirlRFootTrs);
                    DB.evMoveDelObjList.Add(RFootWindnoiseSoundObj);
                    RFootWindnoiseSoundObj.name = nameof(RFootWindnoiseSoundObj);

                    //つま先に
                    GameObject tmpSoundObjPosObj
                        = Resources.Load("_PosObj/0130USBCableOriAto/SoundObjRfootParePos") as GameObject;
                    RFootWindnoiseSoundObj.transform.localPosition = tmpSoundObjPosObj.transform.localPosition;

                    //設定
                    WindnoiseSound tmpRFootWindnoiseSound = RFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
                    tmpRFootWindnoiseSound.aSource.maxDistance = 15;
                    tmpRFootWindnoiseSound.pitchMax = 0.5f;
                    tmpRFootWindnoiseSound.pitchUpRateAdjustFloat = 140;
                    tmpRFootWindnoiseSound.pitchDownRateAdjustFloat = 0;

                    tmpRFootWindnoiseSound.aSource.volume = 0.5f;
                    #endregion
                    while (isNovelSetVisIng) { yield return null; }





                    #region 怪我で ～～～ ねえ？　　足を掲げポーズに移行
                    //まず現在位置呼び出し
                    GirlPosToIKTargetPosRot(); while (isGirlPosToIKTargetPosRotLoading) { yield return null; }

                    //IK左手を下ろし位置に
                    GameObject IKLHand_010Orosi
                        = Resources.Load("_PosObj/0140AsiOyayubiZeme/IKLHand_010Orosi") as GameObject;
                    IKLHandTargetTrs.localPosition = IKLHand_010Orosi.transform.localPosition;
                    IKLHandTargetTrs.localEulerAngles = IKLHand_010Orosi.transform.localEulerAngles;
                    DOTweenToIKEfPos(IKLHandEf, 1, 4);
                    DOTweenToIKEfRot(IKLHandEf, 1, 4);

                    //IKプレイヤー見る
                    FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 4);
                    FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 4);
                    DOTweenToLAIKSBody(LAIKHeadS, 0.2f, 7);
                    //左足固定
                    DOTweenToIKEfPos(IKLFootEf, 1, 1);


                    ////Chieriずらし
                    //DB.isChieriPosLock = false;
                    //GirlTrs.DOLocalMoveX(-0.07f, 5);

                    DOTweenToIKEfPos(IKRFootEf, 1f, 3);
                    DOTweenToIKEfRot(IKRFootEf, 1f, 3);

                    #endregion

                    ChieriMotion("f_怒り睨み", 1f, 2);




                    #region 智恵理 IKポーズなおし1
                    //左手IKちょっとオフ
                    DOTweenToIKEfPos(IKLHandEf, 0.5f, 2);
                    DOTweenToIKEfRot(IKLHandEf, 0.5f, 2);

                    //IKバッテリー見る
                    ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
                    FollowDOMove(IKLookAtEyeTargetTrs, BatteryObj.transform, 0f);
                    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);

                    FollowDOMove(IKLookAtHeadTargetTrs, BatteryObj.transform, 3);
                    DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 3);


                    #endregion
                    yield return new WaitForSeconds(1);
                    Hukidashi("ケーブル発見弄り485");//ふん
                    yield return new WaitForSeconds(1);
                    #region 蹴り開始から倒れ位置まで

                    //右足蹴り準備位置に
                    GameObject IKRFoot_040KeriZyunbiPosObj
                        = Resources.Load("_PosObj/0150USBAfterKeri/IKRFoot_040KeriZyunbiPosObj") as GameObject;
                    IKRFootTargetTrs.DOLocalMove(IKRFoot_040KeriZyunbiPosObj.transform.localPosition, 2);
                    //IKRFootTargetTrs.DOLocalRotate(IKRFoot_040KeriZyunbiPosObj.transform.localEulerAngles, 2);
                    ChieriMotion("RToe_つま先くにゅ1（無意識系）", 0, 13);
                    //体重心ずらし
                    GirlTrs.DOLocalMoveX(-0.05f, 2);

                    yield return new WaitForSeconds(1);

                    //体重心ずらし
                    GirlTrs.DOLocalMoveX(-0.08f, 1);
                    //つま先風音調整
                    tmpRFootWindnoiseSound.aSource.maxDistance = 55;
                    tmpRFootWindnoiseSound.pitchMax = 0.5f;
                    tmpRFootWindnoiseSound.pitchUpRateAdjustFloat = 140;
                    tmpRFootWindnoiseSound.pitchDownRateAdjustFloat = 0;

                    tmpRFootWindnoiseSound.aSource.volume = 1f;


                    //右足蹴り位置にOutBack
                    GameObject IKRFoot_050KeriPosObj
                        = Resources.Load("_PosObj/0150USBAfterKeri/IKRFoot_050KeriPosObj") as GameObject;
                    IKRFootTargetTrs.DOLocalMove(IKRFoot_050KeriPosObj.transform.localPosition, 2.5f)
                        .SetEase(Ease.OutBack);
                    IKRFootTargetTrs.DOLocalRotate(IKRFoot_050KeriPosObj.transform.localEulerAngles, 2.5f)
                        .SetEase(Ease.OutBack);

                    //接触瞬間タイミング取り
                    yield return new WaitForSeconds(0.3f);


                    //移動
                    GameObject Player010_KerareTaorePosObj
                        = Resources.Load("_PosObj/0150USBAfterKeri/Player010_KerareTaorePosObj") as GameObject;

                    CameraObjectsTrs.DOLocalMove(Player010_KerareTaorePosObj.transform.localPosition, 5)
                        .SetEase(Ease.OutQuint);
                    CameraObjectsTrs.DOLocalRotate(Player010_KerareTaorePosObj.transform.localEulerAngles, 5)
                        .SetEase(Ease.OutQuint);


                    #region プレイヤーダメージとカメラ倒れ 直

                    //フラッシュと音とダメージ
                    FadeWhite(1, 0);
                    FadeBlack(1, 0);
                    SEPlay("soccer-ball1", 3);
                    SEPlay("足音・べた足-08", 3);
                    yield return new WaitForSeconds(0.05f);
                    FadeWhite(0, 0);
                    FadeBlack(0.5f, 3);

                    //TPSプレイヤー倒れモーション
                    isPlayerUniqueMotion = true;
                    PlayerMotion("liedown_00_Re", 0.2f, 0);

                    Vector3
                        tmpDefCameraPosTwo = CameraAnchorTrs.localPosition,
                        tmpDefCameraEulTwo = CameraAnchorTrs.localEulerAngles,
                        tmpFlowCameraPosTwo = new Vector3(0, 1.2f, 0),
                        tmpSlipCameraPosTwo = new Vector3(0, 0.4f, 0),
                        tmpSlipCameraEulTwo = new Vector3(-45, 0, 0);

                    CameraAnchorTrs.DOLocalMove(tmpFlowCameraPosTwo, 0.05f);
                    yield return new WaitForSeconds(0.05f);
                    CameraAnchorTrs.DOLocalMove(tmpSlipCameraPosTwo, 0.5f).SetEase(Ease.OutBounce);
                    yield return new WaitForSeconds(0.05f);
                    CameraAnchorTrs.DOLocalMove(tmpDefCameraPosTwo, 0.05f);
                    yield return new WaitForSeconds(0.05f);

                    CameraAnchorTrs.DOLocalMove(tmpSlipCameraPosTwo, 0.5f).SetEase(Ease.OutBounce);
                    CameraAnchorTrs.DOLocalRotate(tmpSlipCameraEulTwo, 0.2f).SetEase(Ease.InSine);



                    #endregion

                    //白フラッシュ
                    FadeWhite(0.2f, 0.05f); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);

                    SEPlay("cableFallShock01_cannon1", 0.6f);
                    SEPlay("CableFallSlip01_fuse1", 0.8f);

                    while (isNovelSetVisIng) { yield return null; }

                    #endregion

                    yield return new WaitForSeconds(1);
                    #region 智恵理IKポーズなおし2
                    //左手IKオフ
                    DOTweenToIKEfPos(IKLHandEf, 0f, 2);
                    DOTweenToIKEfRot(IKLHandEf, 0f, 2);
                    //右足IKOFF
                    DOTweenToIKEfPos(IKRFootEf, 0f, 2);
                    DOTweenToIKEfRot(IKRFootEf, 0f, 2);
                    //体重心もどし
                    GirlTrs.DOLocalMoveX(0f, 3);
                    #endregion

                    //IKバッテリー見る
                    ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
                    FollowDOMove(IKLookAtEyeTargetTrs, BatteryObj.transform, 0f);
                    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);

                    FollowDOMove(IKLookAtHeadTargetTrs, BatteryObj.transform, 3);
                    DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 3);


                    HukidashiNovelDistanceChange(1.2f);
                    yield return new WaitForSeconds(3);

                    #region 飛ばされてからイベント移動まで
                    NovelSetVis("USBケーブル降り中見つかり285");//現実かどうか　うぶ・・・　暗み始める
                    while (novelCurrentPageInt < 3) { yield return null; }
                    //白フラッシュ
                    FadeWhite(0.2f, 0.05f); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);
                    FadeBlack(0.7f, 1);

                    while (isNovelSetVisIng) { yield return null; }
                    FadeBlack(1f, 5);


                    //IKプレイヤー見る
                    ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
                    FollowDOMove(IKLookAtEyeTargetTrs, PlayerTargetTrs, 0f);
                    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
                    //IKプレイヤー向く
                    FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 4);
                    //DOTweenToLAIKSBody(LAIKHeadS, 0.2f, 7);

                    ChieriMotion("f_眉高い笑顔少しジト目", 2f, 2);
                    yield return new WaitForSeconds(1);

                    Hukidashi("ケーブル発見弄り490");//お仕置きはこれくらいでいっか
                    yield return new WaitForSeconds(1);
                    yield return KeyOrWait(3);

                    FadeBlack(1f, 1);
                    yield return new WaitForSeconds(2);

                    Hukidashi("ケーブル発見弄り600");//机に運んであげようかな
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    yield return new WaitForSeconds(1);
                    NovelSetVis("USBケーブル降り中見つかり290");//お仕置きという単語だけは。
                    while (isNovelSetVisIng) { yield return null; }
                    #endregion

                    yield return new WaitForSeconds(2);
                    EventMove("帰ろうとしてた？", true);

                    while (true) { yield return null; }
                    #endregion

                }
                else if (oriteRakkaType == OriteRakkaType.最後に強制で自ら落下)
                {
                    #region 最後自ら強制の落下
                    GameObject Player_02_NormalFallBoundPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/Player_02_NormalFallBoundPosObj") as GameObject;
                    CameraObjectsTrs.localEulerAngles = Player_02_NormalFallBoundPosObj.transform.localEulerAngles;


                    CameraObjectsTrs.DOLocalMoveX(Player_02_NormalFallBoundPosObj.transform.localPosition.x, 2)
                        .SetEase(Ease.OutSine);
                    CameraObjectsTrs.DOLocalMoveZ(Player_02_NormalFallBoundPosObj.transform.localPosition.z, 2)
                        .SetEase(Ease.OutSine);
                    CameraObjectsTrs.DOLocalMoveY(0.03f, 0.3f)
                        .SetEase(Ease.OutCubic)
                        .OnComplete(() =>
                        {
                            SEPlay("CableFallSlip01_fuse1", 0.8f);
                            CameraObjectsTrs.DOLocalMoveY(Player_02_NormalFallBoundPosObj.transform.localPosition.y, 0.3f)
                            .SetEase(Ease.OutBounce);
                            PlayerHPAddSub(-400);
                        });

                    yield return new WaitForSeconds(0.05f);

                    FadeWhite(0, 0);

                    yield return new WaitForSeconds(3f);

                    #endregion
                }
                else if (oriteRakkaType == OriteRakkaType.見ないで中に落下)
                {

                }
                else if (oriteRakkaType == OriteRakkaType.コードごと落とされ)
                {

                }


            }

            #endregion
            yield return null;
        }
        #endregion

        降りた:

        #region //デバッグで一瞬で降り位置
        //プレイヤー ケーブル降りて見せて位置に
        GameObject Player_05_ToutyakuPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/Player_05_ToutyakuPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_05_ToutyakuPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_05_ToutyakuPosObj.transform.localEulerAngles;
        CameraAnchorTrs.localEulerAngles = Vector3.zero;

        #region 智恵理のポーズとIK
        ChieriMotion("USBに手ポーズ", 0, 0);
        yield return null;

        //左手IKターゲット事前に位置に
        GameObject IKChieriLHand06_OrosiPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/IKChieriLHand06_OrosiPosObj") as GameObject;
        IKLHandTargetTrs.localPosition = IKChieriLHand06_OrosiPosObj.transform.localPosition;
        IKLHandTargetTrs.localRotation = IKChieriLHand06_OrosiPosObj.transform.localRotation;

        //IKON
        DOTweenToLAIKSBody(LAIKHeadS, 0.1f, 0);


        //表情
        ChieriMotion("笑顔01口眉_目閉じない", 0f, 2);

        yield return null;
        #endregion

        isToutyaku = true; isMinaide1 = isMinaide2 = isMinaide3 = true;
        StartCoroutine(nowRunOriteIEnum = OriteToutyaku(cableRigidbodyList, BatteryObj, TsumamiCableObj));
        #endregion

        while (true)
        {
            #region デバッグ
            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.L))
            {
                #region リセット

                if (nowRunOriteIEnum != null) { StopCoroutine(nowRunOriteIEnum); }
                //リセット用にペアレント前の状態で値を保存しているので、ペアレントも戻す
                TsumamiCableObj.transform.SetParent(USBCable02_Bone0LHito3Pare_OriteMisetePrefab.transform, true);
                yield return null;
                yield return null;

                isNoboriReset = true;
                goto リセット;
                #endregion
            }

            #endregion

            yield return null;
        }
        yield break;
    }
    #region ┗■見られ降りる最中のイベントコルーチン群

    #region ■フラグ用変数群
    //各イベントのIEnumerator（イベント中他のイベント発動しないよう。するとしても処理を挟むよう）
    IEnumerator
        nowRunOriteIEnum = null;
    bool
        isHayaku = false,
        isOrireteru = false,
        isNozokikomi = false,
        isMinaide1 = false,
        isMinaide2 = true,
        isMinaide3 = true,
        isIkari = false,
        isToutyaku = false,
        isRakka = false;
    bool
        isNoboriReset = false;
    enum OriteRakkaType { 普通に落ちた, 最後に強制で自ら落下, 見ないで中に落下, コードごと落とされ }
    OriteRakkaType oriteRakkaType = OriteRakkaType.普通に落ちた;

    float
        hayakuCountFloat = 0,
        CableOriSeePantsCountFloat = 0,
        preSeePantsFloat = 0;
    int
        nowLGrapCableInt = 0,
        nowRGrapCableInt = 0;
    Tweener //各手の動きTweener
        oriteLHandPosTweener,
        oriteLHandRotTweener;

    #endregion

    IEnumerator OriteHayaku(List<Rigidbody> cableRigidbodyList)
    {
        AN_isInputLock = true;
        //UIオフ
        AN_isUIVis = false;
        ANGrapHandUIObj.SetActive(false);

        Hukidashi("ケーブル発見弄り110");//はやくはやく

        yield return new WaitForSeconds(0.5f);
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し

        //少しクイッ
        GameObject IKChieriLHand02_HayakuOritePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/IKChieriLHand02_HayakuOritePosObj") as GameObject;
        if (oriteLHandPosTweener != null) { oriteLHandPosTweener.Kill(); }
        oriteLHandPosTweener =
            IKLHandTargetTrs.DOLocalMove(IKChieriLHand02_HayakuOritePosObj.transform.localPosition, 0.3f);
        if (oriteLHandRotTweener != null) { oriteLHandRotTweener.Kill(); }
        oriteLHandRotTweener =
            IKLHandTargetTrs.DOLocalRotateQuaternion(IKChieriLHand02_HayakuOritePosObj.transform.localRotation, 0.3f)
            .OnComplete(() =>
            {
                GameObject IKChieriLHand01_OriteMisetePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/IKChieriLHand01_OriteMisetePosObj") as GameObject;
                if (oriteLHandPosTweener != null) { oriteLHandPosTweener.Kill(); }
                oriteLHandPosTweener =
                IKLHandTargetTrs.DOLocalMove(IKChieriLHand01_OriteMisetePosObj.transform.localPosition, 0.2f);
                if (oriteLHandRotTweener != null) { oriteLHandRotTweener.Kill(); }
                oriteLHandRotTweener =
                IKLHandTargetTrs.DOLocalRotateQuaternion(IKChieriLHand01_OriteMisetePosObj.transform.localRotation, 0.2f);
            });

        yield return new WaitForSeconds(0.5f);
        //少しクイッ2回
        if (oriteLHandPosTweener != null) { oriteLHandPosTweener.Kill(); }
        oriteLHandPosTweener =
            IKLHandTargetTrs.DOLocalMove(IKChieriLHand02_HayakuOritePosObj.transform.localPosition, 0.3f);
        if (oriteLHandRotTweener != null) { oriteLHandRotTweener.Kill(); }
        oriteLHandRotTweener =
            IKLHandTargetTrs.DOLocalRotateQuaternion(IKChieriLHand02_HayakuOritePosObj.transform.localRotation, 0.3f)
            .OnComplete(() =>
            {
                GameObject IKChieriLHand01_OriteMisetePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/IKChieriLHand01_OriteMisetePosObj") as GameObject;
                if (oriteLHandPosTweener != null) { oriteLHandPosTweener.Kill(); }
                oriteLHandPosTweener =
                        IKLHandTargetTrs.DOLocalMove(IKChieriLHand01_OriteMisetePosObj.transform.localPosition, 0.2f);
                if (oriteLHandRotTweener != null) { oriteLHandRotTweener.Kill(); }
                oriteLHandRotTweener =
                        IKLHandTargetTrs.DOLocalRotateQuaternion(IKChieriLHand01_OriteMisetePosObj.transform.localRotation, 0.2f);
            });


        yield return new WaitForSeconds(1f);
        //揺れ消し
        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].drag = 10; }

        NovelSetVis("USBケーブル降り中見つかり080");//ばかばか！

        //yield return new WaitForSeconds(5f);
        //5秒間引き出し奥方面に力加える（位置裏返らないように）
        float tmpTimer = 0;
        while (tmpTimer <= 5)
        {
            AN_PlayerRigidbody.AddForce(new Vector3(0.03f, 0, 0.03f));
            tmpTimer += 1 * Time.deltaTime;
            yield return null;
        }


        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].drag = 2; }


        while (isNovelSetVisIng) { yield return null; }


        yield return new WaitForSeconds(0.5f);
        AN_isInputLock = false;
        //UION
        AN_isUIVis = true;
        ANGrapHandUIObj.SetActive(true);

        nowRunOriteIEnum = null;
        yield break;
    }
    IEnumerator OriteOrireteru(List<Rigidbody> cableRigidbodyList)
    {

        AN_isInputLock = true;
        //UIオフ
        AN_isUIVis = false;
        ANGrapHandUIObj.SetActive(false);


        Hukidashi("ケーブル発見弄り115");//降りれてる

        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].drag = 0; }

        ChieriMotion("USB抜いて持ち上げポーズ", 2, 0);
        //IKオフ
        DOTweenToIKEfPos(IKLHandEf, 0, 7);
        DOTweenToIKEfRot(IKLHandEf, 0, 7);

        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し

        yield return new WaitForSeconds(1);
        NovelSetVis("USBケーブル降り中見つかり084");//うわうわうわ

        yield return new WaitForSeconds(4);
        while (isNovelSetVisIng) { yield return null; }

        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].drag = 10; }


        Hukidashi("ケーブル発見弄り117");//おもちゃみたい
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);




        NovelSetVis("USBケーブル降り中見つかり085");//だから動かすなって
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        ChieriMotion("あはは・・・", 0.05f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        Hukidashi("ケーブル発見弄り118");//もー玩具でも

        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].drag = 0; }

        DOTweenToIKEfPos(IKLHandEf, 1, 8f);
        DOTweenToIKEfRot(IKLHandEf, 1, 8f);
        yield return new WaitForSeconds(1);
        ChieriMotion("USBに手", 3f, 0, 1);//最終フレーム

        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].drag = 10; }

        //yield return new WaitForSeconds(5);
        //5秒間引き出し奥方面に力加える（位置裏返らないように）
        float tmpTimer = 0;
        while (tmpTimer <= 5)
        {
            AN_PlayerRigidbody.AddForce(new Vector3(0.06f, 0, 0.06f));
            tmpTimer += 1 * Time.deltaTime;
            yield return null;
        }

        NovelSetVis("USBケーブル降り中見つかり087");//降ろしてくれりゃいいのに

        while (isNovelSetVisIng) { yield return null; }

        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].drag = 2; }


        yield return new WaitForSeconds(0.5f);
        AN_isInputLock = false;
        //UIオン
        AN_isUIVis = true;
        ANGrapHandUIObj.SetActive(true);

        nowRunOriteIEnum = null;
        yield break;
    }

    IEnumerator OriteNozokikomi()
    {
        //上半身を少し倒す（HeadIK利用）
        DOTweenToLAIKSBody(LAIKHeadS, 0.1f, 2);
        //上半身倒しに合わせて手移動
        GameObject IKChieriLHand01a_NozokikomiPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/IKChieriLHand01a_NozokikomiPosObj") as GameObject;

        if (oriteLHandPosTweener != null) { oriteLHandPosTweener.Kill(); }
        oriteLHandPosTweener =
            IKLHandTargetTrs.DOLocalMove(IKChieriLHand01a_NozokikomiPosObj.transform.localPosition, 3f)
            .SetEase(Ease.InOutSine);
        if (oriteLHandRotTweener != null) { oriteLHandRotTweener.Kill(); }
        oriteLHandRotTweener =
            IKLHandTargetTrs.DOLocalRotateQuaternion(IKChieriLHand01a_NozokikomiPosObj.transform.localRotation, 3f)
            .SetEase(Ease.InOutSine);


        isNozokikomi = true; isHayaku = true;
        if (isOrireteru == false)
        {
            isOrireteru = true;
            ChieriMotion("f_え？？", 0.05f, 2);
            yield return new WaitForSeconds(0.5f);
            Hukidashi("ケーブル発見弄り300");//えっそんなに早く降りれるの？
            yield return new WaitForSeconds(2.5f);
        }
        isOrireteru = true;
        yield return new WaitForSeconds(2.5f);

        ChieriMotion("f_あ！ほら！口普通キョトン", 0.05f, 2);

        if (nowLGrapCableInt >= 9 || nowRGrapCableInt >= 9)
        {
            Hukidashi("ケーブル発見弄り230");//もう膝くらい？
        }
        else if (nowLGrapCableInt >= 7 || nowRGrapCableInt >= 7)
        {
            Hukidashi("ケーブル発見弄り220");//太ももくらい？
        }
        else if (nowLGrapCableInt >= 6 || nowRGrapCableInt >= 6)
        {
            Hukidashi("ケーブル発見弄り210");//太もものつけ根くらい？
        }
        else if (nowLGrapCableInt >= 5 || nowRGrapCableInt >= 5)
        {
            Hukidashi("ケーブル発見弄り200");//おなかくらい？
        }
        yield return new WaitForSeconds(6);

        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        Hukidashi("ケーブル発見弄り250");//あともうちょっと！

        nowRunOriteIEnum = null;
    }

    IEnumerator OriteMinaide1(List<Rigidbody> cableRigidbodyList)
    {
        AN_isInputLock = true;
        //UIオフ
        AN_isUIVis = false;
        ANGrapHandUIObj.SetActive(false);


        DelAll_Hukidashi();
        //ん？
        Hukidashi("ケーブル発見弄り120");//ん？
        ChieriMotion("f_ん？（いぶかしみ）", 1f, 2);

        //上半身を少し倒す（HeadIK利用）
        DOTweenToLAIKSBody(LAIKHeadS, 0.2f, 2);
        //上半身倒しに合わせて手移動
        GameObject IKChieriLHand03a_UnPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/IKChieriLHand03a_UnPosObj") as GameObject;

        if (oriteLHandPosTweener != null) { oriteLHandPosTweener.Kill(); }
        oriteLHandPosTweener =
           IKLHandTargetTrs.DOLocalMove(IKChieriLHand03a_UnPosObj.transform.localPosition, 2f);
        if (oriteLHandRotTweener != null) { oriteLHandRotTweener.Kill(); }
        oriteLHandRotTweener =
            IKLHandTargetTrs.DOLocalRotateQuaternion(IKChieriLHand03a_UnPosObj.transform.localRotation, 2f);

        yield return new WaitForSeconds(1.5f);

        TereHohoAlphaChange(0.5f);
        TereHoho(1f);
        ChieriMotion("f_あっ！（照）", 0.2f, 2);

        yield return new WaitForSeconds(1.5f);
        ChieriMotion("f_怒り睨み", 0.5f, 2);


        Hukidashi("ケーブル発見弄り130");//ふーん余裕あるんだ？

        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        //ケーブルのDrag
        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].drag = 0f; }

        ChieriMotion("f_怒り目見開き", 0.1f, 2);
        Hukidashi("ケーブル発見弄り132");//揺らしたって
        TereHohoAlphaChange(0.6f);

        //思い切り横
        GameObject IKChieriLHand03b_MinaidePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/IKChieriLHand03b_MinaidePosObj") as GameObject;

        if (oriteLHandPosTweener != null) { oriteLHandPosTweener.Kill(); }
        oriteLHandPosTweener =
            IKLHandTargetTrs.DOLocalMove(IKChieriLHand03b_MinaidePosObj.transform.localPosition, 1.2f)
            .SetEase(Ease.OutCubic);
        if (oriteLHandRotTweener != null) { oriteLHandRotTweener.Kill(); }
        oriteLHandRotTweener =
            IKLHandTargetTrs.DOLocalRotateQuaternion(IKChieriLHand03b_MinaidePosObj.transform.localRotation, 1.2f)
            .SetEase(Ease.OutCubic);

        yield return new WaitForSeconds(1.2f);
        NovelSetVis("USBケーブル降り中見つかり090");//それは不可抗力だろ！

        yield return new WaitForSeconds(4);
        ChieriMotion("f_怒り睨み", 1f, 2);
        TereHohoAlphaChange(0.5f);


        while (novelCurrentPageInt < 10) { yield return null; }

        yield return new WaitForSeconds(1);
        DelAll_Hukidashi();

        SHukidashi("ケーブル発見弄り135");//なら今すぐ下見てて！

        #region ■下見るまで待機（フキダシゲージ）
        //腰見てる判定とする数値
        float tmpSeeSpineJudgeFlt = 1;

        bool isTmpSpineMinai = true;

        //Sフキダシのスライダー取得
        Slider tmpSHukidashiSlider =
            hukidasis[0].transform.GetChild(0).Find("SentakuOnSlider").GetComponent<Slider>();

        tmpSHukidashiSlider.maxValue = 4;//4秒見なければ抜けるように

        while (isTmpSpineMinai)
        {
            //腰見てなければゲージ増える
            if (seeSpineNomFlt < tmpSeeSpineJudgeFlt
                && seeHeadNomFlt < tmpSeeSpineJudgeFlt)
            {
                tmpSHukidashiSlider.value += 1 * Time.deltaTime;
                //MAXになったら抜け
                if (tmpSHukidashiSlider.value == tmpSHukidashiSlider.maxValue)
                {
                    DelAll_Hukidashi();
                    isTmpSpineMinai = false;
                }
            }
            //腰見たらゲージ戻る
            else
            {
                tmpSHukidashiSlider.value = tmpSHukidashiSlider.minValue;
            }
            yield return null;
        }


        ////以前の
        //float
        //    tmpSitamiFloat = 0,
        //    preSeeSpineFloat = seeSpineFloat;

        //while (tmpSitamiFloat < 2.5f)
        //{
        //    //seeSpineFloatをFixedで計算しているせいか、preSeeSpineFloatの1f遅れ同期がうまくいかない。ので、2フレ挟む（時々すり抜けるが、ひとまず）
        //    yield return null;
        //    yield return null;

        //    if (preSeeSpineFloat == seeSpineFloat)
        //    {
        //        tmpSitamiFloat += 1 * Time.deltaTime;
        //    }
        //    else if (preSeeSpineFloat < seeSpineFloat)
        //    {
        //        tmpSitamiFloat = 0;
        //    }

        //    preSeeSpineFloat = seeSpineFloat;
        //}
        #endregion

        DelAll_Hukidashi();

        //戻し
        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].drag = 0.5f; }

        GameObject IKChieriLHand01a_NozokikomiPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/IKChieriLHand01a_NozokikomiPosObj") as GameObject;

        if (oriteLHandPosTweener != null) { oriteLHandPosTweener.Kill(); }
        oriteLHandPosTweener =
            IKLHandTargetTrs.DOLocalMove(IKChieriLHand01a_NozokikomiPosObj.transform.localPosition, 8f);
        if (oriteLHandRotTweener != null) { oriteLHandRotTweener.Kill(); }
        oriteLHandRotTweener =
            IKLHandTargetTrs.DOLocalRotateQuaternion(IKChieriLHand01a_NozokikomiPosObj.transform.localRotation, 8f);
        DOTweenToLAIKSBody(LAIKHeadS, 0.1f, 8);

        yield return new WaitForSeconds(2);
        Hukidashi("ケーブル発見弄り140");//もー見ないで降りてよ？

        //次のパンツ見フラグ（trueだったのをfalseにして、起動したらtrue）
        isMinaide2 = false;
        CableOriSeePantsCountFloat = 0;

        yield return new WaitForSeconds(4);
        NovelSetVis("USBケーブル降り中見つかり100");//降りるのは続行なのか……。

        ChieriMotionDelay(5, "_noData", 2f, 2);//時間差表情戻し
        TereHoho(false, 15f);

        //戻し
        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].drag = 2f; }

        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(0.5f);
        AN_isInputLock = false;
        //UIオン
        AN_isUIVis = true;
        ANGrapHandUIObj.SetActive(true);

        nowRunOriteIEnum = null;
        yield break;
    }
    IEnumerator OriteMinaide2(List<Rigidbody> cableRigidbodyList)
    {
        AN_isInputLock = true;
        //UIオフ
        AN_isUIVis = false;
        ANGrapHandUIObj.SetActive(false);


        ChieriMotion("f_怒り睨み", 1f, 2);
        TereHohoAlphaChange(0.5f);
        TereHoho(1f);
        //上半身を少し倒す（HeadIK利用）
        DOTweenToLAIKSBody(LAIKHeadS, 0.2f, 2);
        //上半身倒しに合わせて手移動
        GameObject IKChieriLHand03a_UnPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/IKChieriLHand03a_UnPosObj") as GameObject;

        if (oriteLHandPosTweener != null) { oriteLHandPosTweener.Kill(); }
        oriteLHandPosTweener =
            IKLHandTargetTrs.DOLocalMove(IKChieriLHand03a_UnPosObj.transform.localPosition, 2f);
        if (oriteLHandRotTweener != null) { oriteLHandRotTweener.Kill(); }
        oriteLHandRotTweener =
            IKLHandTargetTrs.DOLocalRotateQuaternion(IKChieriLHand03a_UnPosObj.transform.localRotation, 2f);


        yield return new WaitForSeconds(1);

        //ケーブルのDrag
        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].drag = 0f; }

        ChieriMotion("f_怒り目見開き", 0.1f, 2);
        Hukidashi("ケーブル発見弄り150");//だからそんなに上見る必要ないでしょ
        TereHohoAlphaChange(0.7f);

        //思い切り横
        GameObject IKChieriLHand04a_Minaide2PosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/IKChieriLHand04a_Minaide2PosObj") as GameObject;
        if (oriteLHandPosTweener != null) { oriteLHandPosTweener.Kill(); }
        oriteLHandPosTweener =
            IKLHandTargetTrs.DOLocalMove(IKChieriLHand04a_Minaide2PosObj.transform.localPosition, 1f)
            .SetEase(Ease.OutCubic);
        if (oriteLHandRotTweener != null) { oriteLHandRotTweener.Kill(); }
        oriteLHandRotTweener =
            IKLHandTargetTrs.DOLocalRotateQuaternion(IKChieriLHand04a_Minaide2PosObj.transform.localRotation, 1f);

        yield return new WaitForSeconds(3);
        NovelSetVis("USBケーブル降り中見つかり110");//自力で降りる必要がないと思うんだがああ

        ChieriMotionDelay(8, "f_怒り睨み", 1f, 2);
        TereHohoAlphaChange(0.5f);


        //すぐ横から思い切り横へループ
        GameObject
            IKChieriLHand03b_MinaidePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/IKChieriLHand03b_MinaidePosObj") as GameObject;

        if (oriteLHandPosTweener != null) { oriteLHandPosTweener.Kill(); }
        oriteLHandPosTweener =
            IKLHandTargetTrs.DOLocalMove(IKChieriLHand03b_MinaidePosObj.transform.localPosition, 1.2f)
            .SetEase(Ease.OutCubic)
            .SetLoops(-1, LoopType.Yoyo);

        if (oriteLHandRotTweener != null) { oriteLHandRotTweener.Kill(); }
        oriteLHandRotTweener =
            IKLHandTargetTrs.DOLocalRotateQuaternion(IKChieriLHand03b_MinaidePosObj.transform.localRotation, 1.2f)
            .SetEase(Ease.OutCubic)
            .SetLoops(-1, LoopType.Yoyo);

        while (isNovelSetVisIng) { yield return null; }
        DelAll_Hukidashi();

        SHukidashi("ケーブル発見弄り155");//下見る！

        #region ■下見るまで待機（フキダシゲージ）
        //腰見てる判定とする数値
        float tmpSeeSpineJudgeFlt = 1;

        bool isTmpSpineMinai = true;

        //Sフキダシのスライダー取得
        Slider tmpSHukidashiSlider =
            hukidasis[0].transform.GetChild(0).Find("SentakuOnSlider").GetComponent<Slider>();

        tmpSHukidashiSlider.maxValue = 4;//4秒見なければ抜けるように

        while (isTmpSpineMinai)
        {
            //腰見てなければゲージ増える
            if (seeSpineNomFlt < tmpSeeSpineJudgeFlt
                && seeHeadNomFlt < tmpSeeSpineJudgeFlt)
            {
                tmpSHukidashiSlider.value += 1 * Time.deltaTime;
                //MAXになったら抜け
                if (tmpSHukidashiSlider.value == tmpSHukidashiSlider.maxValue)
                {
                    DelAll_Hukidashi();
                    isTmpSpineMinai = false;
                }
            }
            //腰見たらゲージ戻る
            else
            {
                tmpSHukidashiSlider.value = tmpSHukidashiSlider.minValue;
            }
            yield return null;
        }


        ////以前の
        //float
        //    tmpSitamiFloat = 0,
        //    preSeeSpineFloat = seeSpineFloat;

        //while (tmpSitamiFloat < 2.5f)
        //{
        //    //seeSpineFloatをFixedで計算しているせいか、preSeeSpineFloatの1f遅れ同期がうまくいかない。ので、2フレ挟む（時々すり抜けるが、ひとまず）
        //    yield return null;
        //    yield return null;

        //    if (preSeeSpineFloat == seeSpineFloat)
        //    {
        //        tmpSitamiFloat += 1 * Time.deltaTime;
        //    }
        //    else if (preSeeSpineFloat < seeSpineFloat)
        //    {
        //        tmpSitamiFloat = 0;
        //    }

        //    preSeeSpineFloat = seeSpineFloat;
        //}
        #endregion

        oriteLHandPosTweener.Kill();
        oriteLHandRotTweener.Kill();



        //戻し
        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].drag = 2f; }


        GameObject IKChieriLHand01a_NozokikomiPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/IKChieriLHand01a_NozokikomiPosObj") as GameObject;

        if (oriteLHandPosTweener != null) { oriteLHandPosTweener.Kill(); }
        oriteLHandPosTweener =
            IKLHandTargetTrs.DOLocalMove(IKChieriLHand01a_NozokikomiPosObj.transform.localPosition, 8f);
        if (oriteLHandRotTweener != null) { oriteLHandRotTweener.Kill(); }
        oriteLHandRotTweener =
            IKLHandTargetTrs.DOLocalRotateQuaternion(IKChieriLHand01a_NozokikomiPosObj.transform.localRotation, 8f);
        DOTweenToLAIKSBody(LAIKHeadS, 0.1f, 8);

        yield return new WaitForSeconds(1);
        Hukidashi("ケーブル発見弄り160");//つぎ見たら

        yield return new WaitForSeconds(4);
        NovelSetVis("USBケーブル降り中見つかり120");//降りるのは続行なのか……。
        TereHoho(false, 15f);

        //次のパンツ見フラグ（trueだったのをfalseにして、起動したらtrue）
        isMinaide3 = false;
        CableOriSeePantsCountFloat = 0;

        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(0.5f);
        AN_isInputLock = false;
        //UIオン
        AN_isUIVis = true;
        ANGrapHandUIObj.SetActive(true);

        nowRunOriteIEnum = null;
        yield break;
    }
    IEnumerator OriteMinaide3(List<Rigidbody> cableRigidbodyList)
    {
        AN_isInputLock = true;
        //UIオフ
        AN_isUIVis = false;
        ANGrapHandUIObj.SetActive(false);

        ChieriMotion("f_怒り睨み", 1f, 2);
        TereHohoAlphaChange(0.5f);
        TereHoho(1f);
        //上半身を少し倒す（HeadIK利用）
        DOTweenToLAIKSBody(LAIKHeadS, 0.2f, 2);
        //上半身倒しに合わせて手移動
        GameObject IKChieriLHand03a_UnPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/IKChieriLHand03a_UnPosObj") as GameObject;

        if (oriteLHandPosTweener != null) { oriteLHandPosTweener.Kill(); }
        oriteLHandPosTweener =
            IKLHandTargetTrs.DOLocalMove(IKChieriLHand03a_UnPosObj.transform.localPosition, 2f);
        if (oriteLHandRotTweener != null) { oriteLHandRotTweener.Kill(); }
        oriteLHandRotTweener =
            IKLHandTargetTrs.DOLocalRotateQuaternion(IKChieriLHand03a_UnPosObj.transform.localRotation, 2f);


        yield return new WaitForSeconds(1);

        //ケーブルのDrag
        for (int i = 0; i < cableRigidbodyList.Count; i++)
        { cableRigidbodyList[i].drag = 2f; }


        Hukidashi("ケーブル発見弄り170");//・・・・・・
        TereHohoAlphaChange(0.7f);

        ChieriMotion("USB抜いて持ち上げポーズ", 2, 0);
        //IKオフ
        DOTweenToIKEfPos(IKLHandEf, 0, 7);
        DOTweenToIKEfRot(IKLHandEf, 0, 7);


        yield return new WaitForSeconds(4);
        ChieriMotion("f_更に怒り睨み", 2f, 2);
        NovelSetVis("USBケーブル降り中見つかり130");//ん？　あはは…見ない見ない

        //上半身倒しに合わせて手移動
        GameObject IKChieriLHand05_TakakuMotiagePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/IKChieriLHand05_TakakuMotiagePosObj") as GameObject;

        if (oriteLHandPosTweener != null) { oriteLHandPosTweener.Kill(); }
        oriteLHandPosTweener =
            IKLHandTargetTrs.DOLocalMove(IKChieriLHand05_TakakuMotiagePosObj.transform.localPosition, 2f);
        if (oriteLHandRotTweener != null) { oriteLHandRotTweener.Kill(); }
        oriteLHandRotTweener =
            IKLHandTargetTrs.DOLocalRotateQuaternion(IKChieriLHand05_TakakuMotiagePosObj.transform.localRotation, 2f);

        //IKオフ
        DOTweenToIKEfPos(IKLHandEf, 1, 7);
        DOTweenToIKEfRot(IKLHandEf, 1, 7);



        TereHohoAlphaChange(0.5f);


        while (novelCurrentPageInt < 5) { yield return null; }
        yield return new WaitForSeconds(1.5f);

        //while (isNovelSetVisIng) { yield return null; }

        Hukidashi("ケーブル発見弄り180");//ふんっ

        //IKLooｋ ふんっ位置
        GameObject IKChieriLookAt_HunPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/IKChieriLookAt_HunPosObj") as GameObject;

        FollowDOMove(IKLookAtEyeTargetTrs, IKChieriLookAt_HunPosObj.transform.position, 1.0f);
        FollowDOMove(IKLookAtHeadTargetTrs, IKChieriLookAt_HunPosObj.transform.position, 1.0f);
        ChieriMotion("f_怒り目つむり", 0.1f, 2);

        yield return new WaitForSeconds(1);

        //手離し
        cableRigidbodyList[0].isKinematic = false;
        yield return new WaitForSeconds(1);
        NovelSetVis("USBケーブル降り中見つかり140", true);//ああああああああ


        AN_isInputLock = true;
        //UIオフ
        AN_isUIVis = false;
        ANGrapHandUIObj.SetActive(false);

        yield break;
    }

    IEnumerator OriteToutyaku(List<Rigidbody> cableRigidbodyList, GameObject BatteryObj, GameObject TsumamiCableObj)
    {
        AN_isInputLock = true;

        #region 智恵理右足にサウンドオブジェ付与
        //WindnoiseSoundObj付与
        GameObject RFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRFootTrs);
        DB.evMoveDelObjList.Add(RFootWindnoiseSoundObj);
        RFootWindnoiseSoundObj.name = nameof(RFootWindnoiseSoundObj);

        //つま先に
        GameObject tmpSoundObjPosObj
            = Resources.Load("_PosObj/0130USBCableOriAto/SoundObjRfootParePos") as GameObject;
        RFootWindnoiseSoundObj.transform.localPosition = tmpSoundObjPosObj.transform.localPosition;

        //設定
        WindnoiseSound tmpRFootWindnoiseSound = RFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpRFootWindnoiseSound.aSource.maxDistance = 15;
        tmpRFootWindnoiseSound.pitchMax = 0.5f;
        tmpRFootWindnoiseSound.pitchUpRateAdjustFloat = 140;
        tmpRFootWindnoiseSound.pitchDownRateAdjustFloat = 0;

        tmpRFootWindnoiseSound.aSource.volume = 0.5f;
        #endregion


        yield return new WaitForSeconds(0.5f);
        NovelSetVis("USBケーブル降り中見つかり200");//おーい着いたぞー！
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        //怒ってなければ降ろしてくれる
        if (isIkari == false)
        {
            ChieriMotion("f_え？？", 0.05f, 2);
            Hukidashi("ケーブル発見弄り400");//あれ、まだ高かった？
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            ChieriMotion("笑顔01口眉_目閉じない", 0.05f, 2);
            Hukidashi("ケーブル発見弄り410");//じゃあ降ろすからじっとしてて
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            yield return new WaitForSeconds(1);

            //手IK降り位置まで下げ
            GameObject IKChieriLHand06_OrosiPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/IKChieriLHand06_OrosiPosObj") as GameObject;
            if (oriteLHandPosTweener != null) { oriteLHandPosTweener.Kill(); }
            oriteLHandPosTweener =
                IKLHandTargetTrs.DOLocalMove(IKChieriLHand06_OrosiPosObj.transform.localPosition, 5f);
            if (oriteLHandRotTweener != null) { oriteLHandRotTweener.Kill(); }
            oriteLHandRotTweener =
                IKLHandTargetTrs.DOLocalRotateQuaternion(IKChieriLHand06_OrosiPosObj.transform.localRotation, 5f);

            yield return new WaitForSeconds(4);
            isRakka = true;//落下しない


            ChieriMotion("笑顔01口眉", 0.05f, 2);
            ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
            Hukidashi("ケーブル発見弄り420");//はいどうぞ
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            //手はなし
            isLInput = isRInput = false;
            isRInputUp = isLInputUp = true;

            //降りたら先に進む
            while (true)
            {
                if (CameraObjectsTrs.localPosition.y <= 0.01f)
                {
                    //着地音
                    SEPlay("FootStep04MaxComp");

                    //プレイヤー ケーブル降りて見せて位置に強制
                    GameObject Player_05_ToutyakuPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/Player_05_ToutyakuPosObj") as GameObject;
                    CameraObjectsTrs.localPosition = Player_05_ToutyakuPosObj.transform.localPosition;
                    CameraObjectsTrs.localEulerAngles = Player_05_ToutyakuPosObj.transform.localEulerAngles;
                    CameraAnchorTrs.localEulerAngles = Vector3.zero;

                    isANSystem = false;
                    //ANシステム終了処理のジョイント削除後のRigidBody削除になぜか2フレーム必要だった
                    yield return null; yield return null;

                    //カメラリセット
                    CameraReset(Player_05_ToutyakuPosObj.transform.localEulerAngles
                        , DB.cameraStandAnchorDefLocalPos
                        , false
                        , null
                        , false
                        , false);//ユーザーカメラリセットせず

                    goto 降りた;
                }

                yield return null;
            }
        }
        else//怒ってる場合は降ろしてくれない 蹴られて終わり
        {
            #region 落ちて蹴られる
            oriteRakkaType = OriteRakkaType.最後に強制で自ら落下;

            Hukidashi("ケーブル発見弄り450");//じゃあ飛び降りればー？
            ChieriMotion("f_眉高い笑顔少しジト目", 0f, 2);
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            Hukidashi("ケーブル発見弄り460");//脛くらいだし大丈夫でしょ
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            yield return new WaitForSeconds(0.5f);

            NovelSetVis("USBケーブル降り中見つかり210");//えっ、ちょ、何を言って・・・
            while (isNovelSetVisIng) { yield return null; }

            //手はなし
            isLInput = isRInput = false;
            isRInputUp = isLInputUp = true;

            isRakka = true;//落下しない

            //飛び降り待ち
            while (true)
            {
                if (CameraObjectsTrs.localPosition.y <= 0.01f)
                { goto 飛び降りた; }
                yield return null;
            }
            飛び降りた:

            isANSystem = false;
            //ANシステム終了処理のジョイント削除後のRigidBody削除になぜか2フレーム必要だった

            HukidashiNovelDistanceChange(1.2f);


            #region プレイヤーダメージとカメラ倒れ 直

            //フラッシュと音とダメージ
            FadeWhite(1, 0);
            SEPlay("dan01");
            yield return new WaitForSeconds(0.05f);
            FadeWhite(0, 0);

            //TPSプレイヤー倒れモーション
            isPlayerUniqueMotion = true;
            PlayerMotion("liedown_00_Re", 0.2f, 0);

            Vector3
                tmpDefCameraPos = CameraAnchorTrs.localPosition,
                tmpDefCameraEul = CameraAnchorTrs.localEulerAngles,
                tmpFlowCameraPos = new Vector3(0, 1.2f, 0),
                tmpSlipCameraPos = new Vector3(0, 0.3f, 0),
                tmpSlipCameraEul = new Vector3(-45, 0, 0);

            CameraAnchorTrs.DOLocalMove(tmpFlowCameraPos, 0.05f);
            yield return new WaitForSeconds(0.05f);
            CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.5f).SetEase(Ease.OutBounce);
            yield return new WaitForSeconds(0.05f);
            CameraAnchorTrs.DOLocalMove(tmpDefCameraPos, 0.05f);
            yield return new WaitForSeconds(0.05f);

            CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.5f).SetEase(Ease.OutBounce);
            CameraAnchorTrs.DOLocalRotate(tmpSlipCameraEul, 0.2f).SetEase(Ease.InSine);



            #endregion

            #region 着地失敗してから起き上がる
            NovelSetVis("USBケーブル降り中見つかり220");//づっ！

            while (novelCurrentPageInt < 7) { yield return null; }
            FadeBlack(1, 0.5f);
            yield return new WaitForSeconds(0.5f);

            //プレイヤー ケーブル降りて見せて位置に強制
            GameObject Player_05_ToutyakuPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/Player_05_ToutyakuPosObj") as GameObject;
            CameraObjectsTrs.localPosition = Player_05_ToutyakuPosObj.transform.localPosition;
            CameraObjectsTrs.localEulerAngles = Player_05_ToutyakuPosObj.transform.localEulerAngles;
            CameraAnchorTrs.localEulerAngles = Vector3.zero;

            //カメラリセット
            CameraReset(Player_05_ToutyakuPosObj.transform.localEulerAngles
                , DB.cameraStandAnchorDefLocalPos
                , false
                , null
                , false
                , false);//ユーザーカメラリセットせず

            isPlayerUniqueMotion = false;

            while (isNovelSetVisIng) { yield return null; }
            FadeBlack(0, 0.5f);

            yield return new WaitForSeconds(1);

            #endregion
            NovelSetVis("USBケーブル降り中見つかり230");//怪我したらどうす・・・

            #region 智恵理USBしまう
            //IKオフ
            DOTweenToIKEfPos(IKLHandEf, 0, 7);
            DOTweenToIKEfRot(IKLHandEf, 0, 7);
            DOTweenToLAIKSBody(LAIKHeadS, 0f, 7);

            //IKバッテリー見る
            FollowDOMove(IKLookAtEyeTargetTrs, BatteryObj.transform, 3);
            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 3);
            FollowDOMove(IKLookAtHeadTargetTrs, BatteryObj.transform, 3);
            DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 3);

            //呼吸止め
            OriBreathController.enabled = false;

            ChieriMotion("USB抜いて持ち上げ逆再生", 2f, 0, 1);

            //アニメ終了で呼吸開始
            StartCoroutine(GirlAnimReadSystem());
            while (nowGirlAnimClipName != "USB抜いて持ち上げ") { yield return null; }//クリップネーム自体は逆再生ではない
            while (girlAnimNomTime <= 1f) { yield return null; }
            isGirlAnimReadSystem = false;

            FixedAction(() =>
            {
                OriBreathController.enabled = true;
                TsumamiCableObj.transform.SetParent(GameObjectsTrs);
            });

            #endregion
            while (isNovelSetVisIng) { yield return null; }

            #region 怪我で ～～～ ねえ？　　足を掲げポーズに移行
            yield return null;
            yield return null;
            //まず現在位置呼び出し
            GirlPosToIKTargetPosRot(); while (isGirlPosToIKTargetPosRotLoading) { yield return null; }

            //IK左手を下ろし位置に
            GameObject IKLHand_010Orosi
                = Resources.Load("_PosObj/0140AsiOyayubiZeme/IKLHand_010Orosi") as GameObject;
            IKLHandTargetTrs.localPosition = IKLHand_010Orosi.transform.localPosition;
            IKLHandTargetTrs.localEulerAngles = IKLHand_010Orosi.transform.localEulerAngles;
            DOTweenToIKEfPos(IKLHandEf, 1, 4);
            DOTweenToIKEfRot(IKLHandEf, 1, 4);

            Hukidashi("ケーブル発見弄り465");//怪我で済んだらいい方
            yield return new WaitForSeconds(1);

            //IKプレイヤー見る
            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 4);
            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 4);
            DOTweenToLAIKSBody(LAIKHeadS, 0.2f, 7);
            //左足固定
            DOTweenToIKEfPos(IKLFootEf, 1, 1);

            yield return KeyOrWait(3);


            //Chieriずらし
            DB.isChieriPosLock = false;
            GirlTrs.DOLocalMoveX(-0.07f, 5);

            SEPlay(SocksSEObj, "rustling-of-clothes3_フェードインアウト", RFootWindnoiseSoundObj, 0.5f);
            SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発01", RFootWindnoiseSoundObj);

            DOTweenToIKEfPos(IKRFootEf, 0.5f, 5);
            DOTweenToIKEfRot(IKRFootEf, 0.5f, 5);
            ChieriMotion("RToe_つま先くにゅ1（無意識系）", 0, 13);


            Hukidashi("ケーブル発見弄り470");//小さいのに地面に居たら
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            Hukidashi("ケーブル発見弄り475");//いつ踏み潰されたっておかしくないよ
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            //右足頭上位置
            GameObject IKRFoot_010ZuzyouPosObj
                = Resources.Load("_PosObj/0150USBAfterKeri/IKRFoot_010ZuzyouPosObj") as GameObject;
            IKRFootTargetTrs.DOLocalMove(IKRFoot_010ZuzyouPosObj.transform.localPosition, 4);
            IKRFootTargetTrs.DOLocalRotate(IKRFoot_010ZuzyouPosObj.transform.localEulerAngles, 4);

            DOTweenToIKEfPos(IKRFootEf, 1f, 3);
            DOTweenToIKEfRot(IKRFootEf, 1f, 3);

            Hukidashi("ケーブル発見弄り480");//ねえ？
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            #endregion

            yield return new WaitForSeconds(1);

            ChieriMotion("f_怒り睨み", 1f, 2);

            #region 怯えて足横に降ろされるまで
            ChieriMotion("RToe_つま先くにゅ1（無意識系）", 0, 13);
            NovelSetVis("USBケーブル降り中見つかり240");//・・へ？
            while (isNovelSetVisIng) { yield return null; }

            HukidashiNovelDistanceChange(0.6f);


            //右足頭上更に接近位置
            GameObject IKRFoot_020ZuzyouTikadukePosObj
                = Resources.Load("_PosObj/0150USBAfterKeri/IKRFoot_020ZuzyouTikadukePosObj") as GameObject;
            IKRFootTargetTrs.DOLocalMove(IKRFoot_020ZuzyouTikadukePosObj.transform.localPosition, 4);
            IKRFootTargetTrs.DOLocalRotate(IKRFoot_020ZuzyouTikadukePosObj.transform.localEulerAngles, 4);
            ChieriMotion("RToe_つま先くにゅ1（無意識系）", 0, 13);

            NovelSetVis("USBケーブル降り中見つかり250");//洒落にならないって！
            while (isNovelSetVisIng) { yield return null; }

            yield return new WaitForSeconds(3);

            //右足顔横に
            GameObject IKRFoot_030KaoyokoPosObj
                = Resources.Load("_PosObj/0150USBAfterKeri/IKRFoot_030KaoyokoPosObj") as GameObject;
            IKRFootTargetTrs.DOLocalMove(IKRFoot_030KaoyokoPosObj.transform.localPosition, 4);
            IKRFootTargetTrs.DOLocalRotate(IKRFoot_030KaoyokoPosObj.transform.localEulerAngles, 4);
            ChieriMotion("RToe_つま先くにゅ1（無意識系）", 0, 13);

            NovelSetVis("USBケーブル降り中見つかり260");//う、うう・・
            while (isNovelSetVisIng) { yield return null; }

            NovelSetVis("USBケーブル降り中見つかり270");//足を見つめる
            while (isNovelSetVisIng) { yield return null; }

            #endregion

            ChieriMotion("f_眉高い笑顔少しジト目", 2f, 2);

            Hukidashi("ケーブル発見弄り485");//ふん

            #region 智恵理 IKポーズなおし1
            //左手IKちょっとオフ
            DOTweenToIKEfPos(IKLHandEf, 0.5f, 2);
            DOTweenToIKEfRot(IKLHandEf, 0.5f, 2);

            //IKバッテリー見る
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            FollowDOMove(IKLookAtEyeTargetTrs, BatteryObj.transform, 0f);
            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);

            FollowDOMove(IKLookAtHeadTargetTrs, BatteryObj.transform, 3);
            DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 3);


            #endregion
            yield return new WaitForSeconds(1);
            #region 蹴り開始から倒れ位置まで

            //右足蹴り準備位置に
            GameObject IKRFoot_040KeriZyunbiPosObj
                = Resources.Load("_PosObj/0150USBAfterKeri/IKRFoot_040KeriZyunbiPosObj") as GameObject;
            IKRFootTargetTrs.DOLocalMove(IKRFoot_040KeriZyunbiPosObj.transform.localPosition, 2);
            IKRFootTargetTrs.DOLocalRotate(IKRFoot_040KeriZyunbiPosObj.transform.localEulerAngles, 2);
            ChieriMotion("RToe_つま先くにゅ1（無意識系）", 0, 13);
            //体重心ずらし
            GirlTrs.DOLocalMoveX(-0.05f, 2);

            yield return new WaitForSeconds(2f);
            //NovelSetVis("USBケーブル降り中見つかり280");//え、え、え、え、え、
            //yield return new WaitForSeconds(0.5f);
            //体重心ずらし
            GirlTrs.DOLocalMoveX(-0.08f, 1);
            //つま先風音調整
            tmpRFootWindnoiseSound.aSource.maxDistance = 55;
            tmpRFootWindnoiseSound.pitchMax = 0.5f;
            tmpRFootWindnoiseSound.pitchUpRateAdjustFloat = 140;
            tmpRFootWindnoiseSound.pitchDownRateAdjustFloat = 0;

            tmpRFootWindnoiseSound.aSource.volume = 1f;


            //右足蹴り位置にOutBack
            GameObject IKRFoot_050KeriPosObj
                = Resources.Load("_PosObj/0150USBAfterKeri/IKRFoot_050KeriPosObj") as GameObject;
            IKRFootTargetTrs.DOLocalMove(IKRFoot_050KeriPosObj.transform.localPosition, 2.5f)
                .SetEase(Ease.OutBack);
            IKRFootTargetTrs.DOLocalRotate(IKRFoot_050KeriPosObj.transform.localEulerAngles, 2.5f)
                .SetEase(Ease.OutBack);

            //接触瞬間タイミング取り
            yield return new WaitForSeconds(0.3f);


            //移動
            GameObject Player010_KerareTaorePosObj
                = Resources.Load("_PosObj/0150USBAfterKeri/Player010_KerareTaorePosObj") as GameObject;

            CameraObjectsTrs.DOLocalMove(Player010_KerareTaorePosObj.transform.localPosition, 5)
                .SetEase(Ease.OutQuint);
            CameraObjectsTrs.DOLocalRotate(Player010_KerareTaorePosObj.transform.localEulerAngles, 5)
                .SetEase(Ease.OutQuint);


            #region プレイヤーダメージとカメラ倒れ 直

            //フラッシュと音とダメージ
            FadeWhite(1, 0);
            FadeBlack(1, 0);
            SEPlay("soccer-ball1", 3);
            SEPlay("足音・べた足-08", 3);
            yield return new WaitForSeconds(0.05f);
            FadeWhite(0, 0);
            FadeBlack(0.5f, 3);

            //TPSプレイヤー倒れモーション
            isPlayerUniqueMotion = true;
            PlayerMotion("liedown_00_Re", 0.2f, 0);

            Vector3
                tmpDefCameraPosTwo = CameraAnchorTrs.localPosition,
                tmpDefCameraEulTwo = CameraAnchorTrs.localEulerAngles,
                tmpFlowCameraPosTwo = new Vector3(0, 1.2f, 0),
                tmpSlipCameraPosTwo = new Vector3(0, 0.4f, 0),
                tmpSlipCameraEulTwo = new Vector3(-45, 0, 0);

            CameraAnchorTrs.DOLocalMove(tmpFlowCameraPosTwo, 0.05f);
            yield return new WaitForSeconds(0.05f);
            CameraAnchorTrs.DOLocalMove(tmpSlipCameraPosTwo, 0.5f).SetEase(Ease.OutBounce);
            yield return new WaitForSeconds(0.05f);
            CameraAnchorTrs.DOLocalMove(tmpDefCameraPosTwo, 0.05f);
            yield return new WaitForSeconds(0.05f);

            CameraAnchorTrs.DOLocalMove(tmpSlipCameraPosTwo, 0.5f).SetEase(Ease.OutBounce);
            CameraAnchorTrs.DOLocalRotate(tmpSlipCameraEulTwo, 0.2f).SetEase(Ease.InSine);



            #endregion


            //白フラッシュ
            FadeWhite(0.2f, 0.05f); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);

            SEPlay("cableFallShock01_cannon1", 0.6f);
            SEPlay("CableFallSlip01_fuse1", 0.8f);

            while (isNovelSetVisIng) { yield return null; }

            #endregion

            yield return new WaitForSeconds(1);
            #region 智恵理IKポーズなおし2
            //左手IKオフ
            DOTweenToIKEfPos(IKLHandEf, 0f, 2);
            DOTweenToIKEfRot(IKLHandEf, 0f, 2);
            //右足IKOFF
            DOTweenToIKEfPos(IKRFootEf, 0f, 2);
            DOTweenToIKEfRot(IKRFootEf, 0f, 2);
            //体重心もどし
            GirlTrs.DOLocalMoveX(0f, 3);
            #endregion

            HukidashiNovelDistanceChange(1.2f);
            yield return new WaitForSeconds(3);

            #region 飛ばされてからイベント移動まで
            NovelSetVis("USBケーブル降り中見つかり285");//現実かどうか　うぶ・・・　暗み始める
            while (novelCurrentPageInt < 3) { yield return null; }
            //白フラッシュ
            FadeWhite(0.2f, 0.05f); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);
            FadeBlack(0.7f, 1);

            while (isNovelSetVisIng) { yield return null; }
            FadeBlack(1f, 5);


            //IKプレイヤー見る
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            FollowDOMove(IKLookAtEyeTargetTrs, PlayerTargetTrs, 0f);
            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
            yield return new WaitForSeconds(1);

            Hukidashi("ケーブル発見弄り490");//お仕置きはこれくらいでいっか
            yield return new WaitForSeconds(1);
            //IKバッテリー見る
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            FollowDOMove(IKLookAtEyeTargetTrs, BatteryObj.transform, 0f);
            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
            yield return KeyOrWait(3);

            FadeBlack(1f, 1);
            yield return new WaitForSeconds(2);

            Hukidashi("ケーブル発見弄り600");//机に運んであげようかな
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            yield return new WaitForSeconds(1);
            NovelSetVis("USBケーブル降り中見つかり290");//お仕置きという単語だけは。
            while (isNovelSetVisIng) { yield return null; }
            #endregion

            yield return new WaitForSeconds(2);
            EventMove("帰ろうとしてた？", true);

            while (true) { yield return null; }
            #endregion
        }



        降りた:

        #region 降りた おつかれさまー
        DelAll_Hukidashi();
        isNovelFadeTween = isNovelSetVisIng = false;



        yield return new WaitForSeconds(2);

        NovelSetVis("USBケーブル降り中見つかり300");//ふぅー地べただ・・

        while (novelCurrentPageInt < 3) { yield return null; }

        Hukidashi("ケーブル発見弄り500");//おつかれさま

        //IKオフ
        DOTweenToIKEfPos(IKLHandEf, 0, 7);
        DOTweenToIKEfRot(IKLHandEf, 0, 7);
        DOTweenToLAIKSBody(LAIKHeadS, 0f, 7);

        //IKバッテリー見る
        FollowDOMove(IKLookAtEyeTargetTrs, BatteryObj.transform, 3);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 3);
        FollowDOMove(IKLookAtHeadTargetTrs, BatteryObj.transform, 3);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 3);

        //呼吸止め
        OriBreathController.enabled = false;

        ChieriMotion("USB抜いて持ち上げ逆再生", 2f, 0, 1);

        //アニメ終了で呼吸開始
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "USB抜いて持ち上げ") { yield return null; }//クリップネーム自体は逆再生ではない
        while (girlAnimNomTime <= 1f) { yield return null; }
        isGirlAnimReadSystem = false;

        FixedAction(() =>
        {
            OriBreathController.enabled = true;
            TsumamiCableObj.transform.SetParent(GameObjectsTrs);
        });


        #region //■原点に切り替え(移行できるポーズがないので結局いらなかった。参考に残し)
        //DB.isChieriPosLock = false;

        ////智恵理 ボーンから現在位置読み取りルートChieriに Linearで（Yは0なので動かさない）
        //GirlTrs.DOLocalMoveX(Bip001Trs.localPosition.x, 0f / girlAnim.speed)
        //    .SetEase(Ease.Linear);
        //GirlTrs.DOLocalMoveZ(Bip001Trs.localPosition.z, 0f / girlAnim.speed)
        //    .SetEase(Ease.Linear);
        //yield return null;
        //ChieriMotion("USBに手ポーズ原点", 0f, 0);//回転はOriginal

        //yield return null;//原点移動と同時にフキダシはブレるので
        #endregion

        ChieriMotion("USBに手逆再生", 0, 0);
        //右手IKオフ（上半身傾けに対応するために右手IK位置に固定していた）
        DOTweenToIKEfPos(IKRHandEf, 0, 0);
        DOTweenToIKEfRot(IKRHandEf, 0, 0);

        yield return null;
        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 7);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 7);
        DOTweenToLAIKSBody(LAIKHeadS, 0.2f, 7);

        #endregion

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);



        Hukidashi("ケーブル発見弄り510");//こうやって立つと
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("ケーブル発見弄り520");//同じ人間？
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        #region IK準備（右足出し、左脚固定、（重心表現このあと智恵理Trsを少しずらし））

        //まず現在位置呼び出し
        GirlPosToIKTargetPosRot(); while (isGirlPosToIKTargetPosRotLoading) { yield return null; }

        //右足は出す位置に
        GameObject IKRFoot_010TikadukePosObj
            = Resources.Load("_PosObj/0130USBCableOriAto/IKRFoot_010TikadukePosObj") as GameObject;
        IKRFootTargetTrs.localPosition = IKRFoot_010TikadukePosObj.transform.localPosition;
        IKRFootTargetTrs.localEulerAngles = IKRFoot_010TikadukePosObj.transform.localEulerAngles;

        DB.isChieriPosLock = false;

        #endregion

        NovelSetVis("USBケーブル降り中見つかり310");//同じ感想　うわ？！
        while (novelCurrentPageInt < 4) { yield return null; }


        #region IKON　右足近づけ

        SEPlay(SocksSEObj, "rustling-of-clothes3_フェードインアウト", RFootWindnoiseSoundObj, 0.5f);
        SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発01", RFootWindnoiseSoundObj);

        DOTweenToIKEfPos(IKRFootEf, 1, 5);
        DOTweenToIKEfRot(IKRFootEf, 1, 5);

        //左足固定
        DOTweenToIKEfPos(IKLFootEf, 1, 0);
        //DOTweenToIKEfRot(IKRFootEf, 1, 3);

        //Chieriずらし
        GirlTrs.DOLocalMoveX(-0.07f, 5);
        #endregion

        ChieriMotion("RToe_つま先くにゅ1（無意識系）", 0, 13);

        ChieriMotion("f_眉高い笑顔少しジト目", 0.5f, 2);

        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("ケーブル発見弄り530");//ほら
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発01_短", RFootWindnoiseSoundObj);
        SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発05_短", RFootWindnoiseSoundObj, 1, 2);

        HukidashiNovelDistanceChange(0.3f, 3);


        ChieriMotion("RToe_つま先ピクピク", 0.5f, 13);
        #region 足IKもピクピクに合わせて少し回転 その後頭上へ
        Vector3 tmpRot = IKRFoot_010TikadukePosObj.transform.localEulerAngles;
        tmpRot.z -= 0.5f;
        IKRFootTargetTrs.DOLocalRotate(tmpRot, 5)
            .OnComplete(() =>
            {
                SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発04", RFootWindnoiseSoundObj, 0.8f, 2);

                #region 足指頭上近くへ
                GameObject IKRFoot_015TikadukeAgePosObj
                    = Resources.Load("_PosObj/0130USBCableOriAto/IKRFoot_015TikadukeAgePosObj") as GameObject;
                IKRFootTargetTrs.DOLocalMove(IKRFoot_015TikadukeAgePosObj.transform.localPosition, 4)
                    .SetEase(Ease.OutBack);
                IKRFootTargetTrs.DOLocalRotate(IKRFoot_015TikadukeAgePosObj.transform.localEulerAngles, 4)
                    .SetEase(Ease.InOutQuad);

                #endregion
                HukidashiNovelDistanceChange(0.4f, 4);

            });
        #endregion

        //if (DB.isUserClothsBarefoot) { NovelSetVis("USBケーブル降り中見つかり320Barefoot"); }//素足版
        //else { NovelSetVis("USBケーブル降り中見つかり320"); }//そ、そうだな・・・あはは・・

        if (DB.intCurrentShoes == 1) { NovelSetVis("USBケーブル降り中見つかり320Barefoot"); }//素足版
        else { NovelSetVis("USBケーブル降り中見つかり320"); }//そ、そうだな・・・あはは・・


        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("ケーブル発見弄り540");//コードの時も
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("ケーブル発見弄り550");//今の方が
        ChieriMotion("f_眉高い笑顔少しジト目", 0.5f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("RToe_親指上げループ", 2, 13);
        SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発10", RFootWindnoiseSoundObj, 0.8f, 1f);

        NovelSetVis("USBケーブル降り中見つかり330");//・・・
        while (isNovelSetVisIng) { yield return null; }
        NovelSetVis("USBケーブル降り中見つかり340");//悪かったよ
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("ケーブル発見弄り560");//え？なんていったの？
        ChieriMotion("RToe_つま先くにゅ1（無意識系）", 1, 13);
        SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発05_短", RFootWindnoiseSoundObj, 1, 0.2f);
        ChieriMotion("笑顔01口眉_目閉じない", 0.5f, 2);
        SEPlay(SocksSEObj, "rustling-of-clothes3_単発01_短", RFootWindnoiseSoundObj, 0.3f, 0.5f);
        #region IK足位置 一旦010に戻し
        IKRFootTargetTrs.DOLocalMove(IKRFoot_010TikadukePosObj.transform.localPosition, 3)
            .SetEase(Ease.OutBack);
        IKRFootTargetTrs.DOLocalRotate(IKRFoot_010TikadukePosObj.transform.localEulerAngles, 3)
            .SetEase(Ease.InOutQuad);
        #endregion

        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("USBケーブル降り中見つかり350");//え？　だから・・
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        #region 誕生日チェックしてるかで分岐
        if (staticFlagDict["カレンダー誕生日チェック"])
        {
            #region 足親指攻めをヒントコマに

            //コマデータへのアクセス
            for (int i = 0; i < flowChartKomaDataObjList.Count; i++)
            {
                if ("足親指攻め" == flowChartKomaDataObjList[i].GetComponent<FlowChartKoma>().eventName)
                { flowChartKomaDataObjList[i].GetComponent<FlowChartKoma>().isHintVisFlag = true; }
            }
            #endregion

            Hukidashi("ケーブル発見弄り580");//ふふ
            ChieriMotion("f_眉高い笑顔少しジト目", 0.5f, 2);
            ChieriMotion("RToe_つま先くにゅ1（無意識系）", 1, 13);

            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            yield return new WaitForSeconds(1.5f);
            #region IKOFF　右足近づけてたのを元に戻し

            SEPlay(SocksSEObj, "rustling-of-clothes3_フェードインアウト", RFootWindnoiseSoundObj, 0.5f);
            SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発01", RFootWindnoiseSoundObj);

            DOTweenToIKEfPos(IKRFootEf, 0, 5);
            DOTweenToIKEfRot(IKRFootEf, 0, 5);

            ////左足固定
            //DOTweenToIKEfPos(IKLFootEf, 0, 0);
            ////DOTweenToIKEfRot(IKRFootEf, 1, 3);

            //Chieriずらし
            GirlTrs.DOLocalMoveX(0f, 5);
            #endregion

            Hukidashi("ケーブル発見弄り590");//お仕置きおしまい
            ChieriMotion("笑顔01口眉", 0.05f, 2);
            ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);


            yield return new WaitForSeconds(2);
            NovelSetVis("USBケーブル降り中見つかり352");//おしおき・・？

            //暗幕
            FadeBlack(1, 2f);
            while (isNovelSetVisIng) { yield return null; }
            yield return new WaitForSeconds(1);

            ChieriMotion("笑顔01口眉", 0.05f, 2);
            ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
            Hukidashi("ケーブル発見弄り600"); //じゃあ机に運んであげるね
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            yield return new WaitForSeconds(4);


            NovelSetVis("USBケーブル降り中見つかり400");//"所事物"を運ぶ様な雰囲気
            while (isNovelSetVisIng) { yield return null; }

            FadeBlack(1, 2);
            yield return new WaitForSeconds(2);
            EventMove("帰ろうとしてた？", true);

            yield break;
        }
        else
        {
            #region 踏みつけられてイベントへ
            Hukidashi("ケーブル発見弄り580");//ふふ
            ChieriMotion("f_眉高い笑顔少しジト目", 0.5f, 2);
            ChieriMotion("RToe_つま先くにゅ1（無意識系）", 1, 13);

            #region 右足IK持ち上げ
            GameObject IKRFoot_018MotiAgePosObj
                = Resources.Load("_PosObj/0130USBCableOriAto/IKRFoot_018MotiAgePosObj") as GameObject;

            IKRFootTargetTrs.DOLocalMove(IKRFoot_018MotiAgePosObj.transform.localPosition, 3);
            IKRFootTargetTrs.DOLocalRotate(IKRFoot_018MotiAgePosObj.transform.localEulerAngles, 3);

            #endregion
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            #region 右足IK押し付け
            GameObject IKRFoot_020OsitukePosObj
                = Resources.Load("_PosObj/0130USBCableOriAto/IKRFoot_020OsitukePosObj") as GameObject;

            IKRFootTargetTrs.DOLocalMove(IKRFoot_020OsitukePosObj.transform.localPosition, 4);
            IKRFootTargetTrs.DOLocalRotate(IKRFoot_020OsitukePosObj.transform.localEulerAngles, 4);

            #endregion

            FadeBlack(1, 2);
            NovelSetVis("USBケーブル降り中見つかり355");//え、うわ！
            yield return new WaitForSeconds(1.5f);

            isNovelFadeTween = isNovelSetVisIng = false;

            SEPlay("nuno_rustling-of-clothes1");
            SEPlay("バタドタン01");
            //白フラッシュ
            FadeWhite(1, 0.05f); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);
            yield return new WaitForSeconds(0.5f);
            FadeWhite(1, 0.05f); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);

            yield return new WaitForSeconds(1);
            SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発05", RFootWindnoiseSoundObj, 1, 0f);

            NovelSetVis("USBケーブル降り中見つかり360");//重いって！

            while (isNovelSetVisIng) { yield return null; }

            EventMove();
            yield break;
            #endregion
        }
        #endregion

    }

    #endregion
    bool isAsioyayubizemeSituationMode = false;
    IEnumerator D2137()//足親指攻め
    {
        if (debugEventMoveFlag == true)
        {
            #region 大きさや位置
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;
            #region 小物
            //小物消し
            Drill_chieriTrs.gameObject.SetActive(false);
            DrillTrs.gameObject.SetActive(false);
            KeshigomuObj.SetActive(true);
            SharpenObj.SetActive(true);

            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;
            #endregion

            #endregion

            //暗幕
            FadeBlack(1, 0f);
        }
        EventReset();
        yield return null;
        KankyouBGMVolumer(0.5f, 5);

        #region トラッキングリセットしてオフ
        InputTracking.disablePositionalTracking = true;
        if (XRSettings.enabled)//VRポジションリセット
        {
            //CameraReset(null, null, true);
            yield return null;
            VRUICameraTrs.localPosition = Vector3.zero;
            VRCameraTrs.localPosition = Vector3.zero;
        }
        #endregion

        //ためしにnear設定
        VRCamera.nearClipPlane = 0.01f;

        girlAnim.speed = 0.5f;

        #region ケーブル バッテリー設置

        GameObject BatteryObj;
        //既に編集用に置いてあったら取得
        if (GameObject.Find("Battery") != null)
        { BatteryObj = GameObject.Find("Battery"); }
        else //無ければリソースから
        {
            BatteryObj = Instantiate(Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/Battery") as GameObject
              , GameObjectsTrs, false);
        }
        BatteryObj.name = "Battery";
        DB.sceneMoveDelObjList.Add(BatteryObj);

        GameObject //リソースから摘んでるケーブルロード
            USBCable02_Bone0LHito3Pare_OriteMisetePrefab;
        //編集用に既にあればそれを取得
        if (GameObject.Find("USBCable02_Bone0LHito3Pare_OriteMisetePrefab"))
        {
            USBCable02_Bone0LHito3Pare_OriteMisetePrefab =
                  GameObject.Find("USBCable02_Bone0LHito3Pare_OriteMisetePrefab");
        }
        else//なければ
        {
            USBCable02_Bone0LHito3Pare_OriteMisetePrefab =
                Instantiate(Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/CableNobori/USBCable02_Bone0LHito3Pare_OriteMisetePrefab") as GameObject);
        }
        USBCable02_Bone0LHito3Pare_OriteMisetePrefab.name = "USBCable02_Bone0LHito3Pare_OriteMisetePrefab";
        DB.sceneMoveDelObjList.Add(USBCable02_Bone0LHito3Pare_OriteMisetePrefab);


        #endregion

        #region プレイヤー設置

        //プレイヤー ケーブル降りた位置に　そしてカメラリセット
        GameObject Player010_TaorePosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/Player010_TaorePosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player010_TaorePosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player010_TaorePosObj.transform.localEulerAngles;

        GameObject CameraAnchor010_TaorePosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/CameraAnchor010_TaorePosObj") as GameObject;

        CameraAnchorTrs.localPosition = CameraAnchor010_TaorePosObj.transform.localPosition;
        CameraAnchorTrs.localEulerAngles = CameraAnchor010_TaorePosObj.transform.localEulerAngles;


        //カメラリセット値変更してリセット
        CameraReset(Player010_TaorePosObj.transform.localEulerAngles
            , CameraAnchor010_TaorePosObj.transform.localPosition //アンカーPos指定
            , true
            , CameraAnchor010_TaorePosObj.transform.localEulerAngles);//アンカーRot指定


        isPlayerUniqueMotion = true;
        PlayerMotion("liedown_00_Re", 0f, 0);

        #endregion
        #region プレイヤーIK(足指にペアレント)
        //左手 人差し指に
        PlayerIKLHandTargetTrs.SetParent(GirlRToe31Trs);
        //右手 親指に
        PlayerIKRHandTargetTrs.SetParent(GirlRToe41Trs);

        yield return null;
        GameObject PlayerIKLHand010_PareRToe31PosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/PlayerIKLHand010_PareRToe31PosObj") as GameObject;

        PlayerIKLHandTargetTrs.localPosition = PlayerIKLHand010_PareRToe31PosObj.transform.localPosition;
        PlayerIKLHandTargetTrs.localEulerAngles = PlayerIKLHand010_PareRToe31PosObj.transform.localEulerAngles;

        GameObject PlayerIKRHand010_PareRToe41PosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/PlayerIKRHand010_PareRToe41PosObj") as GameObject;
        PlayerIKRHandTargetTrs.localPosition = PlayerIKRHand010_PareRToe41PosObj.transform.localPosition;
        PlayerIKRHandTargetTrs.localEulerAngles = PlayerIKRHand010_PareRToe41PosObj.transform.localEulerAngles;

        //ArmBendGoal 1
        PlayerFBBIK.solver.rightArmChain.bendConstraint.weight =
        PlayerFBBIK.solver.leftArmChain.bendConstraint.weight = 1;
        //Reach 0
        PlayerFBBIK.solver.rightArmChain.reach =
        PlayerFBBIK.solver.leftArmChain.reach = 0;

        //Dummyハンド表示
        isDummyHandVis = true;
        Dummy_Hand.SetActive(true);



        //IKのONは智恵理のポーズ設定してからでないと何故かずれるので、後で

        #endregion

        #region 智恵理のポーズとIK 足位置一覧

        ChieriMotion("USBに手ポーズ", 0, 0);
        ChieriMotion("f_眉高い笑顔少しジト目", 0f, 2);

        yield return null;
        yield return null;
        //まず現在位置呼び出し
        GirlPosToIKTargetPosRot(); while (isGirlPosToIKTargetPosRotLoading) { yield return null; }


        //IKプレイヤー見る即
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);

        IKLookAtEyeTargetTrs.position = PlayerEyeTargetTrs.position;
        IKLookAtHeadTargetTrs.position = PlayerHeadTargetTrs.position;
        yield return null; yield return null;

        //IKプレイヤー見る値1に（スムーズにするため）
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);


        //IKBody傾け
        DOTweenToLAIKSBody(LAIKHeadS, 0.2f, 0);

        //上半身傾けに対応するために右手IK位置に固定 //もし不都合あったら、直接位置保存もしてあるのでそれを使う"_PosObj/0140AsiOyayubiZeme/IKRHand_010Hikidashi"
        IKRHandTargetTrs.position = Bip001_R_HandTrs.position;
        IKRHandTargetTrs.rotation = Bip001_R_HandTrs.rotation;
        DOTweenToIKEfPos(IKRHandEf, 1, 0);
        DOTweenToIKEfRot(IKRHandEf, 1, 0);

        //IK左手を下ろし位置に
        GameObject IKLHand_010Orosi
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/IKLHand_010Orosi") as GameObject;
        IKLHandTargetTrs.localPosition = IKLHand_010Orosi.transform.localPosition;
        IKLHandTargetTrs.localEulerAngles = IKLHand_010Orosi.transform.localEulerAngles;
        DOTweenToIKEfPos(IKLHandEf, 1, 0);
        DOTweenToIKEfRot(IKLHandEf, 1, 0);


        //右足踏みIK
        GameObject IKRFoot_010OsitukePosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/IKRFoot_010OsitukePosObj") as GameObject;

        IKRFootTargetTrs.localPosition = IKRFoot_010OsitukePosObj.transform.localPosition;
        IKRFootTargetTrs.localEulerAngles = IKRFoot_010OsitukePosObj.transform.localEulerAngles;
        DOTweenToIKEfPos(IKRFootEf, 1, 0);
        DOTweenToIKEfRot(IKRFootEf, 1, 0);

        //左足固定
        DOTweenToIKEfPos(IKLFootEf, 1, 0);

        //Chieriずらし
        DB.isChieriPosLock = false;
        GirlTrs.DOLocalMoveX(-0.07f, 0);


        //■足位置読み込み
        GameObject IKRFoot_020HikiPosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/IKRFoot_020HikiPosObj") as GameObject;
        GameObject IKRFoot_025HikiMorePosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/IKRFoot_025HikiMorePosObj") as GameObject;
        GameObject IKRFoot_030HikiAgePosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/IKRFoot_030HikiAgePosObj") as GameObject;
        GameObject IKRFoot_040HikiLittlePosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/IKRFoot_040HikiLittlePosObj") as GameObject;
        GameObject IKRFoot_050OsitukeMostPosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/IKRFoot_050OsitukeMostPosObj") as GameObject;
        GameObject IKRFoot_060HikiAgeMorePosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/IKRFoot_060HikiAgeMorePosObj") as GameObject;

        #endregion
        #region 智恵理右足先Rtoe4にサウンドオブジェ付与
        //WindnoiseSoundObj付与
        GameObject RFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRToe4Trs);
        DB.evMoveDelObjList.Add(RFootWindnoiseSoundObj);
        RFootWindnoiseSoundObj.name = nameof(RFootWindnoiseSoundObj);

        //つま先に
        GameObject tmpSoundObjPosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/SoundObj_PareRToe4PosObj") as GameObject;
        RFootWindnoiseSoundObj.transform.localPosition = tmpSoundObjPosObj.transform.localPosition;

        //設定
        WindnoiseSound tmpRFootWindnoiseSound = RFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpRFootWindnoiseSound.aSource.maxDistance = 11;
        tmpRFootWindnoiseSound.pitchMax = 0.4f;
        tmpRFootWindnoiseSound.pitchUpRateAdjustFloat = 14;
        tmpRFootWindnoiseSound.pitchDownRateAdjustFloat = 10;

        tmpRFootWindnoiseSound.aSource.volume = 0.35f;
        #endregion

        //プレイヤーのIKON（智恵理にペアレントするためか、智恵理のポーズ完了後でないとずれるのでここで）
        DOTweenToIKEfPos(PlayerIKLHandEf, 1, 0f);
        DOTweenToIKEfRot(PlayerIKLHandEf, 1, 0f);
        DOTweenToIKEfPos(PlayerIKRHandEf, 1, 0f);
        DOTweenToIKEfRot(PlayerIKRHandEf, 1, 0f);

        #region プレイヤー右手たたきTweener事前設定
        GameObject PlayerIKRHand020_PareRToe41_TatakiPosObj
            = Resources.Load("_PosObj/0140AsiOyayubiZeme/PlayerIKRHand020_PareRToe41_TatakiPosObj") as GameObject;

        Tweener playerRHandTatakiTweener =
            PlayerIKRHandTargetTrs.DOLocalMove(PlayerIKRHand020_PareRToe41_TatakiPosObj.transform.localPosition
            , 0.1f)
            .SetEase(Ease.OutQuad)
            .OnComplete(() =>
            {
                SEPlay(Other3DSEObj, "足音3_footsteps_shoe_grass_walk_05", PlayerIKRHandTargetTrs.gameObject, 0.5f);
                PlayerIKRHandTargetTrs.DOLocalMove(PlayerIKRHand010_PareRToe41PosObj.transform.localPosition
                    , 0.05f)
                    .SetEase(Ease.OutBounce);
            })
            .SetAutoKill(false);
        playerRHandTatakiTweener.Pause();
        #endregion

        //goto デバッグ移動;

        #region ■エクストラモード
        if (DB.isEXTRAEnter)
        {
            DB.isEXTRAEnter = false;//消し
            //開幕
            FadeBlack(0f, 4f);

            bool isPlayerHand = true;

            #region 事前動き
            ChieriMotion("RToe_つま先くにゅ1（無意識系）", 1, 13);
            SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発05", RFootWindnoiseSoundObj, 4, 0f);
            IKRFootTargetTrs.DOLocalMove(IKRFoot_040HikiLittlePosObj.transform.localPosition, 3);
            IKRFootTargetTrs.DOLocalRotate(IKRFoot_040HikiLittlePosObj.transform.localEulerAngles, 3);
            SEPlay(Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), GirlLFootTrs.gameObject, 1, 1.5f);

            SEPlay(SocksSEObj, "nuno_rustling-of-clothes1");
            IKRFootTargetTrs.DOLocalMove(IKRFoot_025HikiMorePosObj.transform.localPosition, 3);
            IKRFootTargetTrs.DOLocalRotate(IKRFoot_025HikiMorePosObj.transform.localEulerAngles, 3);
            //プレイヤーのIKON
            isPlayerHand = true;
            DOTweenToIKEfPos(PlayerIKLHandEf, 1, 4f);
            DOTweenToIKEfRot(PlayerIKLHandEf, 1, 4f);
            DOTweenToIKEfPos(PlayerIKRHandEf, 1, 1f);
            DOTweenToIKEfRot(PlayerIKRHandEf, 1, 1f);
            SEPlay(Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), GirlLFootTrs.gameObject, 1, 0.5f);
            #endregion

            GameObject AsioyayubizemeEXTRAText
                = Instantiate(Resources.Load("_PosObj/0140AsiOyayubiZeme/AsioyayubizemeEXTRAText") as GameObject
                , VRCameraTrs
                , false);
            DB.evMoveDelObjList.Add(AsioyayubizemeEXTRAText);



            while (true)
            {
                if (Input.GetKeyDown(KeyCode.G))
                {
                    //顔隠し位置
                    IKRFootTargetTrs.DOLocalMove(IKRFoot_010OsitukePosObj.transform.localPosition, 2);
                    IKRFootTargetTrs.DOLocalRotate(IKRFoot_010OsitukePosObj.transform.localEulerAngles, 2);
                    ChieriMotion("RToe_Def", 1, 13);
                    //プレイヤーのIKON
                    isPlayerHand = true;
                    DOTweenToIKEfPos(PlayerIKLHandEf, 1, 4f);
                    DOTweenToIKEfRot(PlayerIKLHandEf, 1, 4f);
                    DOTweenToIKEfPos(PlayerIKRHandEf, 1, 1f);
                    DOTweenToIKEfRot(PlayerIKRHandEf, 1, 1f);
                    SEPlay(Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), GirlLFootTrs.gameObject, 1, 0.5f);
                }
                if (Input.GetKeyDown(KeyCode.H))
                {
                    //ギリ顔見せ位置
                    IKRFootTargetTrs.DOLocalMove(IKRFoot_040HikiLittlePosObj.transform.localPosition, 2);
                    IKRFootTargetTrs.DOLocalRotate(IKRFoot_040HikiLittlePosObj.transform.localEulerAngles, 2);
                    ChieriMotion("RToe_Def", 1, 13);
                    //プレイヤーのIKON
                    isPlayerHand = true;
                    DOTweenToIKEfPos(PlayerIKLHandEf, 1, 4f);
                    DOTweenToIKEfRot(PlayerIKLHandEf, 1, 4f);
                    DOTweenToIKEfPos(PlayerIKRHandEf, 1, 1f);
                    DOTweenToIKEfRot(PlayerIKRHandEf, 1, 1f);
                    SEPlay(Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), GirlLFootTrs.gameObject, 1, 0.5f);
                }
                if (Input.GetKeyDown(KeyCode.J))
                {
                    //顔見せ位置
                    IKRFootTargetTrs.DOLocalMove(IKRFoot_020HikiPosObj.transform.localPosition, 2);
                    IKRFootTargetTrs.DOLocalRotate(IKRFoot_020HikiPosObj.transform.localEulerAngles, 2);
                    ChieriMotion("RToe_Def", 1, 13);
                    //プレイヤーのIKON
                    isPlayerHand = true;
                    DOTweenToIKEfPos(PlayerIKLHandEf, 1, 4f);
                    DOTweenToIKEfRot(PlayerIKLHandEf, 1, 4f);
                    DOTweenToIKEfPos(PlayerIKRHandEf, 1, 1f);
                    DOTweenToIKEfRot(PlayerIKRHandEf, 1, 1f);
                    SEPlay(Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), GirlLFootTrs.gameObject, 1, 0.5f);
                }
                if (Input.GetKeyDown(KeyCode.K))
                {
                    //引き下げ位置
                    IKRFootTargetTrs.DOLocalMove(IKRFoot_030HikiAgePosObj.transform.localPosition, 2);
                    IKRFootTargetTrs.DOLocalRotate(IKRFoot_030HikiAgePosObj.transform.localEulerAngles, 2);
                    ChieriMotion("RToe_引き親指下げ", 1, 13);
                    //プレイヤーのIK一旦OFF
                    isPlayerHand = false;
                    DOTweenToIKEfPos(PlayerIKLHandEf, 0, 4f);
                    DOTweenToIKEfRot(PlayerIKLHandEf, 0, 4f);
                    DOTweenToIKEfPos(PlayerIKRHandEf, 0, 1f);
                    DOTweenToIKEfRot(PlayerIKRHandEf, 0, 1f);
                    SEPlay(Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), GirlLFootTrs.gameObject, 1, 0.5f);
                }

                if (Input.GetKeyDown(KeyCode.V))
                {
                    ChieriMotion("RToe_Def", 1, 13);
                    SEPlay(SocksSEObj, FootStepSE(himoKishimiShortSEStrList), RFootWindnoiseSoundObj, 4, 0f);
                }
                if (Input.GetKeyDown(KeyCode.B))
                {
                    ChieriMotion("RToe_引き親指上げ", 1, 13);
                    SEPlay(SocksSEObj, FootStepSE(himoKishimiShortSEStrList), RFootWindnoiseSoundObj, 4, 0f);
                }
                if (Input.GetKeyDown(KeyCode.N))
                {
                    ChieriMotion("RToe_つま先くにゅ1（無意識系）", 1, 13);
                    SEPlay(SocksSEObj, FootStepSE(himoKishimiShortSEStrList), RFootWindnoiseSoundObj, 4, 0f);
                }
                if (Input.GetKeyDown(KeyCode.Tab))
                {
                    if (AsioyayubizemeEXTRAText.activeSelf)
                    { AsioyayubizemeEXTRAText.SetActive(false); }
                    else { AsioyayubizemeEXTRAText.SetActive(true); }
                }
                if (isKetteiDown)
                {
                    if (isPlayerHand) { playerRHandTatakiTweener.Restart(); }

                }

                yield return null;
            }
            yield break;
        }

        #endregion

        //開幕
        FadeBlack(0.5f, 4f);

        #region 2回目踏み付け開始まで
        ChieriMotion("RToe_つま先くにゅ1（無意識系）", 1, 13);

        HukidashiNovelDistanceChange(0.2f, 3);

        NovelSetVis("足指攻められ010");

        SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発05", RFootWindnoiseSoundObj, 4, 0f);
        IKRFootTargetTrs.DOLocalMove(IKRFoot_040HikiLittlePosObj.transform.localPosition, 3);
        IKRFootTargetTrs.DOLocalRotate(IKRFoot_040HikiLittlePosObj.transform.localEulerAngles, 3);
        SEPlay(Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), GirlLFootTrs.gameObject, 1, 1.5f);

        while (isNovelSetVisIng) { yield return null; }
        FadeBlack(0f, 2f);

        HukidashiNovelDistanceChange(0.3f, 3);

        SEPlay(SocksSEObj, "nuno_rustling-of-clothes1");
        IKRFootTargetTrs.DOLocalMove(IKRFoot_025HikiMorePosObj.transform.localPosition, 3);
        IKRFootTargetTrs.DOLocalRotate(IKRFoot_025HikiMorePosObj.transform.localEulerAngles, 3);

        yield return new WaitForSeconds(1);

        NovelSetVis("足指攻められ020");//同一と思えない
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);
        Hukidashi("足指攻め010");//聞こえないよ？
        ChieriMotion("f_笑顔01口眉下がり_目閉じない", 0.1f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        SEPlay(SocksSEObj, "nuno_rustling-of-clothes1");
        ChieriMotion("RToe_つま先くにゅ1（無意識系）", 1, 13);
        IKRFootTargetTrs.DOLocalMove(IKRFoot_010OsitukePosObj.transform.localPosition, 3);
        IKRFootTargetTrs.DOLocalRotate(IKRFoot_010OsitukePosObj.transform.localEulerAngles, 3);
        SEPlay(Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), GirlLFootTrs.gameObject, 1, 2);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(0.6f, "f_眉高い笑顔少しジト目", 0.2f, 2);//時間差表情戻し

        yield return new WaitForSeconds(1);
        HukidashiNovelDistanceChange(0.2f, 3);
        NovelSetVis("足指攻められ030");//や、やめ・・！

        SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発01", RFootWindnoiseSoundObj, 1, 0f);
        yield return new WaitForSeconds(2);
        isNovelFadeTween = isNovelSetVisIng = false;

        FadeBlack(1f, 1f);
        HukidashiNovelDistanceChange(0.6f, 3);
        yield return new WaitForSeconds(2);
        SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発03", RFootWindnoiseSoundObj, 1, 0f);
        //if (DB.isUserClothsBarefoot) { NovelSetVis("足指攻められ040Barefoot"); }//素足版
        //else { NovelSetVis("足指攻められ040"); }//呼吸できない
        if (DB.intCurrentShoes == 1) { NovelSetVis("足指攻められ040Barefoot"); }//素足版
        else { NovelSetVis("足指攻められ040"); }//呼吸できない

        ChieriMotion("RToe_つま先くにゅ1（無意識系）", 1, 13);
        FadeBlack(0.9f, 1f); yield return new WaitForSeconds(1f);
        FadeBlack(1f, 1f);

        while (novelCurrentPageInt < 3) { yield return null; }
        SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発06_短", RFootWindnoiseSoundObj, 1, 0f);
        FadeBlack(0.9f, 1f); yield return new WaitForSeconds(1f);
        FadeBlack(1f, 0.5f);

        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1f);

        //■親指上げ
        HukidashiNovelDistanceChange(0.3f, 3);

        FadeBlack(0.3f, 3f);
        SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発01_短", RFootWindnoiseSoundObj, 1, 0f);
        SEPlay(Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), GirlLFootTrs.gameObject, 1, 1.5f);
        ChieriMotion("RToe_引き親指上げ", 1, 13);
        yield return new WaitForSeconds(2);

        NovelSetVis("足指攻められ050");//明かり
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);

        //たたき
        playerRHandTatakiTweener.Restart();
        yield return new WaitForSeconds(0.4f);
        playerRHandTatakiTweener.Restart();

        NovelSetVis("足指攻められ060");//ギブアップ・・！
        while (novelCurrentPageInt < 2) { yield return null; }

        //たたき
        playerRHandTatakiTweener.Restart();
        yield return new WaitForSeconds(0.3f);
        playerRHandTatakiTweener.Restart();

        while (isNovelSetVisIng) { yield return null; }

        playerRHandTatakiTweener.Restart();
        ChieriMotion("RToe_引き親指上げくねくね", 1, 13);
        SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発01_短", RFootWindnoiseSoundObj, 4, 0f);
        SEPlay(Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), GirlLFootTrs.gameObject, 1, 1.5f);
        Hukidashi("足指攻め020");//くすぐったい
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("足指攻められ070");//貧弱さを感じるだけ
        while (isNovelSetVisIng) { yield return null; }

        playerRHandTatakiTweener.Restart();
        //if (DB.isUserClothsBarefoot) { NovelSetVis("足指攻められ080Barefoot"); }//素足版
        //else { NovelSetVis("足指攻められ080"); }//ちがう！　ほんとに苦しいんだって・・・！
        if (DB.intCurrentShoes == 1) { NovelSetVis("足指攻められ080Barefoot"); }//素足版
        else { NovelSetVis("足指攻められ080"); }//ちがう！　ほんとに苦しいんだって・・・！


        while (novelCurrentPageInt < 2) { yield return null; }
        playerRHandTatakiTweener.Restart();
        yield return new WaitForSeconds(0.5f);
        playerRHandTatakiTweener.Restart();

        Hukidashi("足指攻め030");//まだまだ元気？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("足指攻め040");//なら今度は

        NovelSetVis("足指攻められ090");//ああ・・あああ
        yield return new WaitForSeconds(2);

        while (isNovelSetVisIng) { yield return null; }
        ChieriMotion("RToe_つま先くにゅ1（無意識系）", 1, 13);

        playerRHandTatakiTweener.Restart();
        yield return new WaitForSeconds(0.3f);
        playerRHandTatakiTweener.Restart();
        yield return new WaitForSeconds(0.4f);
        playerRHandTatakiTweener.Restart();
        yield return new WaitForSeconds(0.3f);
        playerRHandTatakiTweener.Restart();

        IKRFootTargetTrs.DOLocalMove(IKRFoot_050OsitukeMostPosObj.transform.localPosition, 3);
        IKRFootTargetTrs.DOLocalRotate(IKRFoot_050OsitukeMostPosObj.transform.localEulerAngles, 3);
        SEPlay(SocksSEObj, "nuno_rustling-of-clothes1");
        SEPlay(Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), GirlLFootTrs.gameObject, 1, 1.5f);

        yield return new WaitForSeconds(1);
        SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発03", RFootWindnoiseSoundObj, 1, 0f);
        SEPlay(Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), GirlRFootTrs.gameObject, 1, 1.5f);
        yield return new WaitForSeconds(1);

        FadeBlack(1, 1);
        #endregion

        デバッグ移動:
        #region 三回戦 失神直前まで
        Hukidashi("足指攻め050");//ほら、ぎゅ～
        ChieriMotion("RToe_つま先くにゅ1（無意識系）", 1, 13);
        SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発08", RFootWindnoiseSoundObj, 4, 0f);

        yield return new WaitForSeconds(1);
        NovelSetVis("足指攻められ100");//!!!
        while (novelCurrentPageInt < 2) { yield return null; }
        SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発09", RFootWindnoiseSoundObj, 4, 0f);
        SEPlay(Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), GirlRFootTrs.gameObject, 1, 1.5f);
        //白フラッシュ
        FadeWhite(0.2f, 0.05f); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);
        yield return new WaitForSeconds(0.5f);
        FadeWhite(0.3f, 0.05f); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);

        while (novelCurrentPageInt < 5) { yield return null; }
        SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発10", RFootWindnoiseSoundObj, 4, 0f);
        SEPlay(Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), GirlLFootTrs.gameObject, 1, 1.5f);




        while (isNovelSetVisIng) { yield return null; }



        //IK外し
        PlayerIKRHandTargetTrs.SetParent(PlayerIKTargetsTrs);
        PlayerIKLHandTargetTrs.SetParent(PlayerIKTargetsTrs);

        Hukidashi("足指攻め060");//コロコロしてる
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        FadeBlack(0f, 2);

        #region トラッキングオン
        InputTracking.disablePositionalTracking = false;
        if (XRSettings.enabled)//VRポジションリセット
        {
            //CameraReset(null, null, true);
            yield return null;
            VRUICameraTrs.localPosition = Vector3.zero;
            VRCameraTrs.localPosition = Vector3.zero;
        }
        #endregion

        //足引き
        IKRFootTargetTrs.DOLocalMove(IKRFoot_030HikiAgePosObj.transform.localPosition, 3);
        IKRFootTargetTrs.DOLocalRotate(IKRFoot_030HikiAgePosObj.transform.localEulerAngles, 3);
        SEPlay(SocksSEObj, "nuno_rustling-of-clothes1");
        SEPlay(Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), GirlLFootTrs.gameObject, 1, 1.5f);

        ChieriMotion("RToe_引き親指下げ", 1, 13);
        Hukidashi("足指攻め070");//はい休憩～
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(2f, "笑顔01口眉_目閉じない", 0.2f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1);
        //プレイヤーのIK一旦OFF（ペアレントするために）
        DOTweenToIKEfPos(PlayerIKLHandEf, 0, 4f);
        DOTweenToIKEfRot(PlayerIKLHandEf, 0, 4f);
        DOTweenToIKEfPos(PlayerIKRHandEf, 0, 4f);
        DOTweenToIKEfRot(PlayerIKRHandEf, 0, 4f);
        yield return KeyOrWait(3);

        NovelSetVis("足指攻められ110");//伝えないと……！
        while (isNovelSetVisIng) { yield return null; }

        //足更に上げ
        IKRFootTargetTrs.DOLocalMove(IKRFoot_060HikiAgeMorePosObj.transform.localPosition, 3);
        IKRFootTargetTrs.DOLocalRotate(IKRFoot_060HikiAgeMorePosObj.transform.localEulerAngles, 3);

        ChieriMotion("RToe_つま先ピクピク", 1, 13);
        SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発04_短", RFootWindnoiseSoundObj, 4, 0f);
        SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発05_短", RFootWindnoiseSoundObj, 4, 1f);
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.2f, 2);//時間差表情戻し
        Hukidashi("足指攻め080");//恐くなってきた？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("f_眉高い笑顔少しジト目", 0.1f, 2);
        ChieriMotion("RToe_つま先くにゅ1（無意識系）", 1, 13);
        SEPlay(Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), GirlLFootTrs.gameObject, 1, 1.5f);
        Hukidashi("足指攻め090");//降りると危ないんだよ？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //カメラ揺れ
        CameraAnchorTrs.DOShakePosition(0.5f, 0.06f);

        NovelSetVis("足指攻められ120");//ぶはぁっ！
        while (isNovelSetVisIng) { yield return null; }

        #region プレイヤーIK足指にペアレント
        //左手 人差し指に
        PlayerIKLHandTargetTrs.SetParent(GirlRToe31Trs);
        //右手 親指に
        PlayerIKRHandTargetTrs.SetParent(GirlRToe41Trs);

        yield return null;

        PlayerIKLHandTargetTrs.localPosition = PlayerIKLHand010_PareRToe31PosObj.transform.localPosition;
        PlayerIKLHandTargetTrs.localEulerAngles = PlayerIKLHand010_PareRToe31PosObj.transform.localEulerAngles;

        PlayerIKRHandTargetTrs.localPosition = PlayerIKRHand010_PareRToe41PosObj.transform.localPosition;
        PlayerIKRHandTargetTrs.localEulerAngles = PlayerIKRHand010_PareRToe41PosObj.transform.localEulerAngles;

        #endregion

        ChieriMotion("f_眉高い笑顔少しジト目", 0.1f, 2);

        //足少し顔見せ
        IKRFootTargetTrs.DOLocalMove(IKRFoot_040HikiLittlePosObj.transform.localPosition, 3);
        IKRFootTargetTrs.DOLocalRotate(IKRFoot_040HikiLittlePosObj.transform.localEulerAngles, 3);
        SEPlay(Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), GirlLFootTrs.gameObject, 1, 1.5f);


        Hukidashi("足指攻め100");//元気？
        ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);


        ChieriMotion("RToe_つま先くにゅ1（無意識系）", 1, 13);
        yield return new WaitForSeconds(1);
        //プレイヤーのIKON（ペアレント位置調整してある）
        DOTweenToIKEfPos(PlayerIKLHandEf, 1, 2f);
        DOTweenToIKEfRot(PlayerIKLHandEf, 1, 2f);
        DOTweenToIKEfPos(PlayerIKRHandEf, 1, 2f);
        DOTweenToIKEfRot(PlayerIKRHandEf, 1, 2f);
        yield return KeyOrWait(3);


        NovelSetVis("足指攻められ130");//いやだ・・・もう・・・！
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("足指攻め110");//三回戦～
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.2f, 2);//時間差表情戻し

        //足押し付け位置
        IKRFootTargetTrs.DOLocalMove(IKRFoot_050OsitukeMostPosObj.transform.localPosition, 3);
        IKRFootTargetTrs.DOLocalRotate(IKRFoot_050OsitukeMostPosObj.transform.localEulerAngles, 3);
        ChieriMotion("RToe_つま先くにゅ1（無意識系）", 1, 13);
        yield return new WaitForSeconds(2);




        SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発08", RFootWindnoiseSoundObj, 4, 0f);
        SEPlay(Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), GirlLFootTrs.gameObject, 1, 1.5f);
        SEPlay(Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), GirlRFootTrs.gameObject, 1, 1.5f);
        Hukidashi("足指攻め120");//はいぎゅー
        FadeBlack(1f, 2);
        yield return new WaitForSeconds(1);

        #region トラッキングリセットしてオフ
        InputTracking.disablePositionalTracking = true;
        if (XRSettings.enabled)//VRポジションリセット
        {
            //CameraReset(null, null, true);
            yield return null;
            VRUICameraTrs.localPosition = Vector3.zero;
            VRCameraTrs.localPosition = Vector3.zero;
        }
        #endregion

        SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発11", RFootWindnoiseSoundObj, 4, 0f);

        NovelSetVis("足指攻められ140");//どうしてこんな目に

        while (novelCurrentPageInt < 5) { yield return null; }
        Hukidashi("足指攻め130");//潰れちゃうかな

        while (novelCurrentPageInt < 9) { yield return null; }

        SEPlay(SocksSEObj, "紐・ロープ・引っ張る・きしむ02_単発09", RFootWindnoiseSoundObj, 4, 0f);
        SEPlay(Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), GirlRFootTrs.gameObject, 1, 1.5f);
        //白フラッシュ
        FadeWhite(0.2f, 0.05f); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);
        yield return new WaitForSeconds(0.5f);
        FadeWhite(0.3f, 0.05f); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(2);

        NovelSetVis("足指攻められ150");//失神の気配
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(2);
        Hukidashi("足指攻め140");//動かなくなっちゃった
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        #endregion

        //Dummyハンド非表示
        isDummyHandVis = false;
        if (tPSModeInt == 0) { Dummy_Hand.SetActive(false); }

        FadeBlack(0.9f, 16);

        ChieriMotion("RToe_引き親指上げ", 1, 13);
        //足少し顔見せ
        IKRFootTargetTrs.DOLocalMove(IKRFoot_040HikiLittlePosObj.transform.localPosition, 3);
        IKRFootTargetTrs.DOLocalRotate(IKRFoot_040HikiLittlePosObj.transform.localEulerAngles, 3);
        SEPlay(SocksSEObj, "nuno_rustling-of-clothes1");
        SEPlay(Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), GirlLFootTrs.gameObject, 1, 1.5f);
        yield return new WaitForSeconds(1);

        //プレイヤーのIK微OFF
        DOTweenToIKEfPos(PlayerIKLHandEf, 0.2f, 4f);
        DOTweenToIKEfRot(PlayerIKLHandEf, 0.2f, 4f);
        DOTweenToIKEfPos(PlayerIKRHandEf, 0.2f, 4f);
        DOTweenToIKEfRot(PlayerIKRHandEf, 0.2f, 4f);


        yield return new WaitForSeconds(1);
        Hukidashi("足指攻め150");//ん～
        yield return new WaitForSeconds(1);
        ChieriMotion("RToe_引き親指上げくねくね", 1, 13);
        yield return KeyOrWait(3);

        //IK外し
        PlayerIKRHandTargetTrs.SetParent(PlayerIKTargetsTrs);
        PlayerIKLHandTargetTrs.SetParent(PlayerIKTargetsTrs);

        Hukidashi("足指攻め160");//お仕置きはこれくらいでいっか
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        ChieriMotion("RToe_つま先くにゅ1（無意識系）", 1, 13);

        //Chieriずらしを戻し
        GirlTrs.DOLocalMoveX(0, 5);
        yield return new WaitForSeconds(1);
        DOTweenToIKEfPos(IKRFootEf, 0, 4);
        DOTweenToIKEfRot(IKRFootEf, 0, 4);
        SEPlay(Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), GirlLFootTrs.gameObject, 1, 1.5f);
        yield return new WaitForSeconds(2);
        NovelSetVis("足指攻められ160");//おし・・おき・・
        yield return new WaitForSeconds(2);

        //左足固定外し
        DOTweenToIKEfPos(IKLFootEf, 0, 1);
        //DOTweenToIKEfRot(IKRFootEf, 1, 3);


        #region じゃあ机に運んであげるね（黒フェード）
        //暗幕
        FadeBlack(1, 4);
        yield return new WaitForSeconds(1);

        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        Hukidashi("ケーブル発見弄り600"); //じゃあ机に運んであげるね

        yield return new WaitForSeconds(2);

        #endregion
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);
        NovelSetVis("USBケーブル降り中見つかり400");//智恵理はマコトを運んだ
        while (isNovelSetVisIng) { yield return null; }

        FadeBlack(1, 2);
        yield return new WaitForSeconds(2);
        EventMove("帰ろうとしてた？", true);

        yield break;
    }

    IEnumerator D2150()//ドアが開いたら
    {
        if (debugEventMoveFlag == true)
        {
            #region 大きさや位置
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;

            #region 小物
            //小物消し
            Drill_chieriTrs.gameObject.SetActive(false);
            DrillTrs.gameObject.SetActive(false);
            KeshigomuObj.SetActive(true);
            SharpenObj.SetActive(true);

            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;
            #endregion
            #endregion
        }
        EventReset();

        //環境音フェード
        KankyouBGMVolumer(0.5f, 5);

        NovelSetVis("T_Door_開けた隙に出る？a2");//イメージトレーニング覚悟を決める

        float tmpFadeTime = 1.5f;
        #region 暗幕 設定 開幕

        //暗幕
        FadeBlack(1, tmpFadeTime);
        yield return new WaitForSeconds(tmpFadeTime);

        //智恵理0位置ロック解除
        DB.isChieriPosLock = false;
        //智恵理OFF
        GirlMeshTrs.gameObject.SetActive(false);

        //智恵理スマホ
        ChieriSumahoObj.SetActive(true);
        ChieriSumahoObj.transform.SetParent(GameObjectsTrs, false);//智恵理の手から外して

        GameObject ChieriSumaho010_HikidashiUePosObj
            = Resources.Load("_PosObj/13Tansaku00/ChieriSumaho010_HikidashiUePosObj") as GameObject;

        ChieriSumahoObj.transform.localPosition = ChieriSumaho010_HikidashiUePosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho010_HikidashiUePosObj.transform.localEulerAngles;

        #region ■PosObjで読み込み

        //プレイヤー ドア前位置に
        GameObject Player_03_DoorMaeSurinukePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Player_03_DoorMaeSurinukePosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_03_DoorMaeSurinukePosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_03_DoorMaeSurinukePosObj.transform.localEulerAngles;
        //CameraAnchorTrs.localEulerAngles = Vector3.zero;
        //カメラリセット値変更してリセット
        CameraReset(Player_03_DoorMaeSurinukePosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos);//Anchorを立ちに


        //智恵理階段あたりに設置
        GameObject Chieri_01_DoorMaeSurinukeFootStepSEPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_01_DoorMaeSurinukeFootStepSEPosObj") as GameObject;
        GirlTrs.localPosition = Chieri_01_DoorMaeSurinukeFootStepSEPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri_01_DoorMaeSurinukeFootStepSEPosObj.transform.localEulerAngles;


        //WindnoiseSoundObj付与（ドア左隅）
        GameObject DoorWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , DoorTrs);
        DB.evMoveDelObjList.Add(DoorWindnoiseSoundObj);

        DoorWindnoiseSoundObj.GetComponent<AudioSource>().mute = true;//設置時に音鳴るので一時ミュート
                                                                      //SoundObjのPos
        GameObject SoundObj_01_DoorSurinuke_DoorParentPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_01_DoorSurinuke_DoorParentPosObj") as GameObject;
        DoorWindnoiseSoundObj.transform.localPosition = SoundObj_01_DoorSurinuke_DoorParentPosObj.transform.localPosition;

        //WindnoiseSoundObj付与（左足）
        GameObject LFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlLFootTrs);
        DB.evMoveDelObjList.Add(LFootWindnoiseSoundObj);

        LFootWindnoiseSoundObj.GetComponent<AudioSource>().mute = true;//設置時に音鳴るので一時ミュート
                                                                       //SoundObjのPos
        GameObject SoundObj_02_DoorSurinuke_LFootParentPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_02_DoorSurinuke_LFootParentPosObj") as GameObject;
        LFootWindnoiseSoundObj.transform.localPosition = SoundObj_02_DoorSurinuke_LFootParentPosObj.transform.localPosition;

        //WindnoiseSoundObj付与（右足）
        GameObject RfootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRFootTrs);
        DB.evMoveDelObjList.Add(RfootWindnoiseSoundObj);

        RfootWindnoiseSoundObj.GetComponent<AudioSource>().mute = true;//設置時に音鳴るので一時ミュート
                                                                       //SoundObjのPos
        GameObject SoundObj_03_DoorSurinuke_RFootParentPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_03_DoorSurinuke_RFootParentPosObj") as GameObject;
        RfootWindnoiseSoundObj.transform.localPosition = SoundObj_03_DoorSurinuke_RFootParentPosObj.transform.localPosition;

        #endregion


        while (isNovelSetVisIng) { yield return null; }

        //開幕
        FadeBlack(0, tmpFadeTime);
        yield return new WaitForSeconds(tmpFadeTime);
        #endregion

        NovelSetVis("T_Door_開けた隙に出る？a3");//足音近づき

        #region //以前のカメラシェイクと智恵理位置移動
        //newCameraShakeLoopCorShakePowerV3 = new Vector3(0, 0.001f, 0);
        //newCameraShakeLoopCorShakeTime = 0.5f;
        //newCameraShakeLoopCorSEString = "testFootStep01";
        //newCameraShakeLoopCorSEObj = GirlRFootTrs.gameObject;
        //StartCoroutine(NewCameraShakeLoopCor(1.7f, Mathf.Infinity));

        ////智恵理位置設定
        //while (novelCurrentPageInt < 2) { yield return null; }
        //GameObject Chieri_02_DoorMaeSurinukeFootStepSEPosObj
        //    = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_02_DoorMaeSurinukeFootStepSEPosObj") as GameObject;
        //GirlTrs.localPosition = Chieri_02_DoorMaeSurinukeFootStepSEPosObj.transform.localPosition;
        //GirlTrs.localEulerAngles = Chieri_02_DoorMaeSurinukeFootStepSEPosObj.transform.localEulerAngles;

        //while (novelCurrentPageInt < 4) { yield return null; }
        //GameObject Chieri_03_DoorMaeSurinukeFootStepSEPosObj
        //    = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_03_DoorMaeSurinukeFootStepSEPosObj") as GameObject;
        //GirlTrs.localPosition = Chieri_03_DoorMaeSurinukeFootStepSEPosObj.transform.localPosition;
        //GirlTrs.localEulerAngles = Chieri_03_DoorMaeSurinukeFootStepSEPosObj.transform.localEulerAngles;

        ////揺れ設定 智恵理位置設定
        //while (novelCurrentPageInt < 6) { yield return null; }
        //newCameraShakeLoopCorShakePowerV3 = new Vector3(0, 0.01f, 0);
        //newCameraShakeLoopCorShakeTime = 0.5f;
        //newCameraShakeLoopCorSEString = "testFootStep02";

        //GameObject Chieri_04_DoorMaeSurinukeFootStepSEPosObj
        //    = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_04_DoorMaeSurinukeFootStepSEPosObj") as GameObject;
        //GirlTrs.localPosition = Chieri_04_DoorMaeSurinukeFootStepSEPosObj.transform.localPosition;
        //GirlTrs.localEulerAngles = Chieri_04_DoorMaeSurinukeFootStepSEPosObj.transform.localEulerAngles;


        ////揺れ設定 智恵理位置設定
        //while (novelCurrentPageInt < 8) { yield return null; }
        //newCameraShakeLoopCorShakePowerV3 = new Vector3(0, 0.1f, 0);
        //newCameraShakeLoopCorShakeTime = 0.5f;
        //newCameraShakeLoopCorSEString = "testFootStep03";

        //GameObject Chieri_05_DoorMaeSurinukeFootStepSEPosObj
        //    = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_05_DoorMaeSurinukeFootStepSEPosObj") as GameObject;
        //GirlTrs.localPosition = Chieri_05_DoorMaeSurinukeFootStepSEPosObj.transform.localPosition;
        //GirlTrs.localEulerAngles = Chieri_05_DoorMaeSurinukeFootStepSEPosObj.transform.localEulerAngles;


        ////揺れ設定 智恵理位置設定
        //while (novelCurrentPageInt < 10) { yield return null; }
        //newCameraShakeLoopCorShakePowerV3 = new Vector3(0, 0.2f, 0);
        //newCameraShakeLoopCorShakeTime = 0.5f;
        //newCameraShakeLoopCorSEString = "testFootStep04";

        //GameObject Chieri_06_DoorMaeSurinukeFootStepSEPosObj
        //    = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_06_DoorMaeSurinukeFootStepSEPosObj") as GameObject;
        //GirlTrs.localPosition = Chieri_06_DoorMaeSurinukeFootStepSEPosObj.transform.localPosition;
        //GirlTrs.localEulerAngles = Chieri_06_DoorMaeSurinukeFootStepSEPosObj.transform.localEulerAngles;

        ////揺れ設定 智恵理位置設定
        //while (novelCurrentPageInt < 11) { yield return null; }
        //GameObject Chieri_07_DoorMaeSurinukeFootStepSEPosObj
        //    = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_07_DoorMaeSurinukeFootStepSEPosObj") as GameObject;
        //GirlTrs.localPosition = Chieri_07_DoorMaeSurinukeFootStepSEPosObj.transform.localPosition;
        //GirlTrs.localEulerAngles = Chieri_07_DoorMaeSurinukeFootStepSEPosObj.transform.localEulerAngles;

        #endregion

        #region AnimTrigger強制ループ再生と智恵理位置移動テスト
        StartCoroutine(ActionLoopSystemCor(
            () => { isAnimTriggerRForcePlay = true; }
            , 1.7f
            , Mathf.Infinity));


        //足音と揺れ調整
        //audioMixer.SetFloat("AsiotoVol", 25);
        footHighVolMul = 1;//元3

        footYurePowMul = 0.5f;


        while (novelCurrentPageInt < 3) { yield return null; }
        //智恵理位置設定
        GameObject Chieri_02_DoorMaeSurinukeFootStepSEPosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_02_DoorMaeSurinukeFootStepSEPosObj") as GameObject;
        GirlTrs.localPosition = Chieri_02_DoorMaeSurinukeFootStepSEPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri_02_DoorMaeSurinukeFootStepSEPosObj.transform.localEulerAngles;


        while (novelCurrentPageInt < 5) { yield return null; }
        GameObject Chieri_03_DoorMaeSurinukeFootStepSEPosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_03_DoorMaeSurinukeFootStepSEPosObj") as GameObject;
        GirlTrs.localPosition = Chieri_03_DoorMaeSurinukeFootStepSEPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri_03_DoorMaeSurinukeFootStepSEPosObj.transform.localEulerAngles;


        while (novelCurrentPageInt < 6) { yield return null; }
        GameObject Chieri_04_DoorMaeSurinukeFootStepSEPosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_04_DoorMaeSurinukeFootStepSEPosObj") as GameObject;
        GirlTrs.localPosition = Chieri_04_DoorMaeSurinukeFootStepSEPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri_04_DoorMaeSurinukeFootStepSEPosObj.transform.localEulerAngles;

        //環境音フェード
        KankyouBGMVolumer(0.3f, 2);


        while (novelCurrentPageInt < 8) { yield return null; }
        GameObject Chieri_05_DoorMaeSurinukeFootStepSEPosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_05_DoorMaeSurinukeFootStepSEPosObj") as GameObject;
        GirlTrs.localPosition = Chieri_05_DoorMaeSurinukeFootStepSEPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri_05_DoorMaeSurinukeFootStepSEPosObj.transform.localEulerAngles;

        //環境音フェード
        KankyouBGMVolumer(0.1f, 2);


        while (novelCurrentPageInt < 11) { yield return null; }
        GameObject Chieri_06_DoorMaeSurinukeFootStepSEPosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_06_DoorMaeSurinukeFootStepSEPosObj") as GameObject;
        GirlTrs.localPosition = Chieri_06_DoorMaeSurinukeFootStepSEPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri_06_DoorMaeSurinukeFootStepSEPosObj.transform.localEulerAngles;

        //環境音フェード
        KankyouBGMVolumer(0f, 2);

        while (novelCurrentPageInt < 13) { yield return null; }
        GameObject Chieri_07_DoorMaeSurinukeFootStepSEPosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_07_DoorMaeSurinukeFootStepSEPosObj") as GameObject;
        GirlTrs.localPosition = Chieri_07_DoorMaeSurinukeFootStepSEPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri_07_DoorMaeSurinukeFootStepSEPosObj.transform.localEulerAngles;

        footYurePowMul = 0.17f;

        #endregion

        while (isNovelSetVisIng) { yield return null; }

        #region ■智恵理入室

        デバッグスキップ:

        ////■隠れ鬼移動システムON
        //KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
        ////ローディング待ち
        //while (isKOSystemLoading) { yield return null; }
        ////移動場所02オン
        //KO_KakurePosObjsList[2].SetActive(true);

        //智恵理0位置ロック
        DB.isChieriPosLock = true;
        //アニメスピード
        girlAnim.speed =
        doorAnim.speed =
        chairAnim.speed = 0.4f;

        //ドアミュート解除
        DoorWindnoiseSoundObj.GetComponent<AudioSource>().mute = false;

        //カメラシェイクストップ
        isActionLoopSystem = false;

        //■PosObjで読み込み
        //プレイヤー ドア前位置に
        CameraObjectsTrs.localPosition = Player_03_DoorMaeSurinukePosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_03_DoorMaeSurinukePosObj.transform.localEulerAngles;
        //CameraAnchorTrs.localEulerAngles = Vector3.zero;

        //アニメ
        ChieriMotion("ドア入室", 0f, 0);
        doorAnim.CrossFadeInFixedTime("ドア開き閉じ", 0f, 0);
        //アニメ反映は1フレーム後
        yield return null;

        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);

        ////IKプレイヤー見る
        //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
        //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        //■ドア開いて風状態まで待機
        StartCoroutine(GirlAnimReadSystem());
        //while (girlAnimNomTime <= 0.085f)
        while (girlAnimNomTime <= 0.1f)
        { if (DB.isDebugMode && Input.GetKeyDown(KeyCode.G)) { goto デバッグスキップ; } yield return null; }
        isGirlAnimReadSystem = false;

        //足ミュート解除
        LFootWindnoiseSoundObj.GetComponent<AudioSource>().mute =
        RfootWindnoiseSoundObj.GetComponent<AudioSource>().mute = false;

        //吸い込まれ埃パーティクル
        GameObject Particle_WindDust01_Suikomare = Instantiate(Resources.Load("Main/Prefab/Particle/Particle_WindDust01_Suikomare") as GameObject
            , GameObjectsTrs
            , false);

        //プレイヤー ドア吸い込まれ位置読み込み
        GameObject PlayerTween_01_DoorMaeSurinuke01PosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/PlayerTween_01_DoorMaeSurinuke01PosObj") as GameObject;
        CameraObjectsTrs.DOLocalMoveX(PlayerTween_01_DoorMaeSurinuke01PosObj.transform.localPosition.x
            , 2);
        CameraObjectsTrs.DOLocalMoveZ(PlayerTween_01_DoorMaeSurinuke01PosObj.transform.localPosition.z
            , 2);
        //回転
        CameraObjectsTrs.DOLocalRotateQuaternion(PlayerTween_01_DoorMaeSurinuke01PosObj.transform.localRotation
            , 1f)
            .SetEase(Ease.InOutCirc);
        //浮き上がり
        float preLocalY = CameraObjectsTrs.localPosition.y;
        CameraObjectsTrs.DOLocalMoveY
            (preLocalY + 0.025f
            , 0.5f)
            .SetEase(Ease.InOutSine)
            .OnComplete(() =>
            {
                //元の高さに着地
                CameraObjectsTrs.DOLocalMoveY
            (preLocalY
            , 1.5f)
            .SetEase(Ease.OutBounce);
            });

        //■頭上右足通過状態まで待機
        StartCoroutine(GirlAnimReadSystem());
        //while (girlAnimNomTime <= 0.25f)
        while (girlAnimNomTime <= 0.28f)
        { yield return null; }
        isGirlAnimReadSystem = false;


        //足巻きこまれ埃パーティクル
        GameObject Particle_WindDust02_AsiMakikomare = Instantiate(Resources.Load("Main/Prefab/Particle/Particle_WindDust02_AsiMakikomare") as GameObject
            , GameObjectsTrs
            , false);

        //プレイヤー 右足吹き飛ばされ位置読み込み
        GameObject PlayerTween_02_DoorMaeSurinuke02PosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/PlayerTween_02_DoorMaeSurinuke02PosObj") as GameObject;
        CameraObjectsTrs.DOLocalMoveX(PlayerTween_02_DoorMaeSurinuke02PosObj.transform.localPosition.x
            , 2.5f);
        CameraObjectsTrs.DOLocalMoveZ(PlayerTween_02_DoorMaeSurinuke02PosObj.transform.localPosition.z
            , 2.5f);
        //CameraObjectsTrs.DOLocalRotateQuaternion(PlayerTween_02_DoorMaeSurinuke02PosObj.transform.localRotation
        //    , 1f);

        //浮き上がり
        preLocalY = CameraObjectsTrs.localPosition.y;
        CameraObjectsTrs.DOLocalMoveY
            (preLocalY + 0.025f
            , 1f)
            .SetEase(Ease.InOutSine)
            .OnComplete(() =>
            {
                //元の高さに着地
                CameraObjectsTrs.DOLocalMoveY
            (preLocalY
            , 1.5f)
            .SetEase(Ease.OutBounce);
            });




        //■ほこり出しタイミングまで待機
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 0.5f)
        { yield return null; }

        //噴出し埃パーティクル
        GameObject Particle_WindDust03_Hukidashi = Instantiate(Resources.Load("Main/Prefab/Particle/Particle_WindDust03_Hukidashi") as GameObject
            , GameObjectsTrs
            , false);

        //■ドア閉まる直前状態まで待機
        while (girlAnimNomTime <= 0.67f)
        { yield return null; }
        isGirlAnimReadSystem = false;

        //■■ドアの外まで行けていればクリア
        //■吹き飛ばされて隠れるルート
        if (EnumRouka02_ClearLine == enumRouka02_ClearLine.範囲外)
        {

            //プレイヤー ドア吹き飛ばされ位置読み込み
            GameObject PlayerTween_03_DoorMaeSurinuke03PosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/PlayerTween_03_DoorMaeSurinuke03PosObj") as GameObject;
            CameraObjectsTrs.DOLocalMoveX(PlayerTween_03_DoorMaeSurinuke03PosObj.transform.localPosition.x
                , 2);
            CameraObjectsTrs.DOLocalMoveZ(PlayerTween_03_DoorMaeSurinuke03PosObj.transform.localPosition.z
                , 2);
            //CameraObjectsTrs.DOLocalRotateQuaternion(PlayerTween_03_DoorMaeSurinuke03PosObj.transform.localRotation
            //    , 1f);
            //浮き上がり
            preLocalY = CameraObjectsTrs.localPosition.y;
            CameraObjectsTrs.DOLocalMoveY
                (preLocalY + 0.025f
                , 0.5f)
                .SetEase(Ease.InOutSine)
                .OnComplete(() =>
                {
                    //元の高さに着地
                    CameraObjectsTrs.DOLocalMoveY
                    (preLocalY
                    , 1.5f)
                    .SetEase(Ease.OutBounce)
                    .OnComplete(() =>
                    { isKOSystem = false; });

                });

            //■ポーズ状態まで待ち
            StartCoroutine(GirlAnimReadSystem());
            while (girlAnimNomTime <= 0.9f)
            { yield return null; }
            isGirlAnimReadSystem = false;

            Destroy(Particle_WindDust03_Hukidashi);
            Destroy(Particle_WindDust02_AsiMakikomare);
            Destroy(Particle_WindDust01_Suikomare);



            #endregion

            #region ■出るか隠れるか、それとも外に出れたか
            sentakuListNum = 99;//初期化
            NovelSetVis("■T_Door_出られなかった010");

            while (novelCurrentPageInt < 3) { yield return null; }

            #region //デバッグアニメトリガー強制単発再生

            //while (true)
            //{
            //    if (Input.GetKeyDown(KeyCode.F))
            //    {
            //        isAnimTriggerRForcePlay = true;
            //    }
            //    if (Input.GetKeyDown(KeyCode.G))
            //    {
            //        isAnimTriggerLForcePlay = true;
            //    }
            //    yield return null;
            //}

            #endregion

            Hukidashi("D3010");//お待たせ
            ChieriMotion("笑顔01口眉", 0.1f, 2);
            ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
            ChieriMotion("ドアからデスク横へ歩く", 0.1f, 0);

            //揺れ上げたの下げ
            DOTween.To(() => footYurePowMul, (x) => footYurePowMul = x
            , 0.1f
            , 10f);


            while (isNovelSentakushiWait) { yield return null; }
            yield return new WaitForSeconds(1f);
            Sentakushi("■T_Door_出られなかった010a", Mathf.Infinity, "気づかれていないのなら・・");
            //Sentakushi("■T_Door_出られなかった010b", Mathf.Infinity);
            while (sentakuListNum == 99) { yield return null; }
            yield return null;
            switch (sentakuListNum)
            {
                case 0://言う
                    yield return new WaitForSeconds(1);
                    NovelSetVis("T_Door_出られなかった010a1");//おーいおーい
                    while (isNovelSetVisIng) { yield return null; }
                    yield return new WaitForSeconds(1);

                    Hukidashi("D3030bad1");//ってあれいない？
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    NovelSetVis("T_Door_出られなかった010a2");//聴こえていない？
                    while (isNovelSetVisIng) { yield return null; }

                    //気づいてもらうフラグON
                    isKiduitemorau = true;

                    //soundObj削除（一時的　今はEventmoveで消えてしまう。シーン移動以外消さないようにする予定のため）
                    Destroy(LFootWindnoiseSoundObj);
                    Destroy(RfootWindnoiseSoundObj);
                    Destroy(DoorWindnoiseSoundObj);





                    EventMove("気づいていない");

                    break;

                case 1://隠れる
                    yield return new WaitForSeconds(1);
                    Hukidashi("D3030bad1");//ってあれいない？

                    NovelSetVis("T_Door_出られなかった010b1");//隠れて心配させて無理やり戻してもらおう。
                    while (isNovelSetVisIng) { yield return null; }
                    EventMove("気づいていない");

                    break;
            }
        }
        else//■クリアルート
        {

            //■ポーズ状態まで待ち
            StartCoroutine(GirlAnimReadSystem());
            while (girlAnimNomTime <= 0.9f)
            { yield return null; }
            isGirlAnimReadSystem = false;

            ChieriMotion("ドアからデスク横へ歩く", 0.1f, 0);

            Hukidashi("D3010");//お待たせ
            ChieriMotion("笑顔01口眉", 0.1f, 2);
            ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

            //「出られた・・・？」台詞
            NovelSetVis("T_Door_出れた010");

            //外さまよいルートへ

        }
        #endregion

        bool tmpLoop = true;
        while (tmpLoop)
        {
            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.V))
            { isActionLoopSystem = false; }
            yield return null;
        }

        Debug.Log(DB.nowEventNum + "メインコルーチン終了");
        yield break;
    }
    #region ┗■カメラゆれループシステム

    #region //以前の
    //bool isCameraShakeLoop = false;
    //float cameraShakeLoopCorShakeTime = 1;
    //Vector3 cameraShakeLoopCorShakePowerV3 = new Vector3(0, 1, 0);
    //string cameraShakeLoopCorSEString = "testFootStep01";
    //GameObject cameraShakeLoopCorSEObj;

    //IEnumerator CameraShakeLoopCor(float intervalTime, float loopTime)
    //{
    //    isCameraShakeLoop = true;
    //    float loopTimeCounter = 0;

    //    Vector3 preCameraLocalV3 = CameraAnchorTrs.localPosition;

    //    //SEのObj指定がなかったらカメラから
    //    if (cameraShakeLoopCorSEObj == null) { cameraShakeLoopCorSEObj = VRCameraTrs.gameObject; }

    //    while (isCameraShakeLoop)
    //    {
    //        //ループタイムチェック
    //        loopTimeCounter += 1 * Time.deltaTime;
    //        if (loopTime < loopTimeCounter)
    //        { isCameraShakeLoop = false; }

    //        //■揺らし
    //        //まず持ち上げ
    //        CameraAnchorTrs.DOLocalMove
    //            (preCameraLocalV3 + cameraShakeLoopCorShakePowerV3
    //            , 0.05f)
    //            .SetEase(Ease.OutSine)
    //            .OnPlay(() =>
    //            {
    //                SEPlay(cameraShakeLoopCorSEString, cameraShakeLoopCorSEObj);
    //            })
    //            .OnComplete(() =>
    //            {
    //                //元の高さに着地
    //                CameraAnchorTrs.DOLocalMove
    //                (preCameraLocalV3
    //                , cameraShakeLoopCorShakeTime)
    //                .SetEase(Ease.OutBounce);
    //            });


    //        yield return new WaitForSeconds(intervalTime);
    //        yield return null;
    //    }
    //    yield break;
    //}
    #endregion
    #region AnimTriggerを利用した新しいの

    public bool isActionLoopSystem = false;

    public IEnumerator ActionLoopSystemCor(System.Action action, float intervalTime = 1, float loopTime = 10)
    {
        isActionLoopSystem = true;
        float loopTimeCounter = 0;

        while (isActionLoopSystem)
        {
            //ループタイムチェック
            loopTimeCounter += 1 * Time.deltaTime;
            if (loopTime < loopTimeCounter)
            { isActionLoopSystem = false; }

            //■Action
            action();

            //インターバルタイム
            yield return new WaitForSeconds(intervalTime);
            yield return null;
        }
        yield break;
    }
    #endregion

    #endregion
    bool isKiduitemorau = true;//気づいていないで分岐↓
    IEnumerator D2200()//気づいていない
    {
        bool isTmpDebugLoad = false;
        if (debugEventMoveFlag == true)
        {
            #region 大きさや位置
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;
            //プレイヤー ドア前位置に
            GameObject PlayerTween_03_DoorMaeSurinuke03PosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/PlayerTween_03_DoorMaeSurinuke03PosObj") as GameObject;
            CameraObjectsTrs.localPosition = PlayerTween_03_DoorMaeSurinuke03PosObj.transform.localPosition;
            CameraObjectsTrs.localEulerAngles = PlayerTween_03_DoorMaeSurinuke03PosObj.transform.localEulerAngles;
            //CameraAnchorTrs.localEulerAngles = Vector3.zero;

            #region 小物
            //小物消し
            Drill_chieriTrs.gameObject.SetActive(false);
            DrillTrs.gameObject.SetActive(false);
            KeshigomuObj.SetActive(true);
            SharpenObj.SetActive(true);

            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;
            #endregion

            //智恵理 デスク横ポーズ位置に
            GameObject Chieri_20_DeskYokoPosePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_20_DeskYokoPosePosObj") as GameObject;
            GirlTrs.localPosition = Chieri_20_DeskYokoPosePosObj.transform.localPosition;
            //GirlTrs.localEulerAngles = Chieri_20_DeskYokoPosePosObj.transform.localEulerAngles;
            #endregion
            isTmpDebugLoad = true;//デバッグ移動の場合は0フレ再生　そうでないなら黒フェード（の予定だが、ためしにクロスフェード）
        }
        EventReset();

        KankyouBGMVolumer(0.5f, 2);

        //アニメスピード
        girlAnim.speed = 0.8f;
        //智恵理0位置ロック解除
        DB.isChieriPosLock = false;
        ////デバッグ
        //KO_isEyeNoHitMode = true;

        #region サウンドオブジェ付与（一時的 イベント移動で消えるため　本来はシーン移動でなければ消えないようにしたい）
        //WindnoiseSoundObj付与（左足）
        GameObject LFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlLFootTrs);
        DB.evMoveDelObjList.Add(LFootWindnoiseSoundObj);

        LFootWindnoiseSoundObj.GetComponent<AudioSource>().mute = true;//設置時に音鳴るので一時ミュート
                                                                       //SoundObjのPos
        GameObject SoundObj_02_DoorSurinuke_LFootParentPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_02_DoorSurinuke_LFootParentPosObj") as GameObject;
        LFootWindnoiseSoundObj.transform.localPosition = SoundObj_02_DoorSurinuke_LFootParentPosObj.transform.localPosition;

        //WindnoiseSoundObj付与（右足）
        GameObject RfootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRFootTrs);
        DB.evMoveDelObjList.Add(RfootWindnoiseSoundObj);

        RfootWindnoiseSoundObj.GetComponent<AudioSource>().mute = true;//設置時に音鳴るので一時ミュート
                                                                       //SoundObjのPos
        GameObject SoundObj_03_DoorSurinuke_RFootParentPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_03_DoorSurinuke_RFootParentPosObj") as GameObject;
        RfootWindnoiseSoundObj.transform.localPosition = SoundObj_03_DoorSurinuke_RFootParentPosObj.transform.localPosition;

        #endregion
        //足ミュート解除
        LFootWindnoiseSoundObj.GetComponent<AudioSource>().mute =
        RfootWindnoiseSoundObj.GetComponent<AudioSource>().mute = false;

        //智恵理スマホ
        ChieriSumahoObj.SetActive(true);
        ChieriSumahoObj.transform.SetParent(GameObjectsTrs, false);//智恵理の手から外して

        GameObject ChieriSumaho010_HikidashiUePosObj
            = Resources.Load("_PosObj/13Tansaku00/ChieriSumaho010_HikidashiUePosObj") as GameObject;

        ChieriSumahoObj.transform.localPosition = ChieriSumaho010_HikidashiUePosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho010_HikidashiUePosObj.transform.localEulerAngles;


        #region ■智恵理探し歩き

        #region ゴミ箱探してフェードアウトまで
        //■デバッグ移動の場合は0フレ再生　そうでないなら黒フェード（の予定だが、ためしにクロスフェード）
        if (isTmpDebugLoad)
        { ChieriMotion("デスク横探しゴミ箱持ち上げるまで原点", 0 / girlAnim.speed, 0); }
        else
        {
            #region デスク横ポーズから原点モーションのゴミ箱探しに切り替え

            //■■モーションテストではTween移動で直接変移がうまくいくのに、ここだとなぜかうまくいかない。本当になぜかわからない。
            //■■ので、一旦0秒で"ドアからデスク横ポーズ原点"にしてからクロスフェードしている。

            ////智恵理 ボーンから現在位置読み取りルートChieriに Linearで（Yは0なので動かさない）
            //GirlTrs.DOLocalMoveX(Bip001Trs.localPosition.x, 0 / girlAnim.speed)
            //    .SetEase(Ease.Linear);
            //GirlTrs.DOLocalMoveZ(Bip001Trs.localPosition.z, 0 / girlAnim.speed)
            //    .SetEase(Ease.Linear);
            //yield return null;//これを入れることでスムーズになった

            ChieriMotion("ドアからデスク横ポーズ原点", 0 / girlAnim.speed, 0);
            //智恵理 デスク横ポーズ位置に
            GameObject Chieri_20_DeskYokoPosePosObj
                = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_20_DeskYokoPosePosObj") as GameObject;
            GirlTrs.localPosition = Chieri_20_DeskYokoPosePosObj.transform.localPosition;
            yield return null;
            ChieriMotion("デスク横探しゴミ箱持ち上げるまで原点", 1 / girlAnim.speed, 0);

            #endregion
        }

        Hukidashi("探し台詞010");//え、ほんとにいない？

        #region ゲーム用設定
        //■隠れ鬼移動システムON
        KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
        playerMoveSpeed = 4;
        //ローディング待ち
        while (isKOSystemLoading) { yield return null; }
        //移動場所03オン
        KO_KakurePosObjsList[3].SetActive(true);

        if (isKiduitemorau)//気づいてもらうモードなら、足元PosObj
        {
            //New移動ポイント拡大縮小演出
            KO_NewPosPointObjVis
                (KO_KakurePosObjsList[3].transform.Find("KiduitemorauPos").gameObject);
        }
        //■ガラステーブル下01PosObj出現
        else
        {
            //気づかれる分岐用コルーチン始動
            StartCoroutine(D2200a());
            //■智恵理 視界Rayシステム始動
            StartCoroutine(KO_NowChieriKakurenboEyeRayIEnum = KO_ChieriEyeRayCor());

            //New移動ポイント拡大縮小演出
            KO_NewPosPointObjVis
                (KO_KakurePosObjsList[3].transform.Find("GrasstableHasira01").gameObject);
        }
        #endregion


        //■ゴミ箱持って置くまで開始
        //"デスク横探しゴミ箱持ち"に切り替わるまで待ち
        StartCoroutine(GirlAnimReadSystem());//コルーチン開始
        while (nowGirlAnimClipName != "デスク横探しゴミ箱持ち上げるまで原点") { yield return null; }

        while (girlAnimNomTime <= 0.200f) { yield return null; }
        ChieriMotion("f_怒ってる・・？", 0.3f / girlAnim.speed, 2);
        Hukidashi("探し台詞020");//もしかして降りたの

        while (girlAnimNomTime <= 0.600f) { yield return null; }
        Hukidashi("探し台詞023");//このへん？


        //ゴミ箱の現在位置保持
        Vector3 tmpGomibakoDefPos = GomibakoTrs.position;
        Quaternion tmpGomibakoDefRot = GomibakoTrs.rotation;

        //ゴミ箱掴むフレームまで待ち
        while (girlAnimNomTime <= 0.940f) { yield return null; }

        //左手にペアレント
        GomibakoTrs.SetParent(Bip001_L_HandTrs);

        //ゴミ箱掴むモーション終わりまで待ち
        while (girlAnimNomTime <= 1f) { yield return null; }
        isGirlAnimReadSystem = false;

        //分岐点ウェイト
        yield return new WaitForSeconds(1);

        Hukidashi("探し台詞026");//いない・・カーペット？

        //■ゴミ箱降ろし開始
        ChieriMotion("デスク横探しゴミ箱置いて振り返る原点", 0 / girlAnim.speed, 0);
        yield return null;

        //ゴミ箱降ろすフレームまで待ち
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 0.136f) { yield return null; }

        //ペアレント戻し
        GomibakoTrs.SetParent(RoomTrs);

        //保持しておいた位置に戻し
        GomibakoTrs.position = tmpGomibakoDefPos;
        GomibakoTrs.rotation = tmpGomibakoDefRot;


        //待機
        while (girlAnimNomTime <= 0.600f) { yield return null; }


        //振り返るまで待機
        while (girlAnimNomTime <= 0.8f) { yield return null; }


        if (isKiduitemorau)
        { NovelSetVis("T_Door_気づいてa010"); }//よしいまだ！

        FadeBlack(1, 0.4f);
        yield return new WaitForSeconds(0.4f);

        //完全に振り返り終わるまで待機
        while (girlAnimNomTime <= 1f) { yield return null; }
        isGirlAnimReadSystem = false;//コルーチン終了

        #endregion

        #region 暗幕中設定
        #region Bip001の向いてる方向へChieriObj向かせる
        //Bip001のLocal前方0.1位置に空Obj設置
        GameObject tmpLookPointObj = new GameObject();
        tmpLookPointObj.transform.position = Bip001Trs.TransformPoint(new Vector3(-0.1f, 0, 0));
        //Yだけゼロ
        tmpLookPointObj.transform.position = new Vector3(tmpLookPointObj.transform.position.x, 0, tmpLookPointObj.transform.position.z);

        //智恵理その位置に向かせる
        GirlTrs.transform.LookAt(tmpLookPointObj.transform);
        //Obj削除
        Destroy(tmpLookPointObj);
        //同時に歩きモーション
        #endregion
        ChieriMotion("かくれおに探し歩きrootポーズ", 0 / girlAnim.speed, 0);

        //智恵理の位置回転保存
        Vector3 tmpChieriStartLclPos = GirlTrs.localPosition;
        Vector3 tmpChieriStartLclEul = GirlTrs.localEulerAngles;

        #endregion
        //隠れ・気づいて 二通りの分岐
        //気づいてもらうモード時
        if (isKiduitemorau)
        {
            #region ■気づかれず飛ばされ、気づかれて追いかけられる
            isKOSystem = false;
            //ポイントまでたどり着けた
            #region プレイヤー 位置とポーズとカメラリセット
            //プレイヤー 気づいてもらう位置へ
            GameObject Player010_Kiduite_SeikouPosObj
                = Resources.Load("_PosObj/16KakureOrKiduite/Player010_Kiduite_SeikouPosObj") as GameObject;
            CameraObjectsTrs.localPosition = Player010_Kiduite_SeikouPosObj.transform.localPosition;

            //カメラリセット（+回転と立ち設定）
            //カメラリセット値変更してリセット
            CameraReset(Player010_Kiduite_SeikouPosObj.transform.localEulerAngles
                , DB.cameraStandAnchorDefLocalPos);//Anchor立ち

            #endregion

            while (novelCurrentPageInt < 2) { yield return null; };
            //開幕
            FadeBlack(0, 0.2f);
            //環境音フェードイン
            KankyouBGMVolumer(0.3f, 5);

            girlAnim.speed = 0.3f;

            #region 歩き出し処理
            ChieriMotion("かくれおに探し歩きrootポーズ", 0 / girlAnim.speed, 0);
            GirlTrs.localPosition = tmpChieriStartLclPos;
            GirlTrs.localEulerAngles = tmpChieriStartLclEul;
            DOTweenToLAIKSEyes(LAIKEyeS, 0, 0f);
            DOTweenToLAIKSHead(LAIKHeadS, 0, 0f);
            DOTweenToLAIKSBody(LAIKBodyS, 0, 0f);


            DelAll_Hukidashi();

            //IKテーブルのあたりに
            GameObject tmpChieri_24_Look_PlayerHWPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_24_Look_PlayerHWPosObj") as GameObject;
            IKLookAtEyeTargetTrs.position = tmpChieri_24_Look_PlayerHWPosObj.transform.position;
            IKLookAtHeadTargetTrs.position = tmpChieri_24_Look_PlayerHWPosObj.transform.position;
            IKLookAtBodyTargetTrs.position = tmpChieri_24_Look_PlayerHWPosObj.transform.position;
            //IKON
            DOTweenToLAIKSEyes(LAIKEyeS, 1, 0.5f / girlAnim.speed);
            DOTweenToLAIKSHead(LAIKHeadS, 1, 1f / girlAnim.speed);
            DOTweenToLAIKSBody(LAIKBodyS, 0.1f, 1f / girlAnim.speed);
            yield return new WaitForSeconds(0.7f / girlAnim.speed);

            ChieriMotion("かくれおに探し歩きroot開始", 0 / girlAnim.speed, 0);
            yield return new WaitForSeconds(1 / girlAnim.speed);
            Hukidashi("探し台詞035");//眞人～？もー

            //足元見る
            FollowDOMove(IKLookAtEyeTargetTrs, RFootSphereTrs, 0.5f / girlAnim.speed);
            FollowDOMove(IKLookAtHeadTargetTrs, RFootSphereTrs, 1 / girlAnim.speed);
            FollowDOMove(IKLookAtBodyTargetTrs, RFootSphereTrs, 1f / girlAnim.speed);
            //IK量調節
            DOTweenToLAIKSEyes(LAIKEyeS, 1, 0.5f / girlAnim.speed);
            DOTweenToLAIKSHead(LAIKHeadS, 0.5f, 1 / girlAnim.speed);
            DOTweenToLAIKSBody(LAIKBodyS, 0.2f, 1f / girlAnim.speed);

            //クローゼット前へ舵取り
            GameObject tmpChieri_22_Move_ClosetMaePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_22_Move_ClosetMaePosObj") as GameObject;

            Tweener tmpChieriRotTweener =
            GirlTrs.DORotate(Quaternion.LookRotation(
                tmpChieri_22_Move_ClosetMaePosObj.transform.localPosition - GirlTrs.localPosition).eulerAngles
                , 3f / girlAnim.speed)
                .SetEase(Ease.OutCubic)
                .SetAutoKill(false);
            #endregion

            #region ギリギリセーフで立ち止まるまで
            StartCoroutine(GirlAnimReadSystem());
            while (nowGirlAnimClipName != "かくれおに探し歩きrootループ") { yield return null; }
            while (girlAnimNomTime <= 0.1f) { yield return null; }
            NovelSetVis("T_Door_気づいてa030");//気づいてない・・？　嘘だ
            SEPlay("heart_def", 0.5f);

            #region //時間ゆっくり演出（回転速度変えるの大変なのでやめ）
            ////現在スピード保持してほぼ止め
            //float tmpNowSpeed = girlAnim.speed;
            //girlAnim.speed = 0.0001f;

            ////DOTWeenTOでアニメスピード
            //DOTween.To(() => girlAnim.speed, (x) => girlAnim.speed = x, 0.05f, 1f);

            //tmpChieriRotTweener.ChangeEndValue(0.05f);

            //PPv2Memai(); 
            //yield return new WaitForSeconds(0.5f);
            //PPv2Memai(false,1);
            #endregion

            while (girlAnimNomTime <= 0.5f) { yield return null; }
            NovelSetVis("T_Door_気づいてa040");//うわああ！
            ChieriMotion("f_本当に小さいね～", 0.05f / girlAnim.speed, 2);

            while (girlAnimNomTime <= 0.57f) { yield return null; }
            isGirlAnimReadSystem = false;

            #region IKプレイヤ見（頭少し下）(頭Clamp注意)
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
            DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

            LAIKHead.solver.clampWeightHead = 0.78f;
            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.08f, 0), 2f);
            DOTweenToLAIKSHead(LAIKHeadS, 1, 0f);
            #endregion
            #region プレイヤーカメラ倒れ 直
            //TPSプレイヤー倒れモーション
            isPlayerUniqueMotion = true;
            PlayerMotion("liedown_00_Re", 0.2f, 0);

            SEPlay("倒れ_Custom_85532__maj061785__body-hitting-mat", 0.2f);

            Vector3
                tmpDefCameraPos = CameraAnchorTrs.localPosition,
                tmpDefCameraEul = CameraAnchorTrs.localEulerAngles,
                tmpFlowCameraPos = new Vector3(0, 1.2f, 0),
                tmpSlipCameraPos = new Vector3(0, 0.3f, 0),
                tmpSlipCameraEul = new Vector3(-45, 0, 0);

            CameraAnchorTrs.DOLocalMove(tmpFlowCameraPos, 0.1f);
            yield return new WaitForSeconds(0.1f);
            CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.1f).SetEase(Ease.OutBounce);
            yield return new WaitForSeconds(0.1f);
            CameraAnchorTrs.DOLocalMove(tmpDefCameraPos, 0.1f);
            yield return new WaitForSeconds(0.1f);

            CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.6f).SetEase(Ease.OutBounce);
            CameraAnchorTrs.DOLocalRotate(tmpSlipCameraEul, 0.5f).SetEase(Ease.InSine);

            GameObject Player020_Kiduite_SeikouTaorePosObj
                = Resources.Load("_PosObj/16KakureOrKiduite/Player020_Kiduite_SeikouTaorePosObj") as GameObject;
            CameraObjectsTrs.DOLocalMove(Player020_Kiduite_SeikouTaorePosObj.transform.localPosition
                , 1f);
            #endregion



            //IKLookHeadのBodyで少し見下ろし前傾
            DOTweenToLAIKSBody(LAIKHeadS, 0.15f, 7f);

            Hukidashi("気づいてもらい010");//え、あ、いた
            //ChieriMotion("かくれおに発見口に手原点", 0.1f / girlAnim.speed, 0);
            ChieriMotion("かくれおに探し歩きrootポーズ", 0.1f / girlAnim.speed, 0);

            //↑このモーションで止まるが、スキップなどでずれるので一応位置調整
            GameObject Chieri010_Kiduite_SeikouPosObj
                = Resources.Load("_PosObj/0160KiduiteMorau/Chieri010_Kiduite_SeikouPosObj") as GameObject;
            GirlTrs.DOLocalMove(Chieri010_Kiduite_SeikouPosObj.transform.localPosition, 1);
            GirlTrs.DOLocalRotate(Chieri010_Kiduite_SeikouPosObj.transform.localEulerAngles, 1);

            yield return new WaitForSeconds(1);
            ChieriMotion("f_十分？", 0.05f / girlAnim.speed, 2);
            yield return KeyOrWait(3);


            #endregion

            yield return new WaitForSeconds(0.5f);

            AseTare();
            //ChieriMotion("f_驚愕心配", 0.05f / girlAnim.speed, 2);
            ChieriMotion("f_どうして謝るの？", 0.05f / girlAnim.speed, 2);
            Hukidashi("気づいてもらい020");//どうしてそんな所にいるの？
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            yield return new WaitForSeconds(0.5f);


            NovelSetVis("T_Door_気づいてa050");//危ない！
            while (isNovelSetVisIng) { yield return null; }
            yield return new WaitForSeconds(0.5f);

            ChieriMotion("f_むっ", 0.05f / girlAnim.speed, 2);
            Hukidashi("気づいてもらい030");//勝手に降りたのそっちでしょ？
            //IKLookHeadのBody少し戻し
            DOTweenToLAIKSBody(LAIKHeadS, 0.05f, 2.5f);
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            yield return new WaitForSeconds(0.5f);
            NovelSetVis("T_Door_気づいてa060");//え、まあそうなんだけど・・
            while (isNovelSetVisIng) { yield return null; }

            NovelSetVis("T_Door_気づいてa070");//よっと
            while (novelCurrentPageInt < 1) { yield return null; }
            FadeBlack(1, 0.5f);
            yield return new WaitForSeconds(0.5f);

            #region 暗幕中設定
            //倒れカメラ戻し
            CameraAnchorTrs.DOLocalMove(tmpDefCameraPos, 0f);
            CameraAnchorTrs.DOLocalRotate(tmpDefCameraEul, 0f);
            isPlayerUniqueMotion = false;
            while (isNovelSetVisIng) { yield return null; }
            girlAnim.speed = 0.5f;

            #endregion

            FadeBlack(0, 0.5f);

            yield return new WaitForSeconds(1);
            NovelSetVis("T_Door_気づいてa080");//大して変化が無かった

            while (novelCurrentPageInt < 4) { yield return null; }

            Hukidashi("気づいてもらい040");//ふーん、どんなに危ないか
            ChieriMotion("f_眉高い笑顔少しジト目", 0.05f / girlAnim.speed, 2);
            yield return new WaitForSeconds(1);
            isNovelFadeTween = isNovelSetVisIng = false;
            yield return KeyOrWait(3);

            //IKLookHeadのBody少し
            DOTweenToLAIKSBody(LAIKHeadS, 0.15f, 3.5f);

            Hukidashi("気づいてもらい050");//教えてあげようか？
            ChieriMotion("笑顔01口眉", 0.05f, 2);
            ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);


            NovelSetVis("T_Door_気づいてa090");//え？　ごめんって

            //IKBody戻し
            DOTweenToLAIKSBody(LAIKHeadS, 0, 2.5f);

            bool isTmpFootUp = false;
            #region 1右足上げ
            SEPlay(GirlLFootTrs.position, Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), 2.5f, 2);

            GirlPosToIKTargetPosRot(); while (isGirlPosToIKTargetPosRotLoading) { yield return null; }
            //左足固定
            DOTweenToIKEfPos(IKLFootEf, 1, 0);
            DOTweenToIKEfRot(IKLFootEf, 1, 0);


            //体重心
            GameObject Humi010_Chieri_AgePosObj
                = Resources.Load("_PosObj/0160KiduiteMorau/Humi010_Chieri_AgePosObj") as GameObject;
            GirlTrs.DOLocalMove(Humi010_Chieri_AgePosObj.transform.localPosition, 5)
                        .SetEase(Ease.InOutCubic);
            GirlTrs.DOLocalRotate(Humi010_Chieri_AgePosObj.transform.localEulerAngles, 5)
                        .SetEase(Ease.InOutCubic);

            //右足IK
            GameObject Humi010_IKRFoot_ZuzyouPosObj
                = Resources.Load("_PosObj/0160KiduiteMorau/Humi010_IKRFoot_ZuzyouPosObj") as GameObject;
            IKRFootTargetTrs.DOLocalMove(Humi010_IKRFoot_ZuzyouPosObj.transform.localPosition, 5);
            IKRFootTargetTrs.DOLocalRotate(Humi010_IKRFoot_ZuzyouPosObj.transform.localEulerAngles, 5)
                .OnComplete(() => { isTmpFootUp = true; });

            DOTweenToIKEfPos(IKRFootEf, 1, 5, Ease.InOutCubic);
            DOTweenToIKEfRot(IKRFootEf, 1, 5, Ease.InOutCubic);

            #endregion

            while (isNovelSetVisIng) { yield return null; }

            NovelSetVis("T_Door_気づいてa100");//相違点　冗談だよな？　飛びのく準備
            Hukidashi("気づいてもらい060");//3

            while (novelCurrentPageInt < 2) { yield return null; }
            DelAll_Hukidashi();
            Hukidashi("気づいてもらい070");//2

            while (novelCurrentPageInt < 3) { yield return null; }
            DelAll_Hukidashi();
            Hukidashi("気づいてもらい080");//1
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            while (isTmpFootUp == false) { yield return null; }
            #region 2足降ろし
            bool isTmpHumiorosi = false;

            //体重心
            GameObject Humi020_Chieri_OrosiPosObj
                = Resources.Load("_PosObj/0160KiduiteMorau/Humi020_Chieri_OrosiPosObj") as GameObject;
            GirlTrs.DOLocalMove(Humi020_Chieri_OrosiPosObj.transform.localPosition, 1)
                .SetEase(Ease.OutBack);
            GirlTrs.DOLocalRotate(Humi020_Chieri_OrosiPosObj.transform.localEulerAngles, 1)
                .SetEase(Ease.OutBack);


            //右足IK
            GameObject Humi020_IKRFoot_OrosiPosObj
                = Resources.Load("_PosObj/0160KiduiteMorau/Humi020_IKRFoot_OrosiPosObj") as GameObject;
            IKRFootTargetTrs.DOLocalMove(Humi020_IKRFoot_OrosiPosObj.transform.localPosition, 0.5f)
                .SetEase(Ease.InCubic);
            IKRFootTargetTrs.DOLocalRotate(Humi020_IKRFoot_OrosiPosObj.transform.localEulerAngles, 0.5f)
                .SetEase(Ease.InCubic)
                .OnComplete(() =>
                {
                    //カメラ揺れ
                    CameraAnchorTrs.DOShakePosition(0.5f, 0.2f);
                    //CameraAnchorTrs.localPosition = DB.cameraSitAnchorDefLocalPos;
                    DelAll_Hukidashi();
                    isTmpHumiorosi = true;
                });


            //プレイヤー飛び
            GameObject Humi020_Player_TaorePosObj
                = Resources.Load("_PosObj/0160KiduiteMorau/Humi020_Player_TaorePosObj") as GameObject;
            CameraObjectsTrs.DOLocalMove(Humi020_Player_TaorePosObj.transform.localPosition, 0.7f)
                .SetEase(Ease.InOutQuart);
            CameraObjectsTrs.DOLocalRotate(Humi020_Player_TaorePosObj.transform.localEulerAngles, 0.7f)
                .SetEase(Ease.InOutQuart);

            SEPlay("バタドタン01", 0.6f);




            yield return new WaitForSeconds(0.2f);
            SEPlay("swing40_d_16低い", GirlRFootTrs.gameObject, 0.3f);
            yield return new WaitForSeconds(0.2f);
            SEPlay("bosu23_c_37mix_5倍", GirlRFootTrs.gameObject, 1f);

            //足踏みおろしまで待機
            while (isTmpHumiorosi == false) { yield return null; }
            //白フラッシュ
            FadeWhite(1, 0.05f); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);
            //環境音オフ
            KankyouBGMVolumer(0f, 0.5f);

            isAnimTriggerRForcePlay = true;

            #region プレイヤーカメラ倒れ 直

            Vector3
                tmpDefCameraPosTwo = CameraAnchorTrs.localPosition,
                tmpFlowCameraPosTwo = new Vector3(0, 1.2f, 0),
                tmpSlipCameraPosTwo = new Vector3(0, 0.3f, 0),
                tmpSlipCameraEulTwo = new Vector3(-45, 0, 0);


            CameraAnchorTrs.DOLocalMove(tmpFlowCameraPosTwo, 0.05f);
            yield return new WaitForSeconds(0.05f);
            CameraAnchorTrs.DOLocalMove(tmpSlipCameraPosTwo, 0.5f).SetEase(Ease.OutBounce);
            yield return new WaitForSeconds(0.05f);
            CameraAnchorTrs.DOLocalMove(tmpDefCameraPosTwo, 0.05f);
            yield return new WaitForSeconds(0.05f);

            //TPSプレイヤー倒れモーション
            isPlayerUniqueMotion = true;
            PlayerMotion("liedown_00_Re", 0.2f, 0);

            CameraAnchorTrs.DOLocalRotate(tmpSlipCameraEulTwo, 0.2f).SetEase(Ease.InSine);
            CameraAnchorTrs.DOLocalMove(tmpSlipCameraPosTwo, 0.5f).SetEase(Ease.OutBounce)//Force足踏みの揺れ修正と被るので0.5秒から1秒にした（まあまあよいのでこれで）
                .OnComplete(() =>
                {
                    //カメラリセット（+回転と立ち設定）
                    //カメラリセット値変更してリセット
                    CameraReset(Humi020_Player_TaorePosObj.transform.localEulerAngles
                            , tmpSlipCameraPosTwo
                            , false
                            , tmpSlipCameraEulTwo
                            , false
                            , false//ユーザーカメラコントロールはリセットしない
                            );
                });
            #endregion

            #endregion
            yield return new WaitForSeconds(1.5f);

            //少し前傾
            GameObject Humi025_Chieri_NozokiPosObj
                = Resources.Load("_PosObj/0160KiduiteMorau/Humi025_Chieri_NozokiPosObj") as GameObject;
            GirlTrs.DOLocalMove(Humi025_Chieri_NozokiPosObj.transform.localPosition, 1);
            GirlTrs.DOLocalRotate(Humi025_Chieri_NozokiPosObj.transform.localEulerAngles, 1);
            //IKLookHeadのBody少し
            DOTweenToLAIKSBody(LAIKHeadS, 0.15f, 3.5f);

            yield return new WaitForSeconds(1.5f);

            //環境音フェードイン
            KankyouBGMVolumer(0.3f, 5);

            Hukidashi("気づいてもらい090");//えらいえらい
            ChieriMotion("笑顔01口眉", 0.05f, 2);
            ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し

            NovelSetVis("T_Door_気づいてa110");//相違点　冗談だよな？　飛びのく準備

            while (novelCurrentPageInt < 1) { yield return null; }
            DelAll_Hukidashi();
            ChieriMotion("f_眉高い笑顔少しジト目", 0.05f / girlAnim.speed, 2);
            Hukidashi("気づいてもらい100");//それとも風圧で飛んじゃっただけかな？

            while (novelCurrentPageInt < 2) { yield return null; }
            DelAll_Hukidashi();
            ChieriMotion("笑顔01口眉", 0.05f, 2);
            ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
            Hukidashi("気づいてもらい110");//えへへ、3

            //IKLookHeadのBody戻し
            DOTweenToLAIKSBody(LAIKHeadS, 0f, 2.5f);

            isTmpFootUp = false;
            #region 3足上げ

            SEPlay(GirlRFootTrs.position, Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), 2.5f, 2);

            //体重心
            GameObject Humi030_Chieri_AgePosObj
                = Resources.Load("_PosObj/0160KiduiteMorau/Humi030_Chieri_AgePosObj") as GameObject;
            GirlTrs.DOLocalMove(Humi030_Chieri_AgePosObj.transform.localPosition, 5)
                        .SetEase(Ease.InOutCubic);
            GirlTrs.DOLocalRotate(Humi030_Chieri_AgePosObj.transform.localEulerAngles, 5)
                        .SetEase(Ease.InOutCubic);

            //右足IK
            GameObject Humi030_IKLFoot_ZuzyouPosObj
                = Resources.Load("_PosObj/0160KiduiteMorau/Humi030_IKLFoot_ZuzyouPosObj") as GameObject;
            IKLFootTargetTrs.DOLocalMove(Humi030_IKLFoot_ZuzyouPosObj.transform.localPosition, 5)
                        .SetEase(Ease.InOutCubic);
            IKLFootTargetTrs.DOLocalRotate(Humi030_IKLFoot_ZuzyouPosObj.transform.localEulerAngles, 5)
                        .SetEase(Ease.InOutCubic)
                        .OnComplete(() => { isTmpFootUp = true; });

            #endregion



            while (novelCurrentPageInt < 4) { yield return null; }
            DelAll_Hukidashi();
            Hukidashi("気づいてもらい070");//2

            while (novelCurrentPageInt < 8) { yield return null; }
            DelAll_Hukidashi();
            Hukidashi("気づいてもらい080");//1
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            while (isTmpFootUp == false) { yield return null; }
            //yield return new WaitForSeconds(1f);//tmpFootUpだとギリギリすぎ？
            #region 4足降ろし
            isTmpHumiorosi = false;

            //体重心
            GameObject Humi040_Chieri_OrosiPosObj
                = Resources.Load("_PosObj/0160KiduiteMorau/Humi040_Chieri_OrosiPosObj") as GameObject;
            GirlTrs.DOLocalMove(Humi040_Chieri_OrosiPosObj.transform.localPosition, 1)
                .SetEase(Ease.OutBack);
            GirlTrs.DOLocalRotate(Humi040_Chieri_OrosiPosObj.transform.localEulerAngles, 1)
                .SetEase(Ease.OutBack);


            //左足IK
            GameObject Humi040_IKLFoot_OrosiPosObj
                = Resources.Load("_PosObj/0160KiduiteMorau/Humi040_IKLFoot_OrosiPosObj") as GameObject;
            IKLFootTargetTrs.DOLocalMove(Humi040_IKLFoot_OrosiPosObj.transform.localPosition, 0.5f)
                .SetEase(Ease.InCubic);
            IKLFootTargetTrs.DOLocalRotate(Humi040_IKLFoot_OrosiPosObj.transform.localEulerAngles, 0.5f)
                .SetEase(Ease.InCubic)
                .OnComplete(() =>
                {
                    //カメラ揺れ
                    CameraAnchorTrs.DOShakePosition(0.5f, 0.2f);
                    //CameraAnchorTrs.localPosition = DB.cameraSitAnchorDefLocalPos;
                    DelAll_Hukidashi();
                    isTmpHumiorosi = true;
                });


            //プレイヤー転がり
            GameObject Humi040_Player_TaorePosObj
                = Resources.Load("_PosObj/0160KiduiteMorau/Humi040_Player_TaorePosObj") as GameObject;
            CameraObjectsTrs.DOLocalMove(Humi040_Player_TaorePosObj.transform.localPosition, 0.7f)
                .SetEase(Ease.InOutQuart);
            //回転に転がり要素（Z一回転）
            Vector3 tmpRot = Humi040_Player_TaorePosObj.transform.localEulerAngles;
            tmpRot.z = -181;
            CameraObjectsTrs.DOLocalRotate(tmpRot, 0.35f)
                .SetEase(Ease.InQuart)
                .OnComplete(() =>
                {

                    CameraObjectsTrs.DOLocalRotate(Humi040_Player_TaorePosObj.transform.localEulerAngles, 0.35f)
                        .SetEase(Ease.OutQuart);

                });

            SEPlay("バタドタン02", 0.6f);


            yield return new WaitForSeconds(0.2f);
            SEPlay("swing40_d_16低い", GirlRFootTrs.gameObject, 0.3f);
            yield return new WaitForSeconds(0.2f);
            SEPlay("bosu23_c_37mix_5倍", GirlRFootTrs.gameObject, 1f);

            //足踏みおろしまで待機
            while (isTmpHumiorosi == false) { yield return null; }
            //白フラッシュ
            FadeWhite(1, 0.05f); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);

            isAnimTriggerLForcePlay = true;

            #region プレイヤーカメラ倒れ 直

            Vector3
                tmpDefCameraPosThree = CameraAnchorTrs.localPosition,
                tmpFlowCameraPosThree = new Vector3(0, 1.2f, 0),
                tmpSlipCameraPosThree = new Vector3(0, 0.3f, 0),
                tmpSlipCameraEulThree = new Vector3(-45, 0, 0);


            CameraAnchorTrs.DOLocalMove(tmpFlowCameraPosThree, 0.05f);
            yield return new WaitForSeconds(0.05f);
            CameraAnchorTrs.DOLocalMove(tmpSlipCameraPosThree, 0.5f).SetEase(Ease.OutBounce);
            yield return new WaitForSeconds(0.05f);
            CameraAnchorTrs.DOLocalMove(tmpDefCameraPosThree, 0.05f);
            yield return new WaitForSeconds(0.05f);

            //TPSプレイヤー倒れモーション
            isPlayerUniqueMotion = true;
            PlayerMotion("liedown_00_Re", 0.2f, 0);

            CameraAnchorTrs.DOLocalRotate(tmpSlipCameraEulThree, 0.2f).SetEase(Ease.InSine);
            CameraAnchorTrs.DOLocalMove(tmpSlipCameraPosThree, 0.5f).SetEase(Ease.OutBounce)
                .OnComplete(() =>
                {
                    //カメラリセット（+回転と立ち設定）
                    //カメラリセット値変更してリセット
                    CameraReset(Humi040_Player_TaorePosObj.transform.localEulerAngles
                            , tmpSlipCameraPosThree
                            , false
                            , tmpSlipCameraEulThree
                            , false
                            , false//ユーザーカメラコントロールはリセットしない
                            );
                });
            #endregion

            #endregion

            #region ■暗幕 足踏み
            FadeBlack(1, 1);



            yield return new WaitForSeconds(3);
            isPlayerUniqueMotion = false;
            SEPlay("バタドタン03", 0.3f);

            //足音ループ
            StartCoroutine(ActionLoopSystemCor(() =>
            {
                SEPlay(UISEObj, KO_PlayerAsioto_DefList[UnityEngine.Random.Range(0, KO_PlayerAsioto_DefList.Count)], 0.3f); }
            , 0.25f
            , Mathf.Infinity));

            NovelSetVis("T_Door_気づいてa120");//冗談じゃない！
            Hukidashi("気づいてもらい060");//3

            isTmpFootUp = false;
            #region 右足上げ
            SEPlay(GirlLFootTrs.position, Other3DSEObj, FootStepSE(woodFloorCreakingShortPicthMinus6SEStrList), 2.5f, 2);

            IKRFootTargetTrs.DOLocalMove(Humi010_IKRFoot_ZuzyouPosObj.transform.localPosition, 5)
                .SetEase(Ease.InOutCubic);
            IKRFootTargetTrs.DOLocalRotate(Humi010_IKRFoot_ZuzyouPosObj.transform.localEulerAngles, 5)
                .SetEase(Ease.InOutCubic)
                .OnComplete(() => { isTmpFootUp = true; });
            #endregion

            while (novelCurrentPageInt < 3) { yield return null; }

            DelAll_Hukidashi();
            Hukidashi("気づいてもらい070");//2

            while (isNovelSetVisIng) { yield return null; }
            DelAll_Hukidashi();
            Hukidashi("気づいてもらい120");//逃げるなら数えないよ
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            while (isTmpFootUp == false) { yield return null; }
            #region 右足降ろし
            IKRFootTargetTrs.DOLocalMove(Humi020_IKRFoot_OrosiPosObj.transform.localPosition, 0.5f)
                .SetEase(Ease.InCubic);
            IKRFootTargetTrs.DOLocalRotate(Humi020_IKRFoot_OrosiPosObj.transform.localEulerAngles, 0.5f)
                .SetEase(Ease.InCubic);

            yield return new WaitForSeconds(0.2f);
            SEPlay("swing40_d_16低い", GirlRFootTrs.gameObject, 0.3f);
            yield return new WaitForSeconds(0.2f);
            SEPlay("bosu23_c_37mix_5倍", GirlRFootTrs.gameObject, 1f);

            FadeBlack(1, 0, false);//念のためBlackのUIFrontをfalse
            //白フラッシュ(UIFrontをtrueで)（これでたぶんフラッシュしたりしなかったりを防げる）
            FadeWhite(0.2f, 0.05f, true);
            yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);
            isAnimTriggerRForcePlay = true;
            #endregion
            SEPlay("バタドタン01", 0.7f);
            isActionLoopSystem = false;

            #region //足踏み音デバッグ
            //while (true)
            //{
            //    if (Input.GetKeyDown(KeyCode.F))
            //    {
            //        #region 左足上げ
            //        SEPlay(GirlRFootTrs.position, Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), 1);

            //        IKLFootTargetTrs.DOLocalMove(Humi030_IKLFoot_ZuzyouPosObj.transform.localPosition, 2)
            //            .SetEase(Ease.InOutCubic);
            //        IKLFootTargetTrs.DOLocalRotate(Humi030_IKLFoot_ZuzyouPosObj.transform.localEulerAngles, 2)
            //            .SetEase(Ease.InOutCubic);
            //        #endregion
            //        yield return new WaitForSeconds(2);
            //        #region 左足降ろし
            //        IKLFootTargetTrs.DOLocalMove(Humi040_IKLFoot_OrosiPosObj.transform.localPosition, 0.5f)
            //            .SetEase(Ease.InCubic);
            //        IKLFootTargetTrs.DOLocalRotate(Humi040_IKLFoot_OrosiPosObj.transform.localEulerAngles, 0.5f)
            //            .SetEase(Ease.InCubic);

            //        yield return new WaitForSeconds(0.2f);
            //        SEPlay("swing40_d_16低い", GirlRFootTrs.gameObject, 0.3f);
            //        yield return new WaitForSeconds(0.2f);
            //        SEPlay("bosu23_c_37mix_5倍", GirlRFootTrs.gameObject, 1f);

            //        //白フラッシュ
            //        FadeWhite(0.2f, 0.05f); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);
            //        isAnimTriggerLForcePlay = true;
            //        #endregion

            //    }
            //    if (Input.GetKeyDown(KeyCode.G))
            //    {
            //        #region 右足上げ
            //        SEPlay(GirlLFootTrs.position, Other3DSEObj, FootStepSE(woodFloorCreakingShortPicthMinus6SEStrList), 1, 1);

            //        IKRFootTargetTrs.DOLocalMove(Humi010_IKRFoot_ZuzyouPosObj.transform.localPosition, 2)
            //            .SetEase(Ease.InOutCubic);
            //        IKRFootTargetTrs.DOLocalRotate(Humi010_IKRFoot_ZuzyouPosObj.transform.localEulerAngles, 2)
            //            .SetEase(Ease.InOutCubic);
            //        #endregion
            //        yield return new WaitForSeconds(2);
            //        #region 右足降ろし
            //        IKRFootTargetTrs.DOLocalMove(Humi020_IKRFoot_OrosiPosObj.transform.localPosition, 0.5f)
            //            .SetEase(Ease.InCubic);
            //        IKRFootTargetTrs.DOLocalRotate(Humi020_IKRFoot_OrosiPosObj.transform.localEulerAngles, 0.5f)
            //            .SetEase(Ease.InCubic);

            //        yield return new WaitForSeconds(0.2f);
            //        SEPlay("swing40_d_16低い", GirlRFootTrs.gameObject, 0.3f);
            //        yield return new WaitForSeconds(0.2f);
            //        SEPlay("bosu23_c_37mix_5倍", GirlRFootTrs.gameObject, 1f);

            //        //白フラッシュ
            //        FadeWhite(0.2f, 0.05f); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);
            //        isAnimTriggerRForcePlay = true;
            //        #endregion
            //    }
            //    if (Input.GetKeyDown(KeyCode.V))
            //    {
            //        //足音ループ
            //        StartCoroutine(ActionLoopSystemCor(() =>
            //        { SEPlay(UISEObj, KO_PlayerAsioto_DefList[UnityEngine.Random.Range(0, KO_PlayerAsioto_DefList.Count)], 0.3f); }
            //        , 0.35f, Mathf.Infinity));

            //    }
            //    if (Input.GetKeyDown(KeyCode.B))
            //    {
            //        isActionLoopSystem = false;
            //    }
            //        yield return null;
            //}
            #endregion

            yield return new WaitForSeconds(2);
            SEPlay("バタドタン03", 0.3f);

            //足音ループ
            StartCoroutine(ActionLoopSystemCor(() =>
            { SEPlay(UISEObj, KO_PlayerAsioto_DefList[UnityEngine.Random.Range(0, KO_PlayerAsioto_DefList.Count)], 0.3f); }
            , 0.25f, Mathf.Infinity));


            #region 左足上げ
            SEPlay(GirlRFootTrs.position, Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), 2.5f);

            IKLFootTargetTrs.DOLocalMove(Humi030_IKLFoot_ZuzyouPosObj.transform.localPosition, 2)
                .SetEase(Ease.InOutCubic);
            IKLFootTargetTrs.DOLocalRotate(Humi030_IKLFoot_ZuzyouPosObj.transform.localEulerAngles, 2)
                .SetEase(Ease.InOutCubic);
            #endregion
            yield return new WaitForSeconds(2);
            #region 左足降ろし
            IKLFootTargetTrs.DOLocalMove(Humi040_IKLFoot_OrosiPosObj.transform.localPosition, 0.5f)
                .SetEase(Ease.InCubic);
            IKLFootTargetTrs.DOLocalRotate(Humi040_IKLFoot_OrosiPosObj.transform.localEulerAngles, 0.5f)
                .SetEase(Ease.InCubic);

            yield return new WaitForSeconds(0.2f);
            SEPlay("swing40_d_16低い", GirlRFootTrs.gameObject, 0.3f);
            yield return new WaitForSeconds(0.2f);
            SEPlay("bosu23_c_37mix_5倍", GirlRFootTrs.gameObject, 1f);

            //白フラッシュ(UIFrontをtrueで)
            FadeWhite(0.2f, 0.05f, true); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);

            isAnimTriggerLForcePlay = true;
            #endregion

            yield return new WaitForSeconds(1);
            #region 右足上げ
            SEPlay(GirlLFootTrs.position, Other3DSEObj, FootStepSE(woodFloorCreakingShortPicthMinus6SEStrList), 2.5f, 1);

            IKRFootTargetTrs.DOLocalMove(Humi010_IKRFoot_ZuzyouPosObj.transform.localPosition, 2)
                .SetEase(Ease.InOutCubic);
            IKRFootTargetTrs.DOLocalRotate(Humi010_IKRFoot_ZuzyouPosObj.transform.localEulerAngles, 2)
                .SetEase(Ease.InOutCubic);
            #endregion
            yield return new WaitForSeconds(2);
            #region 右足降ろし
            IKRFootTargetTrs.DOLocalMove(Humi020_IKRFoot_OrosiPosObj.transform.localPosition, 0.5f)
                .SetEase(Ease.InCubic);
            IKRFootTargetTrs.DOLocalRotate(Humi020_IKRFoot_OrosiPosObj.transform.localEulerAngles, 0.5f)
                .SetEase(Ease.InCubic);

            yield return new WaitForSeconds(0.2f);
            SEPlay("swing40_d_16低い", GirlRFootTrs.gameObject, 0.3f);
            yield return new WaitForSeconds(0.2f);
            SEPlay("bosu23_c_37mix_5倍", GirlRFootTrs.gameObject, 1f);

            //白フラッシュ(UIFrontをtrueで)
            FadeWhite(0.2f, 0.05f, true); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);
            isAnimTriggerRForcePlay = true;
            #endregion

            SEPlay("バタドタン01", 0.7f);
            isActionLoopSystem = false;

            NovelSetVis("T_Door_気づいてa130");//気が気じゃなかった

            #region 左足上げ
            SEPlay(GirlRFootTrs.position, Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), 2.5f);

            IKLFootTargetTrs.DOLocalMove(Humi030_IKLFoot_ZuzyouPosObj.transform.localPosition, 2)
                .SetEase(Ease.InOutCubic);
            IKLFootTargetTrs.DOLocalRotate(Humi030_IKLFoot_ZuzyouPosObj.transform.localEulerAngles, 2)
                .SetEase(Ease.InOutCubic);
            #endregion
            yield return new WaitForSeconds(2);
            SEPlay("バタドタン03", 0.3f);
            //足音ループ
            StartCoroutine(ActionLoopSystemCor(() =>
            { SEPlay(UISEObj, KO_PlayerAsioto_DefList[UnityEngine.Random.Range(0, KO_PlayerAsioto_DefList.Count)], 0.3f); }
            , 0.25f, Mathf.Infinity));
            #region 左足降ろし
            IKLFootTargetTrs.DOLocalMove(Humi040_IKLFoot_OrosiPosObj.transform.localPosition, 0.5f)
                .SetEase(Ease.InCubic);
            IKLFootTargetTrs.DOLocalRotate(Humi040_IKLFoot_OrosiPosObj.transform.localEulerAngles, 0.5f)
                .SetEase(Ease.InCubic);

            yield return new WaitForSeconds(0.2f);
            SEPlay("swing40_d_16低い", GirlRFootTrs.gameObject, 0.3f);
            yield return new WaitForSeconds(0.2f);
            SEPlay("bosu23_c_37mix_5倍", GirlRFootTrs.gameObject, 1f);

            //白フラッシュ(UIFrontをtrueで)
            FadeWhite(0.2f, 0.05f, true); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);
            isAnimTriggerLForcePlay = true;
            #endregion


            while (isNovelSetVisIng) { yield return null; }
            yield return new WaitForSeconds(2);
            isActionLoopSystem = false;

            #endregion

            //終了処理

            //サウンドオブジェフェードアウト（EventMoveでやってくれるはずなのになぜか）
            LFootWindnoiseSoundObj.GetComponent<AudioSource>().DOFade(0, 1f);
            RfootWindnoiseSoundObj.GetComponent<AudioSource>().DOFade(0, 1f);

            yield return new WaitForSeconds(1);

            //DOTween用IKリスト　IKEf、LAIKSのDictクリア
            FollowDOMoveFromTrsList.Clear();
            IKEfPosTweenerDict.Clear();
            IKEfRotTweenerDict.Clear();
            LAIKSHeadTweenerDict.Clear();
            LAIKSEyesTweenerDict.Clear();
            LAIKSBodyTweenerDict.Clear();

            //IK系一旦切る
            StartCoroutine(killAll_FainalIK());

            DB.isChieriPosLock = true;
            isPlayerUniqueMotion = false;

            #endregion

            yield return new WaitForSeconds(1);
            EventMove("摘み上げられ");

            #region //以前の 気づかれず飛ばされ、気づかれてしゃがみで飛ばされる
            //isKOSystem = false;
            ////ポイントまでたどり着けた
            //#region プレイヤー 位置とポーズとカメラリセット
            ////プレイヤー ケーブル降りる位置に
            //GameObject Player010_Kiduite_SeikouPosObj
            //    = Resources.Load("_PosObj/16KakureOrKiduite/Player010_Kiduite_SeikouPosObj") as GameObject;
            //CameraObjectsTrs.localPosition = Player010_Kiduite_SeikouPosObj.transform.localPosition;

            ////カメラリセット（+回転と立ち設定）
            ////カメラリセット値変更してリセット
            //CameraReset(Player010_Kiduite_SeikouPosObj.transform.localEulerAngles
            //    , DB.cameraStandAnchorDefLocalPos);//Anchor立ち

            //#endregion

            //while (novelCurrentPageInt < 2) { yield return null; };
            ////開幕
            //FadeBlack(0, 0.2f);

            //girlAnim.speed = 0.3f;

            //#region 歩き出し処理
            //ChieriMotion("かくれおに探し歩きrootポーズ", 0 / girlAnim.speed, 0);
            //GirlTrs.localPosition = tmpChieriStartLclPos;
            //GirlTrs.localEulerAngles = tmpChieriStartLclEul;
            //DOTweenToLAIKSEyes(LAIKEyeS, 0, 0f);
            //DOTweenToLAIKSHead(LAIKHeadS, 0, 0f);
            //DOTweenToLAIKSBody(LAIKBodyS, 0, 0f);


            //DelAll_Hukidashi();

            ////IKテーブルのあたりに
            //GameObject tmpChieri_24_Look_PlayerHWPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_24_Look_PlayerHWPosObj") as GameObject;
            //IKLookAtEyeTargetTrs.position = tmpChieri_24_Look_PlayerHWPosObj.transform.position;
            //IKLookAtHeadTargetTrs.position = tmpChieri_24_Look_PlayerHWPosObj.transform.position;
            //IKLookAtBodyTargetTrs.position = tmpChieri_24_Look_PlayerHWPosObj.transform.position;
            ////IKON
            //DOTweenToLAIKSEyes(LAIKEyeS, 1, 0.5f / girlAnim.speed);
            //DOTweenToLAIKSHead(LAIKHeadS, 1, 1f / girlAnim.speed);
            //DOTweenToLAIKSBody(LAIKBodyS, 0.1f, 1f / girlAnim.speed);
            //yield return new WaitForSeconds(0.7f / girlAnim.speed);

            //ChieriMotion("かくれおに探し歩きroot開始", 0 / girlAnim.speed, 0);
            //yield return new WaitForSeconds(1 / girlAnim.speed);
            //Hukidashi("探し台詞035");//眞人～？もー

            ////足元見る
            //FollowDOMove(IKLookAtEyeTargetTrs, RFootSphereTrs, 0.5f / girlAnim.speed);
            //FollowDOMove(IKLookAtHeadTargetTrs, RFootSphereTrs, 1 / girlAnim.speed);
            //FollowDOMove(IKLookAtBodyTargetTrs, RFootSphereTrs, 1f / girlAnim.speed);
            ////IK量調節
            //DOTweenToLAIKSEyes(LAIKEyeS, 1, 0.5f / girlAnim.speed);
            //DOTweenToLAIKSHead(LAIKHeadS, 0.5f, 1 / girlAnim.speed);
            //DOTweenToLAIKSBody(LAIKBodyS, 0.2f, 1f / girlAnim.speed);

            ////クローゼット前へ舵取り
            //GameObject tmpChieri_22_Move_ClosetMaePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_22_Move_ClosetMaePosObj") as GameObject;

            //Tweener tmpChieriRotTweener =
            //GirlTrs.DORotate(Quaternion.LookRotation(
            //    tmpChieri_22_Move_ClosetMaePosObj.transform.localPosition - GirlTrs.localPosition).eulerAngles
            //    , 3f / girlAnim.speed)
            //    .SetEase(Ease.OutCubic)
            //    .SetAutoKill(false);
            //#endregion


            //StartCoroutine(GirlAnimReadSystem());
            //while (nowGirlAnimClipName != "かくれおに探し歩きrootループ") { yield return null; }
            //while (girlAnimNomTime <= 0.1f) { yield return null; }
            //NovelSetVis("T_Door_気づいてa030");//気づいてない・・？　嘘だ
            //SEPlay("heart_def", 0.5f);

            //#region //時間ゆっくり演出（回転速度変えるの大変なのでやめ）
            //////現在スピード保持してほぼ止め
            ////float tmpNowSpeed = girlAnim.speed;
            ////girlAnim.speed = 0.0001f;

            //////DOTWeenTOでアニメスピード
            ////DOTween.To(() => girlAnim.speed, (x) => girlAnim.speed = x, 0.05f, 1f);

            ////tmpChieriRotTweener.ChangeEndValue(0.05f);

            ////PPv2Memai(); 
            ////yield return new WaitForSeconds(0.5f);
            ////PPv2Memai(false,1);
            //#endregion
            //while (girlAnimNomTime <= 0.5f) { yield return null; }
            //NovelSetVis("T_Door_気づいてa040");//うわああ！

            //while (girlAnimNomTime <= 0.57f) { yield return null; }
            //isGirlAnimReadSystem = false;

            //Hukidashi("気づいてもらい010");//え、あ！
            //ChieriMotion("f_驚愕", 0.05f / girlAnim.speed, 2);
            //#region IKプレイヤ見（頭少し下）(頭Clamp注意)
            //ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
            //DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

            //LAIKHead.solver.clampWeightHead = 0.78f;
            //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.08f, 0), 2f);
            //DOTweenToLAIKSHead(LAIKHeadS, 1, 0f);
            //#endregion
            //#region プレイヤーカメラ倒れ 直
            ////TPSプレイヤー倒れモーション
            //isPlayerUniqueMotion = true;
            //PlayerMotion("liedown_00_Re", 0.2f, 0);

            //SEPlay("倒れ_Custom_85532__maj061785__body-hitting-mat", 0.2f);

            //Vector3
            //    tmpDefCameraPos = CameraAnchorTrs.localPosition,
            //    tmpDefCameraEul = CameraAnchorTrs.localEulerAngles,
            //    tmpFlowCameraPos = new Vector3(0, 1.2f, 0),
            //    tmpSlipCameraPos = new Vector3(0, 0.3f, 0),
            //    tmpSlipCameraEul = new Vector3(-45, 0, 0);

            //CameraAnchorTrs.DOLocalMove(tmpFlowCameraPos, 0.1f);
            //yield return new WaitForSeconds(0.1f);
            //CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.1f).SetEase(Ease.OutBounce);
            //yield return new WaitForSeconds(0.1f);
            //CameraAnchorTrs.DOLocalMove(tmpDefCameraPos, 0.1f);
            //yield return new WaitForSeconds(0.1f);

            //CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.6f).SetEase(Ease.OutBounce);
            //CameraAnchorTrs.DOLocalRotate(tmpSlipCameraEul, 0.5f).SetEase(Ease.InSine);

            //GameObject Player020_Kiduite_SeikouTaorePosObj
            //    = Resources.Load("_PosObj/16KakureOrKiduite/Player020_Kiduite_SeikouTaorePosObj") as GameObject;
            //CameraObjectsTrs.DOLocalMove(Player020_Kiduite_SeikouTaorePosObj.transform.localPosition
            //    , 1f);
            //#endregion


            //ChieriMotion("かくれおに発見口に手原点", 0.1f / girlAnim.speed, 0);
            //yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            //yield return new WaitForSeconds(0.5f);
            //AseTare();
            //ChieriMotion("f_驚愕心配", 0.05f / girlAnim.speed, 2);
            //Hukidashi("気づいてもらい020");//大丈夫？
            //yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            //yield return new WaitForSeconds(0.5f);


            //NovelSetVis("T_Door_気づいてa050");//死ぬかと思った。倒された。
            //while (novelCurrentPageInt < 1) { yield return null; }
            //FadeBlack(1, 0.5f);
            //yield return new WaitForSeconds(0.5f);

            //#region 暗幕中設定
            ////倒れカメラ戻し
            //CameraAnchorTrs.DOLocalMove(tmpDefCameraPos, 0f);
            //CameraAnchorTrs.DOLocalRotate(tmpDefCameraEul, 0f);
            //isPlayerUniqueMotion = false;
            //while (isNovelSetVisIng) { yield return null; }
            //girlAnim.speed = 0.5f;

            //#region 智恵理とプレイヤー位置調整
            //GameObject Chieri020_Kiduite_SeikouOkiPosObj
            //   = Resources.Load("_PosObj/0160KiduiteMorau/Chieri020_Kiduite_SeikouOkiPosObj") as GameObject;
            //GirlTrs.localPosition = Chieri020_Kiduite_SeikouOkiPosObj.transform.localPosition;
            //GirlTrs.localEulerAngles = Chieri020_Kiduite_SeikouOkiPosObj.transform.localEulerAngles;

            //GameObject Player030_Kiduite_SeikouOkiPosObj
            //   = Resources.Load("_PosObj/16KakureOrKiduite/Player030_Kiduite_SeikouOkiPosObj") as GameObject;
            //CameraObjectsTrs.localPosition = Player030_Kiduite_SeikouOkiPosObj.transform.localPosition;

            //#endregion

            //ChieriMotion("片膝立ちミラーしゃがみ開始原点", 0 / girlAnim.speed, 0);
            //NovelSetVis("T_Door_気づいてa060");//よっと・・ん？
            //yield return new WaitForSeconds(0.5f);
            //#region 腰にサウンドオブジェ設置
            ////WindnoiseSoundObj付与（腰）
            //GameObject pelvisWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            //    , GirlPelvisTrs);
            //DB.evMoveDelObjList.Add(pelvisWindnoiseSoundObj);
            ////LFootWindnoiseSoundObj.GetComponent<AudioSource>().mute = true;//設置時に音鳴るので一時ミュート

            ////SoundObjのPos
            //GameObject SoundObj010ParePelvis_Kiduite_SeikouSyagamiPosObj
            //    = Resources.Load("_PosObj/16KakureOrKiduite/SoundObj010ParePelvis_Kiduite_SeikouSyagamiPosObj") as GameObject;
            //pelvisWindnoiseSoundObj.transform.localPosition = SoundObj010ParePelvis_Kiduite_SeikouSyagamiPosObj.transform.localPosition;
            //#endregion

            //#endregion

            //FadeBlack(0, 0.5f);

            //StartCoroutine(GirlAnimReadSystem());
            //while (nowGirlAnimClipName != "片膝立ちミラーしゃがみ開始原点") { yield return null; }
            //while (girlAnimNomTime <= 0.2f) { yield return null; }
            //Hukidashi("気づいてもらい030");//怪我してない？
            //while (girlAnimNomTime <= 0.5f) { yield return null; }
            //NovelSetVis("T_Door_気づいてa070");//どわあああ！！


            //while (girlAnimNomTime <= 0.8f) { yield return null; }
            //#region プレイヤーカメラ倒れ 直
            ////TPSプレイヤー倒れモーション
            //isPlayerUniqueMotion = true;
            //PlayerMotion("liedown_00_Re", 0.2f, 0);

            //SEPlay("倒れ_Custom_85532__maj061785__body-hitting-mat", 0.2f);

            //tmpDefCameraPos = CameraAnchorTrs.localPosition;
            //tmpDefCameraEul = CameraAnchorTrs.localEulerAngles;
            //tmpFlowCameraPos = new Vector3(0, 1.2f, 0);
            //tmpSlipCameraPos = new Vector3(0, 0.3f, 0);
            //tmpSlipCameraEul = new Vector3(-45, 0, 0);

            //CameraAnchorTrs.DOLocalMove(tmpFlowCameraPos, 0.1f);
            //yield return new WaitForSeconds(0.1f);
            //CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.1f).SetEase(Ease.OutBounce);
            //yield return new WaitForSeconds(0.1f);
            //CameraAnchorTrs.DOLocalMove(tmpDefCameraPos, 0.1f);
            //yield return new WaitForSeconds(0.1f);

            //CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.6f).SetEase(Ease.OutBounce);
            //CameraAnchorTrs.DOLocalRotate(tmpSlipCameraEul, 0.5f).SetEase(Ease.InSine);

            //GameObject Player040_Kiduite_SeikouOkiTaorePosObj
            //    = Resources.Load("_PosObj/16KakureOrKiduite/Player040_Kiduite_SeikouOkiTaorePosObj") as GameObject;
            //CameraObjectsTrs.DOLocalMove(Player040_Kiduite_SeikouOkiTaorePosObj.transform.localPosition
            //    , 1f);
            //#endregion

            //while (girlAnimNomTime <= 0.9f) { yield return null; }
            //ChieriMotion("f_あ、えっとー・・", 0.05f / girlAnim.speed, 2);
            //Hukidashi("気づいてもらい040");//あ・・・
            //TereHohoAlphaChange(0.6f);
            //TereHoho();
            //AseTare(Mathf.Infinity);
            //yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            //yield return new WaitForSeconds(1);

            //ChieriMotion("f_あはは・・2目開き", 0.05f / girlAnim.speed, 2);
            //Hukidashi("気づいてもらい050");//ごめんね
            //yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            //yield return new WaitForSeconds(0.5f);
            //NovelSetVis("T_Door_気づいてa080");//はは・・

            //FadeBlack(1, 4f);
            //yield return new WaitForSeconds(4f);

            //while (isNovelSetVisIng) { yield return null; }

            //yield return new WaitForSeconds(2f);

            //EventMove("帰ろうとしてた？", true);
            //yield break;
            #endregion

            yield break;

        }

        //開幕
        FadeBlack(0, 0.2f);

        #region 現在こちらへの分岐なし（サーチかくれんぼ作成中のもの）
        girlAnim.speed = 0.3f;
        Hukidashi("探し台詞030");//部屋にはいるよね



        //IKテーブルのあたりに
        GameObject Chieri_24_Look_PlayerHWPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_24_Look_PlayerHWPosObj") as GameObject;
        IKLookAtEyeTargetTrs.position = Chieri_24_Look_PlayerHWPosObj.transform.position;
        IKLookAtHeadTargetTrs.position = Chieri_24_Look_PlayerHWPosObj.transform.position;
        IKLookAtBodyTargetTrs.position = Chieri_24_Look_PlayerHWPosObj.transform.position;
        //IKON
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0.5f / girlAnim.speed);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 1f / girlAnim.speed);
        DOTweenToLAIKSBody(LAIKBodyS, 0.1f, 1f / girlAnim.speed);
        yield return new WaitForSeconds(0.7f / girlAnim.speed);


        ChieriMotion("かくれおに探し歩きroot開始", 0 / girlAnim.speed, 0);
        yield return new WaitForSeconds(1 / girlAnim.speed);
        Hukidashi("探し台詞035");//公～？もー



        //足元見る
        FollowDOMove(IKLookAtEyeTargetTrs, RFootSphereTrs, 0.5f / girlAnim.speed);
        FollowDOMove(IKLookAtHeadTargetTrs, RFootSphereTrs, 1 / girlAnim.speed);
        FollowDOMove(IKLookAtBodyTargetTrs, RFootSphereTrs, 1f / girlAnim.speed);
        //IK量調節
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0.5f / girlAnim.speed);
        DOTweenToLAIKSHead(LAIKHeadS, 0.5f, 1 / girlAnim.speed);
        DOTweenToLAIKSBody(LAIKBodyS, 0.2f, 1f / girlAnim.speed);


        //New移動ポイント拡大縮小演出
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[3].transform.Find("GrasstableHasira02").gameObject);


        //クローゼット前へ舵取り
        GameObject Chieri_22_Move_ClosetMaePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_22_Move_ClosetMaePosObj") as GameObject;

        Tweener chieriRotTweener =
        GirlTrs.DORotate(Quaternion.LookRotation(
            Chieri_22_Move_ClosetMaePosObj.transform.localPosition - GirlTrs.localPosition).eulerAngles
            , 3f / girlAnim.speed)
            .SetEase(Ease.OutCubic)
            .SetAutoKill(false);

        yield return new WaitForSeconds(2f / girlAnim.speed);
        Hukidashi("探し台詞040");//踏んづけたら危ないのに
        yield return new WaitForSeconds(0.8f / girlAnim.speed);
        NovelSetVis("T_Door_出られなかった010b2");//（危ないなら戻してくれよ！）

        //■目的地にほぼ到着したら抜け
        while ((GirlTrs.localPosition - Chieri_22_Move_ClosetMaePosObj.transform.localPosition).magnitude > 0.5f)
        {
            chieriRotTweener.ChangeEndValue(
                Quaternion.LookRotation(Chieri_22_Move_ClosetMaePosObj.transform.localPosition - GirlTrs.localPosition).eulerAngles
                , 0, true)
                .Restart();
            yield return null;
        }
        chieriRotTweener.Kill();
        //IKやめ
        DOTweenToLAIKSEyes(LAIKEyeS, 0, 0.5f / girlAnim.speed);
        DOTweenToLAIKSHead(LAIKHeadS, 0, 1 / girlAnim.speed);
        DOTweenToLAIKSBody(LAIKBodyS, 0, 1f / girlAnim.speed);
        Hukidashi("探し台詞050");//公～出ておいでー

        //伏せ開始
        ChieriMotion("かくれおに探し伏せ開始", 0.05f / girlAnim.speed, 0);

        //伏せアニメ終了まで待機
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "かくれおに探し伏せ開始") { yield return null; }
        while (nowGirlAnimClipName == "かくれおに探し伏せ開始") { yield return null; }
        isGirlAnimReadSystem = false;

        //右
        ChieriMotion("かくれおに探し伏せ右開始", 0.1f / girlAnim.speed, 0);
        Hukidashi("探し台詞060");//・・ん～・・・
        ChieriMotion("f_きゃう", 0.3f / girlAnim.speed, 2);


        yield return new WaitForSeconds(2.5f / girlAnim.speed);
        Hukidashi("探し台詞065");//ほんとにいない

        ChieriMotion("かくれおに探し伏せ右から移行", 0f / girlAnim.speed, 0);

        //アニメ終了まで待機
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "かくれおに探し伏せ右から移行") { yield return null; }
        while (nowGirlAnimClipName == "かくれおに探し伏せ右から移行") { yield return null; }
        isGirlAnimReadSystem = false;

        ChieriMotion("かくれおに探し伏せ終了", 0.01f / girlAnim.speed, 0);

        //アニメ終了まで待機
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "かくれおに探し伏せ終了") { yield return null; }
        while (nowGirlAnimClipName == "かくれおに探し伏せ終了") { yield return null; }
        isGirlAnimReadSystem = false;

        //見下ろしIK量調節
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0.5f / girlAnim.speed);
        DOTweenToLAIKSHead(LAIKHeadS, 0.5f, 1 / girlAnim.speed);
        DOTweenToLAIKSBody(LAIKBodyS, 0.2f, 1f / girlAnim.speed);
        yield return new WaitForSeconds(0.7f / girlAnim.speed);

        ChieriMotion("かくれおに立ち右180度回転root", 0f / girlAnim.speed, 0);

        //アニメ終了まで待機
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "かくれおに立ち右180度回転root") { yield return null; }
        while (nowGirlAnimClipName == "かくれおに立ち右180度回転root") { yield return null; }
        isGirlAnimReadSystem = false;

        //IKやめ
        DOTweenToLAIKSEyes(LAIKEyeS, 0, 0.5f / girlAnim.speed);
        DOTweenToLAIKSHead(LAIKHeadS, 0, 1 / girlAnim.speed);
        DOTweenToLAIKSBody(LAIKBodyS, 0, 1f / girlAnim.speed);

        yield return new WaitForSeconds(1f / girlAnim.speed);

        Hukidashi("探し台詞070");//隠れてる？
        ChieriMotion("かくれおに悩み肘手見回し", 0f / girlAnim.speed, 0);

        //アニメ終了まで待機
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "かくれおに悩み肘手見回し") { yield return null; }
        while (nowGirlAnimClipName == "かくれおに悩み肘手見回し") { yield return null; }
        isGirlAnimReadSystem = false;


        ChieriMotion("かくれおに探し歩きroot開始", 0 / girlAnim.speed, 0);


        //TV台前へ舵取り
        GameObject Chieri_23_Move_TVDaiMaePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_23_Move_TVDaiMaePosObj") as GameObject;

        chieriRotTweener =
        GirlTrs.DORotate(Quaternion.LookRotation(
            Chieri_23_Move_TVDaiMaePosObj.transform.localPosition - GirlTrs.localPosition).eulerAngles
            , 3f / girlAnim.speed)
            .SetEase(Ease.OutCubic)
            .SetAutoKill(false);

        yield return new WaitForSeconds(1f / girlAnim.speed);

        yield return new WaitForSeconds(2f / girlAnim.speed);



        //■目的地にほぼ到着したら抜け
        while ((GirlTrs.localPosition - Chieri_23_Move_TVDaiMaePosObj.transform.localPosition).magnitude > 0.5f)
        {
            chieriRotTweener.ChangeEndValue(
                Quaternion.LookRotation(Chieri_23_Move_TVDaiMaePosObj.transform.localPosition - GirlTrs.localPosition).eulerAngles
                , 0, true)
                .Restart();
            yield return null;
        }
        //IKやめ
        DOTweenToLAIKSEyes(LAIKEyeS, 0, 0.5f / girlAnim.speed);
        DOTweenToLAIKSHead(LAIKHeadS, 0, 1 / girlAnim.speed);
        DOTweenToLAIKSBody(LAIKBodyS, 0, 1f / girlAnim.speed);

        Hukidashi("探し台詞080");//こことか？

        //伏せ開始
        ChieriMotion("かくれおに探し伏せ開始", 0.05f / girlAnim.speed, 0);

        //伏せアニメ終了まで待機
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "かくれおに探し伏せ開始") { yield return null; }
        while (nowGirlAnimClipName == "かくれおに探し伏せ開始") { yield return null; }
        isGirlAnimReadSystem = false;

        //右
        ChieriMotion("かくれおに探し伏せ右開始", 0.1f / girlAnim.speed, 0);
        ChieriMotion("f_きゃう", 0.3f / girlAnim.speed, 2);
        yield return new WaitForSeconds(2.5f / girlAnim.speed);

        #region //（■■■■■■■■■Mirrorが使えないため、ベッド下捜索は一時スキップ
        //Hukidashi("探し台詞090");//ベッドのした？

        //ChieriMotion("かくれおに探し伏せ右から移行", 0.4f, 0);
        //yield return new WaitForSeconds(0.4f / girlAnim.speed);

        ////アニメ終了まで待機
        //StartCoroutine(GirlAnimReadSystem());
        //while (nowAnimClipName == "かくれおに探し伏せ右から移行")
        //{ yield return null; }
        //isGirlAnimReadSystem = false;


        ////左（■■■■■■■■■HumanoidだとMirrorが使えない）
        //ChieriMotion("かくれおに探し伏せ左開始", 0.4f, 0);
        //ChieriMotion("f_きゃう", 1f, 2);

        //yield return new WaitForSeconds(2.5f / girlAnim.speed);
        #endregion

        Hukidashi("探し台詞100");//え～いない・・

        ChieriMotion("かくれおに探し伏せ右から移行", 0f / girlAnim.speed, 0);

        //アニメ終了まで待機
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "かくれおに探し伏せ右から移行") { yield return null; }
        while (nowGirlAnimClipName == "かくれおに探し伏せ右から移行") { yield return null; }
        isGirlAnimReadSystem = false;

        ChieriMotion("かくれおに探し伏せ終了", 0.01f / girlAnim.speed, 0);

        //アニメ終了まで待機
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "かくれおに探し伏せ終了") { yield return null; }
        while (nowGirlAnimClipName == "かくれおに探し伏せ終了") { yield return null; }
        isGirlAnimReadSystem = false;



        //IK量調節
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0.5f / girlAnim.speed);
        DOTweenToLAIKSHead(LAIKHeadS, 0.5f, 1 / girlAnim.speed);
        DOTweenToLAIKSBody(LAIKBodyS, 0.2f, 1f / girlAnim.speed);
        yield return new WaitForSeconds(0.7f / girlAnim.speed);



        Hukidashi("探し台詞110");//・・・・・

        ChieriMotion("かくれおに立ち右180度回転root", 0f / girlAnim.speed, 0);
        //アニメ終了まで待機
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "かくれおに立ち右180度回転root") { yield return null; }
        while (nowGirlAnimClipName == "かくれおに立ち右180度回転root") { yield return null; }
        isGirlAnimReadSystem = false;

        ChieriMotion("かくれおに探し歩きrootポーズ", 0.4f, 0);

        NovelSetVis("tmp隠れ続けた");
        while (isNovelSetVisIng) { yield return null; }
        EventMove("摘み上げられ", true);

        #endregion


        #endregion



        yield break;
    }
    #region ┗智恵理発見時の処理
    bool
        isD2200a = false;
    IEnumerator D2200a()
    {
        if (isKiduitemorau) { yield break; }

        //重複キャンセル
        if (isD2200a) { yield break; }
        isD2200a = true;

        while (isD2200a)
        {
            //■発見
            if (KO_ChieriEyeHitSlider.value == KO_ChieriEyeHitSlider.maxValue)
            {
                ChieriMotion("笑顔01口眉_目閉じない", 0.3f, 2);
                Hukidashi("探し台詞200");//あ、いたいた
                isKOSystem = false;
                KO_isChieriEyeRayColSystem = false;
                isD2200a = false;
                StopCoroutine(nowRunEvCoroutine);


                //IKプレイヤー見る
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
                DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
                DOTweenToLAIKSBody(LAIKBodyS, 0, 1);

                yield return new WaitForSeconds(0.5f);

                #region ■現在アニメによって分岐
                StartCoroutine(GirlAnimReadSystem());
                if (nowGirlAnimClipName == "かくれおに探し歩きroot開始"
                    || nowGirlAnimClipName == "かくれおに探し歩きrootループ"
                    || nowGirlAnimClipName == "かくれおに立ち右180度回転root")
                {
                    ChieriMotion("かくれおに探し伏せ開始", 0.3f, 0);
                }
                else if (nowGirlAnimClipName == "かくれおに探し伏せ右開始"
                    || nowGirlAnimClipName == "かくれおに探し伏せ右ループ")
                {
                    ChieriMotion("かくれおに探し伏せ右から移行", 0.3f, 0);
                }
                isGirlAnimReadSystem = false;
                #endregion

                NovelSetVis("T_Door_出られなかった010b10");//（あ、え？）　姿を見られた
                while (novelCurrentPageInt < 2) { yield return null; }

                float tmpFadeTime = 1;
                //暗幕
                FadeBlack(1, tmpFadeTime);
                yield return new WaitForSeconds(tmpFadeTime);

                while (isNovelSetVisIng) { yield return null; }

                NovelSetVis("T_Door_出られなかった010b11");//（しまった！）逃げ出そうとした。
                Hukidashi("探し台詞210");//逃げないの！

                while (isNovelSetVisIng) { yield return null; }
                yield return new WaitForSeconds(3);

                EventMove("摘み上げられ");
            }

            yield return null;
        }

        yield break;
    }
    #endregion
    IEnumerator D2210()//摘み上げられ
    {
        if (debugEventMoveFlag == true)
        {
            #region 大きさや位置
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;

            #region 小物
            //小物消し
            Drill_chieriTrs.gameObject.SetActive(false);
            DrillTrs.gameObject.SetActive(false);
            KeshigomuObj.SetActive(true);
            SharpenObj.SetActive(true);

            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;
            #endregion

            #endregion
        }
        EventReset();

        FadeBlack(1, 0);

        #region 暗幕中設定
        //智恵理0位置ロック解除
        DB.isChieriPosLock = false;
        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);
        //アニメスピード
        girlAnim.speed = 0.3f;

        //■PosObj
        #region プレイヤー 位置とポーズとカメラリセット
        //プレイヤー
        isPlayerUniqueMotion = false;

        GameObject Player_04_TsumamiagePosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Player_04_TsumamiagePosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_04_TsumamiagePosObj.transform.localPosition;

        //カメラリセット（+回転と立ち設定）
        //カメラリセット値変更してリセット
        CameraReset(Player_04_TsumamiagePosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos//立ち
            , false
            , Vector3.zero//倒れのアンカーリセット
            , false
            , true
            );
        #endregion


        #region 智恵理
        GameObject Chieri_08_TsumamiagePosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_08_TsumamiagePosObj") as GameObject;
        GirlTrs.localPosition = Chieri_08_TsumamiagePosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri_08_TsumamiagePosObj.transform.localEulerAngles;

        //IKプレイヤー見る
        //まずIKリセット
        LAIKEye.solver.clampWeightEyes = DB.defLAIKEyeClamp;//目IKClamp戻し
        LAIKHead.solver.clampWeightHead = DB.defLAIKHeadClamp;//頭IKClamp戻し
        FollowDOMoveFromTrsList.Clear();//前に追いかけてるIK系切り
        yield return null;

        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        #endregion
        #region ■智恵理摘む手のコリダーオフ（ちゃんとあとで元に戻す）
        for (int i = 0; i < ChieriColliderObjs.Length; i++)
        {
            if (
                ChieriColliderObjs[i].name == "UpperArm_R_coll" ||
                ChieriColliderObjs[i].name == "Forearm_R_coll" ||
                ChieriColliderObjs[i].name == "Hand_R_coll" ||
                ChieriColliderObjs[i].name == "Hitosashi00_R_coll" ||
                ChieriColliderObjs[i].name == "Hitosashi01_R_coll" ||
                ChieriColliderObjs[i].name == "Hitosashi02_R_coll" ||
                ChieriColliderObjs[i].name == "Ko00_R_coll" ||
                ChieriColliderObjs[i].name == "Ko01_R_coll" ||
                ChieriColliderObjs[i].name == "Ko02_R_coll" ||
                ChieriColliderObjs[i].name == "Kusuri00_R_coll" ||
                ChieriColliderObjs[i].name == "Kusuri01_R_coll" ||
                ChieriColliderObjs[i].name == "Kusuri02_R_coll" ||
                ChieriColliderObjs[i].name == "Naka00_R_coll" ||
                ChieriColliderObjs[i].name == "Naka01_R_coll" ||
                ChieriColliderObjs[i].name == "Naka02_R_coll" ||
                ChieriColliderObjs[i].name == "Oya00_R_coll" ||
                ChieriColliderObjs[i].name == "Oya01_R_coll" ||
                ChieriColliderObjs[i].name == "Oya02_R_coll"
                )
            {
                ChieriColliderObjs[i].SetActive(false);
            }
        }
        #endregion

        #region 智恵理右人差し指　と　腰にサウンドオブジェ付与
        //■WindnoiseSoundObj付与（右ひとさし指）
        GameObject RHitosasiSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRhitosashi02Trs);
        DB.evMoveDelObjList.Add(RHitosasiSoundObj);
        RHitosasiSoundObj.name = nameof(RHitosasiSoundObj);

        //ボリューム0
        AudioSource tmpRhitosasiAS = RHitosasiSoundObj.GetComponent<AudioSource>();
        tmpRhitosasiAS.volume = 0;
        //SoundObjのPos
        GameObject SoundObj_04_TsumamiYubi_RHitosasiPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_04_TsumamiYubi_RHitosasiPosObj") as GameObject;
        RHitosasiSoundObj.transform.localPosition = SoundObj_04_TsumamiYubi_RHitosasiPosObj.transform.localPosition;


        //■WindnoiseSoundObj付与（腰）
        GameObject spineWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , Bip001Spine, false);
        DB.evMoveDelObjList.Add(spineWindnoiseSoundObj);
        spineWindnoiseSoundObj.name = nameof(spineWindnoiseSoundObj);

        //位置
        spineWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpSpineWindnoiseSound = spineWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpSpineWindnoiseSound.aSource.maxDistance = 250;
        //tmpSpineWindnoiseSound.pitchMax = 0.4f;
        //tmpSpineWindnoiseSound.pitchUpRateAdjustFloat = 14;
        //tmpSpineWindnoiseSound.pitchDownRateAdjustFloat = 10;

        //Volume0に
        tmpSpineWindnoiseSound.aSource.volume = 0f;
        #endregion

        //智恵理スマホ
        ChieriSumahoObj.SetActive(true);
        ChieriSumahoObj.transform.SetParent(GameObjectsTrs, false);//智恵理の手から外して

        GameObject ChieriSumaho010_HikidashiUePosObj
            = Resources.Load("_PosObj/13Tansaku00/ChieriSumaho010_HikidashiUePosObj") as GameObject;

        ChieriSumahoObj.transform.localPosition = ChieriSumaho010_HikidashiUePosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho010_HikidashiUePosObj.transform.localEulerAngles;



        ChieriMotion("片膝立ち宿題促し開始ポーズ", 0f, 0);
        //ChieriMotion("片膝立ちミラーしゃがみループ", 0f, 0);//なんか手が寿司三昧
        ChieriMotion("f_笑顔口眉ジト目40", 0f, 2);

        yield return null;
        GirlPosToIKTargetPosRot(); while (isGirlPosToIKTargetPosRotLoading) { yield return null; }
        yield return null;

        //少し見下ろし前傾（LookAtでBody傾け）
        DOTweenToLAIKSBody(LAIKHeadS, 0.3f, 0);
        //腰当の左手を固定
        DOTweenToIKEfPos(IKLHandEf, 1, 0);
        DOTweenToIKEfRot(IKLHandEf, 1, 0);



        #endregion
        //環境音フェードイン
        KankyouBGMVolumer(0.5f, 2);

        HukidashiNovelDistanceChange(5f);

        NovelSetVis("T_Door_出られなかった010b12");//はぁっ……！はぁっ……！　あっさり追い詰められてしまった
        while (novelCurrentPageInt < 1) { yield return null; }

        //開幕
        FadeBlack(0, 1);
        yield return new WaitForSeconds(2);

        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1, "f_笑顔口眉ジト目40", 0.05f, 2);//時間差表情戻し
        Hukidashi("D2210N摘み010");//床の上ってあぶないでしょ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        yield return new WaitForSeconds(0.5f);

        NovelSetVis("D2210N摘み010");//聞こえたが目を離すのが恐ろしい
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);


        ChieriMotion("f_ジト目40ん？私のハンカチで？", 0.5f, 2);
        Hukidashi("D2210N摘み020");//さてと
        yield return new WaitForSeconds(1);

        //腰風音ON
        tmpSpineWindnoiseSound.aSource.volume = 1f;

        ChieriMotion("片膝立ち宿題促し開始", 0f, 0);
        #region 手と前傾IKもしゃがみのためにオフ
        //前傾もどし
        DOTweenToLAIKSBody(LAIKHeadS, 0f, 1 / girlAnim.speed);
        //左手もどし
        DOTweenToIKEfPos(IKLHandEf, 0, 1f / girlAnim.speed);
        DOTweenToIKEfRot(IKLHandEf, 0, 1f / girlAnim.speed);
        #endregion
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "片膝立ち宿題促し開始") { yield return null; }

        //軋みタイミング1まで待機
        while (girlAnimNomTime <= 0.2f) { yield return null; }
        //きしみ音
        SEPlay(GirlLFootTrs.position, Other3DSEObj, "WOOD FLOOR CREAKING_01_00_ピッチ-6", 4);

        NovelSetVis("D2210N摘み020");//ひ！　しゃがんだだけだった

        //軋みタイミング2まで待機
        while (girlAnimNomTime <= 0.6f) { yield return null; }
        //きしみ音
        SEPlay(GirlLFootTrs.position, Other3DSEObj, "WOOD FLOOR CREAKING_00_05_ピッチ-6", 3);

        //膝つきまで待機
        while (girlAnimNomTime <= 0.82f) { yield return null; }
        //ひざ付き音
        isAnimTriggerLForcePlay = true;

        #region //デバッグ軋みと揺れテスト
        //while (true)
        //{
        //    if (Input.GetKeyDown(KeyCode.F))
        //    {
        //        ChieriMotion("片膝立ち宿題促し開始", 0f, 0);
        //        StartCoroutine(GirlAnimReadSystem());
        //        while (nowGirlAnimClipName != "片膝立ち宿題促し開始") { yield return null; }

        //        //軋みタイミングまで待機
        //        while (girlAnimNomTime <= 0.6f) { yield return null; }
        //        //きしみ音
        //        SEPlay(GirlLFootTrs.position, Other3DSEObj, "WOOD FLOOR CREAKING_00_05_ピッチ-6", 3);

        //        //膝つきまで待機
        //        while (girlAnimNomTime <= 0.82f) { yield return null; }
        //        //ひざ付き音
        //        isAnimTriggerLForcePlay = true;
        //    }

        //    if (Input.GetKeyDown(KeyCode.V))
        //    {
        //        isAnimTriggerLForcePlay = true;
        //    }
        //    if (Input.GetKeyDown(KeyCode.B))
        //    {
        //        SEPlay(GirlLFootTrs.position, Other3DSEObj, FootStepSE(woodFloorCreakingPicthMinus6SEStrList), 2);
        //    }

        //    yield return null;

        //}
        #endregion

        yield return new WaitForSeconds(1);
        yield return KeyOrWait(3);

        while (isNovelSetVisIng) { yield return null; }

        //しゃがみ終わりまで待機
        while (nowGirlAnimClipName != "片膝立ち宿題促しループ") { yield return null; Debug.Log("aaa"); }
        //while (girlAnimNomTime <= 0.5f) { yield return null; Debug.Log("bbb"); }
        isGirlAnimReadSystem = false;

        //腰風音OFF
        tmpSpineWindnoiseSound.aSource.DOFade(0, 1);


        ////リーチを0に
        //FBBIK.solver.rightArmChain.reach = 0;
        //(スカート対策だったが、Bodyを動かしていらなくなった)

        #region 指で摘み
        //ツイストオフ
        isKataTwistAuto = false;

        #region SekkinPivotで指先近づけ、首根っこを摘む

        //IKRHandターゲット手の位置に
        GameObject Chieri_09_IK_RHandTsumamiagePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_09_IK_RHandTsumamiagePosObj") as GameObject;
        IKRHandTargetTrs.localPosition = Chieri_09_IK_RHandTsumamiagePosObj.transform.localPosition;
        IKRHandTargetTrs.localEulerAngles = Chieri_09_IK_RHandTsumamiagePosObj.transform.localEulerAngles;

        yield return new WaitForSeconds(1);

        //右手 ゆびさしとIK同時に(ピボットObjがIKONで指差し状態前提のため)
        float tmpYubiFloat = 1.3f;
        ChieriMotion("デスクペットボトルへ落とす前ポーズ", tmpYubiFloat * girlAnim.speed, 5);
        DOTweenToIKEfPos(IKRHandEf, 1, tmpYubiFloat, Ease.InOutSine);
        DOTweenToIKEfRot(IKRHandEf, 1, tmpYubiFloat, Ease.InOutSine);

        StartCoroutine(GirlAnimReadSystem(5));
        while (nowGirlAnimOtherLayerClipNameDict[5] != "デスクペットボトルへ落とす") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[5] >= 1f) { yield return null; }


        //指の風切り音DOTWeenTO
        DOTween.To(() => tmpRhitosasiAS.volume, (x) => tmpRhitosasiAS.volume = x, 1f, 1f / girlAnim.speed);

        //指先ピボットオブジェ生成（IKONのゆびさしポーズ時じゃなきゃだめ）
        GameObject
            PivotObj
            = Instantiate(Resources.Load("EventSystem/Sekkin/SekkinPivotObj") as GameObject
            , GameObject.Find("BoneBip001 R hitosashi02").transform
            , false);
        DB.evMoveDelObjList.Add(PivotObj);

        Sekkin(PivotObj, IKRHandTargetTrs.gameObject);


        //ピボットでIKRHand逆同期スタート
        Sekkin(PivotObj, IKRHandTargetTrs.gameObject);
        //ピボット操作で右手人差し指プレイヤー首根っこへ
        float tmpTsumamiFloat = 2f;
        GameObject Chieri_10_IK_TsumamiPivotPosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_10_IK_TsumamiPivotPosObj") as GameObject;
        Tweener kubiChaseTweener =
        PivotObj.transform.DOMove(PlayerKubiNekkoPosObjTrs.position
            , tmpTsumamiFloat);
        PivotObj.transform.DORotateQuaternion(Chieri_10_IK_TsumamiPivotPosObj.transform.rotation
            , tmpTsumamiFloat);

        //※スカート動くのでIKBodyでためしに調整
        GameObject IKBody_TsumamiPosObj
            = Resources.Load("_PosObj/0170Tsumamiage/IKBody_TsumamiPosObj") as GameObject;
        IKBodyTargetTrs.localPosition = IKBody_TsumamiPosObj.transform.localPosition;
        DOTweenToIKEfPos(IKBodyEf, 1, 2, Ease.InQuad);


        //逃げても追従
        float
            tmpTime = 0,
            tmpTimeLimit = tmpTsumamiFloat;
        while (tmpTimeLimit > tmpTime)
        {
            tmpTime += 1 * Time.deltaTime;

            kubiChaseTweener
                .ChangeEndValue(PlayerKubiNekkoPosObjTrs.position, tmpTsumamiFloat - tmpTime, true)
                .Restart();

            yield return null;
        }
        #endregion

        #region ■脚のぼりシステム 首根っこ仕様でコルーチン始動
        //Inputロック
        AN_isInputLock = true;
        //プレイヤーダミー回転しない、手IKも出さない
        isPlayerANRotate = false;

        //起動
        StartCoroutine(AsinoboriSystem());

        //UIオフ
        AN_isUIVis = false;
        ANGrapHandUIObj.SetActive(false);
        Dummy_Hand.SetActive(false);//手表示オフ
        yield return null;

        //rigid監視スタート
        StartCoroutine(RigidReadSystem());

        #endregion

        //ダミーハンドオフ（登り状態になるけど首根っこのみなので）
        isDummyHandVis = false;

        //首根っこ掴みメソッド(Vector3.zeroは現在ダミー)
        AN_KubinekkoGrap(GirlRhitosashi02Trs, Vector3.zero, 2f);

        //AN起動調整待ち
        yield return null;
        yield return null;
        yield return null;

        //カメラリセット値変更
        CameraReset(Player_04_TsumamiagePosObj.transform.localEulerAngles
            , DB.cameraSitAnchorDefLocalPos //Anchorを座りに（摘み上げられ用）
            , false
            , null
            , false
            , false);//ユーザーカメラはリセットしない

        //念のため首根っこObj（ANのRootTrs）を指定位置に
        GameObject ANKubinekkoRoot_Rhitosashi02Pare_TsumamiPosObj
            = Resources.Load("_PosObj/0170Tsumamiage/ANKubinekkoRoot_Rhitosashi02Pare_TsumamiPosObj") as GameObject;
        AN_Kubinekko_RootTrs.transform.localPosition = ANKubinekkoRoot_Rhitosashi02Pare_TsumamiPosObj.transform.localPosition;

        //太一を指定位置に（本当はPlayerDummyでやりたいが、AN時の位置調整で回転以外で動かせず。仕方なく親のPlayerFBBIKtoHeadEffectorで調整）
        GameObject PlayerFBBIKtoHeadEffector_TsumamarePosObj
            = Resources.Load("_PosObj/0170Tsumamiage/PlayerFBBIKtoHeadEffector_TsumamarePosObj") as GameObject;
        PlayerFBBIKtoHeadEffectorObj.transform.localPosition = PlayerFBBIKtoHeadEffector_TsumamarePosObj.transform.localPosition;
        PlayerFBBIKtoHeadEffectorObj.transform.localEulerAngles = PlayerFBBIKtoHeadEffector_TsumamarePosObj.transform.localEulerAngles;

        #endregion □指で摘みあげ

        NovelSetVis("D2210N摘み030");//待て待って！　落ちそうで何も出来ない
        #region 摘んだので上げ
        //ピボット操作で右手人差し指顔前へ
        GameObject Chieri_11_IK_TsumamiAgePivotPosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_11_IK_TsumamiAgePivotPosObj") as GameObject;
        PivotObj.transform.DOLocalMove(Chieri_11_IK_TsumamiAgePivotPosObj.transform.localPosition
            , 8f)
            .SetEase(Ease.InOutSine);
        PivotObj.transform.DORotateQuaternion(Chieri_11_IK_TsumamiAgePivotPosObj.transform.rotation
            , 8f)
            .SetEase(Ease.InOutSine)

            .OnComplete(() =>
            {
                //指の風切り音DOTWeenTO
                DOTween.To(() => tmpRhitosasiAS.volume, (x) => tmpRhitosasiAS.volume = x, 0f, 0.1f / girlAnim.speed);
            });

        //IKBody切り
        DOTweenToIKEfPos(IKBodyEf, 0, 5);



        #endregion
        while (novelCurrentPageInt < 3) { yield return null; }

        ChieriMotion("f_あ！ほら！口普通キョトン", 0.05f / girlAnim.speed, 2);
        Hukidashi("D2210N摘み025");//まだ元気？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("f_怒ってる・・？", 0.05f / girlAnim.speed, 2);
        Hukidashi("D2210N摘み030");//それで、どうして降りたの？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("f_どうして逃げたの", 0.05f / girlAnim.speed, 2);
        Hukidashi("D2210N摘み040");//待っててって言ったのに
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        HukidashiNovelDistanceChange(1f, 0);

        NovelSetVis("D2210摘み020");//えっとー・・　頭が回らない
        while (isNovelSetVisIng) { yield return null; }



        #region ■選択肢 「怒ってます？」「誤解だって！」タイムアップ
        NovelSetVis("■D2210N摘み030");//ひえっ　こんなに気圧されるとは
        sentakuListNum = 99;//初期化
        while (isNovelSentakushiWait) { yield return null; }
        yield return new WaitForSeconds(1);

        Sentakushi("■D2210N摘み030a", 8f, "どうして降りたりしたの？");
        Sentakushi("■D2210N摘み030b", 8f);
        while (sentakuListNum == 99) { yield return null; }
        yield return null;

        //IK顔目そらしPosObj事前読み込み
        GameObject Chieri_13_Look_EyeSorasiPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_13_Look_EyeSorasiPosObj") as GameObject;
        GameObject Chieri_14_Look_HeadSorasiPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_14_Look_HeadSorasiPosObj") as GameObject;

        switch (sentakuListNum)
        {
            case 0://選択肢a 「怒りすぎじゃ・・？」
                #region
                yield return new WaitForSeconds(1);
                HukidashiNovelDistanceChange(4f, 0);

                NovelSetVis("D2210N摘み030a010");//「怒りすぎじゃ・・？」
                while (isNovelSetVisIng) { yield return null; }

                ChieriMotion("f_あ！ほら！口普通キョトン", 0.1f / girlAnim.speed, 2);
                Hukidashi("D2210N摘み030a010");//え？
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                NovelSetVis("D2210N摘み030a015");//しまっ・・あれ？

                //IK顔目そらし
                ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
                FollowDOMove(IKLookAtEyeTargetTrs, Chieri_13_Look_EyeSorasiPosObj.transform.localPosition, 0f);
                FollowDOMove(IKLookAtHeadTargetTrs, Chieri_14_Look_HeadSorasiPosObj.transform.localPosition, 0.6f / girlAnim.speed);

                ChieriMotion("f_あ！ほら！口普通キョトン眉下がり", 0.3f / girlAnim.speed, 2);

                while (novelCurrentPageInt < 1) { yield return null; }
                ChieriMotion("f_怒ってる・・？", 0.1f / girlAnim.speed, 2);

                yield return new WaitForSeconds(2);
                while (isNovelSetVisIng) { yield return null; }

                ChieriMotion("f_sleep100眉下がり", 0.02f / girlAnim.speed, 2);
                Hukidashi("D2210N摘み030a020");//うーん・・
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                yield return new WaitForSeconds(1);

                //目IKプレイヤー見る
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                ChieriMotion("f_あ！ほら！口普通キョトン", 0.02f / girlAnim.speed, 2);

                yield return new WaitForSeconds(2);
                //顔IKプレイヤー向く
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0), 2f);

                ChieriMotion("f_けど・・・", 0.05f, 2);
                //ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.02f, 2);//時間差表情戻し
                Hukidashi("D2210N摘み030a030");//うん、確かにそうかな
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                ChieriMotion("f_笑顔眉下がり", 0.05f, 2);
                ChieriMotionDelay(1, "f_笑顔眉下がり目閉じない", 0.02f, 2);//時間差表情戻し
                Hukidashi("D2210N摘み030a040");//責めなくてもよかったよね
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                yield return new WaitForSeconds(1);
                NovelSetVis("D2210N摘み030a020");//あ、いや、俺も・・
                while (isNovelSetVisIng) { yield return null; }

                yield return new WaitForSeconds(0.5f);

                #endregion
                break;

            case 1://選択肢b 「もしかして心配してくれてた・・・？」
                #region
                yield return new WaitForSeconds(1);
                HukidashiNovelDistanceChange(4f, 0);
                NovelSetVis("D2210N摘み030b010");//「もしかして心配してくれてた・・・？」
                while (isNovelSetVisIng) { yield return null; }

                TereHohoAlphaChange(1f);
                TereHoho();
                ChieriMotion("f_え？（半呆れ）", 0.1f, 2);
                Hukidashi("・・・");//・・・
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //IK顔目そらし
                ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
                FollowDOMove(IKLookAtEyeTargetTrs, Chieri_13_Look_EyeSorasiPosObj.transform.localPosition, 0f);
                FollowDOMove(IKLookAtHeadTargetTrs, Chieri_14_Look_HeadSorasiPosObj.transform.localPosition, 0.6f / girlAnim.speed);

                TereHohoAlphaChange(1f);
                ChieriMotion("f_はぁ・・", 0.1f, 2);
                Hukidashi("D2210N摘み030b010");//そういう風に取るかな・・
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                AseTare();
                yield return new WaitForSeconds(2);

                NovelSetVis("D2210N摘み030b020");//質問の答えにはなっていないが、
                while (isNovelSetVisIng) { yield return null; }
                yield return new WaitForSeconds(1);

                ChieriMotion("f_怒り目つむり", 0.05f, 2);
                yield return new WaitForSeconds(1);

                //IKプレイヤー見る
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0));
                ChieriMotion("f_どうして逃げたの", 0.02f / girlAnim.speed, 2);

                GameObject Chieri_11a_IK_TsumamiAgeSekkinPivotPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_11a_IK_TsumamiAgeSekkinPivotPosObj") as GameObject;
                PivotObj.transform.DOLocalMove(Chieri_11a_IK_TsumamiAgeSekkinPivotPosObj.transform.localPosition
                    , 0.1f / girlAnim.speed);


                yield return new WaitForSeconds(0.5f);
                NovelSetVis("D2210N摘み030b030");//ひっ
                yield return KeyOrWait(3);


                #endregion
                break;

            case -1://選択肢b タイムアップ
                isNovelFadeTween = isNovelSetVisIng = false;
                yield return new WaitForSeconds(1);

                ChieriMotion("f_怒ってる・・？", 0.2f, 2);
                Hukidashi("D2210摘み010");//もー
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                break;
        }


        #endregion □選択肢 

        #region 摘んだまま立ち上がり(台詞表情 選択肢で差分あり)
        girlAnim.speed = 0.2f;
        ChieriMotion("片膝立ち宿題促し終了立ち上がり", 0f, 0);

        //同時に右手IKも立ち上がり位置に
        GameObject Chieri_12_IK_TsumamiTatiagariPivotPosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_12_IK_TsumamiTatiagariPivotPosObj") as GameObject;
        PivotObj.transform.DOLocalMove(Chieri_12_IK_TsumamiTatiagariPivotPosObj.transform.localPosition
            , 2f / girlAnim.speed)
            .SetEase(Ease.InOutQuad);
        PivotObj.transform.DOLocalRotate(Chieri_12_IK_TsumamiTatiagariPivotPosObj.transform.localEulerAngles
            , 2f / girlAnim.speed);
        //指の風切り音DOTWeenTO
        DOTween.To(() => tmpRhitosasiAS.volume, (x) => tmpRhitosasiAS.volume = x, 1f, 1f / girlAnim.speed);

        yield return new WaitForSeconds(1f);

        //顔少し俯き(立ち上がり完了時にうつむいてる方が顔がいい)
        GameObject Chieri_15_Look_HeadSagePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_15_Look_HeadSagePosObj") as GameObject;
        FollowDOMove(IKLookAtHeadTargetTrs, Chieri_15_Look_HeadSagePosObj.transform.localPosition
            , 3f / girlAnim.speed);//早いと立ち上がり中アゴが上がってあらぬ方向く（0.6でそうだったので3にした）

        if (sentakuListNum == 0)//怒りすぎじゃ？　そうかも　いいのいいの
        {
            ChieriMotion("笑顔01口眉_目閉じない", 0.05f, 2);
            ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.02f, 2);//時間差表情戻し
            Hukidashi("D2210N摘み030a050");//いいのいいの十分恐がってるし
            NovelSetVis("D2210N摘み030a030");//うおわ！
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        }
        else if (sentakuListNum == 1)//心配してくれてた？　・・・　調子狂っちゃった
        {
            NovelSetVis("D2210N摘み030b040");//うおわ！

        }
        else if (sentakuListNum == -1)
        {
            Hukidashi("D2210摘み030a040");//話は机で
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        }

        //アニメ終了まで待機
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName == "片膝立ち宿題促し終了立ち上がり") { yield return null; }
        isGirlAnimReadSystem = false;
        yield return new WaitForSeconds(1f);

        if (sentakuListNum == 0)
        {
            ChieriMotion("笑顔01口眉_目閉じない", 0.02f, 2);
            ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
            Hukidashi("D2210N摘み030a060");//お仕置きはこれくらいでいいよね
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            yield return new WaitForSeconds(1);
        }
        else if (sentakuListNum == 1)
        {
            Hukidashi("D2210N摘み030b020");//も～お仕置きのつもりだったのに
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            ChieriMotion("f_怒ってる・・？", 0.05f, 2);
            Hukidashi("D2210N摘み030b030");//調子狂っちゃった。
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        }
        else if (sentakuListNum == -1)
        {
            NovelSetVis("D2210摘み030z010");//「・・・・・」
            while (novelCurrentPageInt < 9) { yield return null; }
        }


        NovelSetVis("D2210N摘み040");//・・・・・・へ？
        while (isNovelSetVisIng) { yield return null; }

        //暗幕
        FadeBlack(1, 2f);
        yield return new WaitForSeconds(3f);



        while (isNovelSetVisIng) { yield return null; }

        if (sentakuListNum == 0)
        {
            Hukidashi("D2210N摘み050a");//このまま机に
        }
        else if (sentakuListNum == 1)
        {
            Hukidashi("D2210N摘み050b");//とりあえず机に
        }
        else if (sentakuListNum == -1)
        {
            Hukidashi("D2210N摘み050b");//とりあえず机に
        }
        sentakuListNum = 99;

        yield return new WaitForSeconds(1); yield return KeyOrWait(3);



        NovelSetVis("D2210N摘み050");//胸騒ぎ


        //TobeContinued用音Obj消し
        tmpRhitosasiAS.DOFade(0, 1)
            .OnComplete(() =>
            { Destroy(RHitosasiSoundObj); });


        #region ToBeContinued
        //FadeBlack(1, 5, true);
        //isMenuLock = true;//メニューロック
        //isHwVisLock = true;//宿題ロック

        ////TO BE CONTINUED設置
        //GameObject tempTobecontinuedObj = Instantiate(Resources.Load("Main/UI/ToBeContinued/TobecontinuedCanvas") as GameObject
        //    , VRUICameraTrs);
        //DB.evMoveDelObjList.Add(tempTobecontinuedObj);//削除用にDBのリストへ登録

        ////■■幕中なので前面表示
        ////取得
        //Image tmpImage = tempTobecontinuedObj.GetComponent<Image>();
        ////透明に
        //tmpImage.color = new Color(1, 1, 1, 0);
        ////徐々に不透明に
        //DOTween.To(() => tmpImage.color, (x) => tmpImage.color = x, new Color(1, 1, 1, 1)
        //    , 5f)
        //     .SetEase(Ease.InOutQuad)
        //     .SetUpdate(true);

        //yield return new WaitForSeconds(5f);

        ////徐々に透明に
        //DOTween.To(() => tmpImage.color, (x) => tmpImage.color = x, new Color(1, 1, 1, 0)
        //    , 5f)
        //     .SetEase(Ease.InOutQuad)
        //     .SetUpdate(true);

        ////NovelSetVis("ToBeContinued");

        ////智恵理メッシュON
        //GirlMeshTrs.gameObject.SetActive(true);

        //isNovelFadeTween = isNovelSetVisIng = false;
        //KankyouBGMVolumer(0f, 5);
        //yield return new WaitForSeconds(5f);

        //EventMove("おまけ01", true, true);
        ////EventMove("タイトル", true, true);
        #endregion



        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        //環境音フェード
        KankyouBGMVolumer(0f, 5);

        //プレイヤーダミー調整したのでリセット
        PlayerFBBIKtoHeadEffectorObj.transform.localPosition =
        PlayerFBBIKtoHeadEffectorObj.transform.localEulerAngles = Vector3.zero;


        //終了処理
        ChieriMotion("_noData", 0, 5);

        //ダミーハンドオフ（登り状態になるけど首根っこのみなので）
        isDummyHandVis = false;

        //IK消し
        DOTweenToIKEfPos(IKRHandEf, 0, 0);
        DOTweenToIKEfRot(IKRHandEf, 0, 0);

        //音Obj消し
        Destroy(RHitosasiSoundObj);

        //ゲームシステム止め
        isANSystem = false;//これがあるのでRigidBody消しいらない。
        AN_GravitiDragBool = false;
        isRigidReadSystem = false;

        //ちえり照れオフ
        TereHoho(false, 0);

        CameraObjectsTrs.SetParent(GameObjectsTrs);



        #endregion
        yield return new WaitForSeconds(3f);

        Debug.Log("ssss");
        EventMove("摘まむだけで", true, true);

        yield break;
    }
    IEnumerator D2215()//旧 摘み上げられ
    {
        if (debugEventMoveFlag == true)
        {
            #region 大きさや位置
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;

            #region 小物
            //小物消し
            Drill_chieriTrs.gameObject.SetActive(false);
            DrillTrs.gameObject.SetActive(false);
            KeshigomuObj.SetActive(true);
            SharpenObj.SetActive(true);

            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;
            #endregion
            #endregion
        }
        EventReset();

        #region 設定
        //智恵理0位置ロック解除
        DB.isChieriPosLock = false;
        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);
        //アニメスピード
        girlAnim.speed = 0.3f;

        //■PosObj
        #region プレイヤー 位置とポーズとカメラリセット
        //プレイヤー ケーブル降りる位置に
        GameObject Player_04_TsumamiagePosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Player_04_TsumamiagePosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_04_TsumamiagePosObj.transform.localPosition;

        //カメラリセット（+回転と立ち設定）
        //カメラリセット値変更してリセット
        CameraReset(Player_04_TsumamiagePosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos);//立ち
        #endregion


        //智恵理摘みあげ位置
        GameObject Chieri_08_TsumamiagePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_08_TsumamiagePosObj") as GameObject;
        GirlTrs.localPosition = Chieri_08_TsumamiagePosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri_08_TsumamiagePosObj.transform.localEulerAngles;

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        //WindnoiseSoundObj付与（右ひとさし指）
        GameObject RHitosasiSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRhitosashi02Trs);
        DB.evMoveDelObjList.Add(RHitosasiSoundObj);

        //ボリューム0
        AudioSource tmpRhitosasiAS = RHitosasiSoundObj.GetComponent<AudioSource>();
        tmpRhitosasiAS.volume = 0;
        //SoundObjのPos
        GameObject SoundObj_04_TsumamiYubi_RHitosasiPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_04_TsumamiYubi_RHitosasiPosObj") as GameObject;
        RHitosasiSoundObj.transform.localPosition = SoundObj_04_TsumamiYubi_RHitosasiPosObj.transform.localPosition;
        #endregion
        #region ■智恵理紐摘む手のコリダーオフ（ちゃんとあとで元に戻す）
        for (int i = 0; i < ChieriColliderObjs.Length; i++)
        {
            if (
                ChieriColliderObjs[i].name == "UpperArm_R_coll" ||
                ChieriColliderObjs[i].name == "Forearm_R_coll" ||
                ChieriColliderObjs[i].name == "Hand_R_coll" ||
                ChieriColliderObjs[i].name == "Hitosashi00_R_coll" ||
                ChieriColliderObjs[i].name == "Hitosashi01_R_coll" ||
                ChieriColliderObjs[i].name == "Hitosashi02_R_coll" ||
                ChieriColliderObjs[i].name == "Ko00_R_coll" ||
                ChieriColliderObjs[i].name == "Ko01_R_coll" ||
                ChieriColliderObjs[i].name == "Ko02_R_coll" ||
                ChieriColliderObjs[i].name == "Kusuri00_R_coll" ||
                ChieriColliderObjs[i].name == "Kusuri01_R_coll" ||
                ChieriColliderObjs[i].name == "Kusuri02_R_coll" ||
                ChieriColliderObjs[i].name == "Naka00_R_coll" ||
                ChieriColliderObjs[i].name == "Naka01_R_coll" ||
                ChieriColliderObjs[i].name == "Naka02_R_coll" ||
                ChieriColliderObjs[i].name == "Oya00_R_coll" ||
                ChieriColliderObjs[i].name == "Oya01_R_coll" ||
                ChieriColliderObjs[i].name == "Oya02_R_coll"
                )
            {
                ChieriColliderObjs[i].SetActive(false);
            }
        }
        #endregion

        ChieriMotion("片膝立ち宿題促しループ", 0f, 0);
        //ChieriMotion("片膝立ちミラーしゃがみループ", 0f, 0);//なんか手が寿司三昧
        ChieriMotion("f_怒ってる・・？", 0f, 2);


        NovelSetVis("T_Door_出られなかった010b12");//はぁっ……！はぁっ……！　あっさり追い詰められてしまった
        while (novelCurrentPageInt < 1) { yield return null; }

        //開幕
        FadeBlack(0, 1);
        yield return new WaitForSeconds(2);

        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("D2210摘み010");//もー

        #region 指で摘みあげ

        #region SekkinPivotで指先近づけ、首根っこを摘む

        //IKRHandターゲット手の位置に
        GameObject Chieri_09_IK_RHandTsumamiagePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_09_IK_RHandTsumamiagePosObj") as GameObject;
        IKRHandTargetTrs.localPosition = Chieri_09_IK_RHandTsumamiagePosObj.transform.localPosition;
        IKRHandTargetTrs.localEulerAngles = Chieri_09_IK_RHandTsumamiagePosObj.transform.localEulerAngles;

        yield return new WaitForSeconds(1);

        //右手 ゆびさしとIK同時に(ピボットObjがIKONで指差し状態前提のため)
        float tmpYubiFloat = 1.3f;
        ChieriMotion("デスクペットボトルへ落とす前ポーズ", tmpYubiFloat * girlAnim.speed, 5);
        DOTweenToIKEfPos(IKRHandEf, 1, tmpYubiFloat, Ease.InOutSine);
        DOTweenToIKEfRot(IKRHandEf, 1, tmpYubiFloat, Ease.InOutSine);

        StartCoroutine(GirlAnimReadSystem(5));
        while (nowGirlAnimOtherLayerClipNameDict[5] != "デスクペットボトルへ落とす") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[5] >= 1f) { yield return null; }


        //指の風切り音DOTWeenTO
        DOTween.To(() => tmpRhitosasiAS.volume, (x) => tmpRhitosasiAS.volume = x, 1f, 1f / girlAnim.speed);

        //指先ピボットオブジェ生成（IKONのゆびさしポーズ時じゃなきゃだめ）
        GameObject
            PivotObj
            = Instantiate(Resources.Load("EventSystem/Sekkin/SekkinPivotObj") as GameObject
            , GameObject.Find("BoneBip001 R hitosashi02").transform
            , false);
        DB.evMoveDelObjList.Add(PivotObj);

        Sekkin(PivotObj, IKRHandTargetTrs.gameObject);


        //ピボットでIKRHand逆同期スタート
        Sekkin(PivotObj, IKRHandTargetTrs.gameObject);
        //ピボット操作で右手人差し指プレイヤー首根っこへ
        float tmpTsumamiFloat = 2f;
        GameObject Chieri_10_IK_TsumamiPivotPosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_10_IK_TsumamiPivotPosObj") as GameObject;
        Tweener kubiChaseTweener =
        PivotObj.transform.DOMove(PlayerKubiNekkoPosObjTrs.position
            , tmpTsumamiFloat);
        PivotObj.transform.DORotateQuaternion(Chieri_10_IK_TsumamiPivotPosObj.transform.rotation
            , tmpTsumamiFloat);

        //逃げても追従
        float
            tmpTime = 0,
            tmpTimeLimit = tmpTsumamiFloat;
        while (tmpTimeLimit > tmpTime)
        {
            tmpTime += 1 * Time.deltaTime;

            kubiChaseTweener
                .ChangeEndValue(PlayerKubiNekkoPosObjTrs.position, tmpTsumamiFloat - tmpTime, true)
                .Restart();

            yield return null;
        }
        #endregion

        #region ■脚のぼりシステム 首根っこ仕様でコルーチン始動
        //Inputロック
        AN_isInputLock = true;

        //起動
        StartCoroutine(AsinoboriSystem());

        //UIオフ
        AN_isUIVis = false;
        ANGrapHandUIObj.SetActive(false);
        Dummy_Hand.SetActive(false);//手表示オフ
        yield return null;

        //rigid監視スタート
        StartCoroutine(RigidReadSystem());

        #endregion

        //首根っこ掴みメソッド(Vector3.zeroはダミー)
        AN_KubinekkoGrap(GirlRhitosashi02Trs, Vector3.zero, 5.3f);

        //while (true)
        //{
        //    if (Input.GetKeyDown(KeyCode.F))
        //    {
        //        //首根っこ掴みメソッド
        //        AN_KubinekkoGrap(GirlRhitosashi02Trs);
        //    }

        //    if (Input.GetKeyDown(KeyCode.N))
        //    {
        //        goto 抜け;
        //    }
        //    yield return null;
        //}
        //抜け:

        #region 摘んだので上げ
        //ピボット操作で右手人差し指顔前へ
        GameObject Chieri_11_IK_TsumamiAgePivotPosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_11_IK_TsumamiAgePivotPosObj") as GameObject;
        PivotObj.transform.DOLocalMove(Chieri_11_IK_TsumamiAgePivotPosObj.transform.localPosition
            , 8f)
            .SetEase(Ease.InOutSine);
        PivotObj.transform.DORotateQuaternion(Chieri_11_IK_TsumamiAgePivotPosObj.transform.rotation
            , 8f)
            .SetEase(Ease.InOutSine)

            .OnComplete(() =>
            {
                //指の風切り音DOTWeenTO
                DOTween.To(() => tmpRhitosasiAS.volume, (x) => tmpRhitosasiAS.volume = x, 0f, 0.1f / girlAnim.speed);
            });

        NovelSetVis("D2210摘み010");//待って待って！
        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("f_怒ってる・・？", 0.05f / girlAnim.speed, 2);
        Hukidashi("D2210摘み020");//待っててって言ったのに
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("D2210摘み020");//えっとー・・　頭が回らない
        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("f_どうして逃げたの", 0.05f / girlAnim.speed, 2);
        yield return new WaitForSeconds(1);
        Hukidashi("D2210摘み030");//何で逃げたりしたの？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        #endregion

        #endregion □指で摘みあげ

        #region ■選択肢 「怒ってます？」「誤解だって！」タイムアップ
        NovelSetVis("■D2210摘み030");//ひえっ　こんなに気圧されるとは
        sentakuListNum = 99;//初期化
        while (isNovelSentakushiWait) { yield return null; }
        yield return new WaitForSeconds(1);

        Sentakushi("■D2210摘み030a", 8f, "どうして逃げたりしたの？");
        Sentakushi("■D2210摘み030b", 8f);
        while (sentakuListNum == 99) { yield return null; }
        yield return null;

        switch (sentakuListNum)
        {
            case 0://選択肢a 「怒ってます？」
                yield return new WaitForSeconds(1);
                NovelSetVis("D2210摘み030a010");//怒ってます・・？
                while (isNovelSetVisIng) { yield return null; }

                TereHohoAlphaChange(0.8f);
                TereHoho();
                ChieriMotion("f_え？(軽驚)", 0.1f, 2);
                Hukidashi("D2210摘み030a010");//え？
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //IK顔目そらし
                GameObject Chieri_13_Look_EyeSorasiPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_13_Look_EyeSorasiPosObj") as GameObject;
                GameObject Chieri_14_Look_HeadSorasiPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_14_Look_HeadSorasiPosObj") as GameObject;
                FollowDOMove(IKLookAtEyeTargetTrs, Chieri_13_Look_EyeSorasiPosObj.transform.localPosition, 0.6f / girlAnim.speed);
                FollowDOMove(IKLookAtHeadTargetTrs, Chieri_14_Look_HeadSorasiPosObj.transform.localPosition, 0.6f / girlAnim.speed);

                TereHohoAlphaChange(1f);
                ChieriMotion("f_怒ってる・・？", 0.2f, 2);
                Hukidashi("D2210摘み030a020");//怒るっていうかその・・
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                AseTare();
                yield return new WaitForSeconds(2);

                NovelSetVis("D2210摘み030a020");//おお・・よかった
                yield return new WaitForSeconds(2);

                //IKプレイヤー見る
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0));
                ChieriMotion("f_どうして逃げたの", 0.05f / girlAnim.speed, 2);
                Hukidashi("D2210摘み030a030");//と、とにかく

                GameObject Chieri_11a_IK_TsumamiAgeSekkinPivotPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_11a_IK_TsumamiAgeSekkinPivotPosObj") as GameObject;
                PivotObj.transform.DOLocalMove(Chieri_11a_IK_TsumamiAgeSekkinPivotPosObj.transform.localPosition
                    , 0.1f / girlAnim.speed);


                yield return new WaitForSeconds(0.5f);
                NovelSetVis("D2210摘み030a030");//ひえっ
                yield return KeyOrWait(3);

                break;

            case 1://選択肢b 「誤解だって！」
                yield return new WaitForSeconds(1);
                NovelSetVis("D2210摘み030b010");//誤解だって！
                while (isNovelSetVisIng) { yield return null; }

                ChieriMotion("f_怒ってる・・？", 0.2f, 2);
                Hukidashi("D2210摘み030b010");//誤解ねぇ・・
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                NovelSetVis("D2210摘み030b020");//そうそう
                while (isNovelSetVisIng) { yield return null; }

                //IK顔そらし
                GameObject Chieri_14_Look_HeadSorasiPosObjb = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_14_Look_HeadSorasiPosObj") as GameObject;
                FollowDOMove(IKLookAtHeadTargetTrs, Chieri_14_Look_HeadSorasiPosObjb.transform.localPosition, 0.6f / girlAnim.speed);

                ChieriMotion("f_どうして逃げたの", 0.05f / girlAnim.speed, 2);
                Hukidashi("D2210摘み030b020");//ふぅーん・・
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                NovelSetVis("D2210摘み030b030");//机で話そう！
                while (isNovelSetVisIng) { yield return null; }

                //IKプレイヤー見る
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0));
                ChieriMotion("f_怒ってる・・？", 0.2f / girlAnim.speed, 2);
                Hukidashi("D2210摘み030b030");//もう　ちゃんと話してよ？
                yield return new WaitForSeconds(2);

                break;

            case -1://選択肢b タイムアップ
                isNovelFadeTween = isNovelSetVisIng = false;
                yield return new WaitForSeconds(1);

                ChieriMotion("f_怒ってる・・？", 0.2f, 2);
                Hukidashi("D2210摘み010");//もー
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                break;
        }

        #endregion □選択肢 「怒ってます？」「誤解だって！」タイムアップ
        #region 摘んだまま立ち上がり
        girlAnim.speed = 0.2f;
        ChieriMotion("片膝立ち宿題促し終了立ち上がり", 0f, 0);

        //同時に右手IKも立ち上がり位置に
        GameObject Chieri_12_IK_TsumamiTatiagariPivotPosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_12_IK_TsumamiTatiagariPivotPosObj") as GameObject;
        PivotObj.transform.DOLocalMove(Chieri_12_IK_TsumamiTatiagariPivotPosObj.transform.localPosition
            , 2f / girlAnim.speed);
        PivotObj.transform.DOLocalRotate(Chieri_12_IK_TsumamiTatiagariPivotPosObj.transform.localEulerAngles
            , 2f / girlAnim.speed);
        //指の風切り音DOTWeenTO
        DOTween.To(() => tmpRhitosasiAS.volume, (x) => tmpRhitosasiAS.volume = x, 1f, 1f / girlAnim.speed);

        yield return new WaitForSeconds(1f);

        //顔少し俯き
        GameObject Chieri_15_Look_HeadSagePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Chieri_15_Look_HeadSagePosObj") as GameObject;
        FollowDOMove(IKLookAtHeadTargetTrs, Chieri_15_Look_HeadSagePosObj.transform.localPosition, 0.6f / girlAnim.speed);

        if (sentakuListNum == 0)
        {
            Hukidashi("D2210摘み030a040");//話は机で
        }
        else if (sentakuListNum == 1)
        {
            yield return KeyOrWait(3);
        }
        else if (sentakuListNum == -1)
        {
            Hukidashi("D2210摘み030a040");//話は机で
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        }

        //アニメ終了まで待機
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName == "片膝立ち宿題促し終了立ち上がり") { yield return null; }
        isGirlAnimReadSystem = false;
        yield return new WaitForSeconds(1f);

        if (sentakuListNum == 0)
        {
            NovelSetVis("D2210摘み030a040");//「はいい・・」
            while (novelCurrentPageInt < 6) { yield return null; }
        }
        else if (sentakuListNum == 1)
        {
            NovelSetVis("D2210摘み030b040");//「モチロン・・！」
            while (novelCurrentPageInt < 8) { yield return null; }
        }
        else if (sentakuListNum == -1)
        {
            NovelSetVis("D2210摘み030z010");//「・・・・・」
            while (novelCurrentPageInt < 9) { yield return null; }
        }
        sentakuListNum = 99;

        //暗幕
        FadeBlack(1, 2f);
        yield return new WaitForSeconds(2f);

        while (isNovelSetVisIng) { yield return null; }



        //終了処理
        ChieriMotion("_noData", 0, 5);

        //IK消し
        DOTweenToIKEfPos(IKRHandEf, 0, 0);
        DOTweenToIKEfRot(IKRHandEf, 0, 0);

        //音Obj消し
        Destroy(RHitosasiSoundObj);

        //ゲームシステム止め
        isANSystem = false;//これがあるのでRigidBody消しいらない。
        AN_GravitiDragBool = false;
        isRigidReadSystem = false;

        CameraObjectsTrs.SetParent(GameObjectsTrs);

        yield return new WaitForSeconds(3f);

        EventMove("帰ろうとしてた？");

        #endregion
        yield break;
    }
    IEnumerator D2220()//摘んで運ばれ //ちえり手ペアレントで酔いそうなので保留
    {
        if (debugEventMoveFlag == true)
        {
            #region 大きさや位置
            //プレイヤー大きさ
            nowPlayerLocalScale = new Vector3(0.03f, 0.03f, 0.03f);


            #region 小物
            //小物消し
            Drill_chieriTrs.gameObject.SetActive(false);
            DrillTrs.gameObject.SetActive(false);
            KeshigomuObj.SetActive(true);
            SharpenObj.SetActive(true);

            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;
            #endregion

            #endregion
        }
        EventReset();


        #region 設定
        //智恵理0位置ロック
        DB.isChieriPosLock = true;
        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);
        //アニメスピード
        girlAnim.speed = 0.3f;

        //■PosObj
        //プレイヤー 摘みあげ位置に
        GameObject Player_04_TsumamiagePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/Player_04_TsumamiagePosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_04_TsumamiagePosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_04_TsumamiagePosObj.transform.localEulerAngles;
        //CameraAnchorTrs.localEulerAngles = Vector3.zero;

        ////IKプレイヤー見る
        //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0));
        //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, BunguTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, BunguTrs, new Vector3(0, -0.045f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);


        //WindnoiseSoundObj付与（右ひとさし指）
        GameObject RHitosasiSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRhitosashi02Trs);
        DB.evMoveDelObjList.Add(RHitosasiSoundObj);

        //ボリューム0
        AudioSource tmpRhitosasiAS = RHitosasiSoundObj.GetComponent<AudioSource>();
        tmpRhitosasiAS.volume = 0;
        //SoundObjのPos
        GameObject SoundObj_04_TsumamiYubi_RHitosasiPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_04_TsumamiYubi_RHitosasiPosObj") as GameObject;
        RHitosasiSoundObj.transform.localPosition = SoundObj_04_TsumamiYubi_RHitosasiPosObj.transform.localPosition;
        #endregion

        ChieriMotion("ドアからデスク横へ歩く小皿持ち", 0f, 0);
        ChieriMotion("f_怒ってる・・？", 0f, 2);




        //右手マスクでつまみ
        ChieriMotion("デスクペットボトルへ落とす前ポーズ", 0, 5);
        #region プレイヤー摘まれ状態（ペットボトルのつまみ流用）
        //プレイヤーダミー
        isPlayerUniqueMotion = true;
        PlayerMotion("_noData", 0f, 0);
        yield return null;
        GameObject PlayerFBBIKtoHeadEffector010_TsumamarePosObj
            = Resources.Load("_PosObj/0300Yubizeme/PlayerFBBIKtoHeadEffector010_TsumamarePosObj") as GameObject;

        PlayerFBBIKtoHeadEffectorObj.transform.localPosition = PlayerFBBIKtoHeadEffector010_TsumamarePosObj.transform.localPosition;
        PlayerFBBIKtoHeadEffectorObj.transform.localEulerAngles = PlayerFBBIKtoHeadEffector010_TsumamarePosObj.transform.localEulerAngles;


        FixedAction(() =>
        {
            //指にペアレントし、Tweenで所定位置に
            CameraObjectsTrs.SetParent(GirlRhitosashi02Trs);

            GameObject Player010_PareRHitosashi02_TsumamarePosObj
            = Resources.Load("_PosObj/0300Yubizeme/Player010_PareRHitosashi02_TsumamarePosObj") as GameObject;

            CameraObjectsTrs.DOLocalMove(Player010_PareRHitosashi02_TsumamarePosObj.transform.localPosition
                , 0f)
            .OnComplete(() =>
            {
                CameraReset(Player010_PareRHitosashi02_TsumamarePosObj.transform.localEulerAngles
                    , null
                    , false
                    , null
                    , false
                    , false
                    );
            });
        });
        #endregion


        yield return null;

        while (true)
        {
            #region //フキダシテスト
            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.G))
            {
                SHukidashi("OP0010");
            }
            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.H))
            {
                Hukidashi("OP0010");
            }
            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.J))
            {
                DelAll_Hukidashi();
            }
            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.K))
            {
                Hukidashi("OP0010");
                yield return KeyOrWait(3);
                Hukidashi("OP0020");
                yield return KeyOrWait(3);
                Hukidashi("OP0010");
                yield return KeyOrWait(3);
                Hukidashi("OP0020");
                yield return KeyOrWait(3);
            }
            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.N))
            {
                NovelSetVis("OP0010");
            }
            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.M))
            {
                isNovelFadeTween = isNovelSetVisIng = false;
            }
            #endregion

            yield return null;
        }

        yield break;
    }
    IEnumerator E3000()//帰ろうとしてた？
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;

            #region 小物
            //小物消し
            Drill_chieriTrs.gameObject.SetActive(false);
            DrillTrs.gameObject.SetActive(false);
            KeshigomuObj.SetActive(true);
            SharpenObj.SetActive(true);

            #endregion

        }
        EventReset();

        //暗幕
        FadeBlack(1, 0);
        //環境音フェード
        KankyouBGMVolumer(0f, 2);
        yield return new WaitForSeconds(2);

        //環境音フェード
        KankyouBGMVolumer(0.7f, 5);
        //ヒグラシに変え
        KankyouBGMChanger(semiSE.audioSource, "Higurashi_nc104892_間追加");

        HukidashiNovelDistanceChange(3, 3);

        #region スマホ ケーブル バッテリー残ってたら移動と削除
        #region ケーブル バッテリー設置
        //置いてあったら削除
        if (GameObject.Find("USBCable02_Battery_NoboriPrefab") != null)
        {
            Destroy(GameObject.Find("USBCable02_Battery_NoboriPrefab"));
        }
        //置いてあったら削除
        if (GameObject.Find("USBCable02_Bone0LHito3Pare_OriteMisetePrefab") != null)
        {
            Destroy(GameObject.Find("USBCable02_Bone0LHito3Pare_OriteMisetePrefab"));
        }

        //置いてあったら削除
        if (GameObject.Find("Battery") != null)
        { Destroy(GameObject.Find("Battery")); }

        //■スマホ智恵理に持たしてオフ
        ChieriSumahoObj.transform.SetParent(GirlLHandTrs);
        ChieriSumahoObj.transform.localPosition = ChieriSumaho_LHand_DefPosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_LHand_DefPosObj.transform.localEulerAngles;
        ChieriSumahoObj.transform.localScale = ChieriSumaho_LHand_DefPosObj.transform.localScale;
        ChieriSumahoObj.SetActive(false);
        //ケーブルもオフ
        ChieriSumahoUSBCableObj.SetActive(false);

        //画面オフ
        ChieriSumahoPower(false, 0);
        #endregion



        #endregion

        #region 設定       

        //アニメスピード
        girlAnim.speed = 0.5f;
        doorAnim.speed = 0.5f;
        chairAnim.speed = 0.5f;

        //智恵理0位置ロック
        DB.isChieriPosLock = true;

        //スピーカー 位置に
        SpeakerTrs.gameObject.SetActive(true);
        GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
        SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        //プレイヤー 会話1位置に
        GameObject Player_01_DeskUeKaiwa1PosObj = Resources.Load("_PosObj/E_Kankin_Day1/Player_01_DeskUeKaiwa1PosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_01_DeskUeKaiwa1PosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_01_DeskUeKaiwa1PosObj.transform.localEulerAngles;
        //カメラリセット値変更してリセット
        CameraReset(Player_01_DeskUeKaiwa1PosObj.transform.localEulerAngles
            , DB.cameraSitAnchorDefLocalPos//Anchorを座りに
            , false
            , Vector3.zero
            , false
            , true);

        //寝っぱなしにならないよう念のため
        isPlayerUniqueMotion = false;



        //椅子位置
        GameObject Chair_01_SuwariPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chair_01_SuwariPosObj") as GameObject;
        ChairTrs.localPosition = Chair_01_SuwariPosObj.transform.localPosition;
        ChairTrs.localEulerAngles = Chair_01_SuwariPosObj.transform.localEulerAngles;

        ////智恵理 以前の椅子すわり位置に(2の位置）
        //GameObject Chieri_02Old_DeskChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02Old_DeskChairPosObj") as GameObject;
        //GirlTrs.localPosition = Chieri_02Old_DeskChairPosObj.transform.localPosition;
        //GirlTrs.localEulerAngles = Chieri_02Old_DeskChairPosObj.transform.localEulerAngles;


        ChieriMotion("デスク肘つきポーズ", 0f, 0);
        //ChieriMotion("f_ちぇー控えめ", 0f, 2);
        //ChieriMotion("f_怒ってる・・？", 0f, 2);
        ChieriMotion("つまんなそう", 0f, 2);

        //IKプレイヤー見る(一瞬)
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 0f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);

        //余韻設定のため1フレーム後再設定
        yield return null;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);


        #region 右人差し指にWindnoiseSoundObj付与

        GameObject RHitosasiSoundObj
            = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRhitosashi02Trs);
        RHitosasiSoundObj.name = nameof(RHitosasiSoundObj);
        DB.evMoveDelObjList.Add(RHitosasiSoundObj);

        //設定
        WindnoiseSound tmpRHitosasiSound = RHitosasiSoundObj.GetComponent<WindnoiseSound>();
        tmpRHitosasiSound.aSource.maxDistance = 50;
        tmpRHitosasiSound.pitchMax = 0.4f;
        tmpRHitosasiSound.pitchUpRateAdjustFloat = 2;

        tmpRHitosasiSound.aSource.volume = 0;

        //SoundObjのPos
        GameObject SoundObj_04_TsumamiYubi_RHitosasiPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_04_TsumamiYubi_RHitosasiPosObj") as GameObject;
        RHitosasiSoundObj.transform.localPosition = SoundObj_04_TsumamiYubi_RHitosasiPosObj.transform.localPosition;

        #endregion

        #region SoundObj頭に付与
        //WindnoiseSoundObj付与（左手）
        GameObject HeadWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , Bip001HeadTrs);
        HeadWindnoiseSoundObj.name = nameof(HeadWindnoiseSoundObj);
        DB.evMoveDelObjList.Add(HeadWindnoiseSoundObj);

        //設定
        WindnoiseSound tmpHeadWindnoiseSound = HeadWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpHeadWindnoiseSound.aSource.maxDistance = 150;
        tmpHeadWindnoiseSound.pitchMax = 0.4f;
        tmpHeadWindnoiseSound.pitchUpRateAdjustFloat = 3;

        tmpHeadWindnoiseSound.aSource.volume = 0;

        //位置
        HeadWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        #endregion

        #endregion 設定

        yield return new WaitForSeconds(2f);
        //開幕
        FadeBlack(0, 3);
        yield return new WaitForSeconds(2);

        //SoundObjボリューム
        tmpRHitosasiSound.aSource.volume = 1;
        tmpHeadWindnoiseSound.aSource.volume = 1;



        #region 待っててって言ったのに

        //yield return new WaitForSeconds(2);
        //NovelSetVis("D3200");
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);

        Hukidashi("E3000010");//帰ろうとしてた？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        if (staticFlagDict["カレンダー誕生日チェック"])
        { ChieriMotion("f_怒ってる・・？", 0.5f, 2); }
        else
        { ChieriMotion("f_ふーん・・", 1f, 2); }

        Hukidashi("E3000020");//待っててって言ったのに
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        yield return new WaitForSeconds(0.5f);
        NovelSetVis("E3000010");//マコトの違和感は拭われないまま



        #endregion

        #region //ToBeContinued
        //FadeBlack(1, 5, true);
        //isMenuLock = true;//メニューロック
        //isHwVisLock = true;//宿題ロック

        ////TO BE CONTINUED設置
        //GameObject tempTobecontinuedObj = Instantiate(Resources.Load("Main/UI/ToBeContinued/TobecontinuedCanvas") as GameObject
        //    , VRUICameraTrs);
        //DB.evMoveDelObjList.Add(tempTobecontinuedObj);//削除用にDBのリストへ登録

        ////■■幕中なので前面表示
        ////取得
        //Image tmpImage = tempTobecontinuedObj.GetComponent<Image>();
        ////透明に
        //tmpImage.color = new Color(1, 1, 1, 0);
        ////徐々に不透明に
        //DOTween.To(() => tmpImage.color, (x) => tmpImage.color = x, new Color(1, 1, 1, 1)
        //    , 5f)
        //     .SetEase(Ease.InOutQuad)
        //     .SetUpdate(true);

        //yield return new WaitForSeconds(5f);

        ////徐々に透明に
        //DOTween.To(() => tmpImage.color, (x) => tmpImage.color = x, new Color(1, 1, 1, 0)
        //    , 5f)
        //     .SetEase(Ease.InOutQuad)
        //     .SetUpdate(true);

        ////NovelSetVis("ToBeContinued");

        ////智恵理メッシュON
        //GirlMeshTrs.gameObject.SetActive(true);

        //isNovelFadeTween = isNovelSetVisIng = false;
        //KankyouBGMVolumer(0f, 5);
        //yield return new WaitForSeconds(5f);


        //EventMove("タイトル", true, true);
        #endregion



        #region 悪かった ～ ペットボトル置き暗幕まで

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        NovelSetVis("E3000020");//悪かったよ
        ChieriMotionDelay(1, "ん？", 1f, 2);
        while (isNovelSetVisIng) { yield return null; }


        //■"デスク肘つき→起き上がり"モーションだけ速度変更（animatorのParametersでスピード変更（ステート毎に設定できるので、表情が遅くならない））
        girlAnim.SetFloat("デスク肘つき→起き上がりSpeed", 0.4f); yield return null;
        ChieriMotion("デスク肘つき→起き上がり", 0, 0);

        HukidashiNovelDistanceChange(2.5f, 3);



        ChieriMotion("f_けど・・・", 0.2f, 2);
        Hukidashi("E3000030");//謝らなくていいの
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("f_笑顔眉下がり", 0.3f, 2);
        ChieriMotionDelay(1, "f_笑顔眉下がり目閉じない", 0.02f, 2);//時間差表情戻し
        Hukidashi("E3000040");//わかってくれれば
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("E3000030");//確かにあぶなかった
        while (isNovelSetVisIng) { yield return null; }


        #region IK少し伏目
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        GameObject IKLookEyeHead010_HusimePosObj = Resources.Load("_PosObj/0175Kaeroutositeta？/IKLookEyeHead010_HusimePosObj") as GameObject;
        FollowDOMove(IKLookAtEyeTargetTrs, IKLookEyeHead010_HusimePosObj.transform.localPosition, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, IKLookEyeHead010_HusimePosObj.transform.localPosition, 2f);
        #endregion

        ChieriMotion("f_ちぇー控えめ", 0.3f, 2);
        Hukidashi("E3000050");//降りると思わなくて
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //IK目プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);

        Hukidashi("E3000060");//考えなしだったよね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("E3000040");//俺も勝手だった　あっ思い出した
        while (novelCurrentPageInt < 3) { yield return null; }
        ChieriMotion("f_笑顔眉下がり目閉じない", 0.5f, 2);

        while (isNovelSetVisIng) { yield return null; }


        NovelSetVis("E3000050");//もう一つ謝らないと
        ChieriMotion("ん？", 0.1f, 2);
        //IK顔プレイヤー向け
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2.5f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        Hukidashi("E3000070");//うん？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        while (isNovelSetVisIng) { yield return null; }

        NovelSetVis("E3000060");//めがねなくしちゃった
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        ChieriMotion("f_本当に小さいね～", 0.3f, 2);
        Hukidashi("E3000080");//えっとそれはね・・
        yield return new WaitForSeconds(1);

        //IKカレンダー見//上向き
        ChieriMotion("b_まばたきSlow用", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, CalenderTrs, 0f);

        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("E3000070");//弁償するよ戻れる？

        #region IK顔目プレイヤー見る
        //IK目プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 1.5f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        #endregion
        while (novelCurrentPageInt < 2) { yield return null; }
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 1.5f, 2);//時間差表情戻し

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        Hukidashi("E3000090");//戻れるよ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);


        NovelSetVis("E3000080");//よかった～～・・・
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(2);

        Hukidashi("E3000100");//ご飯持ってきてあげるけど
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        Hukidashi("E3000110");//その前にいいものあげるね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        //SoundObjボリューム
        tmpRHitosasiSound.aSource.DOFade(0, 0.5f);
        tmpHeadWindnoiseSound.aSource.DOFade(0, 0.5f);


        NovelSetVis("E3000090");//いいもの？
        while (novelCurrentPageInt < 2) { yield return null; }
        //暗幕
        FadeBlack(1, 0.5f);
        yield return new WaitForSeconds(0.5f);


        while (isNovelSetVisIng) { yield return null; }




        #region 暗幕設定と開幕　ペットボトル取り出しポーズに
        DB.isChieriPosLock = true;
        ChieriMotion("デスクペットボトル取り出し前ポーズ", 0f, 0);

        //プレイヤー 会話1位置立ちに
        CameraObjectsTrs.localPosition = Player_01_DeskUeKaiwa1PosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_01_DeskUeKaiwa1PosObj.transform.localEulerAngles;
        //カメラリセット値変更してリセット
        CameraReset(Player_01_DeskUeKaiwa1PosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos//Anchorを立ちに
            , false
            , Vector3.zero
            , false
            , true);


        yield return new WaitForSeconds(1);
        while (isNovelSetVisIng) { yield return null; }

        HukidashiNovelDistanceChange(5f, 0);


        //■開幕
        FadeBlack(0, 0.5f);
        yield return new WaitForSeconds(0.5f);
        while (isNovelSetVisIng) { yield return null; }

        //SoundObjボリューム
        tmpRHitosasiSound.aSource.DOFade(1, 0.5f);
        tmpHeadWindnoiseSound.aSource.DOFade(1, 0.5f);

        #endregion

        #region ～　ペットボトル取り出し暗幕開幕まで

        yield return new WaitForSeconds(1);
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        Hukidashi("E3000115");//こっちに来て
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);


        //■ペットボトル取り出し開始
        ChieriMotion("デスクペットボトル取り出し", 0f, 0);
        NovelSetVis("E3000095");//あ、いいけど　ファミレス行きたい

        //鞄へ手を伸ばすあたりまで待ち
        StartCoroutine(GirlAnimReadSystem());
        yield return null;
        while (girlAnimNomTime <= 0.5f)
        { yield return null; }

        //IK鞄に
        ChieriMotion("b_まばたきSlow用", 0f, 4); blinkTime = 0;
        GameObject tmpSchoolBagObj = GameObject.Find("SchoolBag");
        FollowDOMove(IKLookAtEyeTargetTrs, tmpSchoolBagObj.transform, 0f);
        //顔はオフ
        DOTweenToLAIKSHead(LAIKHeadS, 0, 1.5f);


        //暗幕
        FadeBlack(1, 2f);
        yield return new WaitForSeconds(2f);
        while (isNovelSetVisIng) { yield return null; }


        NovelSetVis("E3000100");//鞄をまさぐる

        //プレイヤー 机の上位置に
        GameObject Player_010_DeskUeChieriTsumamiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_010_DeskUeChieriTsumamiPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_010_DeskUeChieriTsumamiPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_010_DeskUeChieriTsumamiPosObj.transform.localEulerAngles;
        CameraReset(Player_010_DeskUeChieriTsumamiPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos);//立ち位置に

        //まさぐり音仮
        SEPlay("laundry-spread1", tmpSchoolBagObj);
        yield return new WaitForSeconds(2);

        //風切り音出す用に逆再生
        ChieriMotion("デスクペットボトル取り出し逆再生", 0f, 0);
        yield return null;
        while (girlAnimNomTime <= 0.8f)
        { yield return null; }
        isGirlAnimReadSystem = false;

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        #endregion
        SEPlay(Other3DSEObj, "putting_a_tray_01_pich-6", PetBottleObj, 0.6f);
        yield return new WaitForSeconds(1);
        SEPlay(Other3DSEObj, "putting_a_tray_02", CapObj, 0.7f);

        #endregion

        #region ペットボトル置きとスマホ持ち

        #region ペットボトル取得

        //ペットボトル既に取得されていればなにもせず、なければシーンから、それでもなければリソースからクローン
        ObjSceneOrResouceLoad(ref PetBottleObj, "PetBottle", "Main/KomonoObj/PetBottle/PetBottle");
        DB.evMoveDelObjList.Add(PetBottleObj);

        //ペットボトル机の上位置　縮小時に見せるよう位置
        PetBottleObj.transform.SetParent(GameObjectsTrs, false);
        GameObject PetBottle010_SyukusyouMisePosObj = Resources.Load("_PosObj/0180Petbottle/PetBottle010_SyukusyouMisePosObj") as GameObject;
        PetBottleObj.transform.localPosition = PetBottle010_SyukusyouMisePosObj.transform.localPosition;
        PetBottleObj.transform.localEulerAngles = PetBottle010_SyukusyouMisePosObj.transform.localEulerAngles;
        PetBottleObj.transform.localScale = PetBottle010_SyukusyouMisePosObj.transform.localScale;


        //キャップ既に取得されていればなにもしない
        if (CapObj != null) { }
        else
        {
            //キャップ、クローンで取得(ペアレント変えるので、プレファブ上書きで消さないようにクローン)
            CapObj = Instantiate(PetBottleObj.transform.Find("Cap").gameObject);
            DB.evMoveDelObjList.Add(CapObj);

            //クローンON
            CapObj.transform.gameObject.SetActive(true);
            //ペアレント
            CapObj.transform.SetParent(GameObjectsTrs);
            //オリジナルをオフ
            PetBottleObj.transform.Find("Cap").gameObject.SetActive(false);
            //クローンキャップ机の上へ
            GameObject Cap_DeskUePosObj = Resources.Load("_PosObj/0180Petbottle/Cap010_SyukusyouMisePosObj") as GameObject;
            CapObj.transform.localPosition = Cap_DeskUePosObj.transform.localPosition;
            CapObj.transform.localEulerAngles = Cap_DeskUePosObj.transform.localEulerAngles;
            CapObj.transform.localScale = Cap_DeskUePosObj.transform.localScale;
        }

        //ペットボトル準備
        PetBottleObj.SetActive(true);
        CapObj.SetActive(true);


        #endregion
        //水滴ON
        PetBottleObj.transform.Find("Suiteki00").gameObject.SetActive(true);

        #region ■左手スマホ取り出し　マスク IK版

        GirlPosToIKTargetPosRot();

        string
            tmpBaseAnimStateName = "片膝立ちミラー手伸ばしループ原点";
        #region スマホ片手いじりPosへ
        GameObject ChieriSumaho_LHand_SekurabeKatatePosObj = Resources.Load("_PosObj/_ParentPoseObjs/ChieriSumaho_LHand_SekurabeKatatePosObj") as GameObject;
        ChieriSumahoObj.transform.localPosition = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localEulerAngles;
        #endregion

        StartCoroutine(GirlAnimReadSystem(11));

        //マスクのため、レイヤーのアニメを1フレでベースと同じモーション状態にする（ParameterでNormlizedTimeが指定できる（ただし指定し続けないと静止））
        ChieriMotion(tmpBaseAnimStateName, 0f, 11);//現在のベースアニメと同じアニメ指定
        girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeに

        yield return null;//↑適用に1フレ必要

        ChieriMotion("背比べ左手スマホ取り出し", 0f, 11);

        while (nowGirlAnimOtherLayerClipNameDict[11] != "背比べスマホ取り出し") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[11] <= 0.375f) { yield return null; }
        isGirlAnimReadSystem = false;
        //スマホObjオン（取り出し）
        ChieriSumahoObj.SetActive(true);
        //画面つける（画面更新も一緒に起動される）
        ChieriSumahoPower(true);

        #region スマホ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, new Vector3(0, -0.5f, 0), 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.8f, 1);
        #endregion


        #region 左手IKいじり位置へ（力技
        //まずターゲットTween移動
        GameObject IKLHand010_Chieri_Sumaho010IziriPosObj
            = Resources.Load("_PosObj/0180Petbottle/IKLHand010_Chieri_Sumaho010IziriPosObj") as GameObject;
        IKLHandTargetTrs.DOLocalMove(IKLHand010_Chieri_Sumaho010IziriPosObj.transform.localPosition, 1f);
        IKLHandTargetTrs.DOLocalRotate(IKLHand010_Chieri_Sumaho010IziriPosObj.transform.localEulerAngles, 1f);

        //少しウェイト下げて
        DOTweenToIKEfPos(IKLHandEf, 0.6f, 0.5f);
        DOTweenToIKEfRot(IKLHandEf, 0.6f, 0.5f);

        yield return new WaitForSeconds(0.5f);
        //ウェイト戻す
        DOTweenToIKEfPos(IKLHandEf, 1, 0.5f);
        DOTweenToIKEfRot(IKLHandEf, 1, 0.5f);
        #endregion

        #endregion


        #endregion
        HukidashiNovelDistanceChange(1f, 0);

        NovelSetVis("E3000110");//出てきたそれは

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        //開幕
        FadeBlack(0, 1f);
        yield return new WaitForSeconds(1f);

        #region ペットボトル見つつ縮小

        NovelSetVis("E3000120");//うおおでっか
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        NovelSetVis("E3000130");//中身がない？
        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("f_笑顔眉下がり", 0.3f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.2f, 2);//時間差表情戻し
        Hukidashi("E3000120");//部活で飲んじゃった
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        NovelSetVis("E3000140");//じゃあいいものって・・　スマホ気になる
        while (isNovelSetVisIng) { yield return null; }

        #region スマホいじって縮小
        ChieriMotion("背比べ左手スマホいじり", 0f, 11);
        yield return new WaitForSeconds(1);

        #region //IKプレイヤ見（頭Clamp0.8）
        //ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        //DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

        //LAIKHead.solver.clampWeightHead = 0.8f;

        //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
        //DOTweenToLAIKSHead(LAIKHeadS, 1, 1f);
        #endregion
        #region IK顔目プレイヤー見る
        //IK目プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 1.5f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        #endregion

        #region ■目眩リトルとDOTWeenTOでプレイヤーサイズ縮小(縮小完了bool付き)マスク版
        bool isShrinkComplete = false;
        //段階別で目眩具合と縮小度変更して縮小
        PPv2MemaiLittle(1f);

        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
        , DB.playerScale_PetbottleIreZero, 15f)
        .OnComplete(() => { isShrinkComplete = true; });
        SEPlay("magic-attack-darkness1_long(-12)", 0.5f);

        #endregion
        #endregion
        yield return new WaitForSeconds(1);

        NovelSetVis("E3000150");//おお・・　縮んでる？！
        while (isNovelSetVisIng) { yield return null; }

        HukidashiNovelDistanceChange(0.6f, 10);


        while (isShrinkComplete == false) { yield return null; }

        Hukidashi("E3000130");//こんなところかな？　2.5センチ！
        #region スマホ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, new Vector3(0, -0.5f, 0), 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.8f, 1);
        #endregion

        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        #region IK顔目プレイヤー見る
        //IK目プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 1.5f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        #endregion

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        NovelSetVis("E3000160");//え、あ・・・
        while (isNovelSetVisIng) { yield return null; }


        NovelSetVis("E3000170");//待ってちえりこれ以上は
        while (novelCurrentPageInt < 1) { yield return null; }

        //暗幕
        FadeBlack(1, 1f);

        while (isNovelSetVisIng) { yield return null; }

        #endregion


        //SoundObjボリューム
        tmpRHitosasiSound.aSource.DOFade(0, 0.5f);
        tmpHeadWindnoiseSound.aSource.DOFade(0, 0.5f);

        yield return new WaitForSeconds(1);

        //終了処理
        #region スマホなくしたりマスク外したり
        //スマホObjオフ（しまう）
        ChieriSumahoObj.SetActive(false);
        //ウェイト戻す
        DOTweenToIKEfPos(IKLHandEf, 0, 0f);
        DOTweenToIKEfRot(IKLHandEf, 0, 0f);

        ChieriMotion("_noData", 0f, 11);

        #endregion

        EventMove("ペットボトル");
        yield break;





        #region //以前の(小さい理由話せなくて・・・　私といるのいや？　ありがとう　宿題しなきゃね)
        //選択肢1:

        //NovelSetVis("■E3020");//さてどうしよう

        //#endregion
        //#region ■選択肢 不安で　遊んでた
        //while (isNovelSentakushiWait) { yield return null; }
        //yield return new WaitForSeconds(1f);
        //Sentakushi("■E3020a", Mathf.Infinity);
        //Sentakushi("■E3020b", Mathf.Infinity);
        //while (sentakuListNum == 99) { yield return null; }
        //yield return null;
        //switch (sentakuListNum)
        //{
        //    case 0://選択肢a 不安で
        //        sentakuListNum = 99;
        //        yield return new WaitForSeconds(1);

        //        #region そうだ不安になってしまったんだ - 私といても
        //        NovelSetVis("E3020a010");//そうだ不安になってしまったんだ

        //        while (novelCurrentPageInt < 1) { yield return null; }

        //        //IK少し伏目
        //        GameObject Chieri_01_Look_EyeHusimePosObj = Resources.Load("_PosObj/E_Kankin_Day1/Chieri_01_Look_EyeHusimePosObj") as GameObject;
        //        GameObject Chieri_02_Look_HeadHusimePosObj = Resources.Load("_PosObj/E_Kankin_Day1/Chieri_02_Look_HeadHusimePosObj") as GameObject;
        //        FollowDOMove(IKLookAtEyeTargetTrs, Chieri_01_Look_EyeHusimePosObj.transform.localPosition, 0.5f);
        //        FollowDOMove(IKLookAtHeadTargetTrs, Chieri_02_Look_HeadHusimePosObj.transform.localPosition, 2f);

        //        while (novelCurrentPageInt < 3) { yield return null; }

        //        Hukidashi("E3020a010");//不安、そっか・・
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //        while (novelCurrentPageInt < 12) { yield return null; }

        //        ChieriMotion("つまんなそう", 0f, 2);
        //        //目プレイヤーへ
        //        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);

        //        while (isNovelSetVisIng) { yield return null; }

        //        Hukidashi("E3020a020");//え？　別のところに体？
        //        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2f);
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //        Hukidashi("E3020a030");//あ、えっとー・・
        //        ChieriMotion("f_あ、えっとー・・", 0.2f, 2);
        //        girlAnim.speed = 0.3f;
        //        ChieriMotion("デスク肘つき→起き上がり", 0f, 0);
        //        AseTare(8f);
        //        FollowDOMove(IKLookAtEyeTargetTrs, Chieri_01_Look_EyeHusimePosObj.transform.localPosition, 0.5f);
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //        Hukidashi("E3020a040");//その眼鏡は宿題ができるだけで
        //        FollowDOMove(IKLookAtHeadTargetTrs, Chieri_02_Look_HeadHusimePosObj.transform.localPosition, 2f);
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //        Hukidashi("E3020a050");//体は実際に縮んでいるというか・・
        //        ChieriMotion("f_えっと、その・・", 0.8f, 2);
        //        ChieriMotion("デスク少しうつ伏せポーズ", 0.7f, 0);

        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        //        yield return new WaitForSeconds(0.5f);

        //        NovelSetVis("E3020a020");//え、実際に縮んでるってどういうこと？！
        //        while (isNovelSetVisIng) { yield return null; }

        //        yield return new WaitForSeconds(1);

        //        Hukidashi("E3020a060");//詳しく説明するのは・・
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //        //IK更に伏目横目
        //        GameObject Chieri_03_Look_EyeHusimePosObj = Resources.Load("_PosObj/E_Kankin_Day1/Chieri_03_Look_EyeHusimePosObj") as GameObject;
        //        GameObject Chieri_04_Look_HeadHusimePosObj = Resources.Load("_PosObj/E_Kankin_Day1/Chieri_04_Look_HeadHusimePosObj") as GameObject;
        //        FollowDOMove(IKLookAtEyeTargetTrs, Chieri_03_Look_EyeHusimePosObj.transform.localPosition, 0.5f);
        //        FollowDOMove(IKLookAtHeadTargetTrs, Chieri_04_Look_HeadHusimePosObj.transform.localPosition, 1f);

        //        Hukidashi("E3020a070");//ちょっと難しくて
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        //        yield return new WaitForSeconds(2);

        //        NovelSetVis("E3020a030");//……嘘を言って驚かそうとしてる様ではなさそうだ。
        //        while (isNovelSetVisIng) { yield return null; }
        //        yield return new WaitForSeconds(1);

        //        Hukidashi("E3020a080");//ご、ごめんね、黙ってて・・
        //        ChieriMotion("f_怒ってる・・？", 0.8f, 2);

        //        yield return new WaitForSeconds(0.5f);
        //        //IKプレイヤー見る
        //        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        //        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        //        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2f);
        //        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        //        yield return new WaitForSeconds(0.5f); yield return KeyOrWait(3);

        //        Hukidashi("E3020a090");//まさかいなくなるとは
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //        NovelSetVis("E3020a040");//「ああ、いや……」
        //        while (isNovelSetVisIng) { yield return null; }
        //        yield return new WaitForSeconds(1);

        //        //伏目
        //        FollowDOMove(IKLookAtEyeTargetTrs, Chieri_03_Look_EyeHusimePosObj.transform.localPosition, 0.5f);
        //        FollowDOMove(IKLookAtHeadTargetTrs, Chieri_04_Look_HeadHusimePosObj.transform.localPosition, 1.5f);
        //        Hukidashi("E3020a100");//その・・
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        //        Hukidashi("E3020a105");//言い難いんだけど
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        //        yield return new WaitForSeconds(1);
        //        Hukidashi("E3020a110");//私といても、やっぱり
        //        TereHohoAlphaChange(0.4f);
        //        TereHoho(3f);
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //        //girlAnim.speed = 0.4f;

        //        ChieriMotion("デスクうつ伏せポーズ", 1f, 0);
        //        //IKプレイヤー見る
        //        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        //        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        //        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2f);
        //        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        //        Hukidashi("E3020a120");//小さいのって怖くて いや・・かな・・？
        //        ChieriMotion("f_いやかな・・？", 1.5f, 2);
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //        yield return new WaitForSeconds(2);
        //        #endregion

        //        #region ■選択肢 「まあ智恵理となら・・」「無理無理！」
        //        選択肢2:
        //        NovelSetVis("■E3020a050");//……う、ううう……む……。

        //        while (isNovelSentakushiWait) { yield return null; }
        //        yield return new WaitForSeconds(1f);
        //        Sentakushi("■E3020a120a", Mathf.Infinity);
        //        Sentakushi("■E3020a120b", Mathf.Infinity);
        //        while (sentakuListNum == 99) { yield return null; }
        //        yield return null;
        //        switch (sentakuListNum)
        //        {
        //            case 0://選択肢a 「まあ智恵理となら・・」
        //                yield return new WaitForSeconds(1f);
        //                NovelSetVis("E3020a120a010");//まあ智恵理となら・・
        //                TereHohoAlphaChange(1f);
        //                TereHoho(1f);
        //                ChieriMotionDelay(0.5f, "f_照れ驚き", 0.1f / girlAnim.speed, 2);//時間差表情戻し

        //                while (novelCurrentPageInt < 1) { yield return null; }

        //                Hukidashi("E3020a120a010");//・・・・・・。

        //                yield return new WaitForSeconds(0.8f / girlAnim.speed);

        //                //顔目逸らし
        //                GameObject Chieri_05_Look_EyeHusimePosObj = Resources.Load("_PosObj/E_Kankin_Day1/Chieri_05_Look_EyeHusimePosObj") as GameObject;
        //                GameObject Chieri_06_Look_HeadHusimePosObj = Resources.Load("_PosObj/E_Kankin_Day1/Chieri_06_Look_HeadHusimePosObj") as GameObject;
        //                FollowDOMove(IKLookAtEyeTargetTrs, Chieri_05_Look_EyeHusimePosObj.transform.localPosition, 0.5f);
        //                FollowDOMove(IKLookAtHeadTargetTrs, Chieri_06_Look_HeadHusimePosObj.transform.localPosition, 1.5f);

        //                Hukidashi("E3020a120a020");//あ、ありがとう
        //                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //                //顔IKオフ
        //                DOTweenToLAIKSHead(LAIKHeadS, 0, 1 / girlAnim.speed);

        //                Hukidashi("E3020a120a030");//うん・・
        //                ChieriMotion("f_ありがとう泣き顔", 0.2f / girlAnim.speed, 2);
        //                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //                //IK顔右うつ伏せ位置事前取得
        //                GameObject Chieri_07_Look_HeadUtsubuseRPosObj = Resources.Load("_PosObj/E_Kankin_Day1/Chieri_07_Look_HeadUtsubuseRPosObj") as GameObject;
        //                IKLookAtHeadTargetTrs.localPosition = Chieri_07_Look_HeadUtsubuseRPosObj.transform.localPosition;

        //                Hukidashi("E3020a120a040");//本当に、ありがとう・・
        //                yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        //                //顔IK ON
        //                DOTweenToLAIKSHead(LAIKHeadS, 1, 1f / girlAnim.speed);
        //                ChieriMotion("f_嬉しい・・・", 0.2f / girlAnim.speed, 2);

        //                yield return new WaitForSeconds(4);

        //                NovelSetVis("E3020a120a020");//あ、えっと・・！
        //                while (isNovelSetVisIng) { yield return null; }

        //                yield return new WaitForSeconds(3);

        //                Hukidashi("E3020a120a030");//うん・・
        //                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //                Hukidashi("E3020a120a050");//私、やっぱり公がいないと駄目みたい
        //                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //                yield return new WaitForSeconds(2);
        //                NovelSetVis("E3020a120a030");//やっぱり重いぞ・・！
        //                while (isNovelSetVisIng) { yield return null; }

        //                yield return new WaitForSeconds(1);
        //                isNovelFadeTween = isNovelSetVisIng = false;

        //                yield return new WaitForSeconds(1);


        //                //IKプレイヤー見る
        //                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        //                DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 2);
        //                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 3f);
        //                DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 2);


        //                girlAnim.speed = 0.2f;

        //                Hukidashi("E3020a120a060");//そ、そうだね、宿題！
        //                ChieriMotion("デスクうつ伏せ→起き上がり", 0f, 0);
        //                ChieriMotion("笑顔01口眉", 0.1f, 2);
        //                ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        //                yield return new WaitForSeconds(3f); yield return KeyOrWait(3);

        //                TereHoho(false, 5f);
        //                girlAnim.speed = 0.4f;

        //                ChieriMotion("デスク少しうつ伏せポーズ", 0.7f, 0);
        //                yield return new WaitForSeconds(0.5f);

        //                Hukidashi("E3020a120a070");//お詫びに私がやってあげるね
        //                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //                yield return new WaitForSeconds(1);

        //                NovelSetVis("E3020a120a040");//え、　ああ、それは有難いなあ！
        //                while (novelCurrentPageInt < 1) { yield return null; }

        //                //暗幕
        //                FadeBlack(1, 1);
        //                yield return new WaitForSeconds(1f);

        //                while (isNovelSetVisIng) { yield return null; }

        //                break;
        //            case 1:

        //                sentakuListNum = 99;

        //                NovelSetVis("tmpまだなし");
        //                while (isNovelSetVisIng) { yield return null; }
        //                goto 選択肢2;
        //                break;
        //        }
        //        #endregion

        //        break;
        //    case 1://選択肢b 遊んでただけだよ
        //        sentakuListNum = 99;

        //        NovelSetVis("tmpまだなし");
        //        while (isNovelSetVisIng) { yield return null; }
        //        goto 選択肢1;
        //        break;
        //}
        #endregion

        DB.isKankinFlag = true;

        EventMove("会話1_宿題");
        #region 椅子モーション原点確認用

        while (true)
        {

            #region 原点時の座り位置調整 HJKL
            if (Input.GetKeyDown(KeyCode.H))
            {
                DB.isChieriPosLock = false;
                //椅子位置に
                GameObject Chieri_02Old_DeskChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02Old_DeskChairPosObj") as GameObject;
                GirlTrs.localPosition = Chieri_02Old_DeskChairPosObj.transform.localPosition;
                GirlTrs.localEulerAngles = Chieri_02Old_DeskChairPosObj.transform.localEulerAngles;
            }
            if (Input.GetKeyDown(KeyCode.J))
            {
                DB.isChieriPosLock = false;
                //椅子位置に
                GameObject Chieri_02Old2_DeskChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02Old2_DeskChairPosObj") as GameObject;
                GirlTrs.localPosition = Chieri_02Old2_DeskChairPosObj.transform.localPosition;
                GirlTrs.localEulerAngles = Chieri_02Old2_DeskChairPosObj.transform.localEulerAngles;
            }
            if (Input.GetKeyDown(KeyCode.K))
            {
                DB.isChieriPosLock = false;
                //椅子位置に
                GameObject Chieri_02_DeskNyuusituChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02_DeskNyuusituChairPosObj") as GameObject;
                GirlTrs.localPosition = Chieri_02_DeskNyuusituChairPosObj.transform.localPosition;
                GirlTrs.localEulerAngles = Chieri_02_DeskNyuusituChairPosObj.transform.localEulerAngles;
            }
            if (Input.GetKeyDown(KeyCode.L))
            {
                DB.isChieriPosLock = false;
                //椅子位置に
                GameObject Chieri_02_DeskChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02_DeskChairPosObj") as GameObject;
                GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
                GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;
            }
            #endregion


            #region Test_入室後の座り位置 IO
            if (Input.GetKeyDown(KeyCode.I))
            {
                DB.isChieriPosLock = true;
                ChieriMotion("Test_入室後の座り位置", 0f, 0);
            }
            if (Input.GetKeyDown(KeyCode.O))
            {
                ChieriMotion("Test_入室後の座り位置原点", 0f, 0);
            }
            #endregion

            #region デスク宿題待機 デスク起き上がりポーズ TY
            if (Input.GetKeyDown(KeyCode.T))
            {
                ChieriMotion("デスク宿題待機", 0f, 0);
            }
            if (Input.GetKeyDown(KeyCode.Y))
            {
                ChieriMotion("デスク起き上がりポーズ", 0f, 0);
            }
            #endregion

            #region デスクペットボトル取り出し FG
            if (Input.GetKeyDown(KeyCode.F))
            {
                DB.isChieriPosLock = true;
                ChieriMotion("デスク肘つきポーズ", 0f, 0);
            }
            if (Input.GetKeyDown(KeyCode.G))
            {
                ChieriMotion("デスク肘つきポーズ原点", 0f, 0);
            }
            #endregion

            #region デスクペットボトル手伸ばし前の両手置き VB
            if (Input.GetKeyDown(KeyCode.V))
            {
                DB.isChieriPosLock = true;
                ChieriMotion("デスクペットボトル手伸ばし立てるため", 0f, 0);
            }
            if (Input.GetKeyDown(KeyCode.B))
            {
                ChieriMotion("デスクペットボトル手伸ばし立てるため原点", 0f, 0);
            }

            #endregion

            #region temp確認 NM
            if (Input.GetKeyDown(KeyCode.N))
            {
                ChieriMotion("デスク肘つきポーズ", 0f, 0);
            }
            if (Input.GetKeyDown(KeyCode.M))
            {
                ChieriMotion("デスクうつ伏せポーズ", 0f, 0);
            }

            #endregion



            yield return null;
        }


        #endregion


    }

    //　　　　　Ver0.52以降
    IEnumerator E3010()//ペットボトル
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_PetbottleIreZero;

            #region 宿題ペン消しゴムなくし
            //宿題 位置に
            Drill_chieriTrs.gameObject.SetActive(false);

            //プレイヤーの
            DrillTrs.gameObject.SetActive(false);

            //ペンなくし
            SharpenObj.SetActive(false);
            //消しゴム無くし
            KeshigomuObj.SetActive(false);
            #endregion 

            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        }

        EventReset();
        yield return new WaitForSeconds(0.1f);

        //■■■シーンロード用暗幕かかってること前提
        //とりあえずデバッグのため普通の暗幕かけ
        FadeBlack(1, 0);

        //セーブデータ新規作成しました待ち（むしろ消去が被るスクリプトをなおしたい）
        yield return new WaitForSeconds(1.1f);
        HukidashiNovelDistanceChange(3f, 0);

        #region ペットボトル 暗幕中事前設定
        girlAnim.speed = 0.7f;

        //■プレイヤー 机の上位置に
        GameObject Player_000_DeskUeStartPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_000_DeskUeStartPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_000_DeskUeStartPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_000_DeskUeStartPosObj.transform.localEulerAngles;

        #region ■智恵理
        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);
        DB.isChieriPosLock = false;
        ChieriMotion("デスク肘つきポーズ", 0f, 0);
        ChieriMotion("笑顔01口眉_目閉じない", 0f, 2);

        //智恵理 椅子すわり位置に
        GameObject Chieri_02_DeskChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02_DeskChairPosObj") as GameObject;
        GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;

        //頭にWindnoiseSoundObj付与
        GameObject HeadSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , HeadSphereTrs);//（頭）
        DB.evMoveDelObjList.Add(HeadSoundObj);

        AudioSource tmpHeadAS = HeadSoundObj.GetComponent<AudioSource>();
        //ミュート
        tmpHeadAS.mute = true;

        //SoundObjのPos
        GameObject SoundObj_01_Ningyou_PareHeadPosObj = Resources.Load("_PosObj/D_Henai_Day1/SoundObj_01_Ningyou_PareHeadPosObj") as GameObject;
        HeadSoundObj.transform.localPosition = SoundObj_01_Ningyou_PareHeadPosObj.transform.localPosition;


        //右人差し指にWindnoiseSoundObj付与
        GameObject RHitosasiSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRhitosashi02Trs);
        DB.evMoveDelObjList.Add(RHitosasiSoundObj);

        AudioSource tmpRhitosasiAS = RHitosasiSoundObj.GetComponent<AudioSource>();
        //ミュート
        tmpRhitosasiAS.mute = true;
        //SoundObjのPos
        GameObject SoundObj_04_TsumamiYubi_RHitosasiPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_04_TsumamiYubi_RHitosasiPosObj") as GameObject;
        RHitosasiSoundObj.transform.localPosition = SoundObj_04_TsumamiYubi_RHitosasiPosObj.transform.localPosition;

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        #endregion

        #region ペットボトル取得

        //ペットボトル既に取得されていればなにもせず、なければシーンから、それでもなければリソースからクローン
        ObjSceneOrResouceLoad(ref PetBottleObj, "PetBottle", "Main/KomonoObj/PetBottle/PetBottle");
        DB.evMoveDelObjList.Add(PetBottleObj);

        //ペットボトル智恵理左手にペア
        PetBottleObj.transform.SetParent(Bip001_L_HandTrs);
        //位置
        GameObject PetBottle_ChieriLHandPosObj = Resources.Load("_PosObj/_ParentPoseObjs/PetBottle_ChieriLHandPosObj") as GameObject;
        PetBottleObj.transform.localPosition = PetBottle_ChieriLHandPosObj.transform.localPosition;
        PetBottleObj.transform.localEulerAngles = PetBottle_ChieriLHandPosObj.transform.localEulerAngles;
        PetBottleObj.transform.localScale = PetBottle_ChieriLHandPosObj.transform.localScale;

        //キャップ既に取得されていればなにもしない
        if (CapObj != null) { }
        else
        {
            //キャップ、クローンで取得(ペアレント変えるので、プレファブ上書きで消さないようにクローン)
            CapObj = Instantiate(PetBottleObj.transform.Find("Cap").gameObject);
            DB.evMoveDelObjList.Add(CapObj);

            //クローンON
            CapObj.transform.gameObject.SetActive(true);
            //ペアレント
            CapObj.transform.SetParent(GameObjectsTrs);
            //オリジナルをオフ
            PetBottleObj.transform.Find("Cap").gameObject.SetActive(false);
            //クローンキャップ机の上へ
            GameObject Cap_DeskUePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Cap_DeskUePosObj") as GameObject;
            CapObj.transform.localPosition = Cap_DeskUePosObj.transform.localPosition;
            CapObj.transform.localEulerAngles = Cap_DeskUePosObj.transform.localEulerAngles;
            CapObj.transform.localScale = Cap_DeskUePosObj.transform.localScale;
        }

        #endregion
        //水滴ON
        PetBottleObj.transform.Find("Suiteki00").gameObject.SetActive(true);


        //椅子の位置
        GameObject Chair_01_SuwariPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chair_01_SuwariPosObj") as GameObject;
        ChairTrs.localPosition = Chair_01_SuwariPosObj.transform.localPosition;
        ChairTrs.localEulerAngles = Chair_01_SuwariPosObj.transform.localEulerAngles;

        //事前読み込み
        GameObject Player_010_DeskUeChieriTsumamiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_010_DeskUeChieriTsumamiPosObj") as GameObject;


        //ペットボトルシェイクテスト用
        Vector3 tmpShakePrevPos = new Vector3();
        Quaternion tmpShakePrevQua = new Quaternion();
        float tmpShakeTime = 1;

        #endregion

        #region 摘む直前の読み込み
        DB.isChieriPosLock = true;

        //プレイヤー 机の上位置に
        CameraObjectsTrs.localPosition = Player_010_DeskUeChieriTsumamiPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_010_DeskUeChieriTsumamiPosObj.transform.localEulerAngles;

        //カメラリセット値変更してリセット
        CameraReset(Player_010_DeskUeChieriTsumamiPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos//立ち
            , false
            , Vector3.zero//倒れのアンカーリセット
            , false);

        //ペットボトル準備
        PetBottleObj.SetActive(true);
        CapObj.SetActive(true);
        ChieriMotion("デスクペットボトル持ち", 0f, 0);

        //マスクで左手ペットボトル持ち（「取り出し」では中指、「落とす」では親指が少し埋まる）（指の大きさ変わった？　デスクペットボトルへ落とすのclipをコピーしてきて左手だけにして少し親指開いた）
        ChieriMotion("LH_デスクペットボトルへ落とす", 0f, 6);

        #endregion

        yield return new WaitForSeconds(3);

        //環境音フェードイン
        KankyouBGMVolumer(1f, 2);
        //ヒグラシに変え
        KankyouBGMChanger(semiSE.audioSource, "Higurashi_nc104892_間追加");

        NovelSetVis("E3010010");//もう十分だよ
        FadeBlack(0, 1);

        while (isNovelSetVisIng) { yield return null; }

        #region 摘み上げ

        ChieriMotion("デスクペットボトル摘み上げ", 0f, 0);
        yield return null;

        //ミュート解除
        tmpRhitosasiAS.mute = false;

        //■手構えるまで待機
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 0.215f)
        { yield return null; }



        NovelSetVis("E4100090");//え？な？え？

        //■つまみ直前まで待機
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 0.324f)
        { yield return null; }
        ChieriMotion("f_眉高い笑顔少しジト目", 3f, 2);

        //プレイヤーダミー
        isPlayerUniqueMotion = true;
        PlayerMotion("_noData", 0f, 0);
        yield return null;
        GameObject PlayerDummy010_TsumamarePosObj
            = Resources.Load("_PosObj/0505YokokuPetbottle/PlayerDummy010_TsumamarePosObj") as GameObject;

        Player_DummyTrs.localPosition = PlayerDummy010_TsumamarePosObj.transform.localPosition;
        Player_DummyTrs.localEulerAngles = PlayerDummy010_TsumamarePosObj.transform.localEulerAngles;


        FixedAction(() =>
        {
            //指にペアレントし、Tweenで所定位置に
            CameraObjectsTrs.SetParent(GirlRhitosashi02Trs);
            GameObject Player_020_RHito2PareTsumamiLocalPosObj
            = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_020_RHito2PareTsumamiLocalPosObj") as GameObject;
            CameraObjectsTrs.DOLocalMove(Player_020_RHito2PareTsumamiLocalPosObj.transform.localPosition, 0.5f)
            .OnComplete(() =>
            {
                CameraReset(Player_020_RHito2PareTsumamiLocalPosObj.transform.localEulerAngles
                    , null
                    , false
                    , null
                    , false
                    , false
                    );
            });
        });

        //■つまみ持ち上げまで待機
        StartCoroutine(GirlAnimReadSystem());

        while (girlAnimNomTime <= 0.624f)
        { yield return null; }


        //表情
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        isGirlAnimReadSystem = false;

        while (isNovelSetVisIng) { yield return null; }

        NovelSetVis("E4100100");//まって、待ってくれ…！

        while (isNovelSetVisIng) { yield return null; }
        ChieriMotion("f_眉高い笑顔少しジト目", 1f, 2);

        //■落とす直前まで待機
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 1f)
        { yield return null; }

        #endregion

        #region 指離して落ちる
        ChieriMotion("デスクペットボトルへ落とす", 0f, 0);
        yield return null;

        //■指離すまで待機
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 0.05f)
        { yield return null; }
        isGirlAnimReadSystem = false;

        FixedAction(() =>
        {
            CameraObjectsTrs.SetParent(GameObjectsTrs);
        });
        yield return null; yield return null;

        //ANの重力設定のみロード
        AN_SetPlayerRigidbody();
        AN_GravitiDragBool = true;//FixedUpdateのやつON
                                  //rigid監視スタート
        StartCoroutine(RigidReadSystem());

        //ペアレントで傾いたカメラ戻し
        CameraObjectsTrs.DOLocalRotateQuaternion(new Quaternion(0, CameraObjectsTrs.rotation.y, 0, CameraObjectsTrs.rotation.z), 1f);

        //飲み口に落ちるように移動
        FixedAction(() =>
        {
            CameraObjectsTrs.DOMoveX(PetBottleObj.transform.position.x, 1f);
            CameraObjectsTrs.DOMoveZ(PetBottleObj.transform.position.z, 1f);
        });
        #endregion
        //環境音フェードアウト
        KankyouBGMVolumer(0.1f, 2);
        tmpRhitosasiAS.DOFade(0.1f, 2);
        #region 落ちて立ち上がるまで

        //大体おちた高さになるまで待機(落ちない場合、時間でも強制で進む)
        float tmpFallDownTime = 0;
        while (CameraObjectsTrs.localPosition.y >= 0.71f && tmpFallDownTime < 2.5f)
        {
            tmpFallDownTime += 1 * Time.deltaTime;
            yield return null;
        }

        Debug.Log(tmpFallDownTime);
        //ペットボトルだいたいセンター位置（落ちた場所）
        GameObject Player_030_PetBottleCenterPosObj
            = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_030_PetBottleCenterPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_030_PetBottleCenterPosObj.transform.localPosition;
        CameraObjectsTrs.localRotation = Player_030_PetBottleCenterPosObj.transform.localRotation;

        //摘まれポーズやめ
        isPlayerUniqueMotion = false;

        HukidashiNovelDistanceChange(1.5f, 0);

        //フラッシュと音とダメージ
        FadeWhite(1, 0);
        SEPlay("dan01");

        CameraObjectsTrs.DOLocalRotate(
            new Vector3(270, CameraObjectsTrs.localEulerAngles.y, CameraObjectsTrs.localEulerAngles.z)
            , 0.3f)
            .SetEase(Ease.OutBounce)
            .OnComplete(() =>
            {
                CameraReset(new Vector3(270, CameraObjectsTrs.localEulerAngles.y, CameraObjectsTrs.localEulerAngles.z));
            });
        yield return new WaitForSeconds(0.05f);
        FadeWhite(0, 0);



        yield return new WaitForSeconds(1f);

        NovelSetVis("E4100110");//あいっづつ……！　うう
        while (novelCurrentPageInt < 2) { yield return null; }

        //立ち上がり暗幕
        FadeBlack(1, 0.5f);
        yield return new WaitForSeconds(0.5f);


        //■重力設定消し
        AN_GravitiDragBool = false;
        isRigidReadSystem = false;
        Destroy(CameraObjectsTrs.GetComponent<Rigidbody>());

        yield return null;

        isSeePointTempOff = true;//ポインターオフ

        //■隠れ鬼移動システムON
        KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
        //ローディング待ち
        while (isKOSystemLoading) { yield return null; }

        //ペットボトルコリダーをFixed追従動かし（智恵理のFixedColliderと同じ理屈）
        SetFixedMoveColliders(PetBottleObj.transform.Find("Bottle/Bottle_MeshCollider").gameObject);
        //SetFixedRigidMoveColliders(PetBottleObj.transform.Find("Bottle/Bottle_MeshCollider").gameObject);
        yield return null;


        //ペットボトル出して移動用位置（だいたい落ちた場所）
        GameObject Player_033_PetBottleCenterIdouPosObj
            = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_033_PetBottleCenterIdouPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_033_PetBottleCenterIdouPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_033_PetBottleCenterIdouPosObj.transform.localEulerAngles;

        CameraReset(Player_033_PetBottleCenterIdouPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos
            , true
            , Vector3.zero);

        FadeBlack(0, 0.5f);


        while (isNovelSetVisIng) { yield return null; }
        #endregion

        #region 移動Pos出し、移動でノベル、智恵理覗きこみ

        Hukidashi("E4100100");//これでもう逃げられないし
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        Hukidashi("E4100110");//喉が渇いても大丈夫
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        yield return new WaitForSeconds(0.5f);

        NovelSetVis("E4100120");//う、嘘だろ……
        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("f_リラックス02", 3f, 2);

        #region 探索とかくれおに移動設置
        isSeePointTempOff = false;//ポインターオン

        int tmpInt = 8;

        //走りスピードにしてモーションも走りに
        playerMoveSpeed = 4;
        isKO_PlayerWalk = false;

        KO_KakurePosObjsList[tmpInt].SetActive(true);
        //寝る場所移動ポイント出現 演出
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleForwardPos").gameObject, 0.1f);
        yield return new WaitForSeconds(0.5f);
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleLeftPos").gameObject, 0.1f);
        yield return new WaitForSeconds(0.5f);
        KO_NewPosPointObjVis
             (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleRightPos").gameObject, 0.1f);
        yield return new WaitForSeconds(0.5f);
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleBackPos").gameObject, 0.1f);
        #endregion


        #region //ペットボトルシェイクテスト
        //FixedAction(() =>
        //{
        //    IKLHandTargetTrs.position = GirlLHandTrs.position;
        //    IKLHandTargetTrs.rotation = GirlLHandTrs.rotation;
        //    DOTweenToIKEfPos(IKLHandEf, 1, 0);
        //    DOTweenToIKEfRot(IKLHandEf, 1, 0);

        //    tmpShakePrevPos = IKLHandTargetTrs.localPosition;
        //    tmpShakePrevQua = IKLHandTargetTrs.localRotation;
        //});

        //while (true)
        //{
        //    if (Input.GetKeyDown(KeyCode.B))
        //    {
        //        GameObject IKLHand_010_MotiageNozokiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/IKLHand_010_MotiageNozokiPosObj") as GameObject;
        //        IKLHandTargetTrs.DOLocalMove(IKLHand_010_MotiageNozokiPosObj.transform.localPosition
        //            , tmpShakeTime);
        //        IKLHandTargetTrs.DOLocalRotateQuaternion(IKLHand_010_MotiageNozokiPosObj.transform.localRotation
        //            , tmpShakeTime);

        //        //ChieriMotion("デスクペットボトル傾け覗き込み原点", 0f, 0);
        //    }
        //    if (Input.GetKeyDown(KeyCode.N))
        //    {
        //        IKLHandTargetTrs.DOLocalMove(tmpShakePrevPos
        //            , tmpShakeTime);
        //        IKLHandTargetTrs.DOLocalRotateQuaternion(tmpShakePrevQua
        //            , tmpShakeTime);

        //        //ChieriMotion("デスクペットボトル傾け覗き込み原点", 0f, 0);
        //    }

        //    yield return null;
        //}

        #endregion

        yield return new WaitForSeconds(3f);


        Hukidashi("E4100120");//中に入ったのって
        yield return new WaitForSeconds(4f);

        DelAll_Hukidashi();
        Hukidashi("E4100130");//マコトが初めてじゃない？

        //IKプレイヤー見る 頭はIK切る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        DOTweenToLAIKSHead(LAIKHeadS, 0, 4);

        ChieriMotion("デスクペットボトル傾け覗き込み", 0f, 0);
        //左手マスク同期（元の動きそのまま持ってきて、親指だけ少し開く）
        ChieriMotion("デスクペットボトル傾け覗き込み", 0f, 6);

        ChieriMotion("f_本当に小さいね～", 1f, 2);

        yield return null;

        //顔近づくまで待機
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 1f)
        { yield return null; }
        isGirlAnimReadSystem = false;
        yield return new WaitForSeconds(2f);

        ChieriMotion("f_リラックス02", 1f, 2);

        yield return new WaitForSeconds(2f);

        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        Hukidashi("E4100140");//お風呂入ってくるね
        yield return new WaitForSeconds(1f);

        ChieriMotion("デスクペットボトル傾け覗き込み逆再生", 0f, 0);
        //頭IKON
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        yield return new WaitForSeconds(1f);

        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1f);
        #region 右手IKで机に指埋まらないように
        GameObject IKRHand020_Chieri_LastTsukueTeokiPosObj
            = Resources.Load("_PosObj/0180Petbottle/IKRHand020_Chieri_LastTsukueTeokiPosObj") as GameObject;
        IKRHandTargetTrs.localPosition = IKRHand020_Chieri_LastTsukueTeokiPosObj.transform.localPosition;
        IKRHandTargetTrs.localEulerAngles = IKRHand020_Chieri_LastTsukueTeokiPosObj.transform.localEulerAngles;

        DOTweenToIKEfPos(IKRHandEf, 1, 2);
        DOTweenToIKEfRot(IKRHandEf, 1, 2);

        #endregion
        yield return new WaitForSeconds(1f);

        ChieriMotion("LH_デスクペットボトルへ落とす", 2f, 6);

        //移動で「出してくれ」台詞オフ
        isBottleCenterPosArea_Exit = true;

        NovelSetVis("E4100130", true);//ま、待ってくれ！

        ChieriMotion("f_リラックス02", 3f, 2);




        //ペットボトル置くまで待機
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "デスクペットボトル傾け覗き込み") { yield return null; }
        while (girlAnimNomTime <= 2f) { yield return null; }
        isGirlAnimReadSystem = false;

        SEPlay(OtherSEObj, "putting_a_tray_01_pich-6_ChorusPet", PetBottleObj, 1);


        while (novelCurrentPageInt < 2) { yield return null; }
        //移動オフ
        isKOSystem = false;

        FadeBlack(1, 2);

        yield return new WaitForSeconds(2);


        #endregion

        #region 暗幕終了設定

        //ペットボトルのFixedコリダー（TODO システムの様にして安全に削除すべき）
        Destroy(FixedMoveColliderFollderObj);
        fixedMoveColliderCloneParentObjList.Clear();

        //左手マスク解除
        ChieriMotion("_noData", 0f, 6);

        //ミュート(本来は削除すべき シーン移動での自動削除に任せる)
        tmpRhitosasiAS.DOFade(0, 0.1f);
        tmpHeadAS.DOFade(0, 0.1f);

        isNovelFadeTween = isNovelSetVisIng = false;

        #endregion

        //環境音フェードアウト
        KankyouBGMVolumer(0f, 2);

        yield return new WaitForSeconds(6);

        isFlowChartEventMove = true;
        EventMove("閉じ込められて一夜", true, true);

        yield break;
    }
    IEnumerator E3020()//閉じ込められて一夜
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_PetbottleIreZero;
            //暗幕
            FadeBlack(1, 0);
        }
        EventReset();

        #region 設定
        //BGM音量消し
        BGMPlay(true, null, 0f, 0);

        #region //ライト消し デバッグで一旦消さない
        //if (GameObject.Find("Floor light") != null)
        //{ NullJudgeFind("Floor light").GetComponent<Light>().enabled = false; }
        #endregion

        #region 小物

        //宿題
        Drill_chieriTrs.gameObject.SetActive(false);

        ////プレイヤーの宿題
        //HomeworkObjectsTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);

        //ペンなくし
        SharpenObj.SetActive(false);
        //消しゴム無くし
        KeshigomuObj.SetActive(false);


        //スピーカー 位置に
        SpeakerTrs.gameObject.SetActive(true);
        GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
        SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        //智恵理スマホベッドの上に
        ChieriSumahoObj.transform.SetParent(GameObjectsTrs);
        GameObject ChieriSumaho_Bed01PosObj = Resources.Load("_PosObj/_ParentPoseObjs/ChieriSumaho_Bed01PosObj") as GameObject;
        ChieriSumahoObj.transform.localPosition = ChieriSumaho_Bed01PosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_Bed01PosObj.transform.localEulerAngles;
        ChieriSumahoObj.SetActive(true);
        //ケーブルOff
        ChieriSumahoUSBCableObj.SetActive(false);


        #endregion

        #region ちえり
        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);
        //智恵理0位置ロック
        DB.isChieriPosLock = true;
        //アニメスピード
        girlAnim.speed = 0.5f;

        //IKオフ
        DOTweenToLAIKSEyes(LAIKEyeS, 0, 0);
        DOTweenToLAIKSHead(LAIKHeadS, 0, 0);

        //智恵理 ベッドで寝
        //ポーズ表情
        ChieriMotion("ベッド横寝", 0f, 0);
        ChieriMotion("f_Sleep100Only", 0f, 2);
        #endregion

        //椅子位置
        GameObject Chair010_ChieriMisePosObj
            = Resources.Load("_PosObj/0190TozikomerareteItiya/Chair010_ChieriMisePosObj") as GameObject;
        ChairTrs.localPosition = Chair010_ChieriMisePosObj.transform.localPosition;
        ChairTrs.localEulerAngles = Chair010_ChieriMisePosObj.transform.localEulerAngles;

        #region ペットボトル取得
        //ペットボトル既に取得されていればなにもせず、なければリソースからクローン
        ObjSceneOrResouceLoad(ref PetBottleObj, "PetBottle", "Main/KomonoObj/PetBottle/PetBottle");

        //置くためにペアレント
        PetBottleObj.transform.SetParent(GameObjectsTrs, false);
        //位置
        GameObject PetBottle_010_DeskFirstPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_010_DeskFirstPosObj") as GameObject;
        PetBottleObj.transform.localPosition = PetBottle_010_DeskFirstPosObj.transform.localPosition;
        PetBottleObj.transform.localEulerAngles = PetBottle_010_DeskFirstPosObj.transform.localEulerAngles;


        //キャップ既に取得されていればなにもしない
        if (CapObj != null) { }
        else
        {
            //キャップ、クローンで取得(ペアレント変えるので、プレファブ上書きで消さないようにクローン)
            CapObj = Instantiate(PetBottleObj.transform.Find("Cap").gameObject);
            DB.evMoveDelObjList.Add(CapObj);
            //クローンON
            CapObj.transform.gameObject.SetActive(true);
            //ペアレント
            CapObj.transform.SetParent(GameObjectsTrs);
            //オリジナルをオフ
            PetBottleObj.transform.Find("Cap").gameObject.SetActive(false);
            //クローンキャップ机の上へ
            GameObject Cap_DeskUePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Cap_DeskUePosObj") as GameObject;
            CapObj.transform.localPosition = Cap_DeskUePosObj.transform.localPosition;
            CapObj.transform.localEulerAngles = Cap_DeskUePosObj.transform.localEulerAngles;
            CapObj.transform.localScale = Cap_DeskUePosObj.transform.localScale;
        }

        #endregion
        //ペットボトルコリダーをFixed追従動かし（智恵理のFixedColliderと同じ理屈）（重複時や削除時に自動処理にしたので直起動）
        SetFixedMoveColliders(PetBottleObj.transform.Find("Bottle/Bottle_MeshCollider").gameObject);

        #region パンくず取得
        //パンくず取得
        GameObject
            Pankuzu01Obj =
            Instantiate(Resources.Load("Main/KomonoObj/Sara/Pankuzu01Obj") as GameObject
            , PetBottleObj.transform, false),
            Pankuzu02Obj =
            Instantiate(Resources.Load("Main/KomonoObj/Sara/Pankuzu02Obj") as GameObject
            , PetBottleObj.transform, false);
        DB.evMoveDelObjList.Add(Pankuzu01Obj);
        DB.evMoveDelObjList.Add(Pankuzu02Obj);

        //位置
        GameObject Pankuzu01ParePetBottlePosObj
            = Resources.Load("_PosObj/0190TozikomerareteItiya/Pankuzu01ParePetBottlePosObj") as GameObject;
        Pankuzu01Obj.transform.localPosition = Pankuzu01ParePetBottlePosObj.transform.localPosition;

        GameObject Pankuzu02ParePetBottlePosObj
            = Resources.Load("_PosObj/0190TozikomerareteItiya/Pankuzu02ParePetBottlePosObj") as GameObject;
        Pankuzu02Obj.transform.localPosition = Pankuzu02ParePetBottlePosObj.transform.localPosition;

        #endregion


        //プレイヤー位置 //仰向け
        GameObject Player020_PetBottleCenterAomukePosObj
            = Resources.Load("_PosObj/0190TozikomerareteItiya/Player020_PetBottleCenterAomukePosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player020_PetBottleCenterAomukePosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player020_PetBottleCenterAomukePosObj.transform.localEulerAngles;
        CameraReset(Player020_PetBottleCenterAomukePosObj.transform.localEulerAngles);

        #endregion 設定

        //こもり虫に変え
        KankyouBGMChanger(semiSE.audioSource, "musi2_loop_EQKomori");

        //環境音フェード
        KankyouBGMVolumer(0.4f, 5);

        //虫だけ大きめ
        KankyouBGMVolumer(0.7f, 5, semiSE.audioSource);

        HukidashiNovelDistanceChange(1.5f, 0);

        #region 深夜モノローグで夜経過
        NovelSetVis("E3020007");//寝てたのか・・
        while (isNovelSetVisIng) { yield return null; };

        //開幕
        FadeBlack(0, 5);
        yield return new WaitForSeconds(4);

        NovelSetVis("E3020010");//長文モノローグ
        while (isNovelSetVisIng) { yield return null; }

        FadeBlack(1, 5);
        yield return new WaitForSeconds(10);

        #endregion

        #region ポニー会話設定
        //プレイヤー横向き
        GameObject Player030_PetBottleCenterYokonePosObj
            = Resources.Load("_PosObj/0190TozikomerareteItiya/Player030_PetBottleCenterYokonePosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player030_PetBottleCenterYokonePosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player030_PetBottleCenterYokonePosObj.transform.localEulerAngles;
        CameraReset(Player030_PetBottleCenterYokonePosObj.transform.localEulerAngles);

        //ポニー移動前にデフォLocalPosRot取得
        var defPonyLclPos = PonyTrs.localPosition;
        var defPonyLclEul = PonyTrs.localEulerAngles;

        //ポニー会話位置
        GameObject Pony040_PetBottleKaiwaPosObj
            = Resources.Load("_PosObj/0190TozikomerareteItiya/Pony040_PetBottleKaiwaPosObj") as GameObject;
        PonyTrs.localPosition = Pony040_PetBottleKaiwaPosObj.transform.localPosition;
        PonyTrs.localEulerAngles = Pony040_PetBottleKaiwaPosObj.transform.localEulerAngles;

        //ポニーMat (値更新時に自動でクローンされるのでクローンする必要なし)
        PonyTrs.GetComponent<Renderer>().material = ponyShinyaMat;
        //PonyTrs.GetComponent<Renderer>().material = Instantiate(ponyShinyaMat);

        //■ポニー上下揺らし様親オブジェクト（Gameobjectsに生成）
        GameObject tmpPonySwingObj = new GameObject();
        tmpPonySwingObj.name = nameof(tmpPonySwingObj);
        tmpPonySwingObj.transform.SetParent(GameObjectsTrs);
        tmpPonySwingObj.transform.localPosition =
            tmpPonySwingObj.transform.localEulerAngles = Vector3.zero;
        tmpPonySwingObj.transform.localScale = Vector3.one;
        //ペアレント
        PonyTrs.SetParent(tmpPonySwingObj.transform);
        //揺らしループ
        Tweener tmpPonySwingTweener =
            tmpPonySwingObj.transform.DOLocalMove(new Vector3(0, 0.01f, 0)
            , 1.5f)
            .SetEase(Ease.InOutQuad)
            .SetLoops(-1, LoopType.Yoyo);
        #endregion
        HukidashiNovelDistanceChange(6f, 0);

        #region ポニー会話
        NovelSetVis("E3020020");//ちょっといいかな
        while (isNovelSetVisIng) { yield return null; }

        FadeBlack(0, 1);
        yield return new WaitForSeconds(1);


        NovelSetVis("E3020030");//ちょっと話せるかな
        while (novelCurrentPageInt < 5) { yield return null; }
        //カメラ揺れ
        CameraAnchorTrs.DOShakePosition(1f, 0.2f);

        while (novelCurrentPageInt < 6) { yield return null; }


        #region 立ち上がり
        FadeBlack(1, 0.5f);
        yield return new WaitForSeconds(0.5f);

        //立ち上がり
        GameObject Player010_PetBottleCenterPosObj
            = Resources.Load("_PosObj/0190TozikomerareteItiya/Player010_PetBottleCenterPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player010_PetBottleCenterPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player010_PetBottleCenterPosObj.transform.localEulerAngles;
        CameraReset(Player010_PetBottleCenterPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos);//立ち

        //BGM事前読み込み
        BGMPlay(true, "paper-craft-moon", 0f, 0f);


        FadeBlack(0, 0.5f);
        #endregion


        while (isNovelSetVisIng) { yield return null; }

        //環境音フェード
        KankyouBGMVolumer(0, 5);
        //BGMフェードイン
        BGMPlay(true, "paper-craft-moon", 0.8f, 6f);

        yield return new WaitForSeconds(1);

        NovelSetVis("E3020040");//ちょっと話せるかな
        while (novelCurrentPageInt < 1) { yield return null; }
        //カメラ揺れ
        CameraAnchorTrs.DOShakePosition(1f, 0.2f);
        while (isNovelSetVisIng) { yield return null; }


        yield return new WaitForSeconds(1);
        NovelSetVis("E3020050");//やっぱり聞こえるのか・・
        while (novelCurrentPageInt < 1) { yield return null; }
        //カメラ揺れ
        CameraAnchorTrs.DOShakePosition(1f, 0.2f);
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);
        NovelSetVis("E3020060");//ちえりの因子うんぬん　　は？？？？？
        while (isNovelSetVisIng) { yield return null; }

        tmpPonySwingTweener.Pause();

        #region ポニー戻りかけ位置にTweener
        GameObject Pony050_ModorikakePosObj =
            Resources.Load("_PosObj/0190TozikomerareteItiya/Pony050_ModorikakePosObj") as GameObject;
        var tmpLclMvTweener =
        PonyTrs.DOLocalMove(Pony050_ModorikakePosObj.transform.localPosition, 10)
            .SetEase(Ease.InOutQuad)
            .SetAutoKill(false);
        var tmpLclRtTweener =
        PonyTrs.DOLocalRotate(Pony050_ModorikakePosObj.transform.localEulerAngles, 5)
            .SetEase(Ease.InOutQuad)
            .SetAutoKill(false);
        #endregion

        yield return new WaitForSeconds(1);
        NovelSetVis("E3020070");//忘れてくれ　待て待て！
        while (novelCurrentPageInt < 3) { yield return null; }
        //カメラ揺れ
        CameraAnchorTrs.DOShakePosition(1f, 0.2f);

        while (novelCurrentPageInt < 4) { yield return null; }
        //パンパン
        SEPlay("GrapHada02");
        yield return new WaitForSeconds(0.5f);
        SEPlay("GrapHada02");

        while (isNovelSetVisIng) { yield return null; }

        #region 振り向き位置回転にTweenerチェンジ
        GameObject Pony060_HurimukiPosObj =
            Resources.Load("_PosObj/0190TozikomerareteItiya/Pony060_HurimukiPosObj") as GameObject;
        tmpLclMvTweener.ChangeValues(
            PonyTrs.localPosition
            , Pony060_HurimukiPosObj.transform.localPosition
            , 4).Restart();
        tmpLclRtTweener.ChangeValues(
            PonyTrs.localEulerAngles
            , Pony060_HurimukiPosObj.transform.localEulerAngles
            , 4).Restart();
        yield return new WaitForSeconds(4);
        #endregion

        NovelSetVis("E3020080");//聞く気ある？　ある！　じゃあまあ
        while (novelCurrentPageInt < 6) { yield return null; }

        tmpPonySwingTweener.Play();

        #region 元位置回転にTweenerチェンジ
        tmpLclMvTweener.ChangeValues(
            PonyTrs.localPosition
            , Pony040_PetBottleKaiwaPosObj.transform.localPosition
            , 10).Restart();
        tmpLclRtTweener.ChangeValues(
            PonyTrs.localEulerAngles
            , Pony040_PetBottleKaiwaPosObj.transform.localEulerAngles
            , 10).Restart();
        #endregion

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(2);

        NovelSetVis("E3020090");//メガネの力・・？ ～ 変なの　まで
        while (isNovelSetVisIng) { yield return null; }

        #region ポニー戻りかけ位置にTweener後、def位置に（一回浮かせるため）

        bool isTmpPonyToutyaku = false;

        //既存の切る
        tmpLclMvTweener.Kill();
        tmpLclRtTweener.Kill();

        tmpLclMvTweener =
        PonyTrs.DOLocalMove(Pony050_ModorikakePosObj.transform.localPosition
            , 5)
            .SetEase(Ease.InQuad)
            .SetAutoKill(false);

        tmpLclRtTweener =
            PonyTrs.DOLocalRotate(Pony050_ModorikakePosObj.transform.localEulerAngles
            , 5)
            .SetEase(Ease.InQuad)
            .OnComplete(() =>
            {
                //デフォルト位置へ
                PonyTrs.DOLocalMove(defPonyLclPos
                    , 10)
                    .SetEase(Ease.OutQuad)
                    .SetAutoKill(false);

                PonyTrs.DOLocalRotate(defPonyLclEul
                    , 10)
                    .SetEase(Ease.OutQuad);
                //ポニー上下停止
                tmpPonySwingTweener.Kill();
                tmpPonySwingObj.transform.DOLocalMove(Vector3.zero, 1);

                //ポニー発光フェードアウト

                PonyTrs.GetComponent<Renderer>().material.DOFloat(0, "_ShadeSH9_UnderLimiter", 10)
                .OnComplete(() =>
                {
                    //到着Bool
                    isTmpPonyToutyaku = true;
                });


            });

        #endregion

        yield return new WaitForSeconds(1);
        NovelSetVis("E3020100");//観測に戻ります・・

        //BGMフェードアウト
        BGMPlay(false, "paper-craft-moon", 0f, 0f, 15f);

        while (isNovelSetVisIng) { yield return null; }

        yield return null;

        //ポニー到着待ち（決定で抜けれる）
        while (isTmpPonyToutyaku == false)
        {
            if (isKetteiDown) { goto 抜け; }
            yield return null;
        }
        抜け:

        FadeBlack(1, 3f);
        yield return new WaitForSeconds(5);

        tmpLclMvTweener.Kill();
        tmpLclRtTweener.Kill();
        PonyTrs.position = ponyDefPos;
        PonyTrs.eulerAngles = ponyDefEul;

        #endregion

        HukidashiNovelDistanceChange(1f, 0);

        NovelSetVis("E3020200");//動くことはなかった。
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(6);

        #region 終了処理

        //ポニーMat
        PonyTrs.GetComponent<Renderer>().material = ponyDefMat;


        #endregion

        EventMove("閉じ込められたまま朝");

        yield break;
    }
    IEnumerator E3030()//閉じ込められたまま朝
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_PetbottleIreZero;
            //暗幕
            FadeBlack(1, 0);
        }
        EventReset();

        #region 設定

        #region ライト調整 ドア側の窓からの光に変更
        if (GameObjectsTrs.Find("Light/Sun_Realtime") != null)
        { GameObjectsTrs.Find("Light/Sun_Realtime").gameObject.SetActive(true); }
        if (GameObjectsTrs.Find("Light/Sun_chieri") != null)
        { GameObjectsTrs.Find("Light/Sun_chieri").gameObject.SetActive(false); }
        #endregion

        #region 小物

        //宿題
        Drill_chieriTrs.gameObject.SetActive(false);

        ////プレイヤーの宿題
        //HomeworkObjectsTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);

        //ペンなくし
        SharpenObj.SetActive(false);
        //消しゴム無くし
        KeshigomuObj.SetActive(false);


        //スピーカー 位置に
        SpeakerTrs.gameObject.SetActive(true);
        GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
        SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        //智恵理スマホベッドの上に
        ChieriSumahoObj.transform.SetParent(GameObjectsTrs);
        GameObject ChieriSumaho_Bed01PosObj = Resources.Load("_PosObj/_ParentPoseObjs/ChieriSumaho_Bed01PosObj") as GameObject;
        ChieriSumahoObj.transform.localPosition = ChieriSumaho_Bed01PosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_Bed01PosObj.transform.localEulerAngles;
        ChieriSumahoObj.SetActive(true);
        //ケーブルOff
        ChieriSumahoUSBCableObj.SetActive(false);


        #endregion

        #region ちえり
        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);
        //智恵理0位置ロック
        DB.isChieriPosLock = true;
        //アニメスピード
        girlAnim.speed = 0.5f;

        //IKプレイヤー見る(一瞬)
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 0f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);

        //智恵理 ベッド座り
        //ポーズ表情
        ChieriMotion("ベッド座りポーズ", 0f, 0);
        ChieriMotion("_noData", 0f, 2);
        #endregion

        //椅子位置
        GameObject Chair010_ChieriMisePosObj
            = Resources.Load("_PosObj/0190TozikomerareteItiya/Chair010_ChieriMisePosObj") as GameObject;
        ChairTrs.localPosition = Chair010_ChieriMisePosObj.transform.localPosition;
        ChairTrs.localEulerAngles = Chair010_ChieriMisePosObj.transform.localEulerAngles;

        #region ペットボトル取得
        //ペットボトル既に取得されていればなにもせず、なければリソースからクローン
        ObjSceneOrResouceLoad(ref PetBottleObj, "PetBottle", "Main/KomonoObj/PetBottle/PetBottle");

        //置くためにペアレント
        PetBottleObj.transform.SetParent(GameObjectsTrs, false);
        //位置
        GameObject PetBottle_010_DeskFirstPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_010_DeskFirstPosObj") as GameObject;
        PetBottleObj.transform.localPosition = PetBottle_010_DeskFirstPosObj.transform.localPosition;
        PetBottleObj.transform.localEulerAngles = PetBottle_010_DeskFirstPosObj.transform.localEulerAngles;


        //キャップ既に取得されていればなにもしない
        if (CapObj != null) { }
        else
        {
            //キャップ、クローンで取得(ペアレント変えるので、プレファブ上書きで消さないようにクローン)
            CapObj = Instantiate(PetBottleObj.transform.Find("Cap").gameObject);
            DB.evMoveDelObjList.Add(CapObj);
            //クローンON
            CapObj.transform.gameObject.SetActive(true);
            //ペアレント
            CapObj.transform.SetParent(GameObjectsTrs);
            //オリジナルをオフ
            PetBottleObj.transform.Find("Cap").gameObject.SetActive(false);
            //クローンキャップ机の上へ
            GameObject Cap_DeskUePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Cap_DeskUePosObj") as GameObject;
            CapObj.transform.localPosition = Cap_DeskUePosObj.transform.localPosition;
            CapObj.transform.localEulerAngles = Cap_DeskUePosObj.transform.localEulerAngles;
            CapObj.transform.localScale = Cap_DeskUePosObj.transform.localScale;
        }

        #endregion
        SetFixedMoveColliders(PetBottleObj.transform.Find("Bottle/Bottle_MeshCollider").gameObject);


        //プレイヤー位置
        GameObject Player010_PetBottleCenterPosObj
            = Resources.Load("_PosObj/0190TozikomerareteItiya/Player010_PetBottleCenterPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player010_PetBottleCenterPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player010_PetBottleCenterPosObj.transform.localEulerAngles;
        CameraReset(Player010_PetBottleCenterPosObj.transform.localEulerAngles);

        #endregion 設定
        HukidashiNovelDistanceChange(5f, 0);

        //白フェード開始
        FadeWhite(1, 4, true);

        //足揺れはFootStepCameraShakeIEnumで大きさif調整（0.15倍（ペットボトル入れられてから朝など）で検索）

        //朝環境音に変え
        KankyouBGMChanger(semiSE.audioSource, "residential-area-in-early-morning-1_loop");
        //環境音フェード
        KankyouBGMVolumer(0.6f, 5);

        yield return new WaitForSeconds(4);

        FadeBlack(0, 0f);//ブラック外し

        yield return new WaitForSeconds(1);

        FadeWhite(0, 6f, true);//ホワイト外し
        yield return new WaitForSeconds(4);


        Hukidashi("E3030010");//おはよ～
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        NovelSetVis("E3030010");//夢と現実の区別が
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);

        ChieriMotion("笑顔02アルカイック口眉", 0.3f, 2);
        Hukidashi("E3030020");//ふふ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        yield return new WaitForSeconds(1);
        ChieriMotion("ベッドから立ち上がりテーブルへ", 0, 0);

        yield return new WaitForSeconds(1);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        Hukidashi("E3030030");//顔洗ってくるね

        //歩き途中くらいまで待機
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "ベッドからテーブルへ") { yield return null; }//クリップネーム自体は逆再生ではない
        while (girlAnimNomTime <= 0.15f) { yield return null; }
        //IKオフ
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        DOTweenToLAIKSEyes(LAIKEyeS, 0, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, 0, 2f);

        //歩き去る感じまで待機
        while (girlAnimNomTime <= 0.55f) { yield return null; }
        isGirlAnimReadSystem = false;
        NovelSetVis("E3030020");//体に響く歩行

        FadeBlack(1, 2f);
        yield return new WaitForSeconds(2);

        while (isNovelSetVisIng) { yield return null; }

        #region ライト調整 元に戻し
        GameObjectsTrs.Find("Light/Sun_Realtime").gameObject.SetActive(false);
        GameObjectsTrs.Find("Light/Sun_chieri").gameObject.SetActive(true);
        #endregion

        yield return new WaitForSeconds(2);

        EventMove("大事な日");

        yield break;
    }
    IEnumerator E3040()//大事な日
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_PetbottleIreZero;
            //暗幕
            FadeBlack(1, 0);
            #region 宿題ペン消しゴムなくし
            //宿題 位置に
            Drill_chieriTrs.gameObject.SetActive(false);

            //プレイヤーの
            //HomeworkObjectsTrs.gameObject.SetActive(false);
            DrillTrs.gameObject.SetActive(false);

            //ペンなくし
            SharpenObj.SetActive(false);
            //消しゴム無くし
            KeshigomuObj.SetActive(false);
            #endregion //宿題置き

            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;


        }
        EventReset();
        HukidashiNovelDistanceChange(5f, 0);

        //念のため暗幕
        FadeBlack(1, 0);

        #region 暗幕設定


        #region ちえり
        //智恵理 椅子すわり位置に
        GameObject Chieri_02_DeskChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02Old2_DeskChairPosObj") as GameObject;
        GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 0.6f / girlAnim.speed);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 0);

        //アニメスピード
        girlAnim.speed = 0.6f;

        GirlMeshTrs.gameObject.SetActive(true);
        DB.isChieriPosLock = false;

        //智恵理
        ChieriMotion("デスクペットボトル手伸ばし立てるためポーズ原点", 0f, 0);
        ChieriMotion("f_眉高い笑顔少しジト目", 0f, 2);

        #endregion
        #region 右人差し指にWindnoiseSoundObj付与

        GameObject RHitosasiSoundObj
            = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRhitosashi02Trs);
        RHitosasiSoundObj.name = nameof(RHitosasiSoundObj);
        DB.evMoveDelObjList.Add(RHitosasiSoundObj);

        //設定
        WindnoiseSound tmpRHitosasiSound = RHitosasiSoundObj.GetComponent<WindnoiseSound>();
        tmpRHitosasiSound.aSource.maxDistance = 30;
        tmpRHitosasiSound.pitchMax = 0.4f;
        tmpRHitosasiSound.pitchUpRateAdjustFloat = 2;

        tmpRHitosasiSound.aSource.volume = 0;

        //SoundObjのPos
        GameObject SoundObj_04_TsumamiYubi_RHitosasiPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_04_TsumamiYubi_RHitosasiPosObj") as GameObject;
        RHitosasiSoundObj.transform.localPosition = SoundObj_04_TsumamiYubi_RHitosasiPosObj.transform.localPosition;

        #endregion
        #region //SoundObj頭に付与
        ////WindnoiseSoundObj付与（左手）
        //GameObject HeadWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
        //    , Bip001HeadTrs);
        //HeadWindnoiseSoundObj.name = nameof(HeadWindnoiseSoundObj);
        //DB.evMoveDelObjList.Add(HeadWindnoiseSoundObj);

        ////設定
        //WindnoiseSound tmpHeadWindnoiseSound = HeadWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        //tmpHeadWindnoiseSound.aSource.maxDistance = 150;
        //tmpHeadWindnoiseSound.pitchMax = 0.4f;
        //tmpHeadWindnoiseSound.pitchUpRateAdjustFloat = 3;

        //tmpHeadWindnoiseSound.aSource.volume = 0;

        ////位置
        //HeadWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        #endregion


        #region ペットボトル取得

        //ペットボトル既に取得されていればなにもせず、なければシーンから、それでもなければリソースからクローン
        ObjSceneOrResouceLoad(ref PetBottleObj, "PetBottle", "Main/KomonoObj/PetBottle/PetBottle");

        //ペットボトルペア
        PetBottleObj.transform.SetParent(GameObjectsTrs, false);
        //立て位置
        GameObject PetBottle_020_DeskTate_PosObj
            = Resources.Load("_PosObj/0200Dasiteageru/PetBottle_020_DeskTate_PosObj") as GameObject;
        PetBottleObj.transform.localPosition = PetBottle_020_DeskTate_PosObj.transform.localPosition;
        PetBottleObj.transform.localEulerAngles = PetBottle_020_DeskTate_PosObj.transform.localEulerAngles;


        //キャップ既に取得されていればなにもしない
        if (CapObj != null) { }
        else
        {
            //キャップ、クローンで取得(ペアレント変えるので、プレファブ上書きで消さないようにクローン)
            CapObj = Instantiate(PetBottleObj.transform.Find("Cap").gameObject);
            DB.evMoveDelObjList.Add(CapObj);
            //クローンON
            CapObj.transform.gameObject.SetActive(true);
            //ペアレント
            CapObj.transform.SetParent(GameObjectsTrs);
            //オリジナルをオフ
            PetBottleObj.transform.Find("Cap").gameObject.SetActive(false);
            //クローンキャップ机の上へ
            GameObject Cap_DeskUePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Cap_DeskUePosObj") as GameObject;
            CapObj.transform.localPosition = Cap_DeskUePosObj.transform.localPosition;
            CapObj.transform.localEulerAngles = Cap_DeskUePosObj.transform.localEulerAngles;
            CapObj.transform.localScale = Cap_DeskUePosObj.transform.localScale;
        }

        //ペットボトル準備
        PetBottleObj.SetActive(true);
        CapObj.SetActive(true);


        #endregion
        //ペットボトルコリダーをFixed追従動かし（智恵理のFixedColliderと同じ理屈）
        SetFixedMoveColliders(PetBottleObj.transform.Find("Bottle/Bottle_MeshCollider").gameObject);

        yield return null;
        //ペットボトル内へのプレイヤー配置
        FixedAction(() =>
        {
            //プレイヤーを、ペットボトル手前はじへ。（PetBottleObjのローカル位置 をワールド座標に変換して置く）（ペットボトルの場所が変わっても大丈夫なように）
            GameObject PlayerPetBottlePare_010_PanOtosarePosObj
            = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PlayerPetBottlePare_010_PanOtosarePosObj") as GameObject;

            CameraObjectsTrs.position
                = PetBottleObj.transform.TransformPoint(PlayerPetBottlePare_010_PanOtosarePosObj.transform.localPosition);

            CameraReset(new Vector3(0, 180, 0)//手動
                , DB.cameraStandAnchorDefLocalPos);//立ち
        });
        #endregion
        //環境音フェード
        KankyouBGMChanger(semiSE.audioSource, "residential-area-in-early-morning-1_loop");
        KankyouBGMVolumer(0.4f, 5);
        NovelSetVis("E3040010");//これもまた夢
        while (isNovelSetVisIng) { yield return null; }



        //開幕
        FadeBlack(0, 2);
        yield return new WaitForSeconds(2);

        NovelSetVis("E3040020");//目覚めないまま朝が始まる。
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        //手 風音
        tmpRHitosasiSound.aSource.volume = 0.45f;


        #region ペットボトル倒し起こし

        #region 手伸ばす前まで
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "f_気づき（明）", 0.1f, 2);//時間差表情戻し
        Hukidashi("E3040010");//今日は大事な日
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //IK余所見
        FollowDOMove(IKLookAtEyeTargetTrs, GomibakoTrs, 0f);
        //まばたき
        ChieriMotion("b_まばたきSlow用", 0f, 4);
        blinkTime = 0;


        Hukidashi("E3040020");//小さい体に慣れて
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //IKプレイヤー
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        //まばたき
        ChieriMotion("b_まばたきSlow用", 0f, 4);
        blinkTime = 0;

        Hukidashi("E3040030");//大きい私に慣れて
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        NovelSetVis("E3040030");//？　 ……大事な日って？
        while (isNovelSetVisIng) { yield return null; }
        ChieriMotion("f_気づき（明）", 0.3f, 2);

        NovelSetVis("E3040040");//なれるって、うお

        //ANの重力設定のみロード
        AN_SetPlayerRigidbody();
        AN_GravitiDragBool = true;//FixedUpdateのやつON
                                  //rigid監視スタート
        StartCoroutine(RigidReadSystem());

        #endregion

        #region 智恵理ペットボトル倒し起こし 一連

        ChieriMotion("デスクペットボトル手伸ばし倒すため原点", 1f, 0);

        //■手伸ばすまで待機
        yield return null;
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 0.8f)
        { yield return null; }
        isGirlAnimReadSystem = false;

        FixedAction(() =>
        {
            PetBottleObj.transform.SetParent(GirlRHandTrs);

            //ペットボトル智恵理右手 倒し起こし位置
            GameObject PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj") as GameObject;
            PetBottleObj.transform.DOLocalMove(PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj.transform.localPosition
                , 1f).SetEase(Ease.Linear);
            PetBottleObj.transform.DOLocalRotate(PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj.transform.localEulerAngles
                , 1f).SetEase(Ease.Linear);
        });

        while (isNovelSetVisIng) { yield return null; }

        #region 落ちないように ペットボトルにペアレントして回転させない処理

        var defCameraObjectsEul = CameraObjectsTrs.eulerAngles;
        LateAction(() =>
        { CameraObjectsTrs.SetParent(PetBottleObj.transform, true); });
        while (isLateAction) { yield return null; }

        yield return null;

        LateAction(() =>
        { defCameraObjectsEul = CameraObjectsTrs.eulerAngles; });
        while (isLateAction) { yield return null; }

        #endregion


        ChieriMotion("デスクペットボトル倒す原点", 0f, 0);


        //■倒すまで待機 (カメラ回転固定しながら)
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "デスクペットボトル倒す原点")
        {
            LateAction(() =>
            { CameraObjectsTrs.eulerAngles = defCameraObjectsEul; });
            yield return null;
        }
        while (girlAnimNomTime <= 1f)
        {
            LateAction(() =>
            { CameraObjectsTrs.eulerAngles = defCameraObjectsEul; });
            yield return null;
        }
        isGirlAnimReadSystem = false;

        //ペア外し
        LateAction(() =>
        { CameraObjectsTrs.SetParent(GameObjectsTrs, true); });
        while (isLateAction) { yield return null; }

        SEPlay(Other3DSEObj, "putting_a_tray_02", PetBottleObj, 1f);

        //■重力設定消し
        AN_GravitiDragBool = false;
        isRigidReadSystem = false;
        Destroy(CameraObjectsTrs.GetComponent<Rigidbody>());


        Hukidashi("E3040040");//とりあえず出てみる？
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        //手戻し
        FixedAction(() =>
        {
            ChieriMotion("デスクペットボトル倒した後手戻す原点", 0f, 0);

            PetBottleObj.transform.SetParent(GameObjectsTrs);
            //ペットボトル倒れ位置
            GameObject PetBottle_040_DeskTaore_PosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_040_DeskTaore_PosObj") as GameObject;
            PetBottleObj.transform.DOLocalMove(PetBottle_040_DeskTaore_PosObj.transform.localPosition
                , 0.5f).SetEase(Ease.Linear);
            PetBottleObj.transform.DOLocalRotate(PetBottle_040_DeskTaore_PosObj.transform.localEulerAngles
                , 0.5f).SetEase(Ease.Linear);
        });

        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        Hukidashi("E3040050");//やっぱ聞き取りづらいし
        ChieriMotion("f_笑顔眉下がり", 0.3f, 2);
        ChieriMotionDelay(1, "f_笑顔眉下がり目閉じない", 0.02f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        ChieriMotionDelay(3, "笑顔01口眉_目閉じない", 2f, 2);//時間差表情戻し

        yield return new WaitForSeconds(1);

        #region 渇望した出口　歩き出るまで
        NovelSetVis("E3040050");//あれだけ渇望した
        while (isNovelSetVisIng) { yield return null; }

        #region 探索とかくれおに移動設置
        //■隠れ鬼移動システムON
        KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
        //ローディング待ち
        while (isKOSystemLoading) { yield return null; }
        //移動場所08オン
        int tmpInt = 8;
        KO_KakurePosObjsList[tmpInt].SetActive(true);
        //寝る場所移動ポイント出現 演出
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleExitPos").gameObject, 0.5f);

        //早歩きスピードにしてモーションも歩きに
        playerMoveSpeed = 2f;
        KO_AsiotoTimeCountMaxFloat = 0.6f;
        isKO_PlayerWalk = true;
        #endregion

        //ペットボトル出るまで待機
        while (isPetBottleExitPos_Enter == false) { yield return null; }

        //足音速さ戻し
        KO_AsiotoTimeCountMaxFloat = 0.35f;


        //着地分1秒待機
        KO_isMovePosLock = true;
        yield return new WaitForSeconds(1);

        KO_isMovePosLock = false;
        isKOSystem = false;
        isTansakuSystem = false;


        //
        yield return new WaitForSeconds(0.5f);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し


        #endregion

        //環境音フェード
        KankyouBGMVolumer(0.8f, 5);
        HukidashiNovelDistanceChange(1f, 0);

        NovelSetVis("E3040060");//はぁー！はぁー！
        while (isNovelSetVisIng) { yield return null; }
        ChieriMotion("デスクペットボトル手伸ばし立てるため原点", 0f, 0);

        //IKペットボトル見
        FollowDOMove(IKLookAtEyeTargetTrs, PetBottleObj.transform, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, PetBottleObj.transform, new Vector3(0, -0.045f, 0), 1);
        //まばたき
        ChieriMotion("b_まばたきSlow用", 0f, 4);
        blinkTime = 0;

        //手 風音
        tmpRHitosasiSound.aSource.volume = 0.8f;


        //■手伸ばしはじめまで待機
        yield return null;
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "デスクペットボトル手伸ばし立てるため原点") { yield return null; }
        while (girlAnimNomTime <= 0.3f) { yield return null; }

        ChieriMotion("f_笑顔眉下がり", 0.3f, 2);
        ChieriMotionDelay(1, "f_笑顔眉下がり目閉じない", 0.02f, 2);//時間差表情戻し
        Hukidashi("E3040060");//ごめんねー


        //■手伸ばすまで待機
        yield return null;
        while (girlAnimNomTime <= 1f) { yield return null; }
        isGirlAnimReadSystem = false;

        NovelSetVis("E3040070");//いや、大丈夫だよ

        FixedAction(() =>
        {
            PetBottleObj.transform.SetParent(GirlRHandTrs);

            //ペットボトル智恵理右手 倒し起こし位置
            GameObject PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj") as GameObject;
            PetBottleObj.transform.DOLocalMove(PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj.transform.localPosition
                , 0.5f).SetEase(Ease.Linear);
            PetBottleObj.transform.DOLocalRotate(PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj.transform.localEulerAngles
                , 0.5f).SetEase(Ease.Linear);

            ChieriMotion("デスクペットボトル立てる原点", 0f, 0);
        });


        //■立て始めて少しまで待機
        yield return null;
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "デスクペットボトル立てる原点") { yield return null; }
        while (girlAnimNomTime <= 0.1f) { yield return null; }

        //プレイヤー見
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 0.6f / girlAnim.speed);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
        //IKプレイヤー
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        //まばたき
        ChieriMotion("b_まばたきSlow用", 0f, 4);
        blinkTime = 0;


        //■立てるまで待機
        while (girlAnimNomTime <= 1f) { yield return null; }
        isGirlAnimReadSystem = false;
        SEPlay(Other3DSEObj, "putting_a_tray_01_pich-6", PetBottleObj);

        FixedAction(() =>
        {
            ChieriMotion("デスクペットボトル立てた後手戻す原点", 0f, 0);

            PetBottleObj.transform.SetParent(GameObjectsTrs);
            //ペットボトル立ち位置
            PetBottleObj.transform.DOLocalMove(PetBottle_020_DeskTate_PosObj.transform.localPosition
                , 0.5f).SetEase(Ease.Linear);
            PetBottleObj.transform.DOLocalRotate(PetBottle_020_DeskTate_PosObj.transform.localEulerAngles
                , 0.5f).SetEase(Ease.Linear);
        });

        //■手戻すまで待機
        yield return null;
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "デスクペットボトル立てた後手戻す原点") { yield return null; }
        while (girlAnimNomTime <= 1f) { yield return null; }
        isGirlAnimReadSystem = false;

        while (isNovelSetVisIng) { yield return null; }


        //ChieriMotion("デスク起き上がり→肘つき", 0f, 0);

        FadeBlack(1, 1);
        yield return new WaitForSeconds(1);
        HukidashiNovelDistanceChange(4f, 0);

        EventMove("指掴まり");
        #endregion

        #endregion



        #region //デバッグでキー毎にイベント確認していたときのもの（後で消す）
        while (true)
        {

            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.F))
            {
                #region //ペットボトル取り出す～摘み上げ
                //#region ペットボトル取り出す
                ////ミュート解除
                //tmpHeadAS.mute = false;
                //tmpRhitosasiAS.mute = false;

                //NovelSetVis("E4100010");//見つめられている-やんわりと伝えよう・・
                //while (isNovelSetVisIng) { yield return null; }
                //yield return new WaitForSeconds(1);

                ////同時発声でノベル消し
                //NovelSetVis("E4100020");//あのさ
                //yield return new WaitForSeconds(0.2f);
                //ChieriMotion("f_あはは・・2", 0.2f, 2);
                //ChieriMotionDelay(3, "f_あはは・・2目開き", 0.2f, 2);
                //Hukidashi("E4100010");//お腹すいたね
                //yield return new WaitForSeconds(0.5f);
                //isNovelFadeTween = isNovelSetVisIng = false;
                //yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

                //NovelSetVis("E4100030");//ほぼ同時だった。
                //while (isNovelSetVisIng) { yield return null; }

                ////まばたき
                //ChieriMotion("b_まばたきSlow用", 0f, 4);
                //blinkTime = 0;
                ////上向き
                //ChieriMotion("f_本当に小さいね～", 0.3f, 2);
                ////IKカレンダー見
                //FollowDOMove(IKLookAtEyeTargetTrs, CalenderTrs, 0f);
                //yield return new WaitForSeconds(1);
                //Hukidashi("E4100020");//朝ごはんも食べたいけど
                //yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

                ////■"デスク肘つき→起き上がり"モーションだけ速度変更（animatorのParametersでスピード変更（ステート毎に設定できるので、表情が遅くならない））
                //girlAnim.SetFloat("デスク肘つき→起き上がりSpeed", 0.4f); yield return null;
                //ChieriMotion("デスク肘つき→起き上がり", 0, 0);

                ////IKプレイヤー見る
                //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                ////まばたき
                //ChieriMotion("b_まばたきSlow用", 0f, 4);
                //blinkTime = 0;

                //yield return new WaitForSeconds(1);

                //Hukidashi("E4100030");//のど渇いてるんじゃない？

                //ChieriMotion("f_眉高い笑顔少しジト目", 0.3f, 2);

                //yield return new WaitForSeconds(1f); yield return KeyOrWait(3);
                //yield return new WaitForSeconds(1f);
                //NovelSetVis("E4100040");//あ、うん
                //while (novelCurrentPageInt < 2) { yield return null; }

                ////ミュート
                //tmpHeadAS.mute = true;
                //tmpRhitosasiAS.mute = true;

                ////ノベル中暗幕でペットボトル取り出しポーズに
                //FadeBlack(1, 0.5f);
                //yield return new WaitForSeconds(0.5f);

                //ChieriMotion("デスクペットボトル取り出し前ポーズ原点", 0f, 0);

                //while (novelCurrentPageInt < 6) { yield return null; }

                ////開幕
                //FadeBlack(0, 0.5f);
                //yield return new WaitForSeconds(0.5f);
                //while (isNovelSetVisIng) { yield return null; }
                ////ミュート解除
                //tmpHeadAS.mute = false;
                //tmpRhitosasiAS.mute = false;


                //yield return new WaitForSeconds(1);
                //ChieriMotion("笑顔01口眉", 0.05f, 2);
                //ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                //Hukidashi("E4100040");//いいものがあるから
                //yield return new WaitForSeconds(1f); yield return KeyOrWait(3);


                ////■ペットボトル取り出し開始
                //ChieriMotion("デスクペットボトル取り出し原点", 0f, 0);
                //NovelSetVis("E4100050");//あ、うん

                ////鞄へ手を伸ばすあたりまで待ち
                //StartCoroutine(GirlAnimReadSystem());
                //yield return null;
                //while (girlAnimNomTime <= 0.5f)
                //{ yield return null; }


                ////IK鞄に
                //GameObject tmpSchoolBagObj = GameObject.Find("SchoolBag");
                //FollowDOMove(IKLookAtEyeTargetTrs, tmpSchoolBagObj.transform, 0.1f);
                ////顔はオフ
                //DOTweenToLAIKSHead(LAIKHeadS, 0, 1.5f);

                ////まばたき
                //ChieriMotion("b_まばたきSlow用", 0f, 4);
                //blinkTime = 0;

                //while (novelCurrentPageInt < 3) { yield return null; }
                ////暗幕
                //FadeBlack(1, 1f);
                //yield return new WaitForSeconds(1f);

                ////プレイヤー 机の上位置に
                //CameraObjectsTrs.localPosition = Player_010_DeskUeChieriTsumamiPosObj.transform.localPosition;
                //CameraObjectsTrs.localEulerAngles = Player_010_DeskUeChieriTsumamiPosObj.transform.localEulerAngles;

                ////まさぐり音仮
                //SEPlay(tmpSchoolBagObj, "laundry-spread1");
                //yield return new WaitForSeconds(2);

                ////風切り音出す用に逆再生
                //ChieriMotion("デスクペットボトル取り出し原点逆再生", 0f, 0);
                //yield return null;
                //while (girlAnimNomTime <= 0.8f)
                //{ yield return null; }
                //isGirlAnimReadSystem = false;
                //NovelSetVis("E4100060");//そして出てきたのは

                ////IKプレイヤー見る
                //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0));
                //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

                ////ミュート
                //tmpHeadAS.mute = true;
                //tmpRhitosasiAS.mute = true;
                //#endregion

                //#region 飲む？　の流れ
                ////ペットボトル準備
                //PetBottleObj.SetActive(true);
                //CapObj.SetActive(true);
                //ChieriMotion("デスクペットボトル持ち原点", 0f, 0);

                //while (isNovelSetVisIng) { yield return null; }
                ////開幕
                //FadeBlack(0, 0.5f);
                //yield return new WaitForSeconds(0.5f);
                //yield return new WaitForSeconds(1);

                ////ミュート解除
                //tmpHeadAS.mute = false;
                //tmpRhitosasiAS.mute = false;

                //NovelSetVis("E4100070");//お、おお……
                //while (isNovelSetVisIng) { yield return null; }
                //yield return new WaitForSeconds(1);

                //ChieriMotion("f_あはは・・2", 0.2f, 2);
                //ChieriMotionDelay(1, "f_あはは・・2目開き", 0.2f, 2);
                //Hukidashi("E4100050");//えへへ、部活で飲んじゃった
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                //yield return new WaitForSeconds(1);

                ////まばたき
                //ChieriMotion("b_まばたきSlow用", 0f, 4);
                //blinkTime = 0;

                //ChieriMotion("f_本当に小さいね～", 0.3f, 2);
                ////IKペットボトル見
                //FollowDOMove(IKLookAtEyeTargetTrs, PetBottleObj.transform, 0f);
                //FollowDOMove(IKLookAtHeadTargetTrs, PetBottleObj.transform, new Vector3(0, -0.045f, 0), 1);

                //Hukidashi("E4100060");//だからもう捨てようと
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                ////口パク止め
                //kutipakuTimerFloat = 0;
                //ChieriMotion("_noData", 0.1f, 3);
                ////■■※ マスクの動作は0フレで_noDataにしないと止まった事にならず、クチ開き表情ができなくなるのでディレイでクチ閉じ
                //ChieriMotionDelay(0.1f, "_noData", 0f, 3);//時間差表情戻し

                //yield return new WaitForSeconds(1);

                ////目IKプレイヤー見る
                //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                //ChieriMotion("笑顔01口眉_目閉じない", 0.2f, 2);
                ////まばたき
                //ChieriMotion("b_まばたきSlow用", 0f, 4);
                //blinkTime = 0;

                //yield return new WaitForSeconds(1);

                //ChieriMotion("h_右少し傾け", 0.5f, 7);
                //Hukidashi("E4100070");//飲みたい？
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                //yield return new WaitForSeconds(0.5f);
                //#endregion

                //#region ■選択肢 飲む飲まない（会話のみ）
                //NovelSetVis("■E4100080");//え？　いや！　え？

                ////■■選択肢
                //sentakuListNum = 99;//初期化
                //while (isNovelSentakushiWait) { yield return null; }
                //yield return new WaitForSeconds(1f);

                //Sentakushi("■E4100080a", Mathf.Infinity);
                //Sentakushi("■E4100080b", Mathf.Infinity);

                //while (sentakuListNum == 99) { yield return null; }
                //yield return null;

                //switch (sentakuListNum)
                //{
                //    case 0://選択肢a 「いや遠慮しとくよ」
                //        sentakuListNum = 99;
                //        //isNovelFadeTween = isNovelSetVisIng = false;
                //        yield return new WaitForSeconds(0.5f);
                //        NovelSetVis("E4100080a010");//遠慮
                //        while (novelCurrentPageInt < 1) { yield return null; }

                //        while (isNovelSetVisIng) { yield return null; }
                //        //IKペットボトル見
                //        ChieriMotion("h_noData", 2f, 7);
                //        FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0, -0.1f, 0), 3);

                //        //ChieriMotion("f_本当に小さいね～", 0.7f, 2);

                //        Hukidashi("E4100080a010");//ふぅん
                //        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

                //        Hukidashi("E4100080a020");//まあ飲まなくても
                //        ChieriMotion("f_リラックス02", 1f, 2);

                //        FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0, -0.11f, 0), 0.5f);
                //        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, new Vector3(0, 0f, -0.15f));//より目しすぎないよう

                //        break;
                //    case 1://選択肢b 「貰おうかな」
                //        sentakuListNum = 99;
                //        //isNovelFadeTween = isNovelSetVisIng = false;
                //        yield return new WaitForSeconds(0.5f);
                //        NovelSetVis("E4100080b010");//遠慮

                //        while (isNovelSetVisIng) { yield return null; }

                //        FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0, -0.1f, 0), 3);
                //        Hukidashi("E4100080b010");//無理してない？
                //        ChieriMotion("f_あはは・・2", 0.2f, 2);
                //        ChieriMotionDelay(1, "f_あはは・・2目開き", 0.2f, 2);
                //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                //        yield return new WaitForSeconds(1);
                //        NovelSetVis("E4100080b020");//え？　なんだ冗談
                //        while (isNovelSetVisIng) { yield return null; }

                //        ChieriMotion("f_リラックス02", 1f, 2);
                //        ChieriMotion("h_noData", 3f, 7);

                //        Hukidashi("E4100080b030");//じゃあ、飲んでもらおうかなー

                //        FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0, -0.14f, 0), 0.5f);
                //        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, new Vector3(0, 0f, -0.15f));//より目しすぎないよう


                //        break;
                //}
                //#endregion

                //yield return new WaitForSeconds(2);

                //#region 摘み上げ
                //ChieriMotion("デスクペットボトル摘み上げ原点", 0f, 0);
                //yield return null;

                ////■手構えるまで待機
                //StartCoroutine(GirlAnimReadSystem());
                //while (girlAnimNomTime <= 0.215f)
                //{ yield return null; }

                ////■つまみ直前まで待機
                //StartCoroutine(GirlAnimReadSystem());
                //while (girlAnimNomTime <= 0.324f)
                //{ yield return null; }

                //NovelSetVis("E4100090");//え？な？え？


                //FixedAction(() =>
                //{
                //    //指にペアレントし、Tweenで所定位置に
                //    CameraObjectsTrs.SetParent(GirlRhitosashi02Trs);
                //    GameObject Player_020_RHito2PareTsumamiLocalPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_020_RHito2PareTsumamiLocalPosObj") as GameObject;
                //    CameraObjectsTrs.DOLocalMove(Player_020_RHito2PareTsumamiLocalPosObj.transform.localPosition, 0.5f);
                //});

                ////■つまみ持ち上げまで待機
                //StartCoroutine(GirlAnimReadSystem());
                //while (girlAnimNomTime <= 0.624f)
                //{ yield return null; }


                ////表情
                //ChieriMotion("笑顔01口眉", 0.05f, 2);
                //ChieriMotionDelay(1, "f_リラックス02", 0.1f, 2);//時間差表情戻し

                //isGirlAnimReadSystem = false;

                //while (isNovelSetVisIng) { yield return null; }

                //NovelSetVis("E4100100");//まって、待ってくれ…！



                //#endregion
                #endregion
            }

            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.G))
            {
                #region //指離して落ちる～暗幕（智恵理出て行く）
                //#region ■デバッグ設定
                //CameraObjectsTrs.SetParent(GirlRhitosashi02Trs);
                //GameObject Player_020_RHito2PareTsumamiLocalPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_020_RHito2PareTsumamiLocalPosObj") as GameObject;
                //CameraObjectsTrs.DOLocalMove(Player_020_RHito2PareTsumamiLocalPosObj.transform.localPosition, 0f);
                //CameraObjectsTrs.localEulerAngles = Player_020_RHito2PareTsumamiLocalPosObj.transform.localEulerAngles;
                ////ペットボトル準備
                //PetBottleObj.SetActive(true);
                //CapObj.SetActive(true);
                ////ミュート解除
                //tmpHeadAS.mute = false;
                //tmpRhitosasiAS.mute = false;
                ////スピード
                //girlAnim.speed = 0.4f;
                //#endregion

                //#region 指離して落ちる
                //ChieriMotion("デスクペットボトルへ落とす原点", 0f, 0);
                //yield return null;

                ////■指離すまで待機
                //StartCoroutine(GirlAnimReadSystem());
                //while (girlAnimNomTime <= 0.05f)
                //{ yield return null; }
                //isGirlAnimReadSystem = false;

                //FixedAction(() =>
                //{
                //    CameraObjectsTrs.SetParent(GameObjectsTrs);
                //});
                //yield return null; yield return null;

                ////ANの重力設定のみロード
                //AN_SetPlayerRigidbody();
                //AN_GravitiDragBool = true;//FixedUpdateのやつON
                ////rigid監視スタート
                //StartCoroutine(RigidReadSystem());

                ////ペアレントで傾いたカメラ戻し
                //CameraObjectsTrs.DOLocalRotateQuaternion(new Quaternion(0, CameraObjectsTrs.rotation.y, 0, CameraObjectsTrs.rotation.z), 1f);

                ////飲み口に落ちるように移動
                //FixedAction(() =>
                //{
                //    CameraObjectsTrs.DOMoveX(PetBottleObj.transform.position.x, 1f);
                //    CameraObjectsTrs.DOMoveZ(PetBottleObj.transform.position.z, 1f);
                //});
                //#endregion

                //#region 落ちて立ち上がるまで
                ////大体おちた高さになるまで待機
                //while (CameraObjectsTrs.localPosition.y >= 0.71f) { yield return null; }

                ////フラッシュと音とダメージ
                //FadeWhite(1, 0);
                //SEPlay("dan01");
                //PlayerHPAddSub(-400);

                //CameraObjectsTrs.DOLocalRotate(
                //    new Vector3(270, CameraObjectsTrs.localEulerAngles.y, CameraObjectsTrs.localEulerAngles.z)
                //    , 0.3f)
                //    .SetEase(Ease.OutBounce);
                //yield return new WaitForSeconds(0.05f);
                //FadeWhite(0, 0);



                //yield return new WaitForSeconds(1f);

                //NovelSetVis("E4100110");//あいっづつ……！　うう
                //while (novelCurrentPageInt < 2) { yield return null; }

                ////立ち上がり暗幕
                //FadeBlack(1, 0.5f);
                //yield return new WaitForSeconds(0.5f);

                ////ペットボトルだいたいセンター位置（落ちた場所）
                //GameObject Player_030_PetBottleCenterPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_030_PetBottleCenterPosObj") as GameObject;
                //CameraObjectsTrs.localPosition = Player_030_PetBottleCenterPosObj.transform.localPosition;
                //CameraObjectsTrs.localRotation = Player_030_PetBottleCenterPosObj.transform.localRotation;

                ////■重力設定消し
                //AN_GravitiDragBool = false;
                //isRigidReadSystem = false;
                //Destroy(CameraObjectsTrs.GetComponent<Rigidbody>());

                //FadeBlack(0, 0.5f);


                //while (isNovelSetVisIng) { yield return null; }
                //#endregion

                //#region 移動Pos出し、移動でノベル、智恵理覗きこみとご飯食べてくるね

                //Hukidashi("E4100100");//これでもう逃げられないし
                //yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

                //Hukidashi("E4100110");//喉が渇いても大丈夫
                //yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

                //yield return new WaitForSeconds(0.5f);

                //NovelSetVis("E4100120");//う、嘘だろ……
                //while (isNovelSetVisIng) { yield return null; }

                //#region 探索とかくれおに移動設置
                ////■隠れ鬼移動システムON
                //KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
                ////移動場所07オン
                //int tmpInt = 8;
                //KO_KakurePosObjsList[tmpInt].SetActive(true);
                ////寝る場所移動ポイント出現 演出
                //KO_NewPosPointObjVis
                //    (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleForwardPos").gameObject, 0.1f);
                //yield return new WaitForSeconds(0.5f);
                //KO_NewPosPointObjVis
                //    (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleLeftPos").gameObject, 0.1f);
                //yield return new WaitForSeconds(0.5f);
                //KO_NewPosPointObjVis
                //     (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleRightPos").gameObject, 0.1f);
                //yield return new WaitForSeconds(0.5f);
                //KO_NewPosPointObjVis
                //    (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleBackPos").gameObject, 0.1f);
                //#endregion

                ////ペットボトルコリダーをFixed追従動かし（智恵理のFixedColliderと同じ理屈）
                //SetFixedMoveColliders(PetBottleObj.transform.Find("Bottle/Bottle_MeshCollider").gameObject);

                //#region //ペットボトルシェイクテスト
                ////FixedAction(() =>
                ////{
                ////    IKLHandTargetTrs.position = GirlLHandTrs.position;
                ////    IKLHandTargetTrs.rotation = GirlLHandTrs.rotation;
                ////    DOTweenToIKEfPos(IKLHandEf, 1, 0);
                ////    DOTweenToIKEfRot(IKLHandEf, 1, 0);

                ////    tmpShakePrevPos = IKLHandTargetTrs.localPosition;
                ////    tmpShakePrevQua = IKLHandTargetTrs.localRotation;
                ////});

                ////while (true)
                ////{
                ////    if (Input.GetKeyDown(KeyCode.B))
                ////    {
                ////        GameObject IKLHand_010_MotiageNozokiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/IKLHand_010_MotiageNozokiPosObj") as GameObject;
                ////        IKLHandTargetTrs.DOLocalMove(IKLHand_010_MotiageNozokiPosObj.transform.localPosition
                ////            , tmpShakeTime);
                ////        IKLHandTargetTrs.DOLocalRotateQuaternion(IKLHand_010_MotiageNozokiPosObj.transform.localRotation
                ////            , tmpShakeTime);

                ////        //ChieriMotion("デスクペットボトル傾け覗き込み原点", 0f, 0);
                ////    }
                ////    if (Input.GetKeyDown(KeyCode.N))
                ////    {
                ////        IKLHandTargetTrs.DOLocalMove(tmpShakePrevPos
                ////            , tmpShakeTime);
                ////        IKLHandTargetTrs.DOLocalRotateQuaternion(tmpShakePrevQua
                ////            , tmpShakeTime);

                ////        //ChieriMotion("デスクペットボトル傾け覗き込み原点", 0f, 0);
                ////    }

                ////    yield return null;
                ////}

                //#endregion

                //yield return new WaitForSeconds(3f);


                //Hukidashi("E4100120");//中に入ったのって
                //yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

                //Hukidashi("E4100130");//公が初めてじゃない？
                //yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

                //yield return new WaitForSeconds(1f);
                ////IKプレイヤー見る 頭はIK切る
                //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                //DOTweenToLAIKSHead(LAIKHeadS, 0, 4);

                //ChieriMotion("デスクペットボトル傾け覗き込み原点", 0f, 0);
                //ChieriMotion("f_本当に小さいね～", 1f, 2);
                //yield return null;

                ////顔近づくまで待機
                //StartCoroutine(GirlAnimReadSystem());
                //while (girlAnimNomTime <= 1f)
                //{ yield return null; }
                //isGirlAnimReadSystem = false;
                //yield return new WaitForSeconds(2f);

                //ChieriMotion("f_リラックス02", 0.5f, 2);

                //yield return new WaitForSeconds(2f);

                //ChieriMotion("笑顔01口眉", 0.05f, 2);
                //ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                //Hukidashi("E4100140");//ご飯食べてくるね
                //yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

                //ChieriMotion("デスクペットボトル傾け覗き込み原点逆再生", 0f, 0);
                ////頭IKON
                //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0));
                //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

                //yield return new WaitForSeconds(1f);
                //ChieriMotion("笑顔01口眉", 0.05f, 2);
                //ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                //yield return new WaitForSeconds(2f);

                ////移動で「出してくれ」台詞オフ
                //isBottleCenterPosArea_Exit = true;

                //NovelSetVis("E4100130");//ま、待ってくれ！

                //ChieriMotion("f_リラックス02", 1f, 2);//時間差表情戻し

                //while (novelCurrentPageInt < 2) { yield return null; }
                //FadeBlack(1, 2);

                //while (isNovelSetVisIng) { yield return null; }
                //#endregion

                //#region 暗幕時の智恵理出て行く演出
                ////ドア開く音
                //SEPlay(DoorRootTrs.gameObject, "door-open1");
                //yield return new WaitForSeconds(2f);

                //FixedAction(() =>
                //{
                //    PetBottleObj.transform.SetParent(GameObjectsTrs);
                //});

                ////ドア閉まる音
                //SEPlay(DoorRootTrs.gameObject, "door-close2");
                //yield return new WaitForSeconds(3f);

                //MeshTrs.gameObject.SetActive(false);

                //#endregion
                #endregion
            }

            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.H))
            {
                #region //いない間に動けるノベル
                //FadeBlack(1, 0);

                //#region ■デバッグ設定
                ////ペットボトル準備
                //PetBottleObj.SetActive(true);
                //CapObj.SetActive(true);

                ////プレイヤーペットボトルだいたいセンター位置（落ちた場所）（ドア方向）
                //GameObject Player_035_PetBottleCenterDoorAnglePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_035_PetBottleCenterDoorAnglePosObj") as GameObject;
                //CameraObjectsTrs.localPosition = Player_035_PetBottleCenterDoorAnglePosObj.transform.localPosition;
                //CameraObjectsTrs.localRotation = Player_035_PetBottleCenterDoorAnglePosObj.transform.localRotation;

                ////スピード
                //girlAnim.speed = 0.4f;

                //yield return null; yield return null;
                //yield return null;

                //MeshTrs.gameObject.SetActive(false);
                //#region 探索とかくれおに移動設置
                ////■隠れ鬼移動システムON
                //KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
                ////移動場所07オン
                //int tmpInt = 8;
                //KO_KakurePosObjsList[tmpInt].SetActive(true);
                ////寝る場所移動ポイント出現 演出
                //KO_NewPosPointObjVis
                //    (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleForwardPos").gameObject, 0f);
                //KO_NewPosPointObjVis
                //    (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleLeftPos").gameObject, 0f);
                //KO_NewPosPointObjVis
                //     (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleRightPos").gameObject, 0f);
                //KO_NewPosPointObjVis
                //    (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleBackPos").gameObject, 0f);
                //#endregion

                //isBottleCenterPosArea_Exit = true;
                //yield return null;
                //#endregion

                //FadeBlack(0, 2);

                //#region ペットボトル内散策するかしないかでノベル増える

                ////置くためにペアレントはずし
                //PetBottleObj.transform.SetParent(GameObjectsTrs);
                ////位置
                //GameObject PetBottle_010_DeskFirstPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_010_DeskFirstPosObj") as GameObject;
                //PetBottleObj.transform.localPosition = PetBottle_010_DeskFirstPosObj.transform.localPosition;
                //PetBottleObj.transform.localEulerAngles = PetBottle_010_DeskFirstPosObj.transform.localEulerAngles;

                ////4方エリアON
                //KO_KakurePosObjsList[tmpInt].transform.Find("BottleLeftPosArea_").GetComponent<Collider>().enabled = true;
                //KO_KakurePosObjsList[tmpInt].transform.Find("BottleRightPosArea_").GetComponent<Collider>().enabled = true;
                //KO_KakurePosObjsList[tmpInt].transform.Find("BottleForwardPosArea_").GetComponent<Collider>().enabled = true;
                //KO_KakurePosObjsList[tmpInt].transform.Find("BottleBackPosArea_").GetComponent<Collider>().enabled = true;

                //yield return new WaitForSeconds(7);

                //NovelSetVis("E4100140");//智恵理がいなくなったことで

                //while (isNovelSetVisIng) { yield return null; }

                ////4方探索していたら（エリアに入っていたら）
                //if (
                //    isBottleLeftPosArea_Enter &&
                //    isBottleRightPosArea_Enter &&
                //    isBottleForwardPosArea_Enter &&
                //    isBottleBackPosArea_Enter
                //    )
                //{
                //    NovelSetVis("E4100150");//「なにか、なにか出る方法は……！」
                //    while (novelCurrentPageInt < 7) { yield return null; }
                //}

                //isKOSystem = false;
                //isTansakuSystem = false;

                //FadeBlack(1, 3);
                //yield return new WaitForSeconds(3);

                //while (isNovelSetVisIng) { yield return null; }
                //NovelSetVis("E4100160");//仰向けに倒れこんだ
                //while (novelCurrentPageInt < 1) { yield return null; }

                ////仰向け
                //GameObject Player_040_PetBottleCenterAomukePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_040_PetBottleCenterAomukePosObj") as GameObject;
                //CameraObjectsTrs.localPosition = Player_040_PetBottleCenterAomukePosObj.transform.localPosition;
                //CameraObjectsTrs.localRotation = Player_040_PetBottleCenterAomukePosObj.transform.localRotation;

                //FadeBlack(0, 3);

                //while (isNovelSetVisIng) { yield return null; }
                //FadeBlack(1, 3);
                //yield return new WaitForSeconds(5);
                //#endregion
                #endregion
            }

            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.V))
            {
                #region //智恵理入室
                //FadeBlack(1, 0);
                //NovelSetVis("E4200010");//姿勢を変えたころ

                //#region ■モーションテストでのデバッグ設定
                ////ペットボトル準備
                //PetBottleObj.SetActive(true);
                //CapObj.SetActive(true);

                //PetBottleObj.transform.SetParent(GameObjectsTrs);
                ////位置
                //GameObject PetBottle_010_DeskFirstPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_010_DeskFirstPosObj") as GameObject;
                //PetBottleObj.transform.localPosition = PetBottle_010_DeskFirstPosObj.transform.localPosition;
                //PetBottleObj.transform.localEulerAngles = PetBottle_010_DeskFirstPosObj.transform.localEulerAngles;

                ////プレイヤーペットボトルだいたいセンター位置（落ちた場所）（ドア方向）
                //GameObject Player_035_PetBottleCenterDoorAnglePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_035_PetBottleCenterDoorAnglePosObj") as GameObject;
                //CameraObjectsTrs.localPosition = Player_035_PetBottleCenterDoorAnglePosObj.transform.localPosition;
                //CameraObjectsTrs.localRotation = Player_035_PetBottleCenterDoorAnglePosObj.transform.localRotation;

                //MeshTrs.gameObject.SetActive(false);

                ////智恵理0位置ロック
                //DB.isChieriPosLock = true;

                ////椅子デフォルト位置
                //GameObject Chair_010_IsuDivePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1/Chair_010_IsuDivePosObj") as GameObject;
                //ChairTrs.localPosition = Chair_010_IsuDivePosObj.transform.localPosition;
                //ChairTrs.localEulerAngles = Chair_010_IsuDivePosObj.transform.localEulerAngles;
                //#endregion

                //while (isNovelSetVisIng) { yield return null; }

                //FadeBlack(0, 3);
                //yield return new WaitForSeconds(3);

                //#region 智恵理ドアから椅子に座るまで

                ////アニメスピード
                //girlAnim.speed = 0.6f;
                //doorAnim.speed = 0.6f;
                //chairAnim.speed = 0.6f;

                ////智恵理ON
                //MeshTrs.gameObject.SetActive(true);

                //ChieriMotion("ドア入室", 0f, 0);
                //doorAnim.CrossFadeInFixedTime("ドア開き閉じ", 0f, 0);

                //yield return new WaitForSeconds(2.2f / girlAnim.speed);

                ////IKプレイヤー見る
                //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
                //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

                //Hukidashi("D3010");//お待たせ
                //ChieriMotion("笑顔01口眉", 0.1f, 2);
                //ChieriMotionDelay(2, "f_リラックス02", 0.1f, 2);//時間差表情戻し



                ////■ポーズ状態まで待ち
                //StartCoroutine(GirlAnimReadSystem());
                //while (girlAnimNomTime <= 1f) { yield return null; }
                //isGirlAnimReadSystem = false;

                //ChieriMotion("ドアからデスク横へ歩く", 0f, 0);
                //yield return new WaitForSeconds(3.5f / girlAnim.speed);

                //Hukidashi("E4200010");//よかったちゃんといるね
                //ChieriMotion("笑顔01口眉", 0.1f, 2);
                //ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                //yield return new WaitForSeconds(1.5f / girlAnim.speed);

                //chairAnim.enabled = true;


                ////■ポーズ状態まで待ち
                //StartCoroutine(GirlAnimReadSystem());
                //while (girlAnimNomTime <= 1f) { yield return null; }
                //isGirlAnimReadSystem = false;
                //ChieriMotion("ドアからデスク横ポーズから椅子に座る", 0f, 0);
                //chairAnim.CrossFadeInFixedTime("智恵理座り", 0f, 0);

                ////IK 椅子へ
                //FollowDOMove(IKLookAtEyeTargetTrs, ChairTrs);
                //FollowDOMove(IKLookAtHeadTargetTrs, ChairTrs, new Vector3(0, 0.8f, 0));
                //yield return new WaitForSeconds(3f / girlAnim.speed);

                ////頭だけIK弱めに（首埋まり対策）
                //DOTweenToLAIKSHead(LAIKHeadS, 0.4f, 1);
                //yield return new WaitForSeconds(1f / girlAnim.speed);
                //Hukidashi("E4200020");//ご褒美にご飯

                ////IK プレイヤーへ
                //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
                //yield return new WaitForSeconds(1f / girlAnim.speed);

                ////頭IK 戻し（ON）
                //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
                //yield return new WaitForSeconds(1f / girlAnim.speed);

                //ChieriMotion("笑顔01口眉", 0.1f, 2);
                //ChieriMotionDelay(1, "f_リラックス02", 0.1f, 2);//時間差表情戻し


                ////■ポーズ状態まで待ち
                //StartCoroutine(GirlAnimReadSystem());
                //while (girlAnimNomTime <= 0.9f) { yield return null; }
                //isGirlAnimReadSystem = false;

                //FadeBlack(1, 1f);
                //yield return new WaitForSeconds(0.5f);

                //NovelSetVis("■E4200020");//ご、ご飯……

                //chairAnim.enabled = false;

                ////アニメスピード
                //girlAnim.speed = 0.5f;
                //doorAnim.speed = 0.5f;
                //chairAnim.speed = 0.5f;

                //#endregion
                #endregion
            }

            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.B))
            {
                #region //パンくず落とし～好きかどうか
                ////FadeBlack(1, 0);

                //#region ■モーションテストでのデバッグ設定
                //DB.isChieriPosLock = false;
                ////椅子位置に
                //GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
                //GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;

                ////ペットボトル準備
                //PetBottleObj.SetActive(true);
                //CapObj.SetActive(true);
                //ChieriMotion("デスクペットボトルへ落とす前ポーズ原点", 0f, 0);

                //FixedAction(() =>
                //{
                //    //プレイヤーを、ペットボトル手前はじへ。（PetBottleObjのローカル位置 をワールド座標に変換して置く）（ペットボトルの場所が変わっても大丈夫なように）
                //    GameObject PlayerPetBottlePare_010_PanOtosarePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PlayerPetBottlePare_010_PanOtosarePosObj") as GameObject;
                //    CameraObjectsTrs.position
                //        = PetBottleObj.transform.TransformPoint(PlayerPetBottlePare_010_PanOtosarePosObj.transform.localPosition);
                //});

                //////プレイヤーペットボトルだいたいセンター位置（落ちた場所）（ドア方向）
                ////GameObject Player_035_PetBottleCenterDoorAnglePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_035_PetBottleCenterDoorAnglePosObj") as GameObject;
                ////CameraObjectsTrs.localPosition = Player_035_PetBottleCenterDoorAnglePosObj.transform.localPosition;
                ////CameraObjectsTrs.localRotation = Player_035_PetBottleCenterDoorAnglePosObj.transform.localRotation;

                ////ペットボトルコリダーをFixed追従動かし（智恵理のFixedColliderと同じ理屈）
                //if (fixedMoveColliderObjRootObjList.Contains(PetBottleObj.transform.Find("Bottle/Bottle_MeshCollider").gameObject) == false)
                //{
                //    SetFixedMoveColliders(PetBottleObj.transform.Find("Bottle/Bottle_MeshCollider").gameObject);
                //}


                //isBottleCenterPosArea_Exit = true;

                //#endregion

                //#region 智恵理パンくず落とし

                //ChieriMotion("デスクペットボトルへ落とす前ポーズ原点", 0f, 0);

                ////アニメスピード
                //girlAnim.speed = 0.5f;
                //doorAnim.speed = 0.5f;
                //chairAnim.speed = 0.5f;

                ////ペットボトル智恵理左手にペア
                //PetBottleObj.transform.SetParent(Bip001_L_HandTrs);
                ////位置
                //PetBottleObj.transform.localPosition = PetBottle_ChieriLHandPosObj.transform.localPosition;
                //PetBottleObj.transform.localEulerAngles = PetBottle_ChieriLHandPosObj.transform.localEulerAngles;
                //PetBottleObj.transform.localScale = PetBottle_ChieriLHandPosObj.transform.localScale;

                //FixedAction(() =>
                //{
                //    //IKRHandを、飲み口の上へ。（PetBottleObjのローカル位置 をワールド座標に変換して置く）（ペットボトルの場所が変わっても大丈夫なように）
                //    GameObject IKRHandParePetBottleObj_010_OtosiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/IKRHandParePetBottleObj_010_OtosiPosObj") as GameObject;
                //    IKRHandTargetTrs.position
                //        = PetBottleObj.transform.TransformPoint(IKRHandParePetBottleObj_010_OtosiPosObj.transform.localPosition);

                //    DOTweenToIKEfPos(IKRHandEf, 1, 0);
                //});




                ////パンくず取得
                //GameObject
                //    Pankuzu01RHitosasiPare_PetBottleOtosi01 = Instantiate(Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Pankuzu01RHitosasiPare_PetBottleOtosi01") as GameObject
                //    , GirlRhitosashi02Trs),
                //    Pankuzu02RHitosasiPare_PetBottleOtosi01 = Instantiate(Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Pankuzu02RHitosasiPare_PetBottleOtosi01") as GameObject
                //    , GirlRhitosashi02Trs);

                ////IKプレイヤー見る
                //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
                //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);


                ////ANの重力設定のみロード
                //AN_SetPlayerRigidbody();
                //AN_GravitiDragBool = true;//FixedUpdateのやつON
                ////rigid監視スタート
                //StartCoroutine(RigidReadSystem());


                //while (isNovelSentakushiWait) { yield return null; }
                //FadeBlack(0, 1f);
                //yield return new WaitForSeconds(1);

                //NovelSetVis("E4200030");//指先になにか見えた。

                //while (isNovelSetVisIng) { yield return null; }
                //yield return new WaitForSeconds(1);

                //ChieriMotion("笑顔01口眉", 0.1f, 2);
                //ChieriMotionDelay(1, "f_リラックス02", 0.1f, 2);//時間差表情戻し
                //Hukidashi("E4200030");//これ公の分ね
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);


                //ChieriMotion("デスクペットボトルへ落とす原点", 0f, 0);


                //FixedAction(() =>
                //{
                //    //物理ONと同時にペットボトルへペアレント（中で滑らないように）
                //    Pankuzu01RHitosasiPare_PetBottleOtosi01.GetComponent<Rigidbody>().isKinematic = false;
                //    Pankuzu01RHitosasiPare_PetBottleOtosi01.transform.SetParent(PetBottleObj.transform.Find("Bottle"));
                //});
                //yield return new WaitForSeconds(0.2f);

                //FixedAction(() =>
                //{
                //    Pankuzu02RHitosasiPare_PetBottleOtosi01.GetComponent<Rigidbody>().isKinematic = false;
                //    Pankuzu02RHitosasiPare_PetBottleOtosi01.transform.SetParent(PetBottleObj.transform.Find("Bottle"));
                //});
                //yield return new WaitForSeconds(0.2f);

                ////手IK切る
                //DOTweenToIKEfPos(IKRHandEf, 0, 2f);

                //yield return new WaitForSeconds(1);
                //NovelSetVis("E4200040");//う、うわ！
                //while (isNovelSetVisIng) { yield return null; }


                //Hukidashi("E4200040");//パンくず
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //Hukidashi("E4200050");//潰れちゃった
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);


                //ChieriMotion("笑顔01口眉", 0.1f, 2);
                //ChieriMotionDelay(1, "f_リラックス02", 0.1f, 2);//時間差表情戻し
                //Hukidashi("E4200060");//食べていいからね
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                //#endregion
                //PlayerHPAddSub(-500);

                //#region ■選択肢 食べる食べない
                //yield return new WaitForSeconds(1);
                //NovelSetVis("■E4200050");//言ってみれば食べ残し

                ////■■選択肢
                //sentakuListNum = 99;//初期化
                //while (isNovelSentakushiWait) { yield return null; }
                //yield return new WaitForSeconds(1f);

                //Sentakushi("■E4200060a", Mathf.Infinity);
                //Sentakushi("■E4200060b", Mathf.Infinity);

                //while (sentakuListNum == 99) { yield return null; }
                //yield return null;

                ////事前読み込み
                //GameObject PetBottle_020_DeskTate_PosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_020_DeskTate_PosObj") as GameObject;

                //bool isTabenai = false;
                //switch (sentakuListNum)
                //{
                //    case 0://選択肢a 「食べる」
                //        #region 食べる場合 
                //        sentakuListNum = 99;
                //        //isNovelFadeTween = isNovelSetVisIng = false;
                //        yield return new WaitForSeconds(1f);

                //        NovelSetVis("E4200050a010");//言ってみれば食べ残し
                //        while (novelCurrentPageInt < 3) { yield return null; }
                //        FadeBlack(1, 1);
                //        yield return new WaitForSeconds(2);

                //        #region ■暗幕中の設定

                //        //重力設定消し
                //        AN_GravitiDragBool = false;
                //        isRigidReadSystem = false;
                //        Destroy(CameraObjectsTrs.GetComponent<Rigidbody>());

                //        //ペットボトル、左手からペアレント外し 立て位置に
                //        PetBottleObj.transform.SetParent(GameObjectsTrs);
                //        //位置
                //        PetBottleObj.transform.localPosition = PetBottle_020_DeskTate_PosObj.transform.localPosition;
                //        PetBottleObj.transform.localEulerAngles = PetBottle_020_DeskTate_PosObj.transform.localEulerAngles;


                //        //ペットボトル内へのプレイヤー配置
                //        FixedAction(() =>
                //        {
                //            //プレイヤーを、ペットボトル手前はじへ。（PetBottleObjのローカル位置 をワールド座標に変換して置く）（ペットボトルの場所が変わっても大丈夫なように）
                //            GameObject PlayerPetBottlePare_010_PanOtosarePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PlayerPetBottlePare_010_PanOtosarePosObj") as GameObject;
                //            CameraObjectsTrs.position
                //                = PetBottleObj.transform.TransformPoint(PlayerPetBottlePare_010_PanOtosarePosObj.transform.localPosition);
                //        });


                //        //ポーズ
                //        ChieriMotion("デスク肘つきポーズ", 0f, 0);
                //        ChieriMotion("f_リラックス02", 0f, 2);
                //        #endregion

                //        while (isNovelSetVisIng) { yield return null; }

                //        PlayerHPAddSub(300);
                //        NovelSetVis("E4200050a020");//パンの欠片に直接齧り付いた
                //        while (novelCurrentPageInt < 4) { yield return null; }

                //        Hukidashi("E4200060a010");//食べてる食べてる

                //        while (isNovelSetVisIng) { yield return null; }
                //        PlayerHPAddSub(300);

                //        yield return new WaitForSeconds(1);
                //        Hukidashi("E4200060a020");//おいしい？
                //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //        NovelSetVis("E4200050a030");//返事する余裕はなかった。
                //        while (isNovelSetVisIng) { yield return null; }

                //        yield return new WaitForSeconds(1);
                //        Hukidashi("E4200060a030");//でもよかったー
                //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                //        Hukidashi("E4200060a040");//しばらく大丈夫
                //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //        NovelSetVis("E4200050a040");//血の気が引いた。
                //        while (novelCurrentPageInt < 1) { yield return null; }

                //        FadeBlack(0, 1);
                //        while (novelCurrentPageInt < 3) { yield return null; }
                //        yield return new WaitForSeconds(1);

                //        Hukidashi("E4200060a045");//ん？
                //        ChieriMotion("f_気づき（明）", 0.2f, 2);
                //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //        NovelSetVis("E4200050a050");//頼むよ！　許してくれ！
                //        while (isNovelSetVisIng) { yield return null; }
                //        yield return new WaitForSeconds(1);

                //        Hukidashi("E4200060a050");//どうして謝るの？
                //        ChieriMotion("f_どうして謝るの？", 0.2f, 2);
                //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //        NovelSetVis("E4200050a055");//不安を煽る。どうしてって…！
                //        while (isNovelSetVisIng) { yield return null; }



                //        //IKカレンダー見
                //        FollowDOMove(IKLookAtEyeTargetTrs, CalenderTrs, 0f);
                //        //まばたき
                //        ChieriMotion("b_まばたきSlow用", 0f, 4);
                //        blinkTime = 0;
                //        yield return new WaitForSeconds(1);

                //        Hukidashi("E4200060a060");//うーん、"逃げたから"は合ってるけど
                //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //        //■"デスク肘つき→起き上がり"モーションだけ速度変更（animatorのParametersでスピード変更（ステート毎に設定できるので、表情が遅くならない））
                //        girlAnim.SetFloat("デスク肘つき→起き上がりSpeed", 0.4f); yield return null;
                //        ChieriMotion("デスク肘つき→起き上がり", 0, 0);

                //        //目IKプレイヤー見る
                //        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                //        //まばたき
                //        ChieriMotion("b_まばたきSlow用", 0f, 4);
                //        blinkTime = 0;

                //        Hukidashi("E4200060a070");//怒ってないよ
                //        ChieriMotion("f_あはは・・2目開き", 0.2f, 2);
                //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


                //        NovelSetVis("E4200050a060");//じゃあ、なんでこんなことを…
                //        while (isNovelSetVisIng) { yield return null; }


                //        ChieriMotion("f_え？(軽驚)", 0.2f, 2);

                //        //IKカレンダー見
                //        FollowDOMove(IKLookAtEyeTargetTrs, CalenderTrs, 0f);
                //        //まばたき
                //        ChieriMotion("b_まばたきSlow用", 0f, 4);
                //        blinkTime = 0;


                //        yield return new WaitForSeconds(1);
                //        Hukidashi("E4200060a080");//好きだからかな
                //        yield return new WaitForSeconds(1);

                //        ChieriMotion("f_あはは・・2", 0.1f, 2);
                //        ChieriMotionDelay(1, "f_あはは・・2目開き", 0.1f, 2);//時間差表情戻し
                //        yield return new WaitForSeconds(1);
                //        //目IKプレイヤー見る
                //        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                //        yield return KeyOrWait(3);

                //        yield return new WaitForSeconds(1);

                //        #endregion
                //        break;

                //    case 1://選択肢b 「食べない」
                //        #region 食べない場合
                //        sentakuListNum = 99;
                //        //isNovelFadeTween = isNovelSetVisIng = false;
                //        yield return new WaitForSeconds(0.5f);

                //        NovelSetVis("E4200050b010");//それに手をつけず時間が流れた。
                //        FadeBlack(1, 2);
                //        while (isNovelSetVisIng) { yield return null; }
                //        yield return new WaitForSeconds(2);

                //        #region ■暗幕中の設定

                //        //重力設定消し
                //        AN_GravitiDragBool = false;
                //        isRigidReadSystem = false;
                //        Destroy(CameraObjectsTrs.GetComponent<Rigidbody>());

                //        //ペットボトル、左手からペアレント外し 立て位置に
                //        PetBottleObj.transform.SetParent(GameObjectsTrs);
                //        //位置
                //        PetBottleObj.transform.localPosition = PetBottle_020_DeskTate_PosObj.transform.localPosition;
                //        PetBottleObj.transform.localEulerAngles = PetBottle_020_DeskTate_PosObj.transform.localEulerAngles;

                //        //ペットボトル内へのプレイヤー配置
                //        FixedAction(() =>
                //        {
                //            //プレイヤーを、ペットボトル手前はじへ。（PetBottleObjのローカル位置 をワールド座標に変換して置く）（ペットボトルの場所が変わっても大丈夫なように）
                //            GameObject PlayerPetBottlePare_010_PanOtosarePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PlayerPetBottlePare_010_PanOtosarePosObj") as GameObject;
                //            CameraObjectsTrs.position
                //                = PetBottleObj.transform.TransformPoint(PlayerPetBottlePare_010_PanOtosarePosObj.transform.localPosition);
                //        });

                //        //ポーズ
                //        ChieriMotion("デスク肘つきポーズ", 0f, 0);
                //        ChieriMotion("f_リラックス01", 0f, 2);
                //        #endregion

                //        yield return null;

                //        Hukidashi("E4200060b010");//食べないの？
                //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                //        yield return new WaitForSeconds(0.5f);
                //        Hukidashi("E4200060b015");//この後も大変なのに
                //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                //        yield return new WaitForSeconds(0.5f);
                //        Hukidashi("E4200060b020");//体持たなくても知らないよ？
                //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //        yield return new WaitForSeconds(1);
                //        NovelSetVis("E4200050b020");//昨日までと違う言葉を聞かせてくる
                //        while (novelCurrentPageInt < 2) { yield return null; }

                //        FadeBlack(0, 1);
                //        while (novelCurrentPageInt < 4) { yield return null; }

                //        yield return new WaitForSeconds(1f);

                //        ChieriMotion("f_気づき（明）", 0.3f, 2);
                //        Hukidashi("E4200060b030");//ん？
                //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //        while (isNovelSetVisIng) { yield return null; }

                //        NovelSetVis("E4200050b030");//わからないんだ


                //        ChieriMotion("f_悲しい", 2f, 2);
                //        yield return new WaitForSeconds(1f);

                //        //まばたき
                //        ChieriMotion("b_まばたきSlow用", 0f, 4);
                //        blinkTime = 0;

                //        Hukidashi("・・・");//・・・
                //        FollowDOMove(IKLookAtEyeTargetTrs, GomibakoTrs);

                //        while (isNovelSetVisIng) { yield return null; }


                //        yield return new WaitForSeconds(1);

                //        ChieriMotion("f_悲しい目つむり強", 0.2f, 2);
                //        ChieriMotionDelay(1f, "f_気づき（明）", 0.1f, 2);//時間差表情戻し
                //        while (isNovelSetVisIng) { yield return null; }
                //        yield return new WaitForSeconds(1);

                //        //■"デスク肘つき→起き上がり"モーションだけ速度変更（animatorのParametersでスピード変更（ステート毎に設定できるので、表情が遅くならない））
                //        girlAnim.SetFloat("デスク肘つき→起き上がりSpeed", 0.4f); yield return null;
                //        ChieriMotion("デスク肘つき→起き上がり", 0, 0);

                //        Hukidashi("E4200060b040");//好きだよ？
                //        yield return new WaitForSeconds(1);


                //        //まばたき
                //        ChieriMotion("b_まばたきSlow用", 0f, 4);
                //        blinkTime = 0;
                //        //目IKプレイヤー見る
                //        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                //        yield return KeyOrWait(3);

                //        yield return new WaitForSeconds(1);
                //        isTabenai = true;
                //        #endregion
                //        break;

                //}
                //#endregion

                //#region ■は…え…？ じゃあどうして…　　だったらこんなことしないもん　■指突き
                //NovelSetVis("E4200060");//は…え…？　じゃあどうして……。

                //ChieriMotion("f_リラックス02", 0.3f, 2);
                //yield return new WaitForSeconds(0.6f / girlAnim.speed);
                //ChieriMotion("デスク少しうつ伏せポーズ", 0.6f / girlAnim.speed, 0);

                //yield return new WaitForSeconds(1);

                //if (isTabenai)
                //{

                //    Hukidashi("E4200060b050");//だーい好き
                //}

                //yield return new WaitForSeconds(1);

                //while (isNovelSetVisIng) { yield return null; }



                ////■指つき開始
                ////IKターゲット手の位置に
                //FixedAction(() =>
                //{
                //    IKRHandTargetTrs.position = GirlRHandTrs.position;
                //    IKRHandTargetTrs.rotation = GirlRHandTrs.rotation;
                //    DOTweenToIKEfPos(IKRHandEf, 1, 0);
                //    DOTweenToIKEfRot(IKRHandEf, 1, 0);
                //});
                ////適当にFixed待ち
                //yield return new WaitForSeconds(0.1f);

                ////突き構え終わった判定取るために
                //bool isTsukikamae = false;

                ////突き構えパスでTween（ペットボトルに当たらないように）
                //GameObject IKRHand_010_TsutukiKamaeAPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/IKRHand_010_TsutukiKamaeAPosObj") as GameObject;
                //GameObject IKRHand_015_TsutukiKamaeBPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/IKRHand_015_TsutukiKamaeBPosObj") as GameObject;
                //Vector3[] tsutukiKamaePosPaths = new[]
                //{
                //            IKRHand_010_TsutukiKamaeAPosObj.transform.localPosition,
                //            IKRHand_015_TsutukiKamaeBPosObj.transform.localPosition,
                //        };

                //IKRHandTargetTrs.DOLocalPath(tsutukiKamaePosPaths
                //    , 3, PathType.CatmullRom);
                ////回転は最後のだけ
                //IKRHandTargetTrs.DOLocalRotate(IKRHand_015_TsutukiKamaeBPosObj.transform.localEulerAngles
                //    , 3)
                //    //終わったら判定true
                //    .OnComplete(() => { isTsukikamae = true; });

                ////マスクひとさし指
                //ChieriMotion("ひとさし指差し", 0.2f, 5);

                //if (isTabenai)
                //{
                //    Hukidashi("E4200060b060");//嫌いだったら
                //}
                //else
                //{
                //    Hukidashi("E4200060a090");//もし怒ってたり嫌いだったら
                //}
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                ////突き構えるまで待ち
                //while (isTsukikamae == false) { yield return null; }

                ////■指突き開始
                ////終わり判定取り用
                //bool isTsuki = false;

                ////指つつき動き （InoutBackで押して戻す動き）
                //GameObject IKRHand_020_TsutukiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/IKRHand_020_TsutukiPosObj") as GameObject;
                //IKRHandTargetTrs.DOLocalMove(IKRHand_020_TsutukiPosObj.transform.localPosition
                //    , 2).SetEase(Ease.InOutBack);
                //IKRHandTargetTrs.DOLocalRotate(IKRHand_020_TsutukiPosObj.transform.localEulerAngles
                //    , 2).SetEase(Ease.InOutBack);

                ////■同時にBottle傾き
                ////Bottle取得
                //Transform BottleTrs = PetBottleObj.transform.Find("Bottle");
                ////現在値取得
                //Vector3 defBottolePos = BottleTrs.localPosition;
                //Vector3 defBottoleRot = BottleTrs.localEulerAngles;

                ////カメラペアレント
                //CameraObjectsTrs.SetParent(BottleTrs);

                ////傾き取得してDO
                //GameObject Bottle_010_TsutukareKatamuki_PosRotObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Bottle_010_TsutukareKatamuki_PosRotObj") as GameObject;
                //BottleTrs.DOLocalMove(Bottle_010_TsutukareKatamuki_PosRotObj.transform.localPosition
                //    , 0.7f);
                //BottleTrs.DOLocalRotate(Bottle_010_TsutukareKatamuki_PosRotObj.transform.localEulerAngles
                //    , 0.7f)
                //    //傾いたら
                //    .OnComplete(() =>
                //    {
                //        //初期値に戻し バウンス
                //        BottleTrs.DOLocalMove(defBottolePos
                //    , 1.5f).SetEase(Ease.OutBounce);
                //        BottleTrs.DOLocalRotate(defBottoleRot
                //            , 1.5f).SetEase(Ease.OutBounce)
                //            //戻ったらペアレント戻し 終わり判定true
                //            .OnComplete(() =>
                //            {
                //                CameraObjectsTrs.SetParent(GameObjectsTrs);
                //                isTsuki = true;
                //            });
                //    });



                //ChieriMotion("f_あはは・・2", 0.1f, 2);
                //ChieriMotionDelay(1, "f_あはは・・2目開き", 0.1f, 2);//時間差表情戻し
                //Hukidashi("E4200060a100");//こんなことするわけないもん
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                //yield return new WaitForSeconds(1);


                //NovelSetVis("E4200070");//わ、わからない……頭がどうにかなりそうだった


                ////ボトル戻るまで待機
                //while (isTsuki == false) { yield return null; }

                //ChieriMotion("笑顔01口眉", 0.1f, 2);
                //ChieriMotionDelay(1, "f_リラックス02", 0.1f, 2);//時間差表情戻し
                //ChieriMotion("デスク起き上がりポーズ", 1, 0);


                ////IK戻すとき 指ボトルに触れないよう手前に動かしながら切る
                //GameObject IKRHand_030_ModosiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/IKRHand_030_ModosiPosObj") as GameObject;
                //IKRHandTargetTrs.DOLocalMove(IKRHand_030_ModosiPosObj.transform.localPosition
                //    , 2);
                //IKRHandTargetTrs.DOLocalRotate(IKRHand_030_ModosiPosObj.transform.localEulerAngles
                //    , 2);
                //DOTweenToIKEfPos(IKRHandEf, 0, 2);
                //DOTweenToIKEfRot(IKRHandEf, 0, 2);

                ////手戻し
                //ChieriMotion("_noData", 1f, 5);


                //while (isNovelSetVisIng) { yield return null; }

                //#endregion

                //#region //デバッグ設定
                ////GameObject PetBottle_020_DeskTate_PosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_020_DeskTate_PosObj") as GameObject;

                //////重力設定消し
                ////AN_GravitiDragBool = false;
                ////isRigidReadSystem = false;
                ////Destroy(CameraObjectsTrs.GetComponent<Rigidbody>());

                //////ペットボトル、左手からペアレント外し 立て位置に
                ////PetBottleObj.transform.SetParent(GameObjectsTrs);
                //////位置
                ////PetBottleObj.transform.localPosition = PetBottle_020_DeskTate_PosObj.transform.localPosition;
                ////PetBottleObj.transform.localEulerAngles = PetBottle_020_DeskTate_PosObj.transform.localEulerAngles;


                //////ペットボトル内へのプレイヤー配置
                ////FixedAction(() =>
                ////{
                ////    //プレイヤーを、ペットボトル手前はじへ。（PetBottleObjのローカル位置 をワールド座標に変換して置く）（ペットボトルの場所が変わっても大丈夫なように）
                ////    GameObject PlayerPetBottlePare_010_PanOtosarePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PlayerPetBottlePare_010_PanOtosarePosObj") as GameObject;
                ////    CameraObjectsTrs.position
                ////        = PetBottleObj.transform.TransformPoint(PlayerPetBottlePare_010_PanOtosarePosObj.transform.localPosition);
                ////});

                ////ChieriMotion("デスク起き上がりポーズ", 0, 0);
                //#endregion

                //#region ■選択肢 好き？
                //yield return new WaitForSeconds(2);
                //SHukidashi("■E4200070");//じゃあ公は好き？
                //ChieriMotion("デスク少しうつ伏せポーズ", 0.6f / girlAnim.speed, 0);


                ////IK顔 肘つき用角度
                //DOTweenToLAIKSHead(LAIKHeadS, 0.6f, 1);


                //ChieriMotion("笑顔01口眉", 0.1f, 2);
                //ChieriMotionDelay(1, "f_気づき（明）", 0.1f, 2);//時間差表情戻し
                //yield return new WaitForSeconds(1);
                ////ChieriMotion("h_右少し傾け", 0.2f, 7);

                //yield return new WaitForSeconds(3);

                //Sentakushi("■E4200070a");
                //Sentakushi("■E4200070b");
                //Sentakushi("■E4200070c");

                ////選択肢選ばれるまでループ
                //while (sentakuListNum == 99) { yield return null; }
                //yield return new WaitForSeconds(0.5f);

                //switch (sentakuListNum)
                //{
                //    case 0://選択肢a 好きだ
                //        {
                //            #region 駄目だ見透かされている
                //            ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);

                //            Hukidashi("E4200070a010");//ほんとに？
                //            yield return new WaitForSeconds(1); yield return KeyOrWait(3);


                //            ChieriMotion("笑顔01口眉", 0.1f, 2);
                //            ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                //            Hukidashi("E4200070a020");//両思いなんだ
                //            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                //            yield return new WaitForSeconds(1);

                //            ChieriMotion("デスク起き上がりポーズ", 0.6f / girlAnim.speed, 0);
                //            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 0.6f / girlAnim.speed);
                //            DOTweenToLAIKSHead(LAIKHeadS, 1, 1);

                //            Hukidashi("E4200070a030");//ずっと一緒にいられるね
                //            ChieriMotion("笑顔01口眉", 0.1f, 2);
                //            ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                //            yield return KeyOrWait(3);

                //            ChieriMotion("f_眉高い笑顔少しジト目", 1f, 2);
                //            yield return new WaitForSeconds(1);

                //            NovelSetVis("E4200070a010");//まともに受け取られてない気がする・・
                //            while (isNovelSetVisIng) { yield return null; }
                //            #endregion
                //        }
                //        break;

                //    case 1://選択肢b 嫌い
                //        {
                //            #region まあそうだよね
                //            NovelSetVis("E4200070b010");//嫌いに決まってるだろ！
                //            while (isNovelSetVisIng) { yield return null; }
                //            yield return new WaitForSeconds(1);

                //            ChieriMotion("f_あはは・・2", 0.1f, 2);
                //            ChieriMotionDelay(1, "f_あはは・・2目開き", 0.1f, 2);//時間差表情戻し
                //            Hukidashi("E4200070b010");//そうだよね
                //            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //            ChieriMotion("デスク起き上がりポーズ", 0.6f / girlAnim.speed, 0);
                //            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 0.6f / girlAnim.speed);
                //            DOTweenToLAIKSHead(LAIKHeadS, 1, 1);

                //            Hukidashi("E4200070b020");//こんなことされて
                //            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //            ChieriMotion("笑顔01口眉", 0.2f, 2);
                //            ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                //            Hukidashi("E4200070b030");//でもいいんだ
                //            yield return new WaitForSeconds(1); yield return KeyOrWait(3);


                //            ChieriMotion("f_眉高い笑顔少しジト目", 1f, 2);
                //            Hukidashi("E4200070b040");//こうしないと一緒にいられないもん
                //            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                //            #endregion
                //        }
                //        break;

                //    case 2://選択肢c
                //        {
                //            #region そうなんだ・・（小声）
                //            yield return new WaitForSeconds(1);
                //            ChieriMotion("f_どうして謝るの？", 0.2f, 2);

                //            yield return new WaitForSeconds(1);

                //            Hukidashi("E4200070c010");//そっか・・
                //            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //            ChieriMotion("デスク起き上がりポーズ", 0.6f / girlAnim.speed, 0);
                //            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 0.6f / girlAnim.speed);
                //            DOTweenToLAIKSHead(LAIKHeadS, 1, 1);

                //            ChieriMotion("f_悲しい", 8f, 2);
                //            yield return new WaitForSeconds(1f);

                //            //まばたき
                //            ChieriMotion("b_まばたきSlow用", 0f, 4);
                //            blinkTime = 0;

                //            //目逸らし
                //            FollowDOMove(IKLookAtEyeTargetTrs, GomibakoTrs);

                //            yield return new WaitForSeconds(1);

                //            Hukidashi("E4200070c020");//そうなんだ
                //            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //            yield return new WaitForSeconds(2f);

                //            Hukidashi("E4200070c030");//勇気出せばよかったのかな
                //            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //            yield return new WaitForSeconds(1f);
                //            NovelSetVis("E4200070c010");//聴き取れたような気がした
                //            while (isNovelSetVisIng) { yield return null; }
                //            yield return new WaitForSeconds(1f);

                //            //まばたき
                //            ChieriMotion("b_まばたきSlow用", 0f, 4);
                //            blinkTime = 0;

                //            //IKプレイヤー見る
                //            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);

                //            ChieriMotion("f_あはは・・2目開き", 0.1f, 2);//時間差表情戻し

                //            Hukidashi("E4200070c040");//すっきりしたかも
                //            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //            ChieriMotion("笑顔01口眉", 0.2f, 2);
                //            ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

                //            Hukidashi("E4200070c050");//一緒によろしくね
                //            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //            ChieriMotion("f_眉高い笑顔少しジト目", 1f, 2);
                //            #endregion
                //        }
                //        break;

                //}

                //yield return new WaitForSeconds(1);

                //NovelSetVis("E4200080");//どういう意味なんだよ・・
                //FadeBlack(1, 2);
                //yield return new WaitForSeconds(1);

                //while (isNovelSetVisIng) { yield return null; }

                //yield return new WaitForSeconds(1);



                //#endregion

                ////Destroy(Pankuzu01RHitosasiPare_PetBottleOtosi01);
                ////Destroy(Pankuzu02RHitosasiPare_PetBottleOtosi01);
                #endregion
            }

            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.N))
            {
                #region //ペットボトル倒し起こし
                //#region ■モーションテストでのデバッグ設定
                //DB.isChieriPosLock = true;
                //////椅子位置に
                ////GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
                ////GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;

                ////ペットボトル準備
                //PetBottleObj.SetActive(true);
                //CapObj.SetActive(true);

                ////智恵理
                //ChieriMotion("デスクペットボトル手伸ばし立てるためポーズ", 0f, 0);
                //ChieriMotion("f_眉高い笑顔少しジト目", 1f, 2);

                //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 0.6f / girlAnim.speed);
                //DOTweenToLAIKSHead(LAIKHeadS, 1, 1);

                //PetBottleObj.transform.SetParent(GameObjectsTrs);
                ////立て位置
                //GameObject PetBottle_020_DeskTate_PosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_020_DeskTate_PosObj") as GameObject;
                //PetBottleObj.transform.localPosition = PetBottle_020_DeskTate_PosObj.transform.localPosition;
                //PetBottleObj.transform.localEulerAngles = PetBottle_020_DeskTate_PosObj.transform.localEulerAngles;


                ////ペットボトル内へのプレイヤー配置
                //FixedAction(() =>
                //{
                //    //プレイヤーを、ペットボトル手前はじへ。（PetBottleObjのローカル位置 をワールド座標に変換して置く）（ペットボトルの場所が変わっても大丈夫なように）
                //    GameObject PlayerPetBottlePare_010_PanOtosarePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PlayerPetBottlePare_010_PanOtosarePosObj") as GameObject;
                //    CameraObjectsTrs.position
                //        = PetBottleObj.transform.TransformPoint(PlayerPetBottlePare_010_PanOtosarePosObj.transform.localPosition);
                //});

                ////ペットボトルコリダーをFixed追従動かし（智恵理のFixedColliderと同じ理屈）
                //if (fixedMoveColliderObjRootObjList.Contains(PetBottleObj.transform.Find("Bottle/Bottle_MeshCollider").gameObject) == false)
                //{
                //    SetFixedMoveColliders(PetBottleObj.transform.Find("Bottle/Bottle_MeshCollider").gameObject);
                //}

                //FadeBlack(1, 0);
                //yield return null;

                //#endregion

                ////アニメスピード
                //girlAnim.speed = 0.6f;

                //FadeBlack(0, 2);

                //#region 手伸ばす前まで
                //ChieriMotion("笑顔01口眉", 0.1f, 2);
                //ChieriMotionDelay(1, "f_気づき（明）", 0.1f, 2);//時間差表情戻し
                //Hukidashi("D41000a08");//今日は大事な日
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                ////IK余所見
                //FollowDOMove(IKLookAtEyeTargetTrs, GomibakoTrs, 0f);
                ////まばたき
                //ChieriMotion("b_まばたきSlow用", 0f, 4);
                //blinkTime = 0;


                //Hukidashi("D41000a09");//小さい体に慣れて
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                ////IKプレイヤー
                //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                ////まばたき
                //ChieriMotion("b_まばたきSlow用", 0f, 4);
                //blinkTime = 0;

                //Hukidashi("D41000a10");//大きい私に慣れて
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //ChieriMotion("笑顔01口眉", 0.1f, 2);
                //ChieriMotionDelay(1, "f_気づき（明）", 0.1f, 2);//時間差表情戻し

                //NovelSetVis("E4200090");//智恵理から返事はなく
                //while (novelCurrentPageInt < 1) { yield return null; }

                ////ANの重力設定のみロード
                //AN_SetPlayerRigidbody();
                //AN_GravitiDragBool = true;//FixedUpdateのやつON
                ////rigid監視スタート
                //StartCoroutine(RigidReadSystem());

                //#endregion

                //#region 智恵理ペットボトル倒し起こし 一連

                //ChieriMotion("デスクペットボトル手伸ばし倒すため", 0f, 0);

                ////■手伸ばすまで待機
                //yield return null;
                //StartCoroutine(GirlAnimReadSystem());
                //while (girlAnimNomTime <= 0.8f)
                //{ yield return null; }
                //isGirlAnimReadSystem = false;

                //FixedAction(() =>
                //{
                //    PetBottleObj.transform.SetParent(GirlRHandTrs);

                //    //ペットボトル智恵理右手 倒し起こし位置
                //    GameObject PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj") as GameObject;
                //    PetBottleObj.transform.DOLocalMove(PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj.transform.localPosition
                //        , 1f).SetEase(Ease.Linear);
                //    PetBottleObj.transform.DOLocalRotate(PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj.transform.localEulerAngles
                //        , 1f).SetEase(Ease.Linear);
                //});

                //while (isNovelSetVisIng) { yield return null; }

                //ChieriMotion("デスクペットボトル倒す", 0f, 0);

                ////■倒すまで待機
                //StartCoroutine(GirlAnimReadSystem());
                //while (nowAnimClipName != "デスクペットボトル倒す") { yield return null; }
                //while (girlAnimNomTime <= 1f) { yield return null; }
                //isGirlAnimReadSystem = false;

                ////■重力設定消し
                //AN_GravitiDragBool = false;
                //isRigidReadSystem = false;
                //Destroy(CameraObjectsTrs.GetComponent<Rigidbody>());


                //Hukidashi("E4200080");//はい、でてもいいよ
                //ChieriMotion("笑顔01口眉", 0.1f, 2);
                //ChieriMotionDelay(1, "f_気づき（明）", 0.1f, 2);//時間差表情戻し

                ////手戻し
                //FixedAction(() =>
                //{
                //    ChieriMotion("デスクペットボトル倒した後手戻す", 0f, 0);

                //    PetBottleObj.transform.SetParent(GameObjectsTrs);
                //    //ペットボトル倒れ位置
                //    GameObject PetBottle_040_DeskTaore_PosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_040_DeskTaore_PosObj") as GameObject;
                //    PetBottleObj.transform.DOLocalMove(PetBottle_040_DeskTaore_PosObj.transform.localPosition
                //        , 0.5f).SetEase(Ease.Linear);
                //    PetBottleObj.transform.DOLocalRotate(PetBottle_040_DeskTaore_PosObj.transform.localEulerAngles
                //        , 0.5f).SetEase(Ease.Linear);
                //});

                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                //yield return new WaitForSeconds(1);


                //NovelSetVis("E4200100");//あれだけ渇望した
                //while (isNovelSetVisIng) { yield return null; }

                //#region 探索とかくれおに移動設置
                ////■隠れ鬼移動システムON
                //KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
                ////移動場所08オン
                //int tmpInt = 8;
                //KO_KakurePosObjsList[tmpInt].SetActive(true);
                ////寝る場所移動ポイント出現 演出
                //KO_NewPosPointObjVis
                //    (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleExitPos").gameObject, 0.5f);
                //#endregion

                //while (isPetBottleExitPos_Enter == false) { yield return null; }

                //NovelSetVis("E4200110");

                //ChieriMotion("デスクペットボトル手伸ばし立てるため", 0f, 0);

                ////IKペットボトル見
                //FollowDOMove(IKLookAtEyeTargetTrs, PetBottleObj.transform, 0f);
                //FollowDOMove(IKLookAtHeadTargetTrs, PetBottleObj.transform, new Vector3(0, -0.045f, 0), 1);
                ////まばたき
                //ChieriMotion("b_まばたきSlow用", 0f, 4);
                //blinkTime = 0;

                ////■手伸ばすまで待機
                //yield return null;
                //StartCoroutine(GirlAnimReadSystem());
                //while (nowAnimClipName != "デスクペットボトル手伸ばし立てるため") { yield return null; }
                //while (girlAnimNomTime <= 1f) { yield return null; }
                //isGirlAnimReadSystem = false;

                ////プレイヤー見
                //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 0.6f / girlAnim.speed);
                //DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
                ////IKプレイヤー
                //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                ////まばたき
                //ChieriMotion("b_まばたきSlow用", 0f, 4);
                //blinkTime = 0;

                //FixedAction(() =>
                //{
                //    PetBottleObj.transform.SetParent(GirlRHandTrs);

                //    //ペットボトル智恵理右手 倒し起こし位置
                //    GameObject PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj") as GameObject;
                //    PetBottleObj.transform.DOLocalMove(PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj.transform.localPosition
                //        , 0.5f).SetEase(Ease.Linear);
                //    PetBottleObj.transform.DOLocalRotate(PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj.transform.localEulerAngles
                //        , 0.5f).SetEase(Ease.Linear);

                //    ChieriMotion("デスクペットボトル立てる", 0f, 0);
                //});

                ////■立てるまで待機
                //yield return null;
                //StartCoroutine(GirlAnimReadSystem());
                //while (nowAnimClipName != "デスクペットボトル立てる") { yield return null; }
                //while (girlAnimNomTime <= 1f) { yield return null; }
                //isGirlAnimReadSystem = false;

                //FixedAction(() =>
                //{
                //    ChieriMotion("デスクペットボトル立てた後手戻す", 0f, 0);

                //    PetBottleObj.transform.SetParent(GameObjectsTrs);
                //    //ペットボトル立ち位置
                //    PetBottleObj.transform.DOLocalMove(PetBottle_020_DeskTate_PosObj.transform.localPosition
                //        , 0.5f).SetEase(Ease.Linear);
                //    PetBottleObj.transform.DOLocalRotate(PetBottle_020_DeskTate_PosObj.transform.localEulerAngles
                //        , 0.5f).SetEase(Ease.Linear);
                //});


                //while (isNovelSetVisIng) { yield return null; }

                //FadeBlack(1, 1);
                //yield return new WaitForSeconds(1);

                //EventMove("練習1_朝");
                //#endregion
                #endregion
            }

            #region //モーション原点確認用

            //if (Input.GetKeyDown(KeyCode.T))
            //{
            //    DB.isChieriPosLock = false;
            //    //椅子位置に
            //    GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
            //    GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;
            //    //智恵理
            //    ChieriMotion("デスクペットボトル手伸ばし立てるためポーズ原点", 0f, 0);
            //}
            //if (Input.GetKeyDown(KeyCode.Y))
            //{
            //    DB.isChieriPosLock = true;
            //    //智恵理
            //    ChieriMotion("デスクペットボトル手伸ばし立てるためポーズ", 0f, 0);
            //}
            //if (Input.GetKeyDown(KeyCode.J))
            //{
            //    DB.isChieriPosLock = false;
            //    //椅子位置に
            //    GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
            //    GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;
            //    //智恵理
            //    ChieriMotion("デスク起き上がりポーズ原点", 0f, 0);

            //}
            //if (Input.GetKeyDown(KeyCode.K))
            //{
            //    DB.isChieriPosLock = true;
            //    //智恵理
            //    ChieriMotion("デスク起き上がりポーズ", 0f, 0);
            //}
            #endregion




            yield return null;
        }
        #endregion


        yield break;
    }
    IEnumerator E3050()//指掴まり
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_PetbottleIreZero;
            //アニメスピード
            girlAnim.speed = 0.5f;

            //暗幕
            FadeBlack(1, 0f);
        }
        EventReset();
        //MoveScene("TH_Yugata"); yield return new WaitForSeconds(1);

        HukidashiNovelDistanceChange(4f, 0);

        #region 暗幕中設定
        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);

        //智恵理0位置ロック
        DB.isChieriPosLock = true;

        #region 右人差し指にWindnoiseSoundObj付与
        GameObject RHitosasiSoundObj
            = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRhitosashi02Trs);
        RHitosasiSoundObj.name = nameof(RHitosasiSoundObj);
        DB.evMoveDelObjList.Add(RHitosasiSoundObj);

        //設定
        WindnoiseSound tmpRHitosasiSound = RHitosasiSoundObj.GetComponent<WindnoiseSound>();
        tmpRHitosasiSound.aSource.maxDistance = 30;
        tmpRHitosasiSound.pitchUpRateAdjustFloat = 2;
        tmpRHitosasiSound.pitchDownRateAdjustFloat = 0.00004f;
        tmpRHitosasiSound.pitchMax = 1f;

        tmpRHitosasiSound.aSource.volume = 1;

        //SoundObjのPos
        GameObject SoundObj_04_TsumamiYubi_RHitosasiPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_04_TsumamiYubi_RHitosasiPosObj") as GameObject;
        RHitosasiSoundObj.transform.localPosition = SoundObj_04_TsumamiYubi_RHitosasiPosObj.transform.localPosition;

        #endregion
        #region 右手の平(中指根元あたり)にWindnoiseSoundObj付与
        GameObject RHandSoundObj
            = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRHandTrs);
        RHandSoundObj.name = nameof(RHandSoundObj);
        DB.evMoveDelObjList.Add(RHandSoundObj);

        //設定
        WindnoiseSound tmpRHandSound = RHandSoundObj.GetComponent<WindnoiseSound>();
        tmpRHandSound.aSource.maxDistance = 30;
        tmpRHandSound.pitchUpRateAdjustFloat = 10;
        tmpRHandSound.pitchDownRateAdjustFloat = 0.00004f;
        tmpRHandSound.pitchMax = 0.5f;

        tmpRHandSound.aSource.volume = 1;

        //SoundObjのPos
        GameObject RHandSound010_NakayubiNemotoPosObj
            = Resources.Load("_PosObj/0210Yubitsukamari/RHandSound010_NakayubiNemotoPosObj") as GameObject;
        RHandSoundObj.transform.localPosition = RHandSound010_NakayubiNemotoPosObj.transform.localPosition;

        #endregion


        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);

        ChieriMotion("デスク肘つきポーズ", 0, 0);
        //ChieriMotion("デスク起き上がりポーズ", 0f / girlAnim.speed, 0);
        ChieriMotion("f_本当に小さいね～", 0f, 2);

        //■PosObjで読み込み
        //プレイヤー 練習1位置に
        GameObject Player010_YubitsukamariPosObj
            = Resources.Load("_PosObj/0210Yubitsukamari/Player010_YubitsukamariPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player010_YubitsukamariPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player010_YubitsukamariPosObj.transform.localEulerAngles;
        CameraReset(Player010_YubitsukamariPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos);//立ち

        ////智恵理 椅子すわり位置に
        //GameObject Chieri_02_DeskChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02_DeskChairPosObj") as GameObject;
        //GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
        //GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;

        //椅子位置
        GameObject Chair_01_SuwariPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chair_01_SuwariPosObj") as GameObject;
        ChairTrs.localPosition = Chair_01_SuwariPosObj.transform.localPosition;
        ChairTrs.localEulerAngles = Chair_01_SuwariPosObj.transform.localEulerAngles;


        //スピーカー 位置に
        SpeakerTrs.gameObject.SetActive(true);
        GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
        SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        #region 小物
        //宿題 位置に
        Drill_chieriTrs.gameObject.SetActive(false);

        ////プレイヤーの
        //HomeworkObjectsTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);

        //ペンなくし
        SharpenObj.SetActive(false);
        //消しゴム無くし
        KeshigomuObj.SetActive(false);
        #endregion //宿題置き


        #region ペットボトル取得
        //ペットボトル既に取得されていればなにもせず、なければリソースからクローン
        ObjSceneOrResouceLoad(ref PetBottleObj, "PetBottle", "Main/KomonoObj/PetBottle/PetBottle");

        //置くためにペアレント
        PetBottleObj.transform.SetParent(GameObjectsTrs, false);
        //位置
        GameObject PetBottle010_DeskHaziPosObj
            = Resources.Load("_PosObj/0210Yubitsukamari/PetBottle010_DeskHaziPosObj") as GameObject;
        PetBottleObj.transform.localPosition = PetBottle010_DeskHaziPosObj.transform.localPosition;
        PetBottleObj.transform.localEulerAngles = PetBottle010_DeskHaziPosObj.transform.localEulerAngles;


        //キャップ既に取得されていればなにもしない
        if (CapObj != null) { }
        else
        {
            //キャップ、クローンで取得(ペアレント変えるので、プレファブ上書きで消さないようにクローン)
            CapObj = Instantiate(PetBottleObj.transform.Find("Cap").gameObject);
            DB.evMoveDelObjList.Add(CapObj);
            //クローンON
            CapObj.transform.gameObject.SetActive(true);
            //ペアレント
            CapObj.transform.SetParent(GameObjectsTrs);
            //オリジナルをオフ
            PetBottleObj.transform.Find("Cap").gameObject.SetActive(false);
            //クローンキャップ机の上へ
            GameObject Cap010_DeskHaziPosObj
                = Resources.Load("_PosObj/0210Yubitsukamari/Cap010_DeskHaziPosObj") as GameObject;
            CapObj.transform.localPosition = Cap010_DeskHaziPosObj.transform.localPosition;
            CapObj.transform.localEulerAngles = Cap010_DeskHaziPosObj.transform.localEulerAngles;
            CapObj.transform.localScale = Cap010_DeskHaziPosObj.transform.localScale;
        }

        #endregion

        #endregion
        //環境音フェード
        KankyouBGMChanger(semiSE.audioSource, "residential-area-in-early-morning-1_loop");
        KankyouBGMVolumer(0.4f, 5);


        //IKカレンダー見//上向き
        ChieriMotion("b_まばたきSlow用", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, CalenderTrs, 0f);

        Hukidashi("E3040070");//ほんとはハンカチベッド
        yield return new WaitForSeconds(1);

        //開幕
        FadeBlack(0, 1);

        yield return KeyOrWait(3);

        #region IK目プレイヤー見る
        //IK目プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);

        #endregion

        Hukidashi("E3040080");//それだと朝マコトがベッドにいて
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        #region IK顔プレイヤー見る
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 1.5f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        #endregion

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        Hukidashi("E3040090");//潰れてたとかありそうだし？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        ChieriMotion("f_笑顔口眉ジト目40", 0.3f, 2);

        yield return new WaitForSeconds(1);
        NovelSetVis("E3040080");//いやいやハムスターじゃないんだから　アピール　期待
        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("f_ちぇー控えめ", 0.6f, 2);
        Hukidashi("E3040100");//ふ～ん？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        ChieriMotion("f_笑顔口眉ジト目40", 0.6f, 2);

        yield return new WaitForSeconds(1);
        girlAnim.SetFloat("デスク肘つき→起き上がりSpeed", 0.3f); yield return null;
        ChieriMotion("デスク肘つき→起き上がり", 0f, 0);

        Hukidashi("E3040110");//じゃあ私が潰そうとしたら？

        #region 右手IKで潰そうと

        #region IKで右手接近
        GameObject IKRHand020_TsubusoutoPosObj
            = Resources.Load("_PosObj/0210Yubitsukamari/IKRHand020_TsubusoutoPosObj") as GameObject;
        IKRHandTargetTrs.localPosition = IKRHand020_TsubusoutoPosObj.transform.localPosition;
        IKRHandTargetTrs.localEulerAngles = IKRHand020_TsubusoutoPosObj.transform.localEulerAngles;
        //SEPlay("swing41_12低い_長い", RHandSphereTrs.gameObject);

        //右手
        DOTweenToIKEfPos(IKRHandEf, 1, 6);
        DOTweenToIKEfRot(IKRHandEf, 1, 6);
        #endregion

        HukidashiNovelDistanceChange(0.5f, 3);

        yield return new WaitForSeconds(3); yield return KeyOrWait(3);

        NovelSetVis("E3040090");//へ？　あ、や　ひ　綱渡り足滑らし感覚



        #region IKで右手さらに Tweener
        GameObject IKRHand030_TsubusoutoPosObj
            = Resources.Load("_PosObj/0210Yubitsukamari/IKRHand030_TsubusoutoPosObj") as GameObject;
        var tmpRHandPosTweener =
            IKRHandTargetTrs.DOLocalMove(IKRHand030_TsubusoutoPosObj.transform.localPosition
            , 5f)
            .SetEase(Ease.InOutQuad)
            .SetAutoKill(false);

        var tmpRHandRotTweener =
            IKRHandTargetTrs.DOLocalRotate(IKRHand030_TsubusoutoPosObj.transform.localEulerAngles
            , 5f)
            .SetEase(Ease.InOutQuad)
            .SetAutoKill(false);

        #endregion

        while (isNovelSetVisIng) { yield return null; }


        #region IKで右手さらにさらに TweenerRestart
        GameObject IKRHand040_TsubusoutoPosObj
            = Resources.Load("_PosObj/0210Yubitsukamari/IKRHand040_TsubusoutoPosObj") as GameObject;

        tmpRHandPosTweener.ChangeValues(IKRHandTargetTrs.localPosition
            , IKRHand040_TsubusoutoPosObj.transform.localPosition
            , 10)
            .Restart();

        tmpRHandRotTweener.ChangeValues(IKRHandTargetTrs.localEulerAngles
            , IKRHand040_TsubusoutoPosObj.transform.localEulerAngles
            , 10)
            .Restart();
        #endregion

        NovelSetVis("E3040100");//あああ、待っ　腰ぬける
        CameraAnchorTrs.DOLocalMove(DB.cameraSitAnchorDefLocalPos, 1)
            .SetEase(Ease.OutBounce);
        //リセット用の値書き換え
        DB.cameraAnchorResetLocalPos = DB.cameraSitAnchorDefLocalPos;

        while (isNovelSetVisIng) { yield return null; }

        //Tweener動いてる間はウェイト
        while (tmpRHandPosTweener.IsPlaying()) { yield return null; }

        yield return new WaitForSeconds(1);

        ChieriMotion("f_ふーん・・", 0.6f, 2);
        Hukidashi("E3040120");//ほら、これだけで動けなくなってる
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        #region 右手潰そうとするのやめ位置に
        GameObject IKRHand050_TsubusouYamePosObj
            = Resources.Load("_PosObj/0210Yubitsukamari/IKRHand050_TsubusouYamePosObj") as GameObject;
        tmpRHandPosTweener.ChangeValues(IKRHandTargetTrs.localPosition
            , IKRHand050_TsubusouYamePosObj.transform.localPosition
            , 5)
            .Restart();

        tmpRHandRotTweener.ChangeValues(IKRHandTargetTrs.localEulerAngles
            , IKRHand050_TsubusouYamePosObj.transform.localEulerAngles
            , 5)
            .Restart();
        #endregion
        HukidashiNovelDistanceChange(1f, 0);

        yield return new WaitForSeconds(2);

        Hukidashi("E3040130");//今日はそんなんじゃ駄目なんだからね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        yield return new WaitForSeconds(1);


        NovelSetVis("E3040110");//ちえり勘弁して
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        ChieriMotion("f_十分？", 0.6f, 2);
        Hukidashi("E3040140");//駄目だよなれてもらうんだから
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("f_ちぇー控えめ", 0.6f, 2);
        Hukidashi("E3040150");//ほら、ちゃんと立ち上がって？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        yield return new WaitForSeconds(1);
        NovelSetVis("E3040120");//立つから……！
        while (isNovelSetVisIng) { yield return null; }

        #region 暗幕立つ
        FadeBlack(1, 0.5f);
        yield return new WaitForSeconds(0.5f);

        CameraReset(
            null
            , DB.cameraStandAnchorDefLocalPos
            , false
            , null
            , false
            , false);

        FadeBlack(0, 0.5f);
        yield return new WaitForSeconds(0.5f);

        #endregion

        while (tmpRHandPosTweener.IsPlaying()) { yield return null; }

        #region 右手指差し事前位置に
        GameObject IKRHand060_YubisasiZizenPosObj
            = Resources.Load("_PosObj/0210Yubitsukamari/IKRHand060_YubisasiZizenPosObj") as GameObject;
        tmpRHandPosTweener.ChangeValues(IKRHandTargetTrs.localPosition
            , IKRHand060_YubisasiZizenPosObj.transform.localPosition
            , 4)
            .Restart();

        tmpRHandRotTweener.ChangeValues(IKRHandTargetTrs.localEulerAngles
            , IKRHand060_YubisasiZizenPosObj.transform.localEulerAngles
            , 4)
            .Restart();
        #endregion

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        Hukidashi("E3040160");//よしよし　じゃあとりあえず
        yield return new WaitForSeconds(1);

        //風音人差し指小さめ
        tmpRHitosasiSound.aSource.DOFade(0.2f, 5);
        //手の平音は消し
        tmpRHandSound.aSource.DOFade(0, 10);

        #endregion


        #region ■指掴まりイベント

        #region ひとさし指差しにして 指先ピボット設定 プレイヤー前へ差し出す 「はい」「掴まってられるかな」「従うしか無さそうだ」

        ChieriMotion("ひとさし指差し", 1f, 5);

        //ひとさし指差しになるまで待機（その手状態でIKRHandTargetとPivotObjの位置を同期とるので）
        StartCoroutine(GirlAnimReadSystem(5));
        while (nowGirlAnimOtherLayerClipNameDict[5] != "マスク用ひとさし指1フレーム") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[5] <= 1f) { yield return null; }


        tmpRHandPosTweener.Kill();
        tmpRHandRotTweener.Kill();

        //指先ピボットオブジェ生成
        GameObject PivotObj
            = Instantiate(Resources.Load("EventSystem/Sekkin/SekkinPivotObj") as GameObject
            , GirlRhitosashi02Trs
            , false);
        DB.evMoveDelObjList.Add(PivotObj);



        //ピボットでIKRHand逆同期スタート (PivotObjの子、CloneIKTargetObjの位置をPosObjで確定させて)
        Sekkin(PivotObj, IKRHandTargetTrs.gameObject
            , Resources.Load("_PosObj/0210Yubitsukamari/YubisasiPivot010CloneIKTargetLclPosObj") as GameObject);



        //PivotObjを操作して、右手人差し指プレイヤー目の前へ
        GameObject YubisasiPivot010_YubitsukamariObj
            = Resources.Load("_PosObj/0210Yubitsukamari/YubisasiPivot010_YubitsukamariObj") as GameObject;
        PivotObj.transform.DOLocalMove(YubisasiPivot010_YubitsukamariObj.transform.localPosition
            , 3f);
        PivotObj.transform.DORotateQuaternion(YubisasiPivot010_YubitsukamariObj.transform.rotation
            , 3f);

        yield return new WaitForSeconds(2);

        HukidashiNovelDistanceChange(0.6f, 0);

        Hukidashi("E3040170");//はい
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.2f, 2);
        Hukidashi("E3040180");//私の指に掴まってられるかな？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        NovelSetVis("E3040130");//と、人差し指が差し出される。
        while (isNovelSetVisIng) { yield return null; }

        #endregion

        デバッグ移動:
        #region //デバッグ移動と設定


        //ChieriMotion("f_笑顔口眉ジト目40", 0f, 2);
        //ChieriMotion("デスク起き上がりポーズ", 0f / girlAnim.speed, 0);


        ////IKで右手ちょい上げ
        //GameObject debugChieri_02_IK_RHand_DeskYubisasiPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_02_IK_RHand_DeskYubisasiPosObj") as GameObject;
        //IKRHandTargetTrs.localPosition = debugChieri_02_IK_RHand_DeskYubisasiPosObj.transform.localPosition;
        //IKRHandTargetTrs.localEulerAngles = debugChieri_02_IK_RHand_DeskYubisasiPosObj.transform.localEulerAngles;

        ////右手
        //DOTweenToIKEfPos(IKRHandEf, 1, 0);
        //DOTweenToIKEfRot(IKRHandEf, 1, 0);
        //ChieriMotion("ひとさし指差し", 0f, 5);

        yield return new WaitForSeconds(0.2f);

        ////指先ピボットオブジェ生成
        //PivotObj
        //    = Instantiate(Resources.Load("EventSystem/Sekkin/SekkinPivotObj") as GameObject
        //    , GameObject.Find("BoneBip001 R hitosashi02").transform
        //    , false);
        //ピボットでIKRHand逆同期スタート
        //Sekkin(PivotObj, IKRHandTargetTrs.gameObject);

        ////ピボット操作で右手人差し指プレイヤー目の前へ
        //GameObject debugChieri_04_IK_YubisasiPivot_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_04_IK_YubisasiPivot_DeskPosObj") as GameObject;
        //PivotObj.transform.DOLocalMove(debugChieri_04_IK_YubisasiPivot_DeskPosObj.transform.localPosition
        //    , 0f);
        //PivotObj.transform.DORotateQuaternion(debugChieri_04_IK_YubisasiPivot_DeskPosObj.transform.rotation
        //    , 0f);


        //開幕
        FadeBlack(0, 0);


        #endregion

        goto 初回;

        やりなおし:
        #region やり直し用配置リセット

        isANSystem = false;
        yield return null;

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);


        //プレイヤー 練習1位置に
        CameraObjectsTrs.localPosition = Player010_YubitsukamariPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player010_YubitsukamariPosObj.transform.localEulerAngles;

        ChieriMotion("f_笑顔口眉ジト目40", 0f, 2);
        ChieriMotion("デスク起き上がりポーズ", 0f, 0);

        //ピボット操作で右手人差し指プレイヤー目の前へ
        PivotObj.transform.localPosition = YubisasiPivot010_YubitsukamariObj.transform.localPosition;
        PivotObj.transform.rotation = YubisasiPivot010_YubitsukamariObj.transform.rotation;


        //開幕
        FadeBlack(0, 0);

        #endregion


        初回:

        #region 脚のぼりシステム起動 指つかみ待ちコルーチン起動
        //■■■脚のぼりシステム コルーチン始動
        StartCoroutine(AsinoboriSystem());
        //脚のぼりシステム設定
        AN_isGrapPowerMode = false;

        //rigid監視スタート
        yield return null;//Rigidbody付与待ち
        StartCoroutine(RigidReadSystem());

        playerWindAudioVolumeBorderFloat = 800;

        #region 両手掴み待ち（手の平に乗るやつを持ってきた）
        bool isBeforeEASYModeTrue = false;//後で戻す用
        if (AN_isInputSwitchEasyMode == false)
        {
            AN_isInputSwitchEasyMode = true;
            AN_isInputSwitchHardMode = false;
            isBeforeEASYModeTrue = true;
        }

        AN_isInputLock = false;
        ANGrapHandUIObj.SetActive(true);

        #region 両手とも智恵理コリダー掴むまで待機
        while (true)
        {
            if (AN_isRLGrap
                && (AN_nowLSerchObj == AN_nowRSerchObj == FixedMoveChieriColliderFollderObj))
            { goto 両手とも智恵理コリダー掴んだ; }
            yield return null;
        }
        両手とも智恵理コリダー掴んだ:
        AN_isInputLock = true;
        #endregion

        #region 掴んだ？さんにーいちカウント（以前はコルーチンで掴んでるか確認しつつやってた）
        yield return new WaitForSeconds(1);

        DelAll_Hukidashi(); yield return null;
        Hukidashi("E3040190");//「掴んだ？」
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        Hukidashi("E3040200");//「さん」
        yield return new WaitForSeconds(1);

        DelAll_Hukidashi(); yield return null;
        Hukidashi("E3040210");//「にー」
        yield return new WaitForSeconds(1);

        DelAll_Hukidashi(); yield return null;
        Hukidashi("E3040220");//「いち」
        yield return new WaitForSeconds(1);

        #endregion

        #endregion

        #region //以前の掴み待ちコルーチン（片手でもいけて、カウント中に離したら注意するやつ）
        //isYubiGrapWaitEvent = true;
        //float tmpWaitGrapTime = 0;
        //while (isYubiGrapWaitEvent == true)
        //{
        //    //片手掴みでカウント
        //    if (AN_isRGrap == false && AN_isLGrap == false)
        //    {
        //        //少し掴んで離したら
        //        if (tmpWaitGrapTime >= 1.5f)
        //        {
        //            DelAll_Hukidashi(); yield return null;
        //            Hukidashi("D41035");//「離さず」
        //        }

        //        tmpWaitGrapTime = 0;
        //    }

        //    else if (AN_isRGrap == true || AN_isLGrap == true)
        //    {
        //        IEnumerator tmpGrapWaitCor = D4100a();
        //        StartCoroutine(tmpGrapWaitCor);

        //        while (AN_isRGrap == true || AN_isLGrap == true)
        //        {
        //            tmpWaitGrapTime += Time.deltaTime * 1;
        //            if (isYubiGrapWaitEvent == false) { goto もちあげ; }
        //            yield return null;
        //        }

        //        StopCoroutine(tmpGrapWaitCor);
        //    }
        //    yield return null;
        //}
        #endregion

        #endregion

        ANGrapHandUIObj.SetActive(false);


        #region 指持ち上げ
        もちあげ://掴み待ち抜ける用（以前のコルーチン処理の時のもの）

        GameObject YubisasiPivot020_YubitsukamariTakaiTakaiPosObj
            = Resources.Load("_PosObj/0210Yubitsukamari/YubisasiPivot020_YubitsukamariTakaiTakaiPosObj") as GameObject;
        Tweener tmpYubiDOMoveTweener =
        PivotObj.transform.DOLocalMove(YubisasiPivot020_YubitsukamariTakaiTakaiPosObj.transform.localPosition
            , 6f)
            .SetEase(Ease.InOutSine)
            .SetAutoKill(false);
        Tweener tmpYubiDORotateTweener =
        PivotObj.transform.DORotateQuaternion(YubisasiPivot020_YubitsukamariTakaiTakaiPosObj.transform.rotation
            , 6f)
            .SetEase(Ease.InOutSine)
            .SetAutoKill(false);




        yield return new WaitForSeconds(3);

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.1f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);

        HukidashiNovelDistanceChange(2f, 0);


        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1f, "f_笑顔口眉ジト目40", 0.2f, 2);
        Hukidashi("E3040230");//「高い高い」
        yield return new WaitForSeconds(3);

        #region 本当に小さいね～　ぶらぶら
        NovelSetVis("E3040140");//「高い！ 緊張を生む」
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("E3040240");//「それにしても」
        yield return new WaitForSeconds(1.5f);
        ChieriMotion("f_本当に小さいね～", 1f, 2);

        #region 顔に大分寄せ位置
        GameObject YubisasiPivot030_TittyakunattayonePosObj
            = Resources.Load("_PosObj/0210Yubitsukamari/YubisasiPivot030_TittyakunattayonePosObj") as GameObject;
        tmpYubiDOMoveTweener
            .ChangeEndValue(YubisasiPivot030_TittyakunattayonePosObj.transform.localPosition
            , 4f
            , true)
            .Restart();

        tmpYubiDORotateTweener
            .ChangeEndValue(YubisasiPivot030_TittyakunattayonePosObj.transform.rotation
            , 4f
            , true)
            .Restart();
        #endregion

        yield return new WaitForSeconds(3);
        Hukidashi("E3040250");//「随分ちっちゃくなったよねー」
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        Hukidashi("E3040260");//「こうしないと顔も見えない」
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(0.5f, "笑顔01口眉_目閉じない", 0.1f, 2);

        NovelSetVis("E3040150");//降ろして・・許してくれ！
        while (isNovelSetVisIng) { yield return null; }

        #region 顔にちょい寄せ位置
        GameObject Chieri_08_IK_YubisasiPivot_KaomaePosObj
            = Resources.Load("_PosObj/0210Yubitsukamari/Chieri_08_IK_YubisasiPivot_KaomaePosObj") as GameObject;
        tmpYubiDOMoveTweener
            .ChangeEndValue(Chieri_08_IK_YubisasiPivot_KaomaePosObj.transform.localPosition
            , 3f
            , true)
            .Restart();

        tmpYubiDORotateTweener
            .ChangeEndValue(Chieri_08_IK_YubisasiPivot_KaomaePosObj.transform.rotation
            , 3f
            , true)
            .Restart();
        #endregion


        //ChieriMotion("f_笑顔口眉ジト目40", 0.2f, 2);
        ChieriMotion("f_怒ってる・・？", 0.6f, 2);
        Hukidashi("E3040270");//昨日はもっと堂々としてたのに
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("f_あはは・・2目開き", 0.3f, 2);
        Hukidashi("E3040280");//情けなくなっちゃってない？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        #region //もちあげ位置に戻し
        //tmpYubiDOMoveTweener
        //    .ChangeEndValue(YubisasiPivot020_YubitsukamariTakaiTakaiPosObj.transform.localPosition
        //    , 3f
        //    , true)
        //    .Restart();

        //tmpYubiDORotateTweener
        //    .ChangeEndValue(YubisasiPivot020_YubitsukamariTakaiTakaiPosObj.transform.rotation
        //    , 3f
        //    , true)
        //    .Restart();
        #endregion


        NovelSetVis("E3040160");//うう、く　どんどんエスカレートしていくと
        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.1f, 2);
        Hukidashi("E3040290");//「ほーらほーら♪」

        #region もちあげ位置から左
        GameObject Chieri_09_IK_YubisasiPivot_YurasiLPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_09_IK_YubisasiPivot_YurasiLPosObj") as GameObject;

        tmpYubiDOMoveTweener
            .ChangeEndValue(Chieri_09_IK_YubisasiPivot_YurasiLPosObj.transform.localPosition
            , 1f
            , true)
            .Restart();

        tmpYubiDORotateTweener
            .ChangeEndValue(Chieri_09_IK_YubisasiPivot_YurasiLPosObj.transform.rotation
            , 1f
            , true)
            .Restart();
        yield return new WaitForSeconds(1f);
        #endregion
        #region もちあげ位置から→
        GameObject Chieri_10_IK_YubisasiPivot_YurasiRPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_10_IK_YubisasiPivot_YurasiRPosObj") as GameObject;

        tmpYubiDOMoveTweener
            .ChangeEndValue(Chieri_10_IK_YubisasiPivot_YurasiRPosObj.transform.localPosition
            , 1f
            , true)
            .Restart();

        tmpYubiDORotateTweener
            .ChangeEndValue(Chieri_10_IK_YubisasiPivot_YurasiRPosObj.transform.rotation
            , 1f
            , true)
            .Restart();
        yield return new WaitForSeconds(1f);
        #endregion
        #region もちあげ位置に戻し
        tmpYubiDOMoveTweener
            .ChangeEndValue(YubisasiPivot020_YubitsukamariTakaiTakaiPosObj.transform.localPosition
            , 0.5f
            , true)
            .Restart();

        tmpYubiDORotateTweener
            .ChangeEndValue(YubisasiPivot020_YubitsukamariTakaiTakaiPosObj.transform.rotation
            , 0.5f
            , true)
            .Restart();
        #endregion

        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("E3040170");//「馬鹿、やめ！」
        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("f_え？(軽驚)", 0.3f, 2);
        Hukidashi("E3040300");//「結構頑張れるんだね」
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        #endregion

        ChieriMotion("笑顔01口眉_目閉じない", 0.3f, 2);
        Hukidashi("E3040310");//「じゃあその調子で本番」
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("E3040180");//「ほ、本番？」

        yield return new WaitForSeconds(1);

        Hukidashi("E3040320");//「下は見ないほうがいいかもね」
        ChieriMotion("f_笑顔口眉ジト目40", 1f, 2);


        ////■やり直し
        //tmpYubiDOMoveTweener.Kill();
        //tmpYubiDORotateTweener.Kill();
        //yield return new WaitForSeconds(1);
        //goto やりなおし;

        #endregion

        #region 椅子ごと移動回転(OnUpdateで主人公回転同期)（デバッグ時はpivotがdebugなの注意）
        DB.isChieriPosLock = false;//ロックはずし
        GirlTrs.SetParent(ChairTrs, true);


        GameObject Chieri_11_IK_YubisasiPivot_IsuRotatePosObj
            = Resources.Load("_PosObj/D_Henai_Day2/Chieri_11_IK_YubisasiPivot_IsuRotatePosObj") as GameObject;

        #region OnUpdate用変数（主人公の回転も同期するため、指の回転増減値を代入（傾かないようZはそのまま）用）
        Transform
            yubiColTrs = GameObject.Find("Hitosashi02_R_coll").transform;

        Vector3
            nowYubiEul = yubiColTrs.eulerAngles,
            prevYubiEul = yubiColTrs.eulerAngles,
            resultYubiEul = nowYubiEul - prevYubiEul;
        #endregion

        PivotObj.transform.DOLocalMove(Chieri_11_IK_YubisasiPivot_IsuRotatePosObj.transform.localPosition
            , 10f)
            .SetEase(Ease.InOutSine)
            .OnUpdate(() =>//主人公の回転も同期するため、指の回転増減値を代入（傾かないようXZはそのまま）
            {
                nowYubiEul = yubiColTrs.eulerAngles;
                resultYubiEul = nowYubiEul - prevYubiEul;

                CameraObjectsTrs.transform.localEulerAngles
            = new Vector3(
                CameraObjectsTrs.transform.localEulerAngles.x,
                CameraObjectsTrs.transform.localEulerAngles.y + resultYubiEul.y,
                CameraObjectsTrs.transform.localEulerAngles.z);

                prevYubiEul = yubiColTrs.eulerAngles;
            });

        PivotObj.transform.DORotateQuaternion(Chieri_11_IK_YubisasiPivot_IsuRotatePosObj.transform.rotation
            , 10f)
            .SetEase(Ease.InOutSine);

        yield return new WaitForSeconds(1);

        GameObject Chair_02_RotatePosObj = Resources.Load("_PosObj/D_Henai_Day2/Chair_02_RotatePosObj") as GameObject;
        ChairTrs.DOLocalMove(Chair_02_RotatePosObj.transform.localPosition
            , 5f)
            .SetEase(Ease.InOutSine);
        ChairTrs.DORotateQuaternion(Chair_02_RotatePosObj.transform.rotation
            , 5f)
            .SetEase(Ease.InOutSine);

        GameObject Chieri_12_IK_LHand_IsuRotatePosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_12_IK_LHand_IsuRotatePosObj") as GameObject;
        IKLHandTargetTrs.localPosition = Chieri_12_IK_LHand_IsuRotatePosObj.transform.localPosition;
        IKLHandTargetTrs.localEulerAngles = Chieri_12_IK_LHand_IsuRotatePosObj.transform.localEulerAngles;
        DOTweenToIKEfPos(IKLHandEf, 1
            , 5f
            , Ease.InOutSine);
        DOTweenToIKEfRot(IKLHandEf, 1
            , 5f
            , Ease.InOutSine);
        #endregion

        #region 「うおわあぁぁあ！」「慣れてるんじゃなかった？」「冗談じゃないもん」「助けてっていってなかった？」

        yield return new WaitForSeconds(3);

        NovelSetVis("E3040190");//「うおわあぁぁあ！」
        yield return new WaitForSeconds(4);
        while (isNovelSetVisIng) { yield return null; }

        NovelSetVis("E3040200");//「や、たふす」
        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("f_本当に小さいね～", 0.2f, 2);
        Hukidashi("E3040330");//あ、また助けて許してって言っちゃう？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1f, "f_笑顔口眉ジト目40", 0.2f, 2);
        Hukidashi("E3040340");//女の子の指に
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("E3040210");//「一体何がしたいんだ！」
        while (novelCurrentPageInt < 4) { yield return null; }
        //カメラ揺れ
        CameraAnchorTrs.DOShakePosition(1f, 0.2f);

        while (isNovelSetVisIng) { yield return null; }


        ChieriMotion("f_十分？", 0.5f, 2);
        yield return new WaitForSeconds(1);


        #region 顔に寄せ
        GameObject Chieri_13_IK_YubisasiPivot_dousitehosiiPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_13_IK_YubisasiPivot_dousitehosiiPosObj") as GameObject;
        tmpYubiDOMoveTweener
            .ChangeEndValue(Chieri_13_IK_YubisasiPivot_dousitehosiiPosObj.transform.localPosition
            , 3f
            , true)
            .Restart();

        tmpYubiDORotateTweener
            .ChangeEndValue(Chieri_13_IK_YubisasiPivot_dousitehosiiPosObj.transform.rotation
            , 3f
            , true)
            .Restart();
        #endregion


        yield return new WaitForSeconds(5);

        ChieriMotion("f_あはは・・2目開き", 0.6f, 2);
        Hukidashi("E3040350");//「迫力ないや」
        yield return new WaitForSeconds(1);

        //IK顔横見
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0f, 0f, 0.03f), 1.5f);

        yield return KeyOrWait(3);

        yield return new WaitForSeconds(1);

        NovelSetVis("E3040220");//昨日も言われたような言葉
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1.5f, "笑顔01口眉_目閉じない", 0.1f, 2);
        Hukidashi("E3040360");//「で、知りたい？」
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0f, 0f, 0.05f), 1.5f);
        yield return new WaitForSeconds(1);

        NovelSetVis("E3040230");//ああ、知りたいよ。それに
        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("f_本当に小さいね～", 0.2f, 2);
        Hukidashi("E3040370");//それに？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("E3040240");//手が限界だから降ろして欲しい
        while (isNovelSetVisIng) { yield return null; }

        #endregion

        #region 降ろし　選択肢だった部分
        yield return new WaitForSeconds(1f);

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.1f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0.1f);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1f);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1.5f, "笑顔01口眉_目閉じない", 0.1f, 2);
        Hukidashi("E3040380");//よしよしじゃあ降ろしてあげるね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        #region 登りシステムでの降ろしはがたつくので、システムやめてペアレント降ろし

        FixedAction(() =>
        {
            isANSystem = false;
            CameraObjectsTrs.SetParent(Bip001_R_HandTrs);
        });
        while (isFixedAction) { yield return null; }

        #region IKで降ろし（これはがたついてたときから同じ）
        GameObject Chieri_16_IK_YubisasiPivot_orosiPosObj2 = Resources.Load("_PosObj/D_Henai_Day2/Chieri_16_IK_YubisasiPivot_orosiPosObj") as GameObject;
        tmpYubiDOMoveTweener
            .ChangeEndValue(Chieri_16_IK_YubisasiPivot_orosiPosObj2.transform.localPosition
            , 14f
            , true)
            .Restart();

        tmpYubiDORotateTweener
            .ChangeEndValue(Chieri_16_IK_YubisasiPivot_orosiPosObj2.transform.rotation
            , 14f
            , true)
            .Restart();
        #endregion

        #endregion


        //風音人差し指フェードアウト
        tmpRHitosasiSound.aSource.DOFade(0f, 10f);

        //暗幕
        FadeBlack(1, 6f);
        NovelSetVis("E3040250");//悲壮な表情が通じたのか降ろしてくれた
        while (isNovelSetVisIng) { yield return null; }
        #endregion


        #region //旧 ■選択肢 ぐぬぬ 「助けて降ろして」
        //sentakuListNum = 99;//初期化

        //Sentakushi("■D41210a");
        //Sentakushi("■D41210b");
        ////選択肢選ばれるまでループ
        //while (sentakuListNum == 99) { yield return null; }
        //yield return null;
        //bool isTmpGununu = false;
        //switch (sentakuListNum)
        //{
        //    #region 無言とぐぬぬ
        //    case -1://無言
        //        yield return new WaitForSeconds(1);
        //        goto ぐぬぬ後;
        //    case 0://選択肢a ぐぬぬ
        //        yield return new WaitForSeconds(0.5f);

        //        NovelSetVis("D41210a");//ぐぬぬ・・
        //        while (isNovelSetVisIng) { yield return null; }
        //        isTmpGununu = true;
        //        ぐぬぬ後:

        //        //IKプレイヤー見る
        //        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.1f);
        //        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0.1f);
        //        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
        //        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1f);

        //        ChieriMotion("f_ジト目40ん？私のハンカチで？", 0.1f, 2);
        //        Hukidashi("D41210a1");//だんまり？
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //        //少し顔そむけ
        //        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0f, 0f, 0.05f), 1.5f);

        //        ChieriMotion("f_ちぇー", 0.3f, 2);
        //        Hukidashi("D41210a2");//怒ってる？
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //        if (isTmpGununu)
        //        {
        //            NovelSetVis("D41210a1");//そうだぞ
        //            while (isNovelSetVisIng) { yield return null; }
        //        }
        //        yield return new WaitForSeconds(1);

        //        //よそ見
        //        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, new Vector3(1, 0, 0), 0.1f);

        //        yield return new WaitForSeconds(1);

        //        //プレイヤー見
        //        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.1f);

        //        Hukidashi("D41220");//じゃあ降ろしてあげようかな
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //        #region フェード用降ろし
        //        GameObject Chieri_16_IK_YubisasiPivot_orosiPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_16_IK_YubisasiPivot_orosiPosObj") as GameObject;
        //        tmpYubiDOMoveTweener
        //            .ChangeEndValue(Chieri_16_IK_YubisasiPivot_orosiPosObj.transform.localPosition
        //            , 14f
        //            , true)
        //            .Restart();

        //        tmpYubiDORotateTweener
        //            .ChangeEndValue(Chieri_16_IK_YubisasiPivot_orosiPosObj.transform.rotation
        //            , 14f
        //            , true)
        //            .Restart();
        //        #endregion

        //        //暗幕
        //        FadeBlack(1, 6f);

        //        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0f, 0f, 0.05f), 0.2f);

        //        if (isTmpGununu)
        //        {
        //            NovelSetVis("D41210a2");//少しは反省してくれたのか降ろしてくれた
        //            while (isNovelSetVisIng) { yield return null; }
        //        }
        //        else
        //        {
        //            NovelSetVis("D41210z");//まごまごしていると降ろしてくれた
        //            while (isNovelSetVisIng) { yield return null; }
        //        }

        //        #endregion
        //        break;

        //    case 1://選択肢b 「助けて降ろして」
        //        yield return new WaitForSeconds(0.5f);
        //        NovelSetVis("D41210b");//素直が一番
        //        while (isNovelSetVisIng) { yield return null; }

        //        //IKプレイヤー見る
        //        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.1f);
        //        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0.1f);
        //        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
        //        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1f);

        //        ChieriMotion("笑顔01口眉", 0.1f, 2);
        //        ChieriMotionDelay(1.5f, "f_笑顔口眉ジト目40", 0.1f, 2);
        //        Hukidashi("D41210b1");//よしよしじゃあ降ろしてあげるね
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //        //顔向け早く
        //        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0.2f);

        //        #region フェード用降ろし
        //        GameObject Chieri_16_IK_YubisasiPivot_orosiPosObj2 = Resources.Load("_PosObj/D_Henai_Day2/Chieri_16_IK_YubisasiPivot_orosiPosObj") as GameObject;
        //        tmpYubiDOMoveTweener
        //            .ChangeEndValue(Chieri_16_IK_YubisasiPivot_orosiPosObj2.transform.localPosition
        //            , 14f
        //            , true)
        //            .Restart();

        //        tmpYubiDORotateTweener
        //            .ChangeEndValue(Chieri_16_IK_YubisasiPivot_orosiPosObj2.transform.rotation
        //            , 14f
        //            , true)
        //            .Restart();
        //        #endregion


        //        //暗幕
        //        FadeBlack(1, 6f);
        //        NovelSetVis("D41210b1");//悲壮な表情が通じたのか降ろしてくれた
        //        while (isNovelSetVisIng) { yield return null; }

        //        break;

        //}
        #endregion

        #endregion

        yield return new WaitForSeconds(6);

        #region 設定解除（ペアレント、脚のぼりシステム、接近システムなど）
        GirlTrs.SetParent(GameObjectsTrs);
        CameraObjectsTrs.SetParent(GameObjectsTrs);
        isANSystem = false;
        isSekkinSystem = false;
        isRigidReadSystem = false;

        //右手
        DOTweenToIKEfPos(IKRHandEf, 0, 0f);
        DOTweenToIKEfRot(IKRHandEf, 0, 0f);
        //右手
        DOTweenToIKEfPos(IKLHandEf, 0, 0f);
        DOTweenToIKEfRot(IKLHandEf, 0, 0f);



        #endregion

        EventMove("これからの事");
        yield break;


        #region Input操作で実際に掴む
        isRInput = true;
        isRInputDown = true;
        yield return null;
        isRInputDown = false;
        #endregion


        SEPlay(UISEObj, "UI_pin");
        //デバッグ
        Debug.Log(DB.nowEventNum + "終了");
        while (true) { yield return null; };

        yield break;
    }
    IEnumerator E3060()//これからの事
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_PetbottleIreZero;
            //アニメスピード
            girlAnim.speed = 0.3f;

            //暗幕
            FadeBlack(1, 0f);
        }
        EventReset();
        HukidashiNovelDistanceChange(2f, 0);

        #region 暗幕中設定

        #region //ライト調整 窓からの光で後光を射す角度に変更
        //GameObject Light_Sun_chieri020_KakudoIsuGokouPosObj
        //    = Resources.Load("_PosObj/0220Korekaranokoto/Light_Sun_chieri020_KakudoIsuGokouPosObj") as GameObject;

        //GameObjectsTrs.Find("Light/Sun_chieri").localEulerAngles = Light_Sun_chieri020_KakudoIsuGokouPosObj.transform.localEulerAngles;
        #endregion


        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);

        //智恵理0位置ロック解除
        DB.isChieriPosLock = false;
        //アニメスピード
        girlAnim.speed = 0.3f;

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);

        ChieriMotion("ATL椅子脚組みやめ直後ポーズ_開脚", 0f, 0);
        ChieriMotion("f_笑顔口眉ジト目40", 0.1f, 2);
        ChieriMotion("_noData", 0f, 5);

        //■PosObjで読み込み
        //プレイヤー 練習2地べた位置に
        GameObject Player_02_ZibetaRensyuu2PosObj = Resources.Load("_PosObj/D_Henai_Day2/Player_02_ZibetaRensyuu2PosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_02_ZibetaRensyuu2PosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_02_ZibetaRensyuu2PosObj.transform.localEulerAngles;
        CameraReset(Player_02_ZibetaRensyuu2PosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos);//立ちに

        //椅子位置
        GameObject Chair_03_ZibetaRensyuPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chair_03_ZibetaRensyuPosObj") as GameObject;
        ChairTrs.localPosition = Chair_03_ZibetaRensyuPosObj.transform.localPosition;
        ChairTrs.localEulerAngles = Chair_03_ZibetaRensyuPosObj.transform.localEulerAngles;

        //智恵理 ATL椅子すわり位置に（ペアレント用にローカル値）
        GameObject ChieriParent_ChairLocalPosObj = Resources.Load("_PosObj/ChieriParent_ChairLocalPosObj") as GameObject;
        GirlTrs.localPosition = ChieriParent_ChairLocalPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = ChieriParent_ChairLocalPosObj.transform.localEulerAngles;
        //智恵理 椅子へペアレント
        GirlTrs.SetParent(ChairTrs, false);
        //yield return null;
        //GirlTrs.SetParent(GameObjectsTrs, true);

        //■■■■■■■■一時オ
        //yield return null;
        //GirlTrs.SetParent(GameObjectsTrs);



        //スピーカー 位置に
        SpeakerTrs.gameObject.SetActive(true);
        GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
        SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        #region 宿題ペン消しゴムなくし
        //宿題 位置に
        Drill_chieriTrs.gameObject.SetActive(false);

        //プレイヤーの
        //HomeworkObjectsTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);

        //ペンなくし
        SharpenObj.SetActive(false);
        //消しゴム無くし
        KeshigomuObj.SetActive(false);
        #endregion //宿題置き


        //事前Pos群
        GameObject Chair_04_ZensinPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chair_04_ZensinPosObj") as GameObject;
        GameObject KaoyokoYubitate01_IKRHand_Bip001RUpperArmObj = Resources.Load("_PosObj/_ParentPoseObjs/KaoyokoYubitate01_IKRHand_Bip001RUpperArmObj") as GameObject;

        #endregion

        //環境音フェード
        KankyouBGMChanger(semiSE.audioSource, "residential-area-in-early-morning-1_loop");
        KankyouBGMVolumer(0.8f, 5);
        while (isNovelSetVisIng) { yield return null; }

        //開幕
        FadeBlack(0, 1f);

        //goto デバッグ移動;

        yield return new WaitForSeconds(1);

        #region 地べたに 降ろしたのに怒ってる？　床が不服？ 椅子ごと主人公へ近づく
        NovelSetVis("E3060010");//地べたに・・・。降ろすってこっちかよ！
        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("f_十分？", 0.1f, 2);
        Hukidashi("E3060010");//降ろしたのに怒ってる？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        Hukidashi("E3060020");//床が不服？

        #region 椅子ごと主人公へ近づく

        //まずBendGoal1
        FBBIK.solver.rightLegChain.bendConstraint.weight =
        FBBIK.solver.leftLegChain.bendConstraint.weight = 1;

        //まず初期位置でIKON
        GameObject IKLFoot_AsikumiYameTyokugoPosObj
            = Resources.Load("_PosObj/D_Henai_Day2/AsaZibeta/IKLFoot_AsikumiYameTyokugoPosObj") as GameObject;
        IKLFootTargetTrs.localPosition = IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition;
        IKLFootTargetTrs.localEulerAngles = IKLFoot_AsikumiYameTyokugoPosObj.transform.localEulerAngles;

        GameObject IKRFoot_AsikumiYameTyokugoPosObj
            = Resources.Load("_PosObj/D_Henai_Day2/AsaZibeta/IKRFoot_AsikumiYameTyokugoPosObj") as GameObject;
        IKRFootTargetTrs.localEulerAngles = IKRFoot_AsikumiYameTyokugoPosObj.transform.localEulerAngles;
        IKRFootTargetTrs.localPosition = IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition;

        DOTweenToIKEfPos(IKLFootEf, 1, 1f);
        DOTweenToIKEfPos(IKRFootEf, 1, 1f);
        DOTweenToIKEfRot(IKLFootEf, 1, 1f);
        DOTweenToIKEfRot(IKRFootEf, 1, 1f);

        yield return null;

        //進んだ位置に足位置移動
        float tmpDurTimeOne = 0.3f;
        GameObject IKLFoot010_HizaTeokiPosObj
            = Resources.Load("_PosObj/0220Korekaranokoto/IKLFoot010_HizaTeokiPosObj") as GameObject;
        //= Resources.Load("_PosObj/D_Henai_Day2/AsaZibeta/IKLFoot_MaekagamiPosObj") as GameObject;
        IKLFootTargetTrs.DOLocalMoveX(IKLFoot010_HizaTeokiPosObj.transform.localPosition.x
            , tmpDurTimeOne / girlAnim.speed);
        IKLFootTargetTrs.DOLocalMoveZ(IKLFoot010_HizaTeokiPosObj.transform.localPosition.z
            , tmpDurTimeOne / girlAnim.speed);
        IKLFootTargetTrs.DOLocalRotate(IKLFoot010_HizaTeokiPosObj.transform.localEulerAngles
            , tmpDurTimeOne / girlAnim.speed);

        GameObject IKRFoot010_HizaTeokiPosObj
            = Resources.Load("_PosObj/0220Korekaranokoto/IKRFoot010_HizaTeokiPosObj") as GameObject;
        //= Resources.Load("_PosObj/D_Henai_Day2/AsaZibeta/IKRFoot_MaekagamiPosObj") as GameObject;
        IKRFootTargetTrs.DOLocalMoveX(IKRFoot010_HizaTeokiPosObj.transform.localPosition.x
            , tmpDurTimeOne / girlAnim.speed);
        IKRFootTargetTrs.DOLocalMoveZ(IKRFoot010_HizaTeokiPosObj.transform.localPosition.z
            , tmpDurTimeOne / girlAnim.speed);
        IKRFootTargetTrs.DOLocalRotate(IKRFoot010_HizaTeokiPosObj.transform.localEulerAngles
            , tmpDurTimeOne / girlAnim.speed);

        //ついでにほんの少し浮かして降ろす
        IKLFootTargetTrs.DOLocalMoveY(IKLFoot010_HizaTeokiPosObj.transform.localPosition.y + 0.001f, (tmpDurTimeOne / 2) / girlAnim.speed)
            .OnComplete(() =>
            {
                IKLFootTargetTrs.DOLocalMoveY(IKLFoot010_HizaTeokiPosObj.transform.localPosition.y
                    , (tmpDurTimeOne / 2) / girlAnim.speed)
                    .SetEase(Ease.InSine);
            });
        IKRFootTargetTrs.DOLocalMoveY(IKRFoot010_HizaTeokiPosObj.transform.localPosition.y + 0.001f, (tmpDurTimeOne / 2) / girlAnim.speed)
            .OnComplete(() =>
            {
                IKRFootTargetTrs.DOLocalMoveY(IKRFoot010_HizaTeokiPosObj.transform.localPosition.y
                    , (tmpDurTimeOne / 2) / girlAnim.speed)
                    .SetEase(Ease.InSine);
            });

        yield return new WaitForSeconds((tmpDurTimeOne / 2) / girlAnim.speed);

        ChieriMotion("ATL椅子前かがみ_開脚", 1f, 0);


        //■■■■■■■■一時オフ
        //椅子ごと主人公へ近づく
        ChairTrs.DOLocalMove(Chair_04_ZensinPosObj.transform.localPosition
            , 1f / girlAnim.speed);
        ChairTrs.DOLocalRotateQuaternion(Chair_04_ZensinPosObj.transform.rotation
            , 1f / girlAnim.speed);

        #endregion

        //■■■■■■■■一時オフ//なぜかコメントアウトされてなかった。こっちが正しい処理かも
        #region //旧 椅子ごと主人公へ近づく
        ChieriMotion("ATL椅子前かがみ_開脚", 0.5f, 0);

        ChairTrs.DOLocalMove(Chair_04_ZensinPosObj.transform.localPosition
            , 1f / girlAnim.speed);
        ChairTrs.DOLocalRotateQuaternion(Chair_04_ZensinPosObj.transform.rotation
            , 1f / girlAnim.speed);
        #endregion

        SEPlay(ChairSEObj, "ChairMove01", ChairTrs.gameObject);

        yield return new WaitForSeconds(1.5f);
        yield return KeyOrWait(3);
        #endregion

        #region これが実際の大きさなんだよ？ 本当はそんなに小さいのに忘れちゃったかな？ 本当の大きさって・・
        Hukidashi("E3060030");//これが実際の大きさなんだよ？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("f_笑顔口眉ジト目40", 0.1f, 2);
        Hukidashi("E3060040");//本当はそんなに小さいのに
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1.5f, "f_笑顔口眉ジト目40", 0.1f, 2);
        Hukidashi("E3060050");//忘れちゃったかな？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("ATL椅子前かがみ→ちょいかがみ_開脚", 0.5f, 0);

        NovelSetVis("E3060020");//本当の大きさって・・
        while (isNovelSetVisIng) { yield return null; }
        #endregion

        #region なにか喋ってるみたいだけど よく聞こえないんだよね 聴こえてないのか？ 椅子ごと元の位置へ
        ChieriMotion("f_十分？", 0.1f, 2);

        Hukidashi("E3060060");//なにか喋ってるみたいだけど
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1.5f, "f_笑顔口眉ジト目40", 0.1f, 2);
        Hukidashi("E3060070");//よく聞こえないんだよね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("E3060030");//あ・・・？

        #region 椅子ごと元の位置へ

        float tmpDurTimeTwo = 1f;
        //まず足IKそのままで動き始める（IKは前かがみ状態前提）
        ChieriMotion("ATL椅子脚組みやめ直後ポーズ_開脚", 1f, 0);
        //椅子ごと元の位置へ
        ChairTrs.DOLocalMove(Chair_03_ZibetaRensyuPosObj.transform.localPosition
            , tmpDurTimeTwo / girlAnim.speed);
        ChairTrs.DOLocalRotateQuaternion(Chair_03_ZibetaRensyuPosObj.transform.rotation
            , tmpDurTimeTwo / girlAnim.speed);

        SEPlay(ChairSEObj, "ChairMove01", ChairTrs.gameObject);

        yield return new WaitForSeconds((tmpDurTimeTwo / 3) / girlAnim.speed);

        //半分くらいでIKで足戻す
        //戻り位置に足移動
        IKLFootTargetTrs.DOLocalMoveX(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.x, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKLFootTargetTrs.DOLocalMoveZ(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.z, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKRFootTargetTrs.DOLocalMoveX(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.x, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKRFootTargetTrs.DOLocalMoveZ(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.z, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKLFootTargetTrs.DOLocalRotate(IKLFoot_AsikumiYameTyokugoPosObj.transform.localEulerAngles, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKRFootTargetTrs.DOLocalRotate(IKRFoot_AsikumiYameTyokugoPosObj.transform.localEulerAngles, (tmpDurTimeTwo / 2) / girlAnim.speed);

        //ついでにほんの少し浮かして降ろす
        IKLFootTargetTrs.DOLocalMoveY(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y + 0.001f, ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
            .OnComplete(() =>
            {
                IKLFootTargetTrs.DOLocalMoveY(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y
                    , ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
                    .SetEase(Ease.InSine);
            });
        IKRFootTargetTrs.DOLocalMoveY(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y + 0.001f, ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
            .OnComplete(() =>
            {
                IKRFootTargetTrs.DOLocalMoveY(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y
                    , ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
                    .SetEase(Ease.InSine);
            });

        yield return new WaitForSeconds((tmpDurTimeTwo / 2) / girlAnim.speed);


        #endregion
        #region //旧 椅子ごと元の位置へ
        ChieriMotion("ATL椅子脚組みやめ直後ポーズ_開脚", 1f, 0);

        ChairTrs.DOLocalMove(Chair_03_ZibetaRensyuPosObj.transform.localPosition
            , 1f / girlAnim.speed);
        ChairTrs.DOLocalRotateQuaternion(Chair_03_ZibetaRensyuPosObj.transform.rotation
            , 1f / girlAnim.speed);
        #endregion

        SEPlay(ChairSEObj, "ChairMove01", ChairTrs.gameObject);

        yield return new WaitForSeconds(1.5f);



        #endregion

        HukidashiNovelDistanceChange(1f, 3);

        #region //ToBeContinued



        //FadeBlack(1, 5, true);
        //isMenuLock = true;//メニューロック
        //isHwVisLock = true;//宿題ロック

        ////TO BE CONTINUED設置
        //GameObject tempTobecontinuedObj = Instantiate(Resources.Load("Main/UI/ToBeContinued/TobecontinuedCanvas") as GameObject
        //    , VRUICameraTrs);
        //DB.evMoveDelObjList.Add(tempTobecontinuedObj);//削除用にDBのリストへ登録

        ////■■幕中なので前面表示
        ////取得
        //Image tmpImage = tempTobecontinuedObj.GetComponent<Image>();
        ////透明に
        //tmpImage.color = new Color(1, 1, 1, 0);
        ////徐々に不透明に
        //DOTween.To(() => tmpImage.color, (x) => tmpImage.color = x, new Color(1, 1, 1, 1)
        //    , 5f)
        //     .SetEase(Ease.InOutQuad)
        //     .SetUpdate(true);

        //yield return new WaitForSeconds(5f);

        ////徐々に透明に
        //DOTween.To(() => tmpImage.color, (x) => tmpImage.color = x, new Color(1, 1, 1, 0)
        //    , 5f)
        //     .SetEase(Ease.InOutQuad)
        //     .SetUpdate(true);

        ////NovelSetVis("ToBeContinued");

        ////智恵理メッシュON
        //GirlMeshTrs.gameObject.SetActive(true);

        //isNovelFadeTween = isNovelSetVisIng = false;
        //KankyouBGMVolumer(0f, 5);
        //yield return new WaitForSeconds(5f);

        //EventMove("おまけ01", true, true);
        ////EventMove("タイトル", true, true);






        #endregion

        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);

        Hukidashi("E3060080");//だから説明の前に・・
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("笑顔01口眉", 0.02f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し

        #region //顔横に指立ての右手IKpos
        //ChieriMotion("ひとさし指差し", 0.5f, 5);

        //IKRHandTargetTrs.localPosition = KaoyokoYubitate01_IKRHand_Bip001RUpperArmObj.transform.localPosition;
        //IKRHandTargetTrs.localEulerAngles = KaoyokoYubitate01_IKRHand_Bip001RUpperArmObj.transform.localEulerAngles;

        ////右手
        //DOTweenToIKEfPos(IKRHandEf, 1, 2);
        //DOTweenToIKEfRot(IKRHandEf, 1, 2);

        #endregion

        Hukidashi("E3060090");//一個だけ実験してみよっか
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        yield return new WaitForSeconds(1);

        NovelSetVis("E3060040");//実験・・？

        while (novelCurrentPageInt < 3) { yield return null; }

        FadeBlack(1, 2);
        yield return new WaitForSeconds(2);

        while (isNovelSetVisIng) { yield return null; }



        EventMove("小さな家", true, true);

        #region //脚登りする予定だったときのもの
        //AN_isGrapPowerMode = true;
        //AN_isInputToggleMode = true;

        ////■脚のぼりシステム コルーチン始動
        //StartCoroutine(AsinoboriSystem());
        ////rigid監視スタート
        //yield return null;//Rigidbody付与待ち
        //StartCoroutine(RigidReadSystem());

        ////伏せに
        //AN_PlayerHuseSphereCollider.enabled = true;
        //AN_PlayerNormalCapsuleCollider.enabled = false;


        //SEPlay(UISEObj, "UI_pin");
        ////デバッグ
        //Debug.Log(DB.nowEventNum + "終了");
        //while (true)
        //{
        //    if (Input.GetKeyDown(KeyCode.X))
        //    { ChieriMotion("ATL椅子脚組みやめ直後ポーズ", 0.5f, 0); }
        //    if (Input.GetKeyDown(KeyCode.V))
        //    { ChieriMotion("ATL椅子脚組み1開始", 0.5f, 0); }
        //    if (Input.GetKeyDown(KeyCode.B))
        //    { ChieriMotion("ATL椅子脚組み1→2", 0.5f, 0); }
        //    if (Input.GetKeyDown(KeyCode.N))
        //    { ChieriMotion("ATL椅子脚組み2→3", 0.5f, 0); }
        //    if (Input.GetKeyDown(KeyCode.M))
        //    { ChieriMotion("ATL椅子脚組み3→脚組みやめ直後ポーズ", 0.5f, 0); }
        //    if (Input.GetKeyDown(KeyCode.F))
        //    { ChieriMotion("ATL椅子前かがみ", 0.5f, 0); }
        //    if (Input.GetKeyDown(KeyCode.G))
        //    { ChieriMotion("ATL椅子前かがみ→ちょいかがみ", 0.5f, 0); }
        //    if (Input.GetKeyDown(KeyCode.H))
        //    { ChieriMotion("ATL椅子深く座りなおし", 0.5f, 0); }
        //    if (Input.GetKeyDown(KeyCode.J))
        //    { ChieriMotion("ATL椅子左足出し", 0.5f, 0); }

        //    if (Input.GetKeyDown(KeyCode.T))
        //    {
        //        CameraObjectsTrs.localPosition = Player_02_ZibetaRensyuu2PosObj.transform.localPosition;
        //        CameraObjectsTrs.localEulerAngles = Player_02_ZibetaRensyuu2PosObj.transform.localEulerAngles;
        //    }

        //    if (Input.GetKeyDown(KeyCode.Y))
        //    {
        //        if (AN_PlayerHuseSphereCollider.enabled == true)
        //        {
        //            AN_PlayerHuseSphereCollider.enabled = false;
        //            AN_PlayerNormalCapsuleCollider.enabled = true;
        //        }
        //        else if (AN_PlayerNormalCapsuleCollider.enabled == true)
        //        {
        //            AN_PlayerHuseSphereCollider.enabled = true;
        //            AN_PlayerNormalCapsuleCollider.enabled = false;
        //        }

        //    }
        //    if (Input.GetKeyDown(KeyCode.Comma))
        //    {
        //        //縮小
        //        FadeBlack(0.5f, 1f, false, Ease.InOutElastic, false);
        //        SEPlay("magic-attack-darkness1", 0.3f);
        //        yield return new WaitForSeconds(0.5f);
        //        SEPlay("magic-gravity2", 0.3f);

        //        Vector3 tmpScale = nowPlayerLocalScale / 1.5f;
        //        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x, tmpScale, 3f);

        //        yield return new WaitForSeconds(1f);

        //        FadeBlack(0f, 2f, false, Ease.OutQuad, false);

        //    }
        //    if (Input.GetKeyDown(KeyCode.Period))
        //    {
        //        //拡大
        //        FadeBlack(0.5f, 1f, false, Ease.InOutElastic, false);
        //        SEPlay("magic-attack-darkness1", 0.3f);
        //        yield return new WaitForSeconds(0.5f);
        //        SEPlay("magic-gravity2", 0.3f);

        //        Vector3 tmpScale = nowPlayerLocalScale * 1.5f;
        //        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x, tmpScale, 3f);

        //        yield return new WaitForSeconds(1f);

        //        FadeBlack(0f, 2f, false, Ease.OutQuad, false);

        //    }


        //    if (DB.isDebugMode)
        //    {
        //        if ((Input.GetAxis(DB.inputDict["移動ポイント前進後退アナログ"]) > 0))
        //        {
        //            //拡大
        //            FadeBlack(0.5f, 1f, false, Ease.InOutElastic, false);
        //            SEPlay("magic-attack-darkness1", 0.3f);
        //            yield return new WaitForSeconds(0.5f);
        //            SEPlay("magic-gravity2", 0.3f);

        //            Vector3 tmpScale = nowPlayerLocalScale * 1.5f;
        //            DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x, tmpScale, 3f);

        //            yield return new WaitForSeconds(1f);

        //            FadeBlack(0f, 2f, false, Ease.OutQuad, false);

        //        }
        //        if (Input.GetAxis(DB.inputDict["移動ポイント前進後退アナログ"]) < 0)
        //        {
        //            //縮小
        //            FadeBlack(0.5f, 1f, false, Ease.InOutElastic, false);
        //            SEPlay("magic-attack-darkness1", 0.3f);
        //            yield return new WaitForSeconds(0.5f);
        //            SEPlay("magic-gravity2", 0.3f);

        //            Vector3 tmpScale = nowPlayerLocalScale / 1.5f;
        //            DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x, tmpScale, 3f);

        //            yield return new WaitForSeconds(1f);

        //            FadeBlack(0f, 2f, false, Ease.OutQuad, false);

        //        }
        //    }
        //    #endregion

        //    yield return null;

        //};

        #endregion


        yield break;
    }


    //　　　　　Ver0.53以降
    IEnumerator E3070UT()//小さな家
    {
        if (debugEventMoveFlag == true)
        {
        }

        EventReset();
        HukidashiNovelDistanceChange(0.5f, 0);

        FadeBlack(1, 0);

        #region 暗幕設定
        DB.isChieriPosLock = false;
        ChieriMotion("座り待機", 0f, 0);

        //プレイヤー大きさ
        nowPlayerLocalScale = DB.playerScale_PetbottleIreZero;

        #region 宿題ペン消しゴムなくし
        //宿題 位置に
        Drill_chieriTrs.gameObject.SetActive(false);

        //プレイヤーの
        //HomeworkObjectsTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);

        //ペンなくし
        SharpenObj.SetActive(false);
        //消しゴム無くし
        KeshigomuObj.SetActive(false);
        #endregion //宿題置き

        #region //UnityTimeline設定
        //GameObject Ashikurabe_Timeline = GameObject.Find("Ashikurabe_Timeline");

        //PlayableDirector ashikurabe_TimelinePD
        //    = Ashikurabe_Timeline.GetComponent<PlayableDirector>();

        ////Stoppedで終了検知（Stoppedは、多分ストップ時に行うアクションを追加できるもの。 引数にPD指定必要。）
        //bool isPDStopped = false;

        //ashikurabe_TimelinePD.stopped += (PlayableDirector aDirector) =>
        //{ isPDStopped = true; };//終了したらtrue

        #endregion



        #endregion

        ////ちえり足音時ほこり発生に
        //GirlTrs.GetComponent<ChieriFootStepSpawn>().isFootStepObj = true;

        #region SoundObj左足に付与
        //WindnoiseSoundObj付与
        GameObject LFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlLFootTrs);
        DB.evMoveDelObjList.Add(LFootWindnoiseSoundObj);
        LFootWindnoiseSoundObj.name = nameof(LFootWindnoiseSoundObj);
        LFootWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpLFootWindnoiseSound = LFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpLFootWindnoiseSound.aSource.maxDistance = 180;
        tmpLFootWindnoiseSound.pitchMax = 1f;
        tmpLFootWindnoiseSound.pitchUpRateAdjustFloat = 2;
        tmpLFootWindnoiseSound.pitchDownRateAdjustFloat = 100;

        tmpLFootWindnoiseSound.aSource.volume = 0f;
        #endregion
        #region SoundObj右足に付与
        //WindnoiseSoundObj付与
        GameObject RFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRFootTrs);
        DB.evMoveDelObjList.Add(RFootWindnoiseSoundObj);
        RFootWindnoiseSoundObj.name = nameof(RFootWindnoiseSoundObj);
        RFootWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpRFootWindnoiseSound = RFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpRFootWindnoiseSound.aSource.maxDistance = 180;
        tmpRFootWindnoiseSound.pitchMax = 1f;
        tmpRFootWindnoiseSound.pitchUpRateAdjustFloat = 2;
        tmpRFootWindnoiseSound.pitchDownRateAdjustFloat = 100;

        tmpRFootWindnoiseSound.aSource.volume = 0f;
        #endregion
        tmpLFootWindnoiseSound.aSource.DOFade(0.4f, 5f);
        tmpRFootWindnoiseSound.aSource.DOFade(0.4f, 5f);



        ////サブタイトル
        //if (DB.isEnglish)
        //{ SubTitleVis(true, "　　　Bonus 02", 0, true, 10, 2); }
        //else
        //{ SubTitleVis(true, "　　　　おまけ 02", 0, true, 10, 2); }


        //環境音フェードイン
        KankyouBGMVolumer(1f, 3f);



        #region PD再生

        //Prefabにして取り出し（TimelineAssetをスクリプトのみで読み出して再生が難しかったので）
        GameObject Iehumi_57_TimelineObj
            = Instantiate(Resources.Load("Main/Timeline/Iehumi_57_TimelineObj") as GameObject);
        Iehumi_57_TimelineObj.name = nameof(Iehumi_57_TimelineObj);

        PlayableDirector Iehumi_57_TimelinePD
            = Iehumi_57_TimelineObj.GetComponent<PlayableDirector>();

        //Stoppedで終了検知（Stoppedは、多分ストップ時に行うアクションを追加できるもの。 引数にPD指定必要。）
        bool isPDStopped = false;

        Iehumi_57_TimelinePD.stopped += (PlayableDirector aDirector) =>
        { isPDStopped = true; };//終了したらtrue

        #endregion

        Iehumi_57_TimelinePD.Play();

        //開幕
        FadeBlack(0, 1);
        yield return new WaitForSeconds(1);

        while (isPDStopped == false) { yield return null; }

        //暗幕
        FadeBlack(1, 1);
        yield return new WaitForSeconds(3);

        isFlowChartEventMove = true;
        EventMove("ちえりの説明", true, true);


        yield break;
    }
    IEnumerator E3080()//ちえりの説明
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_PetbottleIreZero;
            //アニメスピード
            girlAnim.speed = 0.3f;

            //暗幕
            FadeBlack(1, 0f);
        }
        EventReset();
        HukidashiNovelDistanceChange(2f, 0);

        //環境音フェード
        KankyouBGMChanger(semiSE.audioSource, "residential-area-in-early-morning-1_loop");
        KankyouBGMVolumer(0.8f, 5);

        #region 暗幕中設定

        #region //ライト調整 窓からの光で後光を射す角度に変更
        //GameObject Light_Sun_chieri020_KakudoIsuGokouPosObj
        //    = Resources.Load("_PosObj/0220Korekaranokoto/Light_Sun_chieri020_KakudoIsuGokouPosObj") as GameObject;

        //GameObjectsTrs.Find("Light/Sun_chieri").localEulerAngles = Light_Sun_chieri020_KakudoIsuGokouPosObj.transform.localEulerAngles;
        #endregion


        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);

        //智恵理0位置ロック解除
        DB.isChieriPosLock = false;
        //アニメスピード
        girlAnim.speed = 0.3f;

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);

        ChieriMotion("ATL椅子脚組みやめ直後ポーズ_開脚", 0f, 0);
        ChieriMotion("f_笑顔口眉ジト目40", 0.1f, 2);
        ChieriMotion("_noData", 0f, 5);

        //■PosObjで読み込み
        //プレイヤー 練習2地べた位置に
        GameObject Player_02_ZibetaRensyuu2PosObj = Resources.Load("_PosObj/D_Henai_Day2/Player_02_ZibetaRensyuu2PosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_02_ZibetaRensyuu2PosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_02_ZibetaRensyuu2PosObj.transform.localEulerAngles;
        CameraReset(Player_02_ZibetaRensyuu2PosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos);//立ちに

        //プレイヤーダミー（脚組みつま先よけ）
        GameObject PlayerDummy010_AsikumiYokePosObj
            = Resources.Load("_PosObj/0250MindPositionEnergy/PlayerDummy010_AsikumiYokePosObj") as GameObject;
        Player_DummyTrs.localPosition = PlayerDummy010_AsikumiYokePosObj.transform.localPosition;
        Player_DummyTrs.localEulerAngles = PlayerDummy010_AsikumiYokePosObj.transform.localEulerAngles;


        //椅子位置
        GameObject Chair_03_ZibetaRensyuPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chair_03_ZibetaRensyuPosObj") as GameObject;
        ChairTrs.localPosition = Chair_03_ZibetaRensyuPosObj.transform.localPosition;
        ChairTrs.localEulerAngles = Chair_03_ZibetaRensyuPosObj.transform.localEulerAngles;

        //智恵理 ATL椅子すわり位置に（ペアレント用にローカル値）
        GameObject ChieriParent_ChairLocalPosObj = Resources.Load("_PosObj/ChieriParent_ChairLocalPosObj") as GameObject;
        GirlTrs.localPosition = ChieriParent_ChairLocalPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = ChieriParent_ChairLocalPosObj.transform.localEulerAngles;
        //智恵理 椅子へペアレント
        GirlTrs.SetParent(ChairTrs, false);
        //yield return null;
        //GirlTrs.SetParent(GameObjectsTrs, true);

        //■■■■■■■■一時オ
        //yield return null;
        //GirlTrs.SetParent(GameObjectsTrs);



        //スピーカー 位置に
        SpeakerTrs.gameObject.SetActive(true);
        GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
        SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        #region 宿題ペン消しゴムなくし
        //宿題 位置に
        Drill_chieriTrs.gameObject.SetActive(false);

        //プレイヤーの
        //HomeworkObjectsTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);

        //ペンなくし
        SharpenObj.SetActive(false);
        //消しゴム無くし
        KeshigomuObj.SetActive(false);
        #endregion //宿題置き


        //事前Pos群
        GameObject Chair_04_ZensinPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chair_04_ZensinPosObj") as GameObject;
        GameObject KaoyokoYubitate01_IKRHand_Bip001RUpperArmObj = Resources.Load("_PosObj/_ParentPoseObjs/KaoyokoYubitate01_IKRHand_Bip001RUpperArmObj") as GameObject;

        #endregion

        NovelSetVis("E3080005");//家は片付けられた。
        while (isNovelSetVisIng) { yield return null; }

        //開幕
        FadeBlack(0, 1f);

        //goto デバッグ移動;

        yield return new WaitForSeconds(1);

        #region 本物みたいでしょ　～ 大きさちょっと戻す直前まで
        Hukidashi("E3080010");//本物みたいでしょ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        #region 椅子ごと主人公へ近づく

        //まずBendGoal1
        FBBIK.solver.rightLegChain.bendConstraint.weight =
        FBBIK.solver.leftLegChain.bendConstraint.weight = 1;

        //まず初期位置でIKON
        GameObject IKLFoot_AsikumiYameTyokugoPosObj
            = Resources.Load("_PosObj/D_Henai_Day2/AsaZibeta/IKLFoot_AsikumiYameTyokugoPosObj") as GameObject;
        IKLFootTargetTrs.localPosition = IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition;
        IKLFootTargetTrs.localEulerAngles = IKLFoot_AsikumiYameTyokugoPosObj.transform.localEulerAngles;

        GameObject IKRFoot_AsikumiYameTyokugoPosObj
            = Resources.Load("_PosObj/D_Henai_Day2/AsaZibeta/IKRFoot_AsikumiYameTyokugoPosObj") as GameObject;
        IKRFootTargetTrs.localEulerAngles = IKRFoot_AsikumiYameTyokugoPosObj.transform.localEulerAngles;
        IKRFootTargetTrs.localPosition = IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition;

        DOTweenToIKEfPos(IKLFootEf, 1, 1f);
        DOTweenToIKEfPos(IKRFootEf, 1, 1f);
        DOTweenToIKEfRot(IKLFootEf, 1, 1f);
        DOTweenToIKEfRot(IKRFootEf, 1, 1f);

        yield return null;

        //進んだ位置に足位置移動
        float tmpDurTimeOne = 0.3f;
        GameObject IKLFoot010_HizaTeokiPosObj
            = Resources.Load("_PosObj/0220Korekaranokoto/IKLFoot010_HizaTeokiPosObj") as GameObject;
        //= Resources.Load("_PosObj/D_Henai_Day2/AsaZibeta/IKLFoot_MaekagamiPosObj") as GameObject;
        IKLFootTargetTrs.DOLocalMoveX(IKLFoot010_HizaTeokiPosObj.transform.localPosition.x
            , tmpDurTimeOne / girlAnim.speed);
        IKLFootTargetTrs.DOLocalMoveZ(IKLFoot010_HizaTeokiPosObj.transform.localPosition.z
            , tmpDurTimeOne / girlAnim.speed);
        IKLFootTargetTrs.DOLocalRotate(IKLFoot010_HizaTeokiPosObj.transform.localEulerAngles
            , tmpDurTimeOne / girlAnim.speed);

        GameObject IKRFoot010_HizaTeokiPosObj
            = Resources.Load("_PosObj/0220Korekaranokoto/IKRFoot010_HizaTeokiPosObj") as GameObject;
        //= Resources.Load("_PosObj/D_Henai_Day2/AsaZibeta/IKRFoot_MaekagamiPosObj") as GameObject;
        IKRFootTargetTrs.DOLocalMoveX(IKRFoot010_HizaTeokiPosObj.transform.localPosition.x
            , tmpDurTimeOne / girlAnim.speed);
        IKRFootTargetTrs.DOLocalMoveZ(IKRFoot010_HizaTeokiPosObj.transform.localPosition.z
            , tmpDurTimeOne / girlAnim.speed);
        IKRFootTargetTrs.DOLocalRotate(IKRFoot010_HizaTeokiPosObj.transform.localEulerAngles
            , tmpDurTimeOne / girlAnim.speed);

        //ついでにほんの少し浮かして降ろす
        IKLFootTargetTrs.DOLocalMoveY(IKLFoot010_HizaTeokiPosObj.transform.localPosition.y + 0.001f, (tmpDurTimeOne / 2) / girlAnim.speed)
            .OnComplete(() =>
            {
                IKLFootTargetTrs.DOLocalMoveY(IKLFoot010_HizaTeokiPosObj.transform.localPosition.y
                    , (tmpDurTimeOne / 2) / girlAnim.speed)
                    .SetEase(Ease.InSine);
            });
        IKRFootTargetTrs.DOLocalMoveY(IKRFoot010_HizaTeokiPosObj.transform.localPosition.y + 0.001f, (tmpDurTimeOne / 2) / girlAnim.speed)
            .OnComplete(() =>
            {
                IKRFootTargetTrs.DOLocalMoveY(IKRFoot010_HizaTeokiPosObj.transform.localPosition.y
                    , (tmpDurTimeOne / 2) / girlAnim.speed)
                    .SetEase(Ease.InSine);
            });

        yield return new WaitForSeconds((tmpDurTimeOne / 2) / girlAnim.speed);

        ChieriMotion("ATL椅子前かがみ_開脚", 1f, 0);


        //■■■■■■■■一時オフ
        //椅子ごと主人公へ近づく
        ChairTrs.DOLocalMove(Chair_04_ZensinPosObj.transform.localPosition
            , 1f / girlAnim.speed);
        ChairTrs.DOLocalRotateQuaternion(Chair_04_ZensinPosObj.transform.rotation
            , 1f / girlAnim.speed);

        #endregion
        SEPlay(ChairSEObj, "ChairMove01", ChairTrs.gameObject);
        yield return new WaitForSeconds(1);


        Hukidashi("E3080020");//本物なんだ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        NovelSetVis("E3080010");//本物・・？
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        Hukidashi("E3080030");//こんな風にちぢめて
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("E3080040");//怖がって貰うの
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        NovelSetVis("E3080020");//なんのために・・？
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        ChieriMotion("笑顔01口眉", 0.02f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        Hukidashi("E3080050");//エネルギーを集めたいの
        #region 椅子ごと元の位置へ

        float tmpDurTimeTwo = 1f;
        //まず足IKそのままで動き始める（IKは前かがみ状態前提）
        ChieriMotion("ATL椅子脚組みやめ直後ポーズ_開脚", 1f, 0);
        //椅子ごと元の位置へ
        ChairTrs.DOLocalMove(Chair_03_ZibetaRensyuPosObj.transform.localPosition
            , tmpDurTimeTwo / girlAnim.speed);
        ChairTrs.DOLocalRotateQuaternion(Chair_03_ZibetaRensyuPosObj.transform.rotation
            , tmpDurTimeTwo / girlAnim.speed);

        SEPlay(ChairSEObj, "ChairMove01", ChairTrs.gameObject);

        yield return new WaitForSeconds((tmpDurTimeTwo / 3) / girlAnim.speed);

        //半分くらいでIKで足戻す
        //戻り位置に足移動
        IKLFootTargetTrs.DOLocalMoveX(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.x, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKLFootTargetTrs.DOLocalMoveZ(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.z, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKRFootTargetTrs.DOLocalMoveX(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.x, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKRFootTargetTrs.DOLocalMoveZ(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.z, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKLFootTargetTrs.DOLocalRotate(IKLFoot_AsikumiYameTyokugoPosObj.transform.localEulerAngles, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKRFootTargetTrs.DOLocalRotate(IKRFoot_AsikumiYameTyokugoPosObj.transform.localEulerAngles, (tmpDurTimeTwo / 2) / girlAnim.speed);

        //ついでにほんの少し浮かして降ろす
        IKLFootTargetTrs.DOLocalMoveY(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y + 0.001f, ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
            .OnComplete(() =>
            {
                IKLFootTargetTrs.DOLocalMoveY(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y
                    , ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
                    .SetEase(Ease.InSine);
            });
        IKRFootTargetTrs.DOLocalMoveY(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y + 0.001f, ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
            .OnComplete(() =>
            {
                IKRFootTargetTrs.DOLocalMoveY(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y
                    , ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
                    .SetEase(Ease.InSine);
            });

        yield return new WaitForSeconds((tmpDurTimeTwo / 2) / girlAnim.speed);


        #endregion
        SEPlay(ChairSEObj, "ChairMove01", ChairTrs.gameObject);

        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        Hukidashi("E3080060");//精神や感情はエネルギーの一種で
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        #region //顔横に指立ての右手IKpos
        //ChieriMotion("ひとさし指差し", 0.5f, 5);

        //IKRHandTargetTrs.localPosition = KaoyokoYubitate01_IKRHand_Bip001RUpperArmObj.transform.localPosition;
        //IKRHandTargetTrs.localEulerAngles = KaoyokoYubitate01_IKRHand_Bip001RUpperArmObj.transform.localEulerAngles;

        ////右手
        //DOTweenToIKEfPos(IKRHandEf, 1, 2);
        //DOTweenToIKEfRot(IKRHandEf, 1, 2);

        #endregion
        ChieriMotion("笑顔01口眉", 0.02f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し

        #region 脚組み
        //椅子移動用 足IKオフ（同じ位置に足があるはずなので）
        DOTweenToIKEfPos(IKLFootEf, 0, 0.5f);
        DOTweenToIKEfPos(IKRFootEf, 0, 0.5f);
        DOTweenToIKEfRot(IKLFootEf, 0, 0.5f);
        DOTweenToIKEfRot(IKRFootEf, 0, 0.5f);

        ChieriMotion("ATL椅子脚組み1開始", 0.5f, 0);
        SEPlay("swing41_12低い_長い", RFootSphereTrs.gameObject);
        #endregion


        Hukidashi("E3080070");//人って怖がるとね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("E3080080");//怖がらせた人に移動するんだよ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        #region 右手もどし
        DOTweenToIKEfPos(IKRHandEf, 0, 2);
        DOTweenToIKEfRot(IKRHandEf, 0, 2);
        ChieriMotion("_noData", 0.5f, 5);
        #endregion

        ChieriMotion("f_あはは・・2", 0.2f, 2);
        ChieriMotionDelay(1, "f_あはは・・2目開き", 0.05f, 2);//時間差表情戻し
        Hukidashi("E3080082");//マコトを縮めたのも実験だったの
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("E3080085");//いろんなことに使えるんだ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        ChieriMotion("f_あ！ほら！口閉じ", 2f, 2);

        yield return null;

        #region ■左手スマホ取り出し　マスク IK版

        GirlPosToIKTargetPosRot();

        string
            tmpBaseAnimStateName = "片膝立ちミラー手伸ばしループ原点";

        #region スマホ本体を片手いじりPosへ
        GameObject ChieriSumaho_LHand_SekurabeKatatePosObj
            = Resources.Load("_PosObj/_ParentPoseObjs/ChieriSumaho_LHand_SekurabeKatatePosObj") as GameObject;
        ChieriSumahoObj.transform.localPosition = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localEulerAngles;
        #endregion

        StartCoroutine(GirlAnimReadSystem(11));

        //マスクのため、レイヤーのアニメを1フレでベースと同じモーション状態にする（ParameterでNormlizedTimeが指定できる（ただし指定し続けないと静止））
        ChieriMotion(tmpBaseAnimStateName, 0.5f, 11);//現在のベースアニメと同じアニメ指定
        girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeに

        yield return null;//↑適用に1フレ必要

        ChieriMotion("背比べ左手スマホ取り出し", 0.5f, 11);

        #region スマホ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, new Vector3(0, -0.5f, 0), 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.8f, 1);
        #endregion

        while (nowGirlAnimOtherLayerClipNameDict[11] != "背比べスマホ取り出し") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[11] <= 0.375f) { yield return null; }
        isGirlAnimReadSystem = false;
        //スマホObjオン（取り出し）
        ChieriSumahoObj.SetActive(true);
        //画面つける（画面更新も一緒に起動される）
        ChieriSumahoPower(true);

        #region 左手IKいじり位置へ（力技
        //まずターゲットTween移動
        GameObject IKLHand010_Chieri_Sumaho010IziriPosObj
            = Resources.Load("_PosObj/0260MotonoOOkisa/IKLHand010_Chieri_Sumaho010IziriPosObj") as GameObject;
        IKLHandTargetTrs.DOLocalMove(IKLHand010_Chieri_Sumaho010IziriPosObj.transform.localPosition, 1f);
        IKLHandTargetTrs.DOLocalRotate(IKLHand010_Chieri_Sumaho010IziriPosObj.transform.localEulerAngles, 1f);

        //少しウェイト下げて
        DOTweenToIKEfPos(IKLHandEf, 0.6f, 0.5f);
        DOTweenToIKEfRot(IKLHandEf, 0.6f, 0.5f);

        yield return new WaitForSeconds(0.5f);
        //ウェイト戻す
        DOTweenToIKEfPos(IKLHandEf, 1, 1f);
        DOTweenToIKEfRot(IKLHandEf, 1, 1f);
        #endregion

        #endregion
        Hukidashi("E3080090");//これだけあれば街ごと縮められるし
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("E3080093");//こんな風に…
        #endregion

        #region スマホいじって元の大きさに
        ChieriMotion("背比べ左手スマホいじり", 0f, 11);
        yield return new WaitForSeconds(1);


        #region IK顔目プレイヤー見る
        //IK目プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 1.5f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        #endregion

        #region ■目眩リトルとDOTWeenTOでプレイヤーサイズ変更(変更完了bool付き)マスク版
        bool isScaleChangeComplete = false;
        //段階別で目眩具合と縮小度変更して縮小
        PPv2MemaiLittle(1f);

        //少し戻し
        var tmpPlayerSizeChangeTweener =
        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
        , new Vector3(0.3f, 0.3f, 0.3f), 20f)
        .SetEase(Ease.InOutCubic)
        .OnComplete(() => { isScaleChangeComplete = true; });

        SEPlay("magic-attack-darkness_Reverse_long(-12)", 0.5f);

        #endregion

        #endregion

        #region ちょっと大きくなって ～　言いなりになっちゃだめだ 脚組みやめ直前まで
        NovelSetVis("E3080030");//う、おお・・
        yield return new WaitForSeconds(5);

        Hukidashi("E3080095");//大きくもできるんだ
        yield return new WaitForSeconds(5);
        yield return KeyOrWait(3);

        while (isNovelSetVisIng) { yield return null; }

        //縮小完了待ち
        while (isScaleChangeComplete == false) { yield return null; }
        girlAnim.speed = 0.7f;

        ChieriMotion("笑顔01口眉", 0.02f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        Hukidashi("E3080100");//おっきいね～
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);


        NovelSetVis("E3080040");//これだけ・・？
        while (isNovelSetVisIng) { yield return null; }

        //スマホ左手IK戻し
        DOTweenToIKEfPos(IKLHandEf, 0, 2f);
        DOTweenToIKEfRot(IKLHandEf, 0, 2f);

        ChieriMotion("f_あはは・・2", 0.3f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.2f, 2);//時間差表情戻し
        Hukidashi("E3080110");//ひとまずね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        NovelSetVis("E3080050");//ううむ・・　　ぬいぐるみが言っていたのって！
        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("f_え？(軽驚)", 0.2f, 2);
        Hukidashi("E3080120");//ポニーと喋ったの？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1.5f);

        #region IK顔目ポニー見る
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        FollowDOMove(IKLookAtEyeTargetTrs, PonyTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);

        FollowDOMove(IKLookAtHeadTargetTrs, SpeakerTrs, new Vector3(0, -0.1f, 0), 4f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        #endregion
        ChieriMotion("f_ふーん・・", 1f, 2);
        Hukidashi("E3080130");//へー・・
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(2);
        #region IK（伏目に
        //IK目プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        FollowDOMove(IKLookAtEyeTargetTrs, ChairTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, SpeakerTrs, new Vector3(0, -0.3f, 0), 4f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        #endregion
        yield return new WaitForSeconds(1);


        ChieriMotion("f_ちぇー", 12f, 2);
        Hukidashi("E3080140");//私とは最初しか
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        NovelSetVis("E3080060");//夢じゃなかったのか
        while (isNovelSetVisIng) { yield return null; }

        #region IK顔目プレイヤー見る
        //IK目プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        #endregion
        ChieriMotion("f_え？(軽驚)", 0.2f, 2);
        Hukidashi("E3080145");//うん？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("E3080070");//騙されてるんだ！
        while (isNovelSetVisIng) { yield return null; }


        ChieriMotion("f_怒ってる・・？", 1f, 2);
        Hukidashi("E3080150");//騙されてる？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        NovelSetVis("E3080080");//言いなりになっちゃだめだ！
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);
        #endregion


        //脚組みやめ
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.4f, 0), 1.5f);
        ChieriMotion("ATL椅子脚組み1開始逆再生", 1f, 0);
        //ChieriMotion("椅子脚組みから立ち上がる直前まで", 1f, 0);
        ChieriMotion("f_どうして逃げたの", 10f, 2);
        Hukidashi("E3080160");//言いなりなんかじゃないよ
        yield return new WaitForSeconds(1.65f);

        SEPlay(Other3DSEObj, "足音・べた足-01", GirlRFootTrs.gameObject, 6);

        yield return KeyOrWait(3);
        #region //椅子ごと主人公へ近づく

        ////まずBendGoal1
        //FBBIK.solver.rightLegChain.bendConstraint.weight =
        //FBBIK.solver.leftLegChain.bendConstraint.weight = 1;

        ////まず初期位置でIKON
        //IKLFoot_AsikumiYameTyokugoPosObj
        //    = Resources.Load("_PosObj/D_Henai_Day2/AsaZibeta/IKLFoot_AsikumiYameTyokugoPosObj") as GameObject;
        //IKLFootTargetTrs.localPosition = IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition;
        //IKLFootTargetTrs.localEulerAngles = IKLFoot_AsikumiYameTyokugoPosObj.transform.localEulerAngles;

        //IKRFoot_AsikumiYameTyokugoPosObj
        //    = Resources.Load("_PosObj/D_Henai_Day2/AsaZibeta/IKRFoot_AsikumiYameTyokugoPosObj") as GameObject;
        //IKRFootTargetTrs.localEulerAngles = IKRFoot_AsikumiYameTyokugoPosObj.transform.localEulerAngles;
        //IKRFootTargetTrs.localPosition = IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition;

        //DOTweenToIKEfPos(IKLFootEf, 1, 1f);
        //DOTweenToIKEfPos(IKRFootEf, 1, 1f);
        //DOTweenToIKEfRot(IKLFootEf, 1, 1f);
        //DOTweenToIKEfRot(IKRFootEf, 1, 1f);

        //yield return null;

        ////進んだ位置に足位置移動
        //tmpDurTimeOne = 0.3f;
        //IKLFoot010_HizaTeokiPosObj
        //    = Resources.Load("_PosObj/0220Korekaranokoto/IKLFoot010_HizaTeokiPosObj") as GameObject;
        ////= Resources.Load("_PosObj/D_Henai_Day2/AsaZibeta/IKLFoot_MaekagamiPosObj") as GameObject;
        //IKLFootTargetTrs.DOLocalMoveX(IKLFoot010_HizaTeokiPosObj.transform.localPosition.x
        //    , tmpDurTimeOne / girlAnim.speed);
        //IKLFootTargetTrs.DOLocalMoveZ(IKLFoot010_HizaTeokiPosObj.transform.localPosition.z
        //    , tmpDurTimeOne / girlAnim.speed);
        //IKLFootTargetTrs.DOLocalRotate(IKLFoot010_HizaTeokiPosObj.transform.localEulerAngles
        //    , tmpDurTimeOne / girlAnim.speed);

        //IKRFoot010_HizaTeokiPosObj
        //    = Resources.Load("_PosObj/0220Korekaranokoto/IKRFoot010_HizaTeokiPosObj") as GameObject;
        ////= Resources.Load("_PosObj/D_Henai_Day2/AsaZibeta/IKRFoot_MaekagamiPosObj") as GameObject;
        //IKRFootTargetTrs.DOLocalMoveX(IKRFoot010_HizaTeokiPosObj.transform.localPosition.x
        //    , tmpDurTimeOne / girlAnim.speed);
        //IKRFootTargetTrs.DOLocalMoveZ(IKRFoot010_HizaTeokiPosObj.transform.localPosition.z
        //    , tmpDurTimeOne / girlAnim.speed);
        //IKRFootTargetTrs.DOLocalRotate(IKRFoot010_HizaTeokiPosObj.transform.localEulerAngles
        //    , tmpDurTimeOne / girlAnim.speed);

        ////ついでにほんの少し浮かして降ろす
        //IKLFootTargetTrs.DOLocalMoveY(IKLFoot010_HizaTeokiPosObj.transform.localPosition.y + 0.001f, (tmpDurTimeOne / 2) / girlAnim.speed)
        //    .OnComplete(() =>
        //    {
        //        IKLFootTargetTrs.DOLocalMoveY(IKLFoot010_HizaTeokiPosObj.transform.localPosition.y
        //            , (tmpDurTimeOne / 2) / girlAnim.speed)
        //            .SetEase(Ease.InSine);
        //    });
        //IKRFootTargetTrs.DOLocalMoveY(IKRFoot010_HizaTeokiPosObj.transform.localPosition.y + 0.001f, (tmpDurTimeOne / 2) / girlAnim.speed)
        //    .OnComplete(() =>
        //    {
        //        IKRFootTargetTrs.DOLocalMoveY(IKRFoot010_HizaTeokiPosObj.transform.localPosition.y
        //            , (tmpDurTimeOne / 2) / girlAnim.speed)
        //            .SetEase(Ease.InSine);
        //    });

        //girlAnim.speed = 0.4f;

        //yield return new WaitForSeconds((tmpDurTimeOne / 2) / girlAnim.speed);


        //ChieriMotion("ATL椅子前かがみ_開脚", 1f, 0);


        ////■■■■■■■■一時オフ
        ////椅子ごと主人公へ近づく
        //ChairTrs.DOLocalMove(Chair_04_ZensinPosObj.transform.localPosition
        //    , 1f / girlAnim.speed);
        //ChairTrs.DOLocalRotateQuaternion(Chair_04_ZensinPosObj.transform.rotation
        //    , 1f / girlAnim.speed);

        #endregion
        Hukidashi("E3080170");//エネルギーの存在と知識は
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("E3080180");//植え付けられたと思うけど
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        //椅子近づけ
        Hukidashi("E3080190");//私が決めたことだもん
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(2);

        NovelSetVis("E3080090");//そんな・・　メガネか！
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        #region //椅子ごと元の位置へ

        //tmpDurTimeTwo = 1f;
        ////まず足IKそのままで動き始める（IKは前かがみ状態前提）
        //ChieriMotion("ATL椅子脚組みやめ直後ポーズ_開脚", 1f, 0);
        ////椅子ごと元の位置へ
        //ChairTrs.DOLocalMove(Chair_03_ZibetaRensyuPosObj.transform.localPosition
        //    , tmpDurTimeTwo / girlAnim.speed);
        //ChairTrs.DOLocalRotateQuaternion(Chair_03_ZibetaRensyuPosObj.transform.rotation
        //    , tmpDurTimeTwo / girlAnim.speed);

        //SEPlay(ChairSEObj, "ChairMove01", ChairTrs.gameObject);

        //yield return new WaitForSeconds((tmpDurTimeTwo / 3) / girlAnim.speed);

        ////半分くらいでIKで足戻す
        ////戻り位置に足移動
        //IKLFootTargetTrs.DOLocalMoveX(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.x, (tmpDurTimeTwo / 2) / girlAnim.speed);
        //IKLFootTargetTrs.DOLocalMoveZ(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.z, (tmpDurTimeTwo / 2) / girlAnim.speed);
        //IKRFootTargetTrs.DOLocalMoveX(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.x, (tmpDurTimeTwo / 2) / girlAnim.speed);
        //IKRFootTargetTrs.DOLocalMoveZ(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.z, (tmpDurTimeTwo / 2) / girlAnim.speed);
        //IKLFootTargetTrs.DOLocalRotate(IKLFoot_AsikumiYameTyokugoPosObj.transform.localEulerAngles, (tmpDurTimeTwo / 2) / girlAnim.speed);
        //IKRFootTargetTrs.DOLocalRotate(IKRFoot_AsikumiYameTyokugoPosObj.transform.localEulerAngles, (tmpDurTimeTwo / 2) / girlAnim.speed);

        ////ついでにほんの少し浮かして降ろす
        //IKLFootTargetTrs.DOLocalMoveY(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y + 0.001f, ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
        //    .OnComplete(() =>
        //    {
        //        IKLFootTargetTrs.DOLocalMoveY(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y
        //            , ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
        //            .SetEase(Ease.InSine);
        //    });
        //IKRFootTargetTrs.DOLocalMoveY(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y + 0.001f, ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
        //    .OnComplete(() =>
        //    {
        //        IKRFootTargetTrs.DOLocalMoveY(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y
        //            , ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
        //            .SetEase(Ease.InSine);
        //    });

        //yield return new WaitForSeconds((tmpDurTimeTwo / 2) / girlAnim.speed);


        #endregion


        //椅子戻し？
        ChieriMotion("f_あ！ほら！口普通キョトン眉下がり", 1f, 2);
        Hukidashi("E3080200");//違うのごめんね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        ChieriMotion("f_笑顔01口眉下がり_目閉じない", 2f, 2);
        Hukidashi("E3080210");//メガネなんてないの
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("E3080220");//認識させただけで
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("E3080230");//埋め込まれてないよ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("E3080100");//・・　じゃあスマホが・・
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        ChieriMotion("笑顔01口眉", 0.5f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し

        //スマホ左手IK戻し
        DOTweenToIKEfPos(IKLHandEf, 0.5f, 2f);
        DOTweenToIKEfRot(IKLHandEf, 0.5f, 2f);
        Hukidashi("E3080240");//スマホアプリ私が作ったの凄いでしょ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        NovelSetVis("E3080105");//へ？
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        Hukidashi("E3080250");//変換は複雑だけど
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("E3080260");//簡単なんだ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //スマホ左手IK戻し
        DOTweenToIKEfPos(IKLHandEf, 0, 2f);
        DOTweenToIKEfRot(IKLHandEf, 0, 2f);

        #region スマホ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, new Vector3(0, -0.2f, 0), 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.8f, 1);
        #endregion

        ChieriMotion("つまんなそう", 0.5f, 2);
        Hukidashi("E3080270");//色々機能はあるけど
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        #region IK顔目プレイヤー見る
        //IK目プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.4f, 0), 1.5f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        #endregion

        yield return new WaitForSeconds(1);

        ChieriMotion("f_笑顔01口眉下がり_目閉じない", 1f, 2);
        Hukidashi("E3080280");//洗脳装置じゃないから安心して
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        NovelSetVis("E3080110");//・・・・・・
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(2);


        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.3f, 2);//時間差表情戻し
        Hukidashi("E3080290");//じゃあ大きくしてあげる
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        ChieriMotion("背比べ左手スマホいじり", 0f, 11);
        yield return new WaitForSeconds(1);

        #region ■目眩リトルとDOTWeenTOでプレイヤーサイズ変更(変更完了bool付き)マスク版
        isScaleChangeComplete = false;
        //段階別で目眩具合と縮小度変更して縮小
        PPv2MemaiLittle(1f);

        //少し戻し
        tmpPlayerSizeChangeTweener =
        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
        , Vector3.one, 20f)
        .SetEase(Ease.InOutCubic)
        .OnComplete(() => { isScaleChangeComplete = true; });

        SEPlay("magic-attack-darkness_Reverse_long(-12)", 0.5f);

        #endregion

        NovelSetVis("E3080120");//再び充足感

        yield return new WaitForSeconds(5);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, 0f, 0), 1.5f);

        while (isScaleChangeComplete == false) { yield return null; }
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);

        FadeBlack(1, 3);
        yield return new WaitForSeconds(3);

        //暗幕


        EventMove("元の大きさ");


        while (true) { yield return null; }

        #region 以前の足ドン

        デバッグ移動:
        #region デバッグ設定

        #endregion
        #region ふふ 右足裏見せ
        ChieriMotion("f_ジト目70笑顔", 0.4f, 2);
        yield return new WaitForSeconds(1);

        Hukidashi("D42060");//ふふ
        yield return new WaitForSeconds(2);

        //椅子移動用 足IKオフ（同じ位置に足があるはずなので）
        DOTweenToIKEfPos(IKLFootEf, 0, 0);
        DOTweenToIKEfPos(IKRFootEf, 0, 0);
        DOTweenToIKEfRot(IKLFootEf, 0, 0);
        DOTweenToIKEfRot(IKRFootEf, 0, 0);
        yield return null;

        GameObject Chieri_17_IK_RFoot_KakusiPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_17_IK_RFoot_KakusiPosObj") as GameObject;
        IKRFootTargetTrs.localPosition = Chieri_17_IK_RFoot_KakusiPosObj.transform.localPosition;
        IKRFootTargetTrs.rotation = Chieri_17_IK_RFoot_KakusiPosObj.transform.rotation;

        SEPlay("swing41_12低い_長い", RFootSphereTrs.gameObject);

        //右足
        DOTweenToIKEfPos(IKRFootEf, 1, 3);
        DOTweenToIKEfRot(IKRFootEf, 1, 3);

        yield return new WaitForSeconds(3);
        NovelSetVis("D42030");//へ？
        while (isNovelSetVisIng) { yield return null; }


        ChieriMotion("f_安堵", 0.1f, 2);
        Hukidashi("D42070");//ほら、見えなくなっちゃった
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("D42075");//足で隠れちゃうくらい小さいんだね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("D42077");//潰されたらどうしようって思わない？ 
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        NovelSetVis("D42040");//「え、何言って……や、やめ……」
        while (isNovelSetVisIng) { yield return null; }
        #endregion

        #region 足よりちっちゃいってことは 足振り上げ ばかやめろ ふみ降ろし
        Hukidashi("D42080");//足よりちっちゃいってことは

        GameObject Chieri_18_IK_RFoot_UkasiPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_18_IK_RFoot_UkasiPosObj") as GameObject;
        IKRFootTargetTrs.DOLocalMove(Chieri_18_IK_RFoot_UkasiPosObj.transform.localPosition
            , 5f);
        IKRFootTargetTrs.DOLocalRotateQuaternion(Chieri_18_IK_RFoot_UkasiPosObj.transform.rotation
            , 5f);
        SEPlay("swing41_12低い_長い", RFootSphereTrs.gameObject);

        yield return new WaitForSeconds(3f);

        Hukidashi("D42090");//いつ踏み潰されてもおかしくないんだよ
        yield return new WaitForSeconds(2f);
        Hukidashi("D42095");//せーの
        yield return new WaitForSeconds(0.5f);
        NovelSetVis("D42050");//ばか馬鹿やめろ！
        yield return new WaitForSeconds(0.5f);

        #region //寸止め
        //GameObject Chieri_19_IK_RFoot_nearPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_19_IK_RFoot_nearPosObj") as GameObject;
        //IKRFootTargetTrs.DOLocalMove(Chieri_19_IK_RFoot_nearPosObj.transform.localPosition
        //    , 1f)
        //    .SetEase(Ease.InOutBack);
        //IKRFootTargetTrs.DOLocalRotateQuaternion(Chieri_19_IK_RFoot_nearPosObj.transform.rotation
        //    , 1f)
        //    .SetEase(Ease.InOutBack );

        //SEPlay("swing41_12低い_長い",RFootSphereTrs.gameObject);

        //yield return new WaitForSeconds(0.5f);

        ////黒フェード
        //FadeBlack(1, 0.3f);

        //while (isNovelSetVisIng) { yield return null; }

        ////黒フェード
        //FadeBlack(0, 2f);

        #endregion
        #region 横に踏み下ろし

        GameObject Chieri_20_IK_RFoot_nearMissPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_20_IK_RFoot_nearMissPosObj") as GameObject;
        IKRFootTargetTrs.DOLocalMove(Chieri_20_IK_RFoot_nearMissPosObj.transform.localPosition
            , 0.6f)
            .SetEase(Ease.InCubic);
        IKRFootTargetTrs.DOLocalRotateQuaternion(Chieri_20_IK_RFoot_nearMissPosObj.transform.rotation
            , 0.6f)
            .SetEase(Ease.InCubic);
        #region 椅子少し近づく
        GameObject Chair_05_HumiPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chair_05_HumiPosObj") as GameObject;
        ChairTrs.DOLocalMove(Chair_05_HumiPosObj.transform.localPosition
            , 1f)
            .SetEase(Ease.InOutBack);
        ChairTrs.DOLocalRotateQuaternion(Chair_05_HumiPosObj.transform.rotation
            , 1f)
            .SetEase(Ease.InOutBack);
        #endregion

        yield return new WaitForSeconds(0.2f);
        SEPlay("swing40_d_16低い", RFootSphereTrs.gameObject, 0.5f);
        yield return new WaitForSeconds(0.2f);
        SEPlay("bosu23_c_37mix_5倍", RFootSphereTrs.gameObject, 2f);
        yield return new WaitForSeconds(0.2f);

        //■揺れ1
        Vector3
            tmpDefCameraPos = CameraAnchorTrs.localPosition,
            tmpFlowCameraPos = new Vector3(0, 1.2f, 0);

        CameraAnchorTrs.DOLocalMove(tmpFlowCameraPos, 0.05f);
        yield return new WaitForSeconds(0.05f);
        CameraAnchorTrs.DOLocalMove(tmpDefCameraPos, 0.5f).SetEase(Ease.OutBounce);

        NovelSetVis("D42060");//！！・・・
        DelAll_Hukidashi();
        yield return new WaitForSeconds(3f);

        #endregion

        #endregion

        #region ほら、危ないでしょ？ 近づき わかってきた？

        Hukidashi("D42100");//ほら、危ないでしょ？
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1.5f, "f_笑顔口眉ジト目40", 0.1f, 2);

        #region 椅子ごと主人公へ近づく（踏み降ろし後なので最初と少し違う）
        //まず現在位置でLFootIKON(Rは踏み降ろしの後なのでそのまま)
        LateAction(() =>
        {
            IKLFootTargetTrs.position = GirlLFootTrs.position;
            IKLFootTargetTrs.eulerAngles = GirlLFootTrs.eulerAngles;
            DOTweenToIKEfPos(IKLFootEf, 1, 0);
            DOTweenToIKEfRot(IKLFootEf, 1, 0);
        });
        yield return null;
        //進んだ位置に足位置移動
        tmpDurTimeOne = 0.3f;
        IKLFootTargetTrs.DOLocalMoveX(IKLFoot010_HizaTeokiPosObj.transform.localPosition.x, tmpDurTimeOne / girlAnim.speed);
        IKLFootTargetTrs.DOLocalMoveZ(IKLFoot010_HizaTeokiPosObj.transform.localPosition.z, tmpDurTimeOne / girlAnim.speed);
        IKRFootTargetTrs.DOLocalMoveX(IKRFoot010_HizaTeokiPosObj.transform.localPosition.x, tmpDurTimeOne / girlAnim.speed);
        IKRFootTargetTrs.DOLocalMoveZ(IKRFoot010_HizaTeokiPosObj.transform.localPosition.z, tmpDurTimeOne / girlAnim.speed);
        IKLFootTargetTrs.DOLocalRotate(IKLFoot010_HizaTeokiPosObj.transform.localEulerAngles, tmpDurTimeOne / girlAnim.speed);
        IKRFootTargetTrs.DOLocalRotate(IKRFoot010_HizaTeokiPosObj.transform.localEulerAngles, tmpDurTimeOne / girlAnim.speed);

        //ついでにほんの少し浮かして降ろす
        IKLFootTargetTrs.DOLocalMoveY(IKLFoot010_HizaTeokiPosObj.transform.localPosition.y + 0.001f, (tmpDurTimeOne / 2) / girlAnim.speed)
            .OnComplete(() =>
            {
                IKLFootTargetTrs.DOLocalMoveY(IKLFoot010_HizaTeokiPosObj.transform.localPosition.y
                    , (tmpDurTimeOne / 2) / girlAnim.speed)
                    .SetEase(Ease.InSine);
            });
        IKRFootTargetTrs.DOLocalMoveY(IKRFoot010_HizaTeokiPosObj.transform.localPosition.y + 0.001f, (tmpDurTimeOne / 2) / girlAnim.speed)
            .OnComplete(() =>
            {
                IKRFootTargetTrs.DOLocalMoveY(IKRFoot010_HizaTeokiPosObj.transform.localPosition.y
                    , (tmpDurTimeOne / 2) / girlAnim.speed)
                    .SetEase(Ease.InSine);
            });

        yield return new WaitForSeconds((tmpDurTimeOne / 2) / girlAnim.speed);

        ChieriMotion("ATL椅子前かがみ", 1f, 0);

        //椅子ごと主人公へ近づく
        ChairTrs.DOLocalMove(Chair_04_ZensinPosObj.transform.localPosition
            , 1f / girlAnim.speed);
        ChairTrs.DOLocalRotateQuaternion(Chair_04_ZensinPosObj.transform.rotation
            , 1f / girlAnim.speed);

        #endregion

        #region //旧 椅子ごと主人公へ近づく
        //ChieriMotion("ATL椅子前かがみ", 0.5f, 0);

        //ChairTrs.DOLocalMove(Chair_04_ZensinPosObj.transform.localPosition
        //    , 1f / girlAnim.speed);
        //ChairTrs.DOLocalRotateQuaternion(Chair_04_ZensinPosObj.transform.rotation
        //    , 1f / girlAnim.speed);

        ////右足もどし
        //DOTweenToIKEfPos(IKRFootEf, 0, 3);
        //DOTweenToIKEfRot(IKRFootEf, 0, 3);
        #endregion

        SEPlay("ChairMove01", ChairTrs.gameObject);


        yield return new WaitForSeconds(1.5f);
        yield return KeyOrWait(3);

        Hukidashi("D42110");//わかってきた？
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        #endregion


        #region 混乱で声が出ない こんなに危ない 踏み潰されないためにはどうすればいいでしょう
        NovelSetVis("D42070");//「え、あ、え」
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("D42120");//こんなに危ないんだよ
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);


        #region 椅子ごと元の位置へ

        tmpDurTimeTwo = 1f;
        //まず足IKそのままで動き始める（IKは前かがみ状態前提）
        ChieriMotion("ATL椅子脚組みやめ直後ポーズ", 1f, 0);
        //椅子ごと元の位置へ
        ChairTrs.DOLocalMove(Chair_03_ZibetaRensyuPosObj.transform.localPosition
            , tmpDurTimeTwo / girlAnim.speed);
        ChairTrs.DOLocalRotateQuaternion(Chair_03_ZibetaRensyuPosObj.transform.rotation
            , tmpDurTimeTwo / girlAnim.speed);

        SEPlay("ChairMove01", ChairTrs.gameObject);

        yield return new WaitForSeconds((tmpDurTimeTwo / 3) / girlAnim.speed);

        //半分くらいでIKで足戻す
        //戻り位置に足移動
        IKLFootTargetTrs.DOLocalMoveX(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.x, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKLFootTargetTrs.DOLocalMoveZ(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.z, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKRFootTargetTrs.DOLocalMoveX(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.x, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKRFootTargetTrs.DOLocalMoveZ(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.z, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKLFootTargetTrs.DOLocalRotate(IKLFoot_AsikumiYameTyokugoPosObj.transform.localEulerAngles, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKRFootTargetTrs.DOLocalRotate(IKRFoot_AsikumiYameTyokugoPosObj.transform.localEulerAngles, (tmpDurTimeTwo / 2) / girlAnim.speed);

        //ついでにほんの少し浮かして降ろす
        IKLFootTargetTrs.DOLocalMoveY(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y + 0.001f, ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
            .OnComplete(() =>
            {
                IKLFootTargetTrs.DOLocalMoveY(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y
                    , ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
                    .SetEase(Ease.InSine);
            });
        IKRFootTargetTrs.DOLocalMoveY(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y + 0.001f, ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
            .OnComplete(() =>
            {
                IKRFootTargetTrs.DOLocalMoveY(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y
                    , ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
                    .SetEase(Ease.InSine);
            });

        yield return new WaitForSeconds((tmpDurTimeTwo / 2) / girlAnim.speed);


        #endregion
        #region //旧 椅子ごと元位置へ
        //ChieriMotion("ATL椅子脚組みやめ直後ポーズ", 1f, 0);
        ////椅子ごと元の位置へ
        //ChairTrs.DOLocalMove(Chair_03_ZibetaRensyuPosObj.transform.localPosition
        //    , 1f / girlAnim.speed);
        //ChairTrs.DOLocalRotateQuaternion(Chair_03_ZibetaRensyuPosObj.transform.rotation
        //    , 1f / girlAnim.speed);

        #endregion

        SEPlay("ChairMove01", ChairTrs.gameObject);



        yield return new WaitForSeconds(0.5f);


        Hukidashi("D42130");//踏み潰されないためには
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotion("ひとさし指差し", 0.5f, 5);

        #region 顔横に指立ての右手IKpos

        IKRHandTargetTrs.localPosition = KaoyokoYubitate01_IKRHand_Bip001RUpperArmObj.transform.localPosition;
        IKRHandTargetTrs.localEulerAngles = KaoyokoYubitate01_IKRHand_Bip001RUpperArmObj.transform.localEulerAngles;

        //右手
        DOTweenToIKEfPos(IKRHandEf, 1, 2);
        DOTweenToIKEfRot(IKRHandEf, 1, 2);

        #endregion

        Hukidashi("D42140");//どうすればいいでしょう？
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        yield return new WaitForSeconds(1f);

        NovelSetVis("D42080");//「ど、どうって」
        while (novelCurrentPageInt < 1) { yield return null; }

        //右手もどし
        DOTweenToIKEfPos(IKRHandEf, 0, 2);
        DOTweenToIKEfRot(IKRHandEf, 0, 2);
        ChieriMotion("f_笑顔口眉ジト目40", 0.1f, 2);
        ChieriMotion("_noData", 0.5f, 5);

        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1f);

        //椅子移動用 足IKオフ（同じ位置に足があるはずなので）
        DOTweenToIKEfPos(IKLFootEf, 0, 0);
        DOTweenToIKEfPos(IKRFootEf, 0, 0);
        DOTweenToIKEfRot(IKLFootEf, 0, 0);
        DOTweenToIKEfRot(IKRFootEf, 0, 0);
        yield return null;

        ChieriMotion("ATL椅子脚組み1開始", 0.5f, 0);
        SEPlay("swing41_12低い_長い", RFootSphereTrs.gameObject);

        yield return new WaitForSeconds(1f);

        NovelSetVis("D42090");//「お、わ……！」
        while (isNovelSetVisIng) { yield return null; }


        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(2f, "f_笑顔口眉ジト目40", 0.1f, 2);
        Hukidashi("D42150");//はい、ヒント
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        NovelSetVis("D42100");//ヒントって・・
        while (isNovelSetVisIng) { yield return null; }

        #endregion

        #endregion

        FadeBlack(1, 1);
        yield return new WaitForSeconds(1);




        #region //脚登りする予定だったときのもの
        //AN_isGrapPowerMode = true;
        //AN_isInputToggleMode = true;

        ////■脚のぼりシステム コルーチン始動
        //StartCoroutine(AsinoboriSystem());
        ////rigid監視スタート
        //yield return null;//Rigidbody付与待ち
        //StartCoroutine(RigidReadSystem());

        ////伏せに
        //AN_PlayerHuseSphereCollider.enabled = true;
        //AN_PlayerNormalCapsuleCollider.enabled = false;


        //SEPlay(UISEObj, "UI_pin");
        ////デバッグ
        //Debug.Log(DB.nowEventNum + "終了");
        //while (true)
        //{
        //    if (Input.GetKeyDown(KeyCode.X))
        //    { ChieriMotion("ATL椅子脚組みやめ直後ポーズ", 0.5f, 0); }
        //    if (Input.GetKeyDown(KeyCode.V))
        //    { ChieriMotion("ATL椅子脚組み1開始", 0.5f, 0); }
        //    if (Input.GetKeyDown(KeyCode.B))
        //    { ChieriMotion("ATL椅子脚組み1→2", 0.5f, 0); }
        //    if (Input.GetKeyDown(KeyCode.N))
        //    { ChieriMotion("ATL椅子脚組み2→3", 0.5f, 0); }
        //    if (Input.GetKeyDown(KeyCode.M))
        //    { ChieriMotion("ATL椅子脚組み3→脚組みやめ直後ポーズ", 0.5f, 0); }
        //    if (Input.GetKeyDown(KeyCode.F))
        //    { ChieriMotion("ATL椅子前かがみ", 0.5f, 0); }
        //    if (Input.GetKeyDown(KeyCode.G))
        //    { ChieriMotion("ATL椅子前かがみ→ちょいかがみ", 0.5f, 0); }
        //    if (Input.GetKeyDown(KeyCode.H))
        //    { ChieriMotion("ATL椅子深く座りなおし", 0.5f, 0); }
        //    if (Input.GetKeyDown(KeyCode.J))
        //    { ChieriMotion("ATL椅子左足出し", 0.5f, 0); }

        //    if (Input.GetKeyDown(KeyCode.T))
        //    {
        //        CameraObjectsTrs.localPosition = Player_02_ZibetaRensyuu2PosObj.transform.localPosition;
        //        CameraObjectsTrs.localEulerAngles = Player_02_ZibetaRensyuu2PosObj.transform.localEulerAngles;
        //    }

        //    if (Input.GetKeyDown(KeyCode.Y))
        //    {
        //        if (AN_PlayerHuseSphereCollider.enabled == true)
        //        {
        //            AN_PlayerHuseSphereCollider.enabled = false;
        //            AN_PlayerNormalCapsuleCollider.enabled = true;
        //        }
        //        else if (AN_PlayerNormalCapsuleCollider.enabled == true)
        //        {
        //            AN_PlayerHuseSphereCollider.enabled = true;
        //            AN_PlayerNormalCapsuleCollider.enabled = false;
        //        }

        //    }
        //    if (Input.GetKeyDown(KeyCode.Comma))
        //    {
        //        //縮小
        //        FadeBlack(0.5f, 1f, false, Ease.InOutElastic, false);
        //        SEPlay("magic-attack-darkness1", 0.3f);
        //        yield return new WaitForSeconds(0.5f);
        //        SEPlay("magic-gravity2", 0.3f);

        //        Vector3 tmpScale = nowPlayerLocalScale / 1.5f;
        //        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x, tmpScale, 3f);

        //        yield return new WaitForSeconds(1f);

        //        FadeBlack(0f, 2f, false, Ease.OutQuad, false);

        //    }
        //    if (Input.GetKeyDown(KeyCode.Period))
        //    {
        //        //拡大
        //        FadeBlack(0.5f, 1f, false, Ease.InOutElastic, false);
        //        SEPlay("magic-attack-darkness1", 0.3f);
        //        yield return new WaitForSeconds(0.5f);
        //        SEPlay("magic-gravity2", 0.3f);

        //        Vector3 tmpScale = nowPlayerLocalScale * 1.5f;
        //        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x, tmpScale, 3f);

        //        yield return new WaitForSeconds(1f);

        //        FadeBlack(0f, 2f, false, Ease.OutQuad, false);

        //    }


        //    if (DB.isDebugMode)
        //    {
        //        if ((Input.GetAxis(DB.inputDict["移動ポイント前進後退アナログ"]) > 0))
        //        {
        //            //拡大
        //            FadeBlack(0.5f, 1f, false, Ease.InOutElastic, false);
        //            SEPlay("magic-attack-darkness1", 0.3f);
        //            yield return new WaitForSeconds(0.5f);
        //            SEPlay("magic-gravity2", 0.3f);

        //            Vector3 tmpScale = nowPlayerLocalScale * 1.5f;
        //            DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x, tmpScale, 3f);

        //            yield return new WaitForSeconds(1f);

        //            FadeBlack(0f, 2f, false, Ease.OutQuad, false);

        //        }
        //        if (Input.GetAxis(DB.inputDict["移動ポイント前進後退アナログ"]) < 0)
        //        {
        //            //縮小
        //            FadeBlack(0.5f, 1f, false, Ease.InOutElastic, false);
        //            SEPlay("magic-attack-darkness1", 0.3f);
        //            yield return new WaitForSeconds(0.5f);
        //            SEPlay("magic-gravity2", 0.3f);

        //            Vector3 tmpScale = nowPlayerLocalScale / 1.5f;
        //            DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x, tmpScale, 3f);

        //            yield return new WaitForSeconds(1f);

        //            FadeBlack(0f, 2f, false, Ease.OutQuad, false);

        //        }
        //    }
        //    #endregion

        //    yield return null;

        //};

        #endregion


        yield break;
    }
    IEnumerator E3090()//元の大きさ
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_PetbottleIreZero;
            //アニメスピード
            girlAnim.speed = 0.3f;

            //暗幕
            FadeBlack(1, 0f);
        }
        EventReset();
        HukidashiNovelDistanceChange(0.5f, 0);

        #region //一気に大きさ戻してた時のもの

        //#region 暗幕中設定

        //#region //ライト調整 窓からの光で後光を射す角度に変更
        ////GameObject Light_Sun_chieri020_KakudoIsuGokouPosObj
        ////    = Resources.Load("_PosObj/0220Korekaranokoto/Light_Sun_chieri020_KakudoIsuGokouPosObj") as GameObject;

        ////GameObjectsTrs.Find("Light/Sun_chieri").localEulerAngles = Light_Sun_chieri020_KakudoIsuGokouPosObj.transform.localEulerAngles;
        //#endregion


        ////智恵理ON
        //GirlMeshTrs.gameObject.SetActive(true);

        ////智恵理0位置ロック解除
        //DB.isChieriPosLock = false;
        ////アニメスピード
        //girlAnim.speed = 0.3f;

        ////IKプレイヤー見る
        //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0f);
        //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);

        //ChieriMotion("ATL椅子脚組み1ポーズ", 0f, 0);
        //ChieriMotion("f_笑顔口眉ジト目40", 0.1f, 2);
        //ChieriMotion("_noData", 0f, 5);

        ////■PosObjで読み込み
        ////プレイヤー 練習2地べた位置に
        //GameObject Player_02_ZibetaRensyuu2PosObj = Resources.Load("_PosObj/D_Henai_Day2/Player_02_ZibetaRensyuu2PosObj") as GameObject;
        //CameraObjectsTrs.localPosition = Player_02_ZibetaRensyuu2PosObj.transform.localPosition;
        //CameraObjectsTrs.localEulerAngles = Player_02_ZibetaRensyuu2PosObj.transform.localEulerAngles;
        //CameraReset(Player_02_ZibetaRensyuu2PosObj.transform.localEulerAngles
        //    , DB.cameraStandAnchorDefLocalPos);//立ちに

        ////椅子位置
        //GameObject Chair_03_ZibetaRensyuPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chair_03_ZibetaRensyuPosObj") as GameObject;
        //ChairTrs.localPosition = Chair_03_ZibetaRensyuPosObj.transform.localPosition;
        //ChairTrs.localEulerAngles = Chair_03_ZibetaRensyuPosObj.transform.localEulerAngles;

        ////智恵理 ATL椅子すわり位置に（ペアレント用にローカル値）
        //GameObject ChieriParent_ChairLocalPosObj = Resources.Load("_PosObj/ChieriParent_ChairLocalPosObj") as GameObject;
        //GirlTrs.localPosition = ChieriParent_ChairLocalPosObj.transform.localPosition;
        //GirlTrs.localEulerAngles = ChieriParent_ChairLocalPosObj.transform.localEulerAngles;
        ////智恵理 椅子へペアレント
        //GirlTrs.SetParent(ChairTrs, false);

        ////スピーカー 位置に
        //SpeakerTrs.gameObject.SetActive(true);
        //GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
        //SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
        //SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        //#region 宿題ペン消しゴムなくし
        ////宿題 位置に
        //Drill_chieriTrs.gameObject.SetActive(false);

        ////プレイヤーの
        ////HomeworkObjectsTrs.gameObject.SetActive(false);
        //DrillTrs.gameObject.SetActive(false);

        ////ペンなくし
        //SharpenObj.SetActive(false);
        ////消しゴム無くし
        //KeshigomuObj.SetActive(false);
        //#endregion //宿題置き

        //#endregion

        ////開幕
        //FadeBlack(0, 1f);

        //yield return new WaitForSeconds(1);


        //#region ■左手スマホ取り出し　マスク IK版

        //GirlPosToIKTargetPosRot();

        //string
        //    tmpBaseAnimStateName = "片膝立ちミラー手伸ばしループ原点";
        //#region スマホ本体を片手いじりPosへ
        //GameObject ChieriSumaho_LHand_SekurabeKatatePosObj
        //    = Resources.Load("_PosObj/_ParentPoseObjs/ChieriSumaho_LHand_SekurabeKatatePosObj") as GameObject;
        //ChieriSumahoObj.transform.localPosition = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localPosition;
        //ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localEulerAngles;
        //#endregion

        //StartCoroutine(GirlAnimReadSystem(11));

        ////マスクのため、レイヤーのアニメを1フレでベースと同じモーション状態にする（ParameterでNormlizedTimeが指定できる（ただし指定し続けないと静止））
        //ChieriMotion(tmpBaseAnimStateName, 0.5f, 11);//現在のベースアニメと同じアニメ指定
        //girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeに

        //yield return null;//↑適用に1フレ必要

        //ChieriMotion("背比べ左手スマホ取り出し", 0.5f, 11);

        //while (nowGirlAnimOtherLayerClipNameDict[11] != "背比べスマホ取り出し") { yield return null; }
        //while (girlAnimOtherLayerNomTimeDict[11] <= 0.375f) { yield return null; }
        //isGirlAnimReadSystem = false;
        ////スマホObjオン（取り出し）
        //ChieriSumahoObj.SetActive(true);
        ////画面つける（画面更新も一緒に起動される）
        //ChieriSumahoPower(true);

        //#region スマホ見
        //ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        //FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        //FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, new Vector3(0, -0.5f, 0), 1f);
        //DOTweenToLAIKSHead(LAIKHeadS, 0.8f, 1);
        //#endregion


        //#region 左手IKいじり位置へ（力技
        ////まずターゲットTween移動
        //GameObject IKLHand010_Chieri_Sumaho010IziriPosObj
        //    = Resources.Load("_PosObj/0260MotonoOOkisa/IKLHand010_Chieri_Sumaho010IziriPosObj") as GameObject;
        //IKLHandTargetTrs.DOLocalMove(IKLHand010_Chieri_Sumaho010IziriPosObj.transform.localPosition, 1f);
        //IKLHandTargetTrs.DOLocalRotate(IKLHand010_Chieri_Sumaho010IziriPosObj.transform.localEulerAngles, 1f);

        ////少しウェイト下げて
        //DOTweenToIKEfPos(IKLHandEf, 0.6f, 0.5f);
        //DOTweenToIKEfRot(IKLHandEf, 0.6f, 0.5f);

        //yield return new WaitForSeconds(0.5f);
        ////ウェイト戻す
        //DOTweenToIKEfPos(IKLHandEf, 1, 1f);
        //DOTweenToIKEfRot(IKLHandEf, 1, 1f);
        //#endregion

        //#endregion


        //SEPlay("UI_pin"); yield return KeyOrWait(3);

        //#region スマホいじって元の大きさに
        //ChieriMotion("背比べ左手スマホいじり", 0f, 11);
        //yield return new WaitForSeconds(1);

        //#region //IKプレイヤ見（頭Clamp0.8）
        ////ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        ////FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        ////DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

        ////LAIKHead.solver.clampWeightHead = 0.8f;

        ////FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
        ////DOTweenToLAIKSHead(LAIKHeadS, 1, 1f);
        //#endregion

        //#region IK顔目プレイヤー見る
        ////IK目プレイヤー見
        //ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);

        //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 1.5f);
        //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        //#endregion

        //#region ■目眩リトルとDOTWeenTOでプレイヤーサイズ変更(変更完了bool付き)マスク版
        //bool isScaleChangeComplete = false;
        ////段階別で目眩具合と縮小度変更して縮小
        //PPv2MemaiLittle(1f);

        ////元の大きさに
        //var tmpPlayerSizeChangeTweener =
        //DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
        //, Vector3.one, 20f)
        //.SetEase(Ease.InOutCubic)
        //.OnComplete(() => { isScaleChangeComplete = true; });

        //SEPlay("magic-attack-darkness1_long(-12)", 0.5f);

        //#endregion
        //#endregion

        ////アニメスピード
        //girlAnim.speed = 1f;

        //SEPlay("UI_pin"); yield return KeyOrWait(3);



        //FadeBlack(1, 0.5f);
        //yield return new WaitForSeconds(0.5f);



        //tmpPlayerSizeChangeTweener.Kill();



        #endregion




        #region 暗幕設定

        #region プレイヤー
        //プレイヤー ドア前見送られ位置
        GameObject Player020_DoorMaePosObj
            = Resources.Load("_PosObj/0260MotonoOokisa/Player020_DoorMaePosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player020_DoorMaePosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player020_DoorMaePosObj.transform.localEulerAngles;
        CameraReset(Player020_DoorMaePosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos);//立ちに

        nowPlayerLocalScale = Vector3.one;

        #endregion

        #region ちえり
        DB.isChieriPosLock = false;
        //アニメスピード
        girlAnim.speed = 1f;

        //見送り位置
        GirlTrs.SetParent(GameObjectsTrs);
        GameObject Chieri020_MiokuriPosObj
            = Resources.Load("_PosObj/0260MotonoOokisa/Chieri020_MiokuriPosObj") as GameObject;
        GirlTrs.localPosition = Chieri020_MiokuriPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri020_MiokuriPosObj.transform.localEulerAngles;

        //スマホ手マスクオフ
        ChieriMotion("_noData", 0f, 11);

        //ウェイト戻す
        DOTweenToIKEfPos(IKLHandEf, 0, 0f);
        DOTweenToIKEfRot(IKLHandEf, 0, 0f);

        //モーション
        ChieriMotion("ドアからデスク横へ歩く前ポーズ原点", 0f, 0);


        //IKプレイヤー見一フレ処理
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 0f);

        yield return null;
        //IKプレイヤー見るヘッドのみ時間かけ
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0.1f);
        LAIKHead.solver.clampWeightHead = 0.75f;


        //スパッツのマテリアルをHiDetailに
        GirlMeshTrs.Find("Spats").GetComponent<Renderer>().material
            = GirlMeshTrs.Find("Spats").GetComponent<MatChangeResources>().otherMat;

        #endregion

        #region スマホ
        GameObject ChieriSumaho_LHand_SekurabeKatatePosObj
            = Resources.Load("_PosObj/_ParentPoseObjs/ChieriSumaho_LHand_SekurabeKatatePosObj") as GameObject;
        ChieriSumahoObj.transform.localPosition = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localEulerAngles;

        //スマホObjオン（取り出し）
        ChieriSumahoObj.SetActive(true);
        //画面つける（画面更新も一緒に起動される）
        ChieriSumahoPower(true);

        #endregion

        #region 宿題ペン消しゴムなくし
        //宿題 位置に
        Drill_chieriTrs.gameObject.SetActive(false);

        //プレイヤーの
        //HomeworkObjectsTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);

        //ペンなくし
        SharpenObj.SetActive(false);
        //消しゴム無くし
        KeshigomuObj.SetActive(false);
        #endregion //宿題置き

        #endregion

        //環境音フェード
        KankyouBGMChanger(semiSE.audioSource, "residential-area-in-early-morning-1_loop");
        KankyouBGMVolumer(0.8f, 5);

        NovelSetVis("E3080130");//説得したけど不可能だった
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(2);

        FadeBlack(0, 3);
        yield return new WaitForSeconds(3);

        ChieriMotion("f_あはは・・2", 0.3f, 2);
        ChieriMotionDelay(1, "f_あはは・・2目開き", 0.2f, 2);//時間差表情戻し
        Hukidashi("E3080300");//怖がらせてごめんね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("笑顔01口眉_目閉じない", 1f, 2);
        Hukidashi("E3080310");//エネルギー貰ったから
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("E3080320");//実験成功すれば
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("笑顔01口眉", 0.5f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        Hukidashi("E3080330");//進化できると思う
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("E3080340");//ほんとにありがとうね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(2);

        //選択肢
        NovelSetVis("E3080140");//進化って・・・
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(2);


        #region ■選択肢イベント開始


        Sentakushi("■E3090010a", "ちえりに飛び掛る");
        Sentakushi("■E3090010b");
        //まばたき止め
        isEyeBlinkAuto = false;

        //選択肢選ばれるまでループ
        while (sentakuListNum == 99) { yield return null; }
        yield return new WaitForSeconds(0.5f);


        switch (sentakuListNum)
        {
            case 0://選択肢a　飛び掛る
                {
                    bool isDebugSkip = true;
                    //goto デバッグ用;
                    isDebugSkip = false;

                    //スキップ止め
                    isSkipLock = true;
                    //まばたき止め
                    isEyeBlinkAuto = false;

                    //メニューロック
                    isMenuLock = true;

                    KankyouBGMVolumer(0f, 1);


                    #region 右人差し指にWindnoiseSoundObj付与

                    GameObject RHitosasiSoundObj
                        = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
                        , GirlRhitosashi02Trs);
                    RHitosasiSoundObj.name = nameof(RHitosasiSoundObj);
                    DB.evMoveDelObjList.Add(RHitosasiSoundObj);

                    //設定
                    WindnoiseSound tmpRHitosasiSound = RHitosasiSoundObj.GetComponent<WindnoiseSound>();
                    tmpRHitosasiSound.aSource.maxDistance = 170;
                    tmpRHitosasiSound.pitchMax = 1f;
                    tmpRHitosasiSound.pitchUpRateAdjustFloat = 2;

                    tmpRHitosasiSound.aSource.volume = 0;

                    //SoundObjのPos
                    GameObject SoundObj_04_TsumamiYubi_RHitosasiPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_04_TsumamiYubi_RHitosasiPosObj") as GameObject;
                    RHitosasiSoundObj.transform.localPosition = SoundObj_04_TsumamiYubi_RHitosasiPosObj.transform.localPosition;

                    #endregion


                    #region 左人差し指にWindnoiseSoundObj付与

                    GameObject LHitosasiSoundObj
                        = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
                        , GirlLhitosashi02Trs);
                    LHitosasiSoundObj.name = nameof(LHitosasiSoundObj);
                    DB.evMoveDelObjList.Add(LHitosasiSoundObj);

                    //設定
                    WindnoiseSound tmpLHitosasiSound = LHitosasiSoundObj.GetComponent<WindnoiseSound>();
                    tmpLHitosasiSound.aSource.maxDistance = 50;
                    tmpLHitosasiSound.pitchMax = 0.8f;
                    tmpLHitosasiSound.pitchUpRateAdjustFloat = 2;

                    tmpLHitosasiSound.aSource.volume = 0;

                    //SoundObjのPos
                    GameObject SoundObj_04_TsumamiYubi_LHitosasiPosObj
                        = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_04_TsumamiYubi_RHitosasiPosObj") as GameObject;
                    LHitosasiSoundObj.transform.localPosition = SoundObj_04_TsumamiYubi_RHitosasiPosObj.transform.localPosition;

                    #endregion



                    #region SoundObj頭に付与
                    //WindnoiseSoundObj付与（左手）
                    GameObject HeadWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
                        , Bip001HeadTrs);
                    HeadWindnoiseSoundObj.name = nameof(HeadWindnoiseSoundObj);
                    DB.evMoveDelObjList.Add(HeadWindnoiseSoundObj);

                    //設定
                    WindnoiseSound tmpHeadWindnoiseSound = HeadWindnoiseSoundObj.GetComponent<WindnoiseSound>();
                    tmpHeadWindnoiseSound.aSource.maxDistance = 170;
                    tmpHeadWindnoiseSound.pitchMax = 1f;
                    tmpHeadWindnoiseSound.pitchUpRateAdjustFloat = 8;

                    tmpHeadWindnoiseSound.aSource.volume = 0;

                    //位置
                    HeadWindnoiseSoundObj.transform.localPosition = Vector3.zero;

                    #endregion




                    #region 飛び掛り失敗内股ぶらさがりまで

                    //手動まばたき
                    ChieriMotionDelay(0.1f, "まばたき", 0f, 4); blinkTime = 0;
                    yield return null;


                    #region ANシステム起動
                    //掴むのNGObjリスト
                    AN_GrapNGObjList.Add(RoomTrs.Find("Kabe").gameObject);
                    AN_GrapNGObjList.Add(RoomTrs.Find("Desk").gameObject);

                    ////トグル型に

                    //Inputロック
                    AN_isInputLock = true;

                    //イージー
                    AN_isInputToggleMode = false;
                    AN_isInputSwitchEasyMode = false;
                    AN_isInputSwitchHardMode = true;

                    //パワーモードオフ クライムモードオフ
                    AN_isGrapPowerMode = false;
                    AN_isClimbMode = false;


                    //飛び掛り演出専用設定
                    isAN_Tobikakari = true;

                    //■脚のぼりシステム コルーチン始動
                    StartCoroutine(AsinoboriSystem(1.2f));
                    ANGrapHandUIObj.SetActive(false);

                    //UIオフ
                    AN_isUIVis = false;
                    ANGrapHandUIObj.SetActive(false);

                    //手位置1（手コントロールObjは起動時に生成するので、起動後じゃないと駄目）
                    GameObject AN_HandControl033_RotObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/AN_HandControl033_RotObj") as GameObject;
                    AN_HandControlObj.transform.DOLocalRotate(AN_HandControl033_RotObj.transform.localEulerAngles
                        , 0);


                    //プレイヤーダミー回転しない、手IKも出さない
                    isPlayerANRotate = false;

                    #endregion


                    #region ダミーをスマホカメラに映す設定
                    //スマホ撮影用にダミー表示状態にして
                    isDummyBodyVis = true;
                    //レイヤーをVRCameraNoVisにする
                    Dummy_Body.layer = LayerMask.NameToLayer("VRCameraNoVis");
                    //ON
                    Dummy_Body.SetActive(true);
                    #endregion


                    yield return null;
                    //rigid監視スタート
                    StartCoroutine(RigidReadSystem());
                    yield return new WaitForSeconds(0.3f);

                    ChieriMotion("立ちスマホ口元手開始原点", 0.5f, 0);
                    ChieriMotion("f_驚愕", 0.4f, 2);
                    //ChieriMotion("背比べ左手スマホいじり", 0f, 6);//左手マスク

                    bool isTmpStop = true;

                    float tmpOutTime = 1.2f;
                    #region 1段階目 Out
                    //■ジャンプ　Out
                    GameObject Player033_JumpOutPosObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/Player033_JumpOutPosObj") as GameObject;
                    var tmpJumpTweener =
                    CameraObjectsTrs.DOLocalMove(Player033_JumpOutPosObj.transform.localPosition, tmpOutTime)
                        .SetEase(Ease.OutQuad)
                        .SetUpdate(true);

                    //■時間Out
                    DOTween.To(() => timeScale, (x) => timeScale = x
                    , 0f, tmpOutTime)
                    .SetUpdate(true)
                    .OnComplete(() => { isTmpStop = false; });

                    #endregion

                    while (isTmpStop) { yield return null; }

                    NovelSetVis("E3090110");//どちらに
                    pageCharVisTweener.SetUpdate(true);
                    while (isNovelSetVisIng) { yield return null; }
                    pageCharVisTweener.SetUpdate(false);

                    float tmpInTime = 2f;
                    //白フラッシュ
                    FadeWhite(0.2f, 0f, true); yield return new WaitForSecondsRealtime(0.1f); FadeWhite(0, 0f);
                    ChieriMotionDelay(0.1f, "まばたき", 0f, 4); blinkTime = 0;

                    PPv2MemaiLittle(1f);
                    SEPlay("magic-attack-darkness1_Short1", 0.5f);

                    #region 1段階目 IN
                    //■ジャンプ In
                    tmpJumpTweener.Kill();
                    GameObject Player034_JumpInPosObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/Player034_JumpInPosObj") as GameObject;
                    tmpJumpTweener =
                        CameraObjectsTrs.DOLocalMove(Player034_JumpInPosObj.transform.localPosition, tmpInTime)
                        .SetEase(Ease.InQuad)
                        .SetUpdate(true);


                    //■縮小 In
                    //tmpPlayerSizeChangeTweener.Kill();
                    var tmpPlayerSizeChangeTweener =
                        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
                        , new Vector3(0.7f, 0.7f, 0.7f), tmpInTime)
                        .SetEase(Ease.InQuad)
                        .SetUpdate(true);

                    //■手位置2 In
                    GameObject AN_HandControl035_RotObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/AN_HandControl035_RotObj") as GameObject;
                    AN_HandControlObj.transform.DOLocalRotate(AN_HandControl035_RotObj.transform.localEulerAngles
                        , tmpInTime)
                        .SetEase(Ease.InQuad)
                        .SetUpdate(true);

                    //■時間In
                    DOTween.To(() => timeScale, (x) => timeScale = x
                    , 0.1f, tmpInTime)
                    .SetUpdate(true)
                    .OnComplete(() => { isTmpStop = true; });
                    #endregion

                    while (isTmpStop == false) { yield return null; }

                    tmpOutTime = 2f;
                    #region 2段階目 Out
                    //■ジャンプ　Out
                    GameObject Player035_JumpOutPosObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/Player035_JumpOutPosObj") as GameObject;
                    tmpJumpTweener.Kill();
                    tmpJumpTweener =
                    CameraObjectsTrs.DOLocalMove(Player035_JumpOutPosObj.transform.localPosition, tmpOutTime)
                        .SetEase(Ease.OutQuad)
                        .SetUpdate(true);

                    //■縮小 Out
                    tmpPlayerSizeChangeTweener.Kill();
                    tmpPlayerSizeChangeTweener =
                        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
                        , new Vector3(0.5f, 0.5f, 0.5f), tmpOutTime)
                        .SetEase(Ease.OutQuad)
                        .SetUpdate(true);

                    //■時間Out
                    DOTween.To(() => timeScale, (x) => timeScale = x
                    , 0f, tmpOutTime)
                    .SetUpdate(true)
                    .OnComplete(() => { isTmpStop = false; });
                    #endregion

                    #region ちえりIK右手 顔に埋まらないよう手の位置移動
                    GameObject ChieriIKRHand030_OdorokiPosObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/ChieriIKRHand030_OdorokiPosObj") as GameObject;
                    IKRHandTargetTrs.localPosition = ChieriIKRHand030_OdorokiPosObj.transform.localPosition;
                    IKRHandTargetTrs.localEulerAngles = ChieriIKRHand030_OdorokiPosObj.transform.localEulerAngles;

                    DOTweenToIKEfPos(IKRHandEf, 1, 0.5f);
                    DOTweenToIKEfRot(IKRHandEf, 1, 0.5f);
                    #endregion

                    while (isTmpStop) { yield return null; }

                    NovelSetVis("E3090120");//想定外
                    pageCharVisTweener.SetUpdate(true);
                    while (isNovelSetVisIng) { yield return null; }
                    pageCharVisTweener.SetUpdate(false);

                    tmpInTime = 2f;

                    PPv2MemaiLittle(1f);
                    SEPlay("magic-attack-darkness1", 0.5f);
                    #region 2段階目 IN
                    //■ジャンプ In
                    tmpJumpTweener.Kill();
                    GameObject Player036_JumpInPosObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/Player036_JumpInPosObj") as GameObject;
                    tmpJumpTweener =
                        CameraObjectsTrs.DOLocalMove(Player036_JumpInPosObj.transform.localPosition, tmpInTime)
                        .SetEase(Ease.InQuad)
                        .SetUpdate(true);

                    //■縮小 In
                    tmpPlayerSizeChangeTweener.Kill();
                    tmpPlayerSizeChangeTweener =
                        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
                        , new Vector3(0.45f, 0.45f, 0.45f)
                        , tmpInTime)
                        .SetEase(Ease.InQuad)
                        .SetUpdate(true);


                    //■時間In
                    DOTween.To(() => timeScale, (x) => timeScale = x
                    , 0.1f
                    , tmpInTime)
                    .SetUpdate(true)
                    .OnComplete(() => { isTmpStop = true; });
                    #endregion

                    while (isTmpStop == false) { yield return null; }


                    tmpOutTime = 2f;
                    #region 2段階目 Out
                    //■ジャンプ　Out
                    GameObject Player037_JumpOutPosObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/Player037_JumpOutPosObj") as GameObject;
                    tmpJumpTweener.Kill();
                    tmpJumpTweener =
                    CameraObjectsTrs.DOLocalMove(Player037_JumpOutPosObj.transform.localPosition, tmpOutTime)
                        .SetEase(Ease.OutQuad)
                        .SetUpdate(true);

                    //■縮小 Out
                    tmpPlayerSizeChangeTweener.Kill();
                    tmpPlayerSizeChangeTweener =
                        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
                        , new Vector3(0.4f, 0.4f, 0.4f), tmpOutTime)
                        .SetEase(Ease.OutQuad)
                        .SetUpdate(true);

                    //■時間Out
                    DOTween.To(() => timeScale, (x) => timeScale = x
                    , 0f, tmpOutTime)
                    .SetUpdate(true)
                    .OnComplete(() => { isTmpStop = false; });
                    #endregion

                    yield return new WaitForSecondsRealtime(1);
                    #region ■事前掴み場所直接指定処理
                    isLInput = isRInput = true;

                    //掴む場所objをリソースから読み込んで直接指定
                    GameObject HandLRoot030_Thigh_LPosObj = Instantiate(Resources.Load
                        ("_PosObj/0260MotonoOokisa/HandLRoot030_Thigh_LPosObj") as GameObject
                        , GirlLThighTrs
                        , false);
                    AsinoboriHandGrap(
                        AN_Hand_L_RootTrs,
                        GirlLThighTrs,
                        HandLRoot030_Thigh_LPosObj.transform.position
                        );
                    AN_Hand_L_RootTrs.localEulerAngles = HandLRoot030_Thigh_LPosObj.transform.localEulerAngles;
                    //設置したので削除
                    Destroy(HandLRoot030_Thigh_LPosObj);

                    //掴む場所objをリソースから読み込んで直接指定
                    GameObject HandRRoot030_Thigh_LPosObj = Instantiate(Resources.Load
                        ("_PosObj/0260MotonoOokisa/HandRRoot030_Thigh_LPosObj") as GameObject
                        , GirlLThighTrs
                        , false);
                    AsinoboriHandGrap(
                        AN_Hand_R_RootTrs,
                        GirlLThighTrs,
                        HandRRoot030_Thigh_LPosObj.transform.position
                        );
                    AN_Hand_R_RootTrs.localEulerAngles = HandRRoot030_Thigh_LPosObj.transform.localEulerAngles;
                    //設置したので削除
                    Destroy(HandRRoot030_Thigh_LPosObj);


                    //リミットを調整 (そのままだと最長になってしまう？ 6.4とかだった)
                    AN_tmpRLimit.limit =
                    AN_tmpLLimit.limit = 1;

                    #endregion

                    //■スキンメッシュコリダーシステムスタート
                    StartCoroutine(ReloadSkinMeshColliderSystemIEnum());

                    //スキンメッシュ掴み用処理スタート
                    isAN_TobikakariSkinGrap = true;
                    LHandSkinGrapPoints.transform.SetParent(GirlLThighTrs);
                    AN_Hand_L_RootTrs.SetParent(LHandSkinGrapHitPoint.transform);



                    while (isTmpStop) { yield return null; }

                    HukidashiNovelDistanceChange(0.25f, 0);

                    NovelSetVis("E3090130");//やっと
                    pageCharVisTweener.SetUpdate(true);
                    while (isNovelSetVisIng) { yield return null; }
                    pageCharVisTweener.SetUpdate(false);


                    //LHandTargetのRoot（Pivot）を0位置に（HandRootと同じ位置にするため）
                    PlayerIKLHandTargetTrs.parent.DOLocalMove(Vector3.zero
                        , 0f)
                        .SetEase(Ease.InQuad)
                        .SetUpdate(true);

                    //白フラッシュ
                    FadeWhite(0.5f, 0f, true); yield return new WaitForSecondsRealtime(0.1f); FadeWhite(0, 0f);
                    SEPlay("soccer-ball1", 3f);

                    AsinoboriHandLeave(AN_Hand_R_RootTrs, AN_playerRHandJoint);

                    //■ジャンプ　ぶつかり移動
                    GameObject Player038Butsukari_JumpOutPosObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/Player038Butsukari_JumpOutPosObj") as GameObject;
                    tmpJumpTweener.Kill();
                    tmpJumpTweener =
                    CameraObjectsTrs.DOLocalMove(Player038Butsukari_JumpOutPosObj.transform.localPosition
                    , 0.1f)
                        .SetEase(Ease.OutQuad);

                    tmpInTime = 2f;
                    #region 2段階目 IN

                    //■縮小 In
                    tmpPlayerSizeChangeTweener.Kill();
                    tmpPlayerSizeChangeTweener =
                        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
                        , new Vector3(0.3f, 0.3f, 0.3f), tmpInTime)
                        .SetEase(Ease.InQuad)
                        .SetUpdate(true);

                    //■手位置3 In
                    GameObject AN_HandControl037_RotObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/AN_HandControl037_RotObj") as GameObject;
                    AN_HandControlObj.transform.DOLocalRotate(AN_HandControl037_RotObj.transform.localEulerAngles
                        , tmpInTime)
                        .SetEase(Ease.InQuad)
                        .SetUpdate(true);

                    //■時間In
                    DOTween.To(() => timeScale, (x) => timeScale = x
                    , 1f, tmpInTime)
                    .SetUpdate(true)
                    .OnComplete(() => { isTmpStop = true; });
                    #endregion

                    yield return new WaitForSeconds(1);
                    //■ジャンプ オフ
                    tmpJumpTweener.Kill();

                    while (isTmpStop == false) { yield return null; }

                    tmpOutTime = 2;
                    #region 3段階目Out
                    isTmpStop = true;

                    //■時間Out
                    DOTween.To(() => timeScale, (x) => timeScale = x
                    , 0f, tmpOutTime)
                    .SetUpdate(true)
                    .OnComplete(() => { isTmpStop = false; });
                    #endregion
                    HukidashiNovelDistanceChange(0.4f, 0);

                    NovelSetVis("E3090140");//ぶつかったのにはじかれた
                    pageCharVisTweener.SetUpdate(true);
                    while (isNovelSetVisIng) { yield return null; }
                    pageCharVisTweener.SetUpdate(false);

                    tmpInTime = 0.5f;

                    while (isTmpStop) { yield return null; }

                    #region 3段階目In（解放）
                    //■時間In
                    DOTween.To(() => timeScale, (x) => timeScale = x
                    , 1f, tmpInTime)
                    .OnComplete(() => { isTmpStop = true; });
                    #endregion
                    //■手位置　ぶつかり後位置
                    GameObject AN_HandControl038Butsukari_RotObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/AN_HandControl038Butsukari_RotObj") as GameObject;
                    AN_HandControlObj.transform.DOLocalRotate(AN_HandControl038Butsukari_RotObj.transform.localEulerAngles
                        , 5)
                        .SetEase(Ease.InQuad)
                        .SetUpdate(true);

                    //■プレイヤー"ダミー"ぶらさがり回転に
                    Player_DummyTrs.DOLocalRotate(new Vector3(0, 100, 0)
                        , 3)
                        .SetEase(Ease.InQuad)
                        .SetUpdate(true);
                    //ダミー左手リーチを最大に（手をANRootの位置に）
                    DOTween.To(() => PlayerFBBIK.solver.leftArmChain.reach, (x) => PlayerFBBIK.solver.leftArmChain.reach = x
                    , 1
                    , 10f)
                    .SetEase(Ease.InQuad)
                    .SetUpdate(true);

                    //縮小
                    tmpPlayerSizeChangeTweener.Kill();
                    yield return null;
                    tmpPlayerSizeChangeTweener =
                        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
                        , DB.playerScale_JougiDeHakariZero
                        , 20f)
                        .SetEase(Ease.OutQuad);

                    PPv2MemaiLittle(1f);
                    SEPlay("magic-attack-darkness1_long(-12)", 0.5f);


                    girlAnim.speed = 0.3f;

                    Debug.Log("ちえりアニメ監視スタート");
                    //ちえり右手腰に当てる時に右手IKオフ
                    StartCoroutine(GirlAnimReadSystem());
                    while (nowGirlAnimClipName != "立ちスマホ口元手開始原点") { yield return null; }
                    while (girlAnimNomTime <= 0.34f) { yield return null; }
                    Debug.Log("ちえりアニメ監視途中");

                    PPv2MemaiLittle(1f);
                    SEPlay("magic-attack-darkness1_long(-12)", 0.5f);

                    //ちえりのほかのコリダーオフ
                    FixedMoveChieriColliderFollderObj.SetActive(false);
                    //カメラのNear
                    VRCamera.nearClipPlane =
                    TPSCamera.nearClipPlane = 0.01f;

                    #region LHandRootのPivot（IKLHandの親）手が埋まりすぎるので、少し浮かし位置に

                    GameObject HandLRootPivot040_UkashiPosObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/HandLRootPivot040_UkashiPosObj") as GameObject;

                    PlayerIKLHandTargetTrs.parent.DOLocalMove(
                        HandLRootPivot040_UkashiPosObj.transform.localPosition
                        , 1.5f)
                        .SetEase(Ease.InQuad)
                        .SetUpdate(true);

                    PlayerIKLHandTargetTrs.parent.DOLocalRotate(
                        HandLRootPivot040_UkashiPosObj.transform.localEulerAngles
                        , 1.5f)
                        .SetEase(Ease.InQuad)
                        .SetUpdate(true);


                    #endregion

                    while (girlAnimNomTime <= 0.64f) { yield return null; }
                    isGirlAnimReadSystem = false;
                    Debug.Log("ちえりアニメ監視終了");

                    DOTweenToIKEfPos(IKRHandEf, 0, 1f);
                    DOTweenToIKEfRot(IKRHandEf, 0, 1f);

                    //■手位置4 In
                    GameObject AN_HandControl039_RotObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/AN_HandControl039_RotObj") as GameObject;
                    AN_HandControlObj.transform.DOLocalRotate(AN_HandControl039_RotObj.transform.localEulerAngles
                        , 10f)
                        .SetEase(Ease.InQuad)
                        .SetUpdate(true);




                    #endregion
                    //スキップOK
                    isSkipLock = false;
                    //まばたき戻し
                    isEyeBlinkAuto = true;

                    //WASD操作でもログ表示OK
                    isANWASDLogLockCancel = true;

                    //メニューロック解除
                    isMenuLock = false;

                    //風音つけ
                    tmpHeadWindnoiseSound.aSource.volume = 0.5f;
                    tmpLHitosasiSound.aSource.volume = 1;
                    tmpRHitosasiSound.aSource.volume = 0.4f;

                    #region びっくりしたー ～

                    StartCoroutine(GirlAnimReadSystem());
                    while (nowGirlAnimClipName != "立ちスマホ口元手開始原点") { yield return null; }//クリップネーム自体は逆再生ではない
                    while (girlAnimNomTime <= 0.78f) { yield return null; }
                    isGirlAnimReadSystem = false;

                    #region //右手腰当て固定（いらなかった）
                    //GirlPosToIKTargetPosRot();
                    //yield return null;
                    //DOTweenToIKEfPos(IKRHandEf, 1, 0);
                    //DOTweenToIKEfRot(IKRHandEf, 1, 0);
                    #endregion



                    Hukidashi("E3090010a010");//びっくりしたー
                    yield return new WaitForSeconds(1);

                    //くねくねする時に右腕動かさないようにマスクで右腕固定
                    ChieriMotion("立ちスマホ口元手終了後ポーズ原点", 1f, 8);

                    yield return KeyOrWait(3);

                    //前傾
                    DOTweenToLAIKSBody(LAIKHeadS, 0.47f, 10);

                    yield return new WaitForSeconds(5);

                    //くねくねする時に右腕動かさないようにマスクで右腕固定
                    ChieriMotion("立ちスマホ口元手終了後ポーズ原点", 1f, 8);


                    ChieriMotion("f_あはは・・2目開き", 0.1f, 2);
                    Hukidashi("E3090010a015");//そうだよね。
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                    Hukidashi("E3090010a017");//止めようとするよね
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    ChieriMotion("f_リラックス01", 0.2f, 2);
                    yield return new WaitForSeconds(1);
                    Hukidashi("E3090010a020");//ほら、諦めて
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    yield return new WaitForSeconds(1);
                    ChieriMotion("f_どうして謝るの？", 0.3f, 2);
                    yield return new WaitForSeconds(1);

                    Hukidashi("E3090010a030");//それともずっと
                    TereHohoAlphaChange(0.4f);
                    TereHoho();
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    //IK目スマホ見
                    ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
                    FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
                    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);



                    yield return new WaitForSeconds(1);
                    ChieriMotion("f_どうして逃げたの", 0.3f, 2);

                    //からだ少しおこし
                    DOTweenToLAIKSBody(LAIKHeadS, 0.15f, 4);
                    ChieriMotion("立ちスマホ口元手くねくね短原点", 2f, 0);

                    yield return new WaitForSeconds(1);


                    Hukidashi("E3090010a040");//どういうところかわかってるのかな
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    yield return new WaitForSeconds(1);

                    NovelSetVis("E3090150");//マコトは動けなかった。
                    while (isNovelSetVisIng) { yield return null; }

                    TereHoho(false);

                    ChieriMotion("f_あっ！（照）", 0.05f, 2);
                    yield return new WaitForSeconds(1);
                    //IKプレイヤー見一フレ処理
                    ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
                    FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                    DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

                    Hukidashi("E3090010a050");//凄く怖がってる？
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                    Hukidashi("E3090010a060");//ペットボトルより
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    //からだ前傾
                    DOTweenToLAIKSBody(LAIKHeadS, 0.47f, 3);
                    ChieriMotion("立ちスマホ口元手くねくね短原点", 2f, 0);
                    yield return new WaitForSeconds(4);

                    ChieriMotion("f_え？(軽驚)", 0.1f, 2);
                    Hukidashi("E3090010a070");//変なの　そんな所が恐いの？
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    yield return new WaitForSeconds(2);


                    ChieriMotion("f_あはは・・2目開き", 0.1f, 2);
                    Hukidashi("E3090010a080");//でもそっか
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                    Hukidashi("E3090010a090");//せっかく大きくなれたのに
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    ChieriMotion("f_あはは・・2", 0.01f, 2);
                    ChieriMotionDelay(1, "f_あはは・・2目開き", 0.1f, 2);//時間差表情戻し
                    Hukidashi("E3090010a100");//元に戻っちゃったもんね
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    #endregion


                    デバッグ用:
                    if (isDebugSkip)
                    {
                        #region デバッグ用再開設定

                        //ちえり
                        ChieriMotion("立ちスマホ口元手開始原点", 0, 0);
                        ChieriMotion("f_あはは・・2目開き", 0f, 2);

                        #region //右手腰当て固定 いらなかった
                        //yield return null;
                        //GirlPosToIKTargetPosRot();
                        //yield return null;
                        //DOTweenToIKEfPos(IKRHandEf, 1, 0);
                        //DOTweenToIKEfRot(IKRHandEf, 1, 0);
                        #endregion

                        //くねくねする時に右腕動かさないようにマスクで右腕固定
                        ChieriMotion("立ちスマホ口元手終了後ポーズ原点", 0f, 8);

                        //IKプレイヤー見一フレ処理
                        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
                        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

                        //IKプレイヤー見るヘッドのみ時間かけ
                        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0.1f);
                        LAIKHead.solver.clampWeightHead = 0.75f;

                        //からだ前傾
                        DOTweenToLAIKSBody(LAIKHeadS, 0.47f, 0);
                        ChieriMotion("立ちスマホ口元手くねくね短原点", 2f, 0);

                        girlAnim.speed = 0.3f;



                        //プレイヤー
                        nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;

                        #region ANシステム起動
                        //掴むのNGObjリスト
                        AN_GrapNGObjList.Add(RoomTrs.Find("Kabe").gameObject);
                        AN_GrapNGObjList.Add(RoomTrs.Find("Desk").gameObject);

                        ////トグル型に

                        //Inputロック
                        AN_isInputLock = true;

                        //イージー
                        AN_isInputToggleMode = false;
                        AN_isInputSwitchEasyMode = false;
                        AN_isInputSwitchHardMode = true;

                        //パワーモードオフ クライムモードオフ
                        AN_isGrapPowerMode = false;
                        AN_isClimbMode = false;


                        //飛び掛り演出専用設定
                        isAN_Tobikakari = true;

                        //■脚のぼりシステム コルーチン始動
                        StartCoroutine(AsinoboriSystem(1.2f));
                        ANGrapHandUIObj.SetActive(false);

                        //UIオフ
                        AN_isUIVis = false;
                        ANGrapHandUIObj.SetActive(false);


                        //プレイヤーダミー回転しない、手IKも出さない
                        isPlayerANRotate = false;

                        #endregion
                        yield return null;
                        //rigid監視スタート
                        StartCoroutine(RigidReadSystem());
                        #region ■事前掴み場所直接指定処理
                        isLInput = true;

                        //掴む場所objをリソースから読み込んで直接指定
                        GameObject HandLRoot030_Thigh_LPosObjTwo = Instantiate(Resources.Load
                            ("_PosObj/0260MotonoOokisa/HandLRoot030_Thigh_LPosObj") as GameObject
                            , GirlLThighTrs
                            , false);
                        AsinoboriHandGrap(
                            AN_Hand_L_RootTrs,
                            GirlLThighTrs,
                            HandLRoot030_Thigh_LPosObjTwo.transform.position
                            );
                        AN_Hand_L_RootTrs.localEulerAngles = HandLRoot030_Thigh_LPosObjTwo.transform.localEulerAngles;
                        //設置したので削除
                        Destroy(HandLRoot030_Thigh_LPosObjTwo);

                        //リミットを調整 (そのままだと最長になってしまう？ 6.4とかだった)
                        AN_tmpRLimit.limit =
                        AN_tmpLLimit.limit = 1;

                        #endregion

                        //内股掴まり位置
                        GameObject Player040_UchimataPosObj
                            = Resources.Load("_PosObj/0260MotonoOokisa/Player040_UchimataPosObj") as GameObject;
                        CameraObjectsTrs.localPosition = Player040_UchimataPosObj.transform.localPosition;
                        CameraObjectsTrs.localEulerAngles = Player040_UchimataPosObj.transform.localEulerAngles;
                        //CameraReset(Player040_UchimataPosObj.transform.localEulerAngles
                        //    , DB.cameraStandAnchorDefLocalPos);//立ちに

                        //■手位置　ぶつかり後位置
                        GameObject AN_HandControl038Butsukari_RotObjTwo
                            = Resources.Load("_PosObj/0260MotonoOokisa/AN_HandControl038Butsukari_RotObj") as GameObject;
                        AN_HandControlObj.transform.localEulerAngles = AN_HandControl038Butsukari_RotObjTwo.transform.localEulerAngles;


                        //スキンメッシュコリダーシステムスタート
                        StartCoroutine(ReloadSkinMeshColliderSystemIEnum());

                        //スキンメッシュ掴み用処理スタート
                        isAN_TobikakariSkinGrap = true;
                        LHandSkinGrapPoints.transform.SetParent(GirlLThighTrs);
                        AN_Hand_L_RootTrs.SetParent(LHandSkinGrapHitPoint.transform);

                        yield return null;
                        //ちえりのほかのコリダーオフ
                        FixedMoveChieriColliderFollderObj.SetActive(false);
                        //カメラのNear
                        VRCamera.nearClipPlane =
                        TPSCamera.nearClipPlane = 0.01f;

                        #endregion
                    }


                    #region スマホ見せて縮めて 更に縮める直前まで

                    //事前に（デフォルトは指埋まってるので）
                    ChieriMotion("背比べ左手スマホいじり", 1f, 6);

                    #region IK左手スマホ内股へ見せ（ThighLにペアレント）

                    IKLHandTargetTrs.SetParent(GirlLThighTrs);

                    GameObject IKLHand040_ThighLPare_SumahoUchimataMisePosObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/IKLHand040_ThighLPare_SumahoUchimataMisePosObj") as GameObject;
                    IKLHandTargetTrs.localPosition = IKLHand040_ThighLPare_SumahoUchimataMisePosObj.transform.localPosition;
                    IKLHandTargetTrs.localEulerAngles = IKLHand040_ThighLPare_SumahoUchimataMisePosObj.transform.localEulerAngles;
                    DOTweenToIKEfPos(IKLHandEf, 1, 4);
                    DOTweenToIKEfRot(IKLHandEf, 1, 4);
                    #endregion

                    ChieriMotion("f_眉高い笑顔", 0.3f, 2);
                    Hukidashi("E3090010a110");//ほら
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    Hukidashi("E3090010a120");//これが奪いたかったんだよね
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    yield return new WaitForSeconds(2);

                    #region IK左手スマホ内股へ見せ
                    GameObject IKLHand042_ThighLPare_SumahoUchimataChikadukePosObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/IKLHand042_ThighLPare_SumahoUchimataChikadukePosObj") as GameObject;
                    IKLHandTargetTrs.DOLocalMove(IKLHand042_ThighLPare_SumahoUchimataChikadukePosObj.transform.localPosition
                        , 6);
                    IKLHandTargetTrs.DOLocalRotate(IKLHand042_ThighLPare_SumahoUchimataChikadukePosObj.transform.localEulerAngles
                        , 6);
                    #endregion
                    yield return new WaitForSeconds(3);

                    ChieriMotion("f_リラックス02", 0.3f, 2);
                    Hukidashi("E3090010a130");//ほらほら、届くかもしれないよ？
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                    yield return new WaitForSeconds(1);

                    NovelSetVis("E3090160");//まだ恐怖の対象でなかったころ
                    while (isNovelSetVisIng) { yield return null; }

                    ChieriMotion("背比べ左手スマホいじり", 1f, 6);
                    yield return new WaitForSeconds(1);

                    PPv2MemaiLittle(1f);
                    SEPlay("magic-attack-darkness1_long(-12)", 0.5f);
                    //縮小
                    tmpPlayerSizeChangeTweener.Kill();
                    tmpPlayerSizeChangeTweener =
                        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
                        , DB.playerScale_PetbottleIreZero
                        , 15f)
                        .SetEase(Ease.InOutQuad);

                    //スピードも
                    DOTween.To(() => girlAnim.speed, (x) => girlAnim.speed = x
                    , 0.2f, 15f)
                    .SetEase(Ease.InOutQuad);

                    yield return new WaitForSeconds(2);

                    NovelSetVis("E3090170");//やめ・・・
                    while (isNovelSetVisIng) { yield return null; }

                    yield return new WaitForSeconds(2);

                    //IKオフ
                    DOTweenToIKEfPos(IKLHandEf, 0, 10);
                    DOTweenToIKEfRot(IKLHandEf, 0, 10);

                    yield return new WaitForSeconds(2);

                    ChieriMotion("f_眉高い笑顔少しジト目", 0.1f, 2);
                    Hukidashi("E3090010a140");//これで元通り
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    NovelSetVis("E3090180");//世界は倍
                    while (isNovelSetVisIng) { yield return null; }

                    yield return new WaitForSeconds(1);
                    ChieriMotion("f_む～", 0.4f, 2);
                    TereHohoAlphaChange(0.4f);
                    TereHoho();

                    yield return new WaitForSeconds(2);

                    Hukidashi("E3090010a150");//ずっとそこにいるつもり？
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    //IK目スマホ見
                    ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
                    FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
                    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);


                    //ChieriMotion("f_どうして逃げたの", 0.3f, 2);
                    yield return new WaitForSeconds(1);

                    Hukidashi("E3090010a160");//怖がってるから構わないけど
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    //IKプレイヤー見一フレ処理
                    ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
                    FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                    DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
                    ChieriMotion("f_ふーん・・", 0.3f, 2);

                    //からだ少しおこし
                    DOTweenToLAIKSBody(LAIKHeadS, 0.15f, 7);
                    ChieriMotion("立ちスマホ口元手くねくね短原点", 2f, 0);

                    yield return new WaitForSeconds(3);
                    Hukidashi("E3090010a170");//くすぐったいから縮めるね
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    #endregion

                    tmpHeadWindnoiseSound.pitchMax = 0.5f;
                    tmpHeadWindnoiseSound.pitchUpRateAdjustFloat = 2;

                    #region 再縮小からカメラ撮影まで
                    NovelSetVis("E3090190");//え、ま、まだちぢ・・

                    ChieriMotion("背比べ左手スマホいじり", 1f, 6);
                    yield return new WaitForSeconds(1);

                    PPv2MemaiLittle(1f);
                    SEPlay("magic-attack-darkness1_long(-12)", 0.5f);

                    //縮小
                    tmpPlayerSizeChangeTweener.Kill();
                    tmpPlayerSizeChangeTweener =
                        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
                        , new Vector3(0.005f, 0.005f, 0.005f)
                        , 20f)
                        .SetEase(Ease.InQuad);
                    //スピードも
                    DOTween.To(() => girlAnim.speed, (x) => girlAnim.speed = x
                    , 0.1f, 20f)
                    .SetEase(Ease.InQuad);


                    yield return new WaitForSeconds(10);
                    ChieriMotion("背比べ左手スマホいじり", 1f, 6);
                    PPv2MemaiLittle(1f);
                    SEPlay("magic-attack-darkness1_long(-12)", 0.5f);
                    yield return new WaitForSeconds(10);

                    while (isNovelSetVisIng) { yield return null; }
                    yield return new WaitForSeconds(1);


                    ChieriMotion("笑顔01口眉", 0.01f, 2);
                    ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.02f, 2);//時間差表情戻し
                    Hukidashi("E3090010a180");//これ以上小さくならないと思ってた？
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    //からだ少し倒し
                    DOTweenToLAIKSBody(LAIKHeadS, 0.47f, 10);
                    ChieriMotion("立ちスマホ口元手くねくね短原点", 2f, 0);

                    Hukidashi("E3090010a190");//今は1cm重さも感じなくなっちゃった
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    yield return new WaitForSeconds(3);
                    ChieriMotion("f_あ！ほら！口閉じ", 0.05f, 2);
                    Hukidashi("E3090010a195");//見てなかったらいないのと一緒
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    yield return new WaitForSeconds(1);

                    NovelSetVis("E3090200");//いやだ……
                    while (isNovelSetVisIng) { yield return null; }

                    yield return new WaitForSeconds(2);

                    ChieriMotion("笑顔01口眉", 0.01f, 2);
                    ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.02f, 2);//時間差表情戻し
                    Hukidashi("E3090010a200");//うんうん、怖がってるね
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                    yield return new WaitForSeconds(1);

                    ChieriMotion("f_公ってえっちなものばかり", 0.2f, 2);
                    Hukidashi("E3090010a204");//大丈夫、見なくなっても
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                    Hukidashi("E3090010a207");//こわがってれば　いるんだって思ってあげるね
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                    //からだ少し起こし
                    DOTweenToLAIKSBody(LAIKHeadS, 0f, 10);
                    ChieriMotion("立ちスマホ口元手くねくね短原点", 2f, 0);

                    yield return new WaitForSeconds(1);

                    //IK目スマホ見
                    ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
                    FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
                    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);


                    NovelSetVis("E3090210");//見えなくって……　エネルギーとして送られる
                    while (isNovelSetVisIng) { yield return null; }
                    yield return new WaitForSeconds(2);

                    Hukidashi("E3090010a210");//もっと怖くしてあげるとね
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                    Hukidashi("E3090010a220");//大きくする気なくなっちゃった
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                    NovelSetVis("E3090220");//あああ……
                    Hukidashi("E3090010a230");//実験が住んだからさっきは
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                    Hukidashi("E3090010a240");//飛び掛られたら
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);


                    Hukidashi("E3090010a250");//こわがってくれるなら
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                    NovelSetVis("E3090230");//あああ……
                    Hukidashi("E3090010a260");//マコトにはそうしていてもらおうかなって
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                    //からだ少し倒し
                    DOTweenToLAIKSBody(LAIKHeadS, 0.47f, 10);
                    ChieriMotion("立ちスマホ口元手くねくね短原点", 2f, 0);

                    yield return new WaitForSeconds(2);
                    //IKプレイヤー見一フレ処理
                    ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
                    FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                    DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

                    #region カメラ撮影
                    #region IK左手スマホ内股へ見せ bool付き
                    bool isTmpSumahoToutyaku = false;
                    GameObject IKLHand050_ThighLPare_SumahoUchimataCameraPosObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/IKLHand050_ThighLPare_SumahoUchimataCameraPosObj") as GameObject;
                    IKLHandTargetTrs.DOLocalMove(IKLHand050_ThighLPare_SumahoUchimataCameraPosObj.transform.localPosition
                        , 14);
                    IKLHandTargetTrs.DOLocalRotate(IKLHand050_ThighLPare_SumahoUchimataCameraPosObj.transform.localEulerAngles
                        , 14)
                        .OnComplete(() => { isTmpSumahoToutyaku = true; });
                    DOTweenToIKEfPos(IKLHandEf, 1, 10);
                    DOTweenToIKEfRot(IKLHandEf, 1, 10);
                    #endregion

                    #region スマホカメラ設定
                    ChieriSumahoObj.transform.Find("ChieriSmartPhoneCanvas/FrontCameraRenderTexture").gameObject.SetActive(true);
                    Status_SeeSizeObjClone.SetActive(false);

                    #endregion

                    yield return new WaitForSeconds(3);
                    Hukidashi("E3090010a270");//ふふ、ほら
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                    yield return new WaitForSeconds(2);
                    Hukidashi("E3090010a280");//最後の姿
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    while (isTmpSumahoToutyaku == false) { yield return null; }

                    yield return new WaitForSeconds(1);

                    #region スマホカメラシャッター処理
                    SEPlay(Other3DSEObj, "camera-shutter1", ChieriSumahoObj, 5);

                    //シャッター表現白フラッシュ
                    var tmpWhiteImage =
                        ChieriSumahoObj.transform.Find("ChieriSmartPhoneCanvas/FrontCameraRenderTexture/WhiteImage").GetComponent<Image>();
                    tmpWhiteImage.DOFade(1, 0).OnComplete(() =>
                    { tmpWhiteImage.DOFade(0, 1).SetEase(Ease.OutQuad); });

                    //カメラを止めて静止画に見せる
                    ChieriSumahoObj.transform.Find("ChieriSmartPhoneCanvas/FrontCameraRenderTexture/Camera").GetComponent<Camera>().enabled
                        = false;
                    #endregion

                    #endregion

                    yield return new WaitForSeconds(1);
                    DOTweenToIKEfPos(IKLHandEf, 0, 5);
                    DOTweenToIKEfRot(IKLHandEf, 0, 5);

                    //からだ
                    DOTweenToLAIKSBody(LAIKHeadS, 0f, 6);
                    ChieriMotion("立ちスマホ口元手くねくね短原点", 2f, 0);

                    //IK目スマホ見
                    ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
                    FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
                    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);

                    yield return new WaitForSeconds(3);

                    Hukidashi("E3090010a290");//はずかし～
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                    yield return new WaitForSeconds(4);

                    Hukidashi("E3090010a300");//泣いてたの？
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    //からだ
                    DOTweenToLAIKSBody(LAIKHeadS, 0.47f, 6);
                    ChieriMotion("立ちスマホ口元手くねくね短原点", 2f, 0);

                    //IKプレイヤー見一フレ処理
                    ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
                    FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                    DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);
                    yield return new WaitForSeconds(5);

                    ChieriMotion("つまんなそう", 0.1f, 2);
                    Hukidashi("E3090010a310");//泣くほど怖いんだ？
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    //からだ
                    DOTweenToLAIKSBody(LAIKHeadS, 0f, 6);
                    ChieriMotion("立ちスマホ口元手くねくね短原点", 2f, 0);

                    //IK目スマホ見
                    ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
                    FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
                    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);

                    yield return new WaitForSeconds(5);
                    Hukidashi("E3090010a320");//ツーショットだけど
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                    Hukidashi("E3090010a330");//最後くらい顔で撮りたかったね
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                    yield return new WaitForSeconds(1);

                    NovelSetVis("E3090240");//混乱　最後という言葉が
                    while (isNovelSetVisIng) { yield return null; }
                    yield return new WaitForSeconds(2);


                    #endregion

                    #region 再々縮小

                    PPv2MemaiLittle(1f);
                    SEPlay("magic-attack-darkness1_long(-12)", 0.5f);

                    //縮小
                    tmpPlayerSizeChangeTweener.Kill();
                    tmpPlayerSizeChangeTweener =
                        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
                        , new Vector3(0.001f, 0.001f, 0.001f)
                        , 20f)
                        .SetEase(Ease.InQuad);
                    //スピードも
                    DOTween.To(() => girlAnim.speed, (x) => girlAnim.speed = x
                    , 0.05f, 20f)
                    .SetEase(Ease.InQuad);

                    yield return new WaitForSeconds(1);
                    NovelSetVis("E3090250");//「あひ、ひぃ・・」


                    yield return new WaitForSeconds(9);
                    ChieriMotion("背比べ左手スマホいじり", 1f, 6);
                    PPv2MemaiLittle(1f);
                    SEPlay("magic-attack-darkness1_long(-12)", 0.5f);
                    yield return new WaitForSeconds(10);

                    while (isNovelSetVisIng) { yield return null; }

                    yield return KeyOrWait(0);
                    #endregion

                    #region 繊維に入って 時間感覚に気づくまで
                    NovelSetVis("E3090260");//もがくマコト
                    while (novelCurrentPageInt < 4) { yield return null; }
                    SEPlay("rustling-of-clothes3_フェードインアウト", 0.5f);

                    FadeBlack(1, 1);

                    while (isNovelSetVisIng) { yield return null; }
                    yield return new WaitForSeconds(2);
                    HukidashiNovelDistanceChange(0.65f, 0);

                    isANSystem = false;

                    #region 暗幕設定

                    //ちえり静止状態へ
                    ChieriMotion("立ちスマホ口元手開始原点", 0f, 0);
                    yield return null;
                    girlAnim.ForceStateNormalizedTime(1f);
                    yield return null;

                    //プレイヤー
                    CameraObjectsTrs.SetParent(GirlLThighTrs);
                    GameObject Player060_LThighPare_LastUchimataPosObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/Player060_LThighPare_LastUchimataPosObj") as GameObject;
                    CameraObjectsTrs.localPosition = Player060_LThighPare_LastUchimataPosObj.transform.localPosition;
                    CameraObjectsTrs.localEulerAngles = Player060_LThighPare_LastUchimataPosObj.transform.localEulerAngles;

                    CameraReset(Player060_LThighPare_LastUchimataPosObj.transform.localEulerAngles);

                    //プレイヤーダミー
                    isPlayerUniqueMotion = true;
                    PlayerMotion("_noData", 0f, 0);
                    yield return null;
                    GameObject PlayerDummy060_UchimataUmariPosObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/PlayerDummy060_UchimataUmariPosObj") as GameObject;
                    Player_DummyTrs.localPosition = PlayerDummy060_UchimataUmariPosObj.transform.localPosition;
                    Player_DummyTrs.localEulerAngles = PlayerDummy060_UchimataUmariPosObj.transform.localEulerAngles;




                    #endregion
                    tmpHeadWindnoiseSound.aSource.volume = 0;
                    tmpRHitosasiSound.aSource.volume = 0;
                    tmpLHitosasiSound.aSource.volume = 0;

                    Hukidashi("E3090010a340");//聞こえてるかな？
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                    Hukidashi("E3090010a350");//全部終わったら
                    yield return new WaitForSeconds(1);

                    NovelSetVis("E3090265");//もがくマコト
                    yield return KeyOrWait(3);

                    Hukidashi("E3090010a360");//戻してあげる
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                    Hukidashi("E3090010a370");//マコトにとっていつになるかわからないけど
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                    Hukidashi("E3090010a380");//それまでそこで
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                    Hukidashi("E3090010a390");//ばいばい
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);


                    //白フラッシュ
                    FadeWhite(0.2f, 0f, true); yield return new WaitForSecondsRealtime(0.1f); FadeWhite(0, 0f);
                    #region 縮小
                    PPv2MemaiLittle(1f);
                    SEPlay("magic-attack-darkness1_long(-12)", 0.5f);

                    //縮小
                    tmpPlayerSizeChangeTweener.Kill();
                    tmpPlayerSizeChangeTweener =
                        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
                        , new Vector3(0.00025f, 0.00025f, 0.00025f)
                        , 2f)
                        .SetEase(Ease.InQuad);
                    //スピードも
                    DOTween.To(() => girlAnim.speed, (x) => girlAnim.speed = x
                    , 0.05f, 2f)
                    .SetEase(Ease.InQuad);
                    #endregion

                    NovelSetVis("E3090270");//紐になり綱になり沈んでいく
                    while (isNovelSetVisIng) { yield return null; }

                    yield return new WaitForSeconds(5);

                    NovelSetVis("E3090280");//なかなか目が開けられない
                    while (isNovelSetVisIng) { yield return null; }

                    //埃止め
                    GameObject.Find("Particle_Dust")
                        .GetComponent<ParticleSystem>().Pause();

                    #region ■強制Dof
                    isForceDoF = true;

                    //強制の値にする
                    nowPPv1DepthOfFieldSetting.focusDistance
                        = 0.13f;
                    nowPPv1DepthOfFieldSetting.aperture
                        = 32f;
                    nowPPv1DepthOfFieldSetting.useCameraFov
                        = false;
                    nowPPv1DepthOfFieldSetting.focalLength
                        = 24f;
                    nowPPv1DepthOfFieldSetting.kernelSize
                        = DepthOfFieldModel.KernelSize.VeryLarge;

                    postPB.profile.depthOfField.settings = nowPPv1DepthOfFieldSetting;

                    postPB.profile.depthOfField.enabled = true;

                    #endregion

                    FadeBlack(0, 20);

                    yield return new WaitForSeconds(2);

                    NovelSetVis("E3090290");//う・・え・・・
                    while (isNovelSetVisIng) { yield return null; }

                    yield return new WaitForSeconds(1);
                    SEPlay("紐・ロープ・引っ張る・きしむ02_単発05");
                    yield return new WaitForSeconds(1);

                    NovelSetVis("E3090293");//うごかない・・！？
                    while (isNovelSetVisIng) { yield return null; }

                    SEPlay("紐・ロープ・引っ張る・きしむ02_単発05");

                    FadeBlack(1, 1);
                    yield return new WaitForSeconds(1);

                    NovelSetVis("E3090300");//いやだいやだ　疲れ果てるまで
                    while (isNovelSetVisIng) { yield return null; }

                    yield return new WaitForSeconds(3);

                    NovelSetVis("E3090310");//自覚し終えた後
                    while (isNovelSetVisIng) { yield return null; }
                    #endregion

                    #region 時間経過演出してラストまで
                    //ちえりマスクとIKはずし
                    ChieriMotion("_noData", 0f, 11);
                    ChieriMotion("_noData", 0f, 8);
                    ChieriMotion("_noData", 0f, 6);
                    DOTweenToLAIKSEyes(LAIKEyeS, 0, 0f);
                    DOTweenToLAIKSHead(LAIKHeadS, 0, 0f);
                    DOTweenToLAIKSHead(LAIKBodyS, 0, 0f);


                    #region 少し移動
                    girlAnim.speed = 0;
                    #region 伸び近づき歩き化
                    var tmpDefY = GirlTrs.localEulerAngles.y;
                    var tmpPos = GirlTrs.localPosition;

                    #region 伸び近づき原点へ偏移し、カーブも調整
                    GirlTrs.localPosition = tmpPos;//リセ

                    //偏移用回転
                    GirlTrs.DORotate(new Vector3(0, tmpDefY + 74.989f, 0)
                        , 0)
                        .SetEase(Ease.Linear);//前のモーションとの差異が74.989

                    yield return null;//1フレ待ち（これでスムーズ）

                    ChieriMotion("伸び近づき原点", 0, 0);
                    yield return null;
                    #endregion


                    #endregion
                    girlAnim.ForceStateNormalizedTime(0.08473138f);


                    #region プレイヤーとダミー
                    //プレイヤー
                    GameObject Player070_LThighPare_LastUchimataPosObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/Player070_LThighPare_LastUchimataPosObj") as GameObject;
                    CameraObjectsTrs.localPosition = Player070_LThighPare_LastUchimataPosObj.transform.localPosition;
                    CameraObjectsTrs.localEulerAngles = Player070_LThighPare_LastUchimataPosObj.transform.localEulerAngles;

                    CameraReset(Player070_LThighPare_LastUchimataPosObj.transform.localEulerAngles);

                    //プレイヤーダミー
                    GameObject PlayerDummy070_UchimataUmariPosObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/PlayerDummy070_UchimataUmariPosObj") as GameObject;
                    Player_DummyTrs.localPosition = PlayerDummy070_UchimataUmariPosObj.transform.localPosition;
                    Player_DummyTrs.localEulerAngles = PlayerDummy070_UchimataUmariPosObj.transform.localEulerAngles;
                    #endregion



                    #endregion

                    FadeBlack(0, 5);
                    yield return new WaitForSeconds(2);

                    NovelSetVis("E3090320");//次の絶望　時間が止まっている
                    while (isNovelSetVisIng) { yield return null; }

                    FadeBlack(1, 5);
                    yield return new WaitForSeconds(5);

                    NovelSetVis("E3090330");//一睡して目覚めた時を一日として数えることに決めた
                    while (isNovelSetVisIng) { yield return null; }


                    #region また少し移動
                    girlAnim.ForceStateNormalizedTime(0.2394464f);

                    #region プレイヤーとダミー
                    //プレイヤー
                    GameObject Player080_LThighPare_LastUchimataPosObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/Player080_LThighPare_LastUchimataPosObj") as GameObject;
                    CameraObjectsTrs.localPosition = Player080_LThighPare_LastUchimataPosObj.transform.localPosition;
                    CameraObjectsTrs.localEulerAngles = Player080_LThighPare_LastUchimataPosObj.transform.localEulerAngles;

                    CameraReset(Player080_LThighPare_LastUchimataPosObj.transform.localEulerAngles);

                    ////プレイヤーダミー
                    //GameObject PlayerDummy070_UchimataUmariPosObja
                    //    = Resources.Load("_PosObj/0260MotonoOokisa/PlayerDummy070_UchimataUmariPosObj") as GameObject;
                    //Player_DummyTrs.localPosition = PlayerDummy070_UchimataUmariPosObj.transform.localPosition;
                    //Player_DummyTrs.localEulerAngles = PlayerDummy070_UchimataUmariPosObj.transform.localEulerAngles;
                    #endregion

                    #endregion

                    yield return new WaitForSeconds(1);


                    FadeBlack(0, 2);
                    yield return new WaitForSeconds(1);
                    NovelSetVis("E3090340");//三日
                    while (isNovelSetVisIng) { yield return null; }
                    //yield return KeyOrWait(1);

                    FadeBlack(1, 2);
                    yield return new WaitForSeconds(3);

                    #region またまた少し移動
                    girlAnim.ForceStateNormalizedTime(0.3693261f);

                    //ちえり2週間後位置
                    GameObject Chieri090_2WeekPosObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/Chieri090_2WeekPosObj") as GameObject;
                    GirlTrs.localPosition = Chieri090_2WeekPosObj.transform.localPosition;
                    GirlTrs.localEulerAngles = Chieri090_2WeekPosObj.transform.localEulerAngles;


                    #region プレイヤーとダミー
                    //プレイヤー
                    GameObject Player090_LThighPare_LastUchimataPosObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/Player090_LThighPare_LastUchimataPosObj") as GameObject;
                    CameraObjectsTrs.localPosition = Player090_LThighPare_LastUchimataPosObj.transform.localPosition;
                    CameraObjectsTrs.localEulerAngles = Player090_LThighPare_LastUchimataPosObj.transform.localEulerAngles;

                    CameraReset(Player090_LThighPare_LastUchimataPosObj.transform.localEulerAngles);

                    ////プレイヤーダミー
                    //GameObject PlayerDummy070_UchimataUmariPosObja
                    //    = Resources.Load("_PosObj/0260MotonoOokisa/PlayerDummy070_UchimataUmariPosObj") as GameObject;
                    //Player_DummyTrs.localPosition = PlayerDummy070_UchimataUmariPosObj.transform.localPosition;
                    //Player_DummyTrs.localEulerAngles = PlayerDummy070_UchimataUmariPosObj.transform.localEulerAngles;
                    #endregion

                    #endregion


                    FadeBlack(0, 2);
                    yield return new WaitForSeconds(1);
                    NovelSetVis("E3090350");//2週間
                    while (isNovelSetVisIng) { yield return null; }
                    //yield return KeyOrWait(1);

                    FadeBlack(1, 2);
                    yield return new WaitForSeconds(2);



                    #region 最後の少し移動
                    ChieriMotion("隣に座り宿題手伝い開始原点", 0, 0);
                    yield return null;

                    girlAnim.ForceStateNormalizedTime(0.2509458f);

                    //ちえり最後位置
                    GameObject Chieri100_LastPosObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/Chieri100_LastPosObj") as GameObject;
                    GirlTrs.localPosition = Chieri100_LastPosObj.transform.localPosition;
                    GirlTrs.localEulerAngles = Chieri100_LastPosObj.transform.localEulerAngles;


                    #region プレイヤーとダミー
                    //プレイヤー
                    GameObject Player100_LThighPare_LastUchimataPosObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/Player100_LThighPare_LastUchimataPosObj") as GameObject;
                    CameraObjectsTrs.localPosition = Player100_LThighPare_LastUchimataPosObj.transform.localPosition;
                    CameraObjectsTrs.localEulerAngles = Player100_LThighPare_LastUchimataPosObj.transform.localEulerAngles;

                    CameraReset(Player100_LThighPare_LastUchimataPosObj.transform.localEulerAngles);

                    ////プレイヤーダミー
                    //GameObject PlayerDummy070_UchimataUmariPosObja
                    //    = Resources.Load("_PosObj/0260MotonoOokisa/PlayerDummy070_UchimataUmariPosObj") as GameObject;
                    //Player_DummyTrs.localPosition = PlayerDummy070_UchimataUmariPosObj.transform.localPosition;
                    //Player_DummyTrs.localEulerAngles = PlayerDummy070_UchimataUmariPosObj.transform.localEulerAngles;
                    #endregion

                    #endregion

                    //おっぱい揺れ見せないために貯め
                    yield return new WaitForSeconds(2);

                    NovelSetVis("E3090360");//物を食べずとも
                    while (novelCurrentPageInt < 2) { yield return null; }

                    FadeBlack(0, 2);
                    yield return new WaitForSeconds(1);
                    while (isNovelSetVisIng) { yield return null; }
                    //yield return KeyOrWait(1);

                    #endregion

                    yield return new WaitForSeconds(2);
                    //メニュー強制開き
                    StartCoroutine(MenuSystemIEnum(true, false, true));
                    //進まない。
                    while (true) { yield return null; }


                    #region デバッグで歩き調整してたときのもの

                    while (true)
                    {
                        if (Input.GetKeyDown(KeyCode.F))
                        {
                            #region //伸び近づき続き再生

                            #region 伸び近づき原点へ偏移し、カーブも調整

                            girlAnim.speed = 0.3f;

                            //■カーブ調整
                            //回転まで待機
                            StartCoroutine(GirlAnimReadSystem());
                            while (nowGirlAnimClipName != "伸び近づき原点") { yield return null; }
                            while (girlAnimNomTime <= 0.33f) { yield return null; }
                            isGirlAnimReadSystem = false;
                            //カーブ調整用回転
                            GirlTrs.DOLocalRotate(
                                new Vector3(GirlTrs.localEulerAngles.x
                                , GirlTrs.localEulerAngles.y + 40
                                , GirlTrs.localEulerAngles.z)
                                , 2);
                            #endregion

                            SEPlay("UI_pin");
                            yield return KeyOrWait(3);

                            ChieriMotion("隣に座り宿題手伝い開始原点", 1, 0);


                            #endregion
                            #region //伸び近づき歩きテスト
                            //var tmpDefY = GirlTrs.localEulerAngles.y;
                            //var tmpPos = GirlTrs.localPosition;
                            //while (true)
                            //{
                            //    if (Input.GetKeyDown(KeyCode.F))
                            //    {
                            //        DOTweenToLAIKSBody(LAIKHeadS, 0, 3);
                            //        #region 伸び近づき原点へ偏移し、カーブも調整
                            //        GirlTrs.localPosition = tmpPos;//リセ

                            //        //偏移用回転
                            //        GirlTrs.DORotate(new Vector3(0, tmpDefY + 74.989f, 0)
                            //            , 1 / girlAnim.speed)
                            //            .SetEase(Ease.Linear);//前のモーションとの差異が74.989

                            //        yield return null;//1フレ待ち（これでスムーズ）

                            //        ChieriMotion("伸び近づき原点", 1, 0);


                            //        //■カーブ調整
                            //        //回転まで待機
                            //        StartCoroutine(GirlAnimReadSystem());
                            //        while (nowGirlAnimClipName != "伸び近づき原点") { yield return null; }
                            //        while (girlAnimNomTime <= 0.33f) { yield return null; }
                            //        isGirlAnimReadSystem = false;
                            //        //カーブ調整用回転
                            //        GirlTrs.DOLocalRotate(
                            //            new Vector3(GirlTrs.localEulerAngles.x
                            //            , GirlTrs.localEulerAngles.y + 40
                            //            , GirlTrs.localEulerAngles.z)
                            //            , 2);
                            //        #endregion

                            //        SEPlay("UI_pin");
                            //        yield return KeyOrWait(3);

                            //        ChieriMotion("隣に座り宿題手伝い開始原点", 1, 0);


                            //    }
                            //    if (Input.GetKeyDown(KeyCode.G))
                            //    {
                            //        CameraObjectsTrs.SetParent(GirlLThighTrs);

                            //        GirlTrs.localPosition = tmpPos;
                            //        GirlTrs.localEulerAngles = new Vector3(0, tmpDefY, 0);//前のモーションとの差異が74.989
                            //        ChieriMotion("立ちスマホ口元手終了後ポーズ原点", 0, 0);
                            //    }

                            //    yield return null;
                            //}
                            #endregion

                        }

                        if (Input.GetKeyDown(KeyCode.G))
                        {

                            ChieriMotion("立ちスマホ口元手終了後ポーズ原点", 0, 0);
                        }

                        yield return null;
                    }
                    #endregion







                }
                break;

            case 1://選択肢b　街へ出る
                {
                    NovelSetVis("E3090010");//・・・
                    while (isNovelSetVisIng) { yield return null; }
                    FadeBlack(1, 1);
                    yield return new WaitForSeconds(2);

                    #region 暗幕設定
                    //プレイヤー ドア前見送られ位置
                    GameObject Player025_DoorOpenPosObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/Player025_DoorOpenPosObj") as GameObject;
                    CameraObjectsTrs.localPosition = Player025_DoorOpenPosObj.transform.localPosition;
                    CameraObjectsTrs.localEulerAngles = Player025_DoorOpenPosObj.transform.localEulerAngles;
                    CameraReset(Player025_DoorOpenPosObj.transform.localEulerAngles
                        , DB.cameraStandAnchorDefLocalPos);//立ちに

                    #endregion

                    NovelSetVis("E3090015");//どうすればいいのかわからないままドア
                    while (isNovelSetVisIng) { yield return null; }

                    FadeBlack(0, 1);
                    yield return new WaitForSeconds(2);


                    doorAnim.CrossFadeInFixedTime("ドア開き大きく", 0f, 0);

                    yield return new WaitForSeconds(2);

                    NovelSetVis("E3090020");//じゃあまた・・・
                    while (isNovelSetVisIng) { yield return null; }


                    ChieriMotion("笑顔01口眉", 0.05f, 2);
                    ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                    Hukidashi("E3090010b010");//うんまたね
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    #region シンプル移動point開始
                    //移動ポイントObj本体
                    GameObject tmpMovePointObj
                        = Instantiate(ResourceFiles.KO_SimplePointObj
                        , GameObjectsTrs);
                    //システム終了時削除するようにリストに入れ
                    KO_SimpleKakurePosObjsList.Add(tmpMovePointObj);

                    //移動ポイントObjの位置大きさ
                    GameObject SimpleMovePoint020_DoorOutPosObj
                        = Resources.Load("_PosObj/0260MotonoOokisa/SimpleMovePoint020_DoorOutPosObj") as GameObject;
                    tmpMovePointObj.transform.localPosition = SimpleMovePoint020_DoorOutPosObj.transform.localPosition;
                    tmpMovePointObj.transform.localEulerAngles = SimpleMovePoint020_DoorOutPosObj.transform.localEulerAngles;
                    tmpMovePointObj.transform.localScale = SimpleMovePoint020_DoorOutPosObj.transform.localScale;

                    //シンプル移動システム開始
                    StartCoroutine(KakureOniSimpleSystemLoad());
                    //ポイント出現 演出なし
                    KO_NewPosPointObjVis(tmpMovePointObj, 0, false);

                    //歩きスピードにしてモーションも歩きに
                    playerMoveSpeed = 1;
                    KO_AsiotoTimeCountMaxFloat = 0.7f;
                    isKO_PlayerWalk = true;


                    KO_isMovePosLock = true;


                    #endregion


                    KO_isMovePosLock = false;


                    //到着待ち
                    while (isKO_SimplePointObj_Enter == false) { yield return null; }
                    isKO_SimplePointObj_Enter = false;//移動ポイントEnterフラグ戻し
                                                      //終了（ポイント削除命令も自動で行われる）
                    isKOSystem = false;

                    FadeBlack(1, 1);
                    yield return new WaitForSeconds(1.5f);
                    SEPlay("DoorClose", 0.5f);
                    KankyouBGMVolumer(0f, 0.5f);

                    yield return new WaitForSeconds(2f);


                    NovelSetVis("E3090030");//走り出した

                    #region 足音

                    //StartCoroutine(ActionLoopSystemCor(() =>
                    //{ SEPlay(UISEObj, KO_PlayerAsioto_DefList[UnityEngine.Random.Range(0, KO_PlayerAsioto_DefList.Count)], 0.3f); }
                    //, 0.3f, 5));



                    SEPlay(UISEObj, KO_PlayerAsioto_DefList[Random.Range(0, KO_PlayerAsioto_DefList.Count)], 0.3f);
                    yield return new WaitForSeconds(0.3f);
                    SEPlay(UISEObj, KO_PlayerAsioto_DefList[Random.Range(0, KO_PlayerAsioto_DefList.Count)], 0.3f);
                    yield return new WaitForSeconds(0.3f);
                    SEPlay(UISEObj, KO_PlayerAsioto_DefList[Random.Range(0, KO_PlayerAsioto_DefList.Count)], 0.3f);
                    yield return new WaitForSeconds(0.3f);
                    SEPlay(UISEObj, KO_PlayerAsioto_DefList[Random.Range(0, KO_PlayerAsioto_DefList.Count)], 0.3f);
                    yield return new WaitForSeconds(0.3f);
                    SEPlay(UISEObj, KO_PlayerAsioto_DefList[Random.Range(0, KO_PlayerAsioto_DefList.Count)], 0.25f);
                    yield return new WaitForSeconds(0.3f);
                    SEPlay(UISEObj, KO_PlayerAsioto_DefList[Random.Range(0, KO_PlayerAsioto_DefList.Count)], 0.2f);
                    yield return new WaitForSeconds(0.3f);
                    SEPlay(UISEObj, KO_PlayerAsioto_DefList[Random.Range(0, KO_PlayerAsioto_DefList.Count)], 0.15f);
                    yield return new WaitForSeconds(0.3f);
                    SEPlay(UISEObj, KO_PlayerAsioto_DefList[Random.Range(0, KO_PlayerAsioto_DefList.Count)], 0.1f);
                    yield return new WaitForSeconds(0.3f);
                    SEPlay(UISEObj, KO_PlayerAsioto_DefList[Random.Range(0, KO_PlayerAsioto_DefList.Count)], 0.05f);
                    yield return new WaitForSeconds(0.3f);
                    SEPlay(UISEObj, KO_PlayerAsioto_DefList[Random.Range(0, KO_PlayerAsioto_DefList.Count)], 0.01f);
                    yield return new WaitForSeconds(0.3f);


                    #endregion

                    while (isNovelSetVisIng) { yield return null; }

                    yield return new WaitForSeconds(1);

                    EventMove("街へ行く", true, true);
                }
                break;
        }
        #endregion



        while (true) { yield return null; }

        FadeBlack(1, 1);
        yield return new WaitForSeconds(1);

        EventMove("街へ移動", true, true);



        #region //脚登りする予定だったときのもの
        //AN_isGrapPowerMode = true;
        //AN_isInputToggleMode = true;

        ////■脚のぼりシステム コルーチン始動
        //StartCoroutine(AsinoboriSystem());
        ////rigid監視スタート
        //yield return null;//Rigidbody付与待ち
        //StartCoroutine(RigidReadSystem());

        ////伏せに
        //AN_PlayerHuseSphereCollider.enabled = true;
        //AN_PlayerNormalCapsuleCollider.enabled = false;


        //SEPlay(UISEObj, "UI_pin");
        ////デバッグ
        //Debug.Log(DB.nowEventNum + "終了");
        //while (true)
        //{
        //    if (Input.GetKeyDown(KeyCode.X))
        //    { ChieriMotion("ATL椅子脚組みやめ直後ポーズ", 0.5f, 0); }
        //    if (Input.GetKeyDown(KeyCode.V))
        //    { ChieriMotion("ATL椅子脚組み1開始", 0.5f, 0); }
        //    if (Input.GetKeyDown(KeyCode.B))
        //    { ChieriMotion("ATL椅子脚組み1→2", 0.5f, 0); }
        //    if (Input.GetKeyDown(KeyCode.N))
        //    { ChieriMotion("ATL椅子脚組み2→3", 0.5f, 0); }
        //    if (Input.GetKeyDown(KeyCode.M))
        //    { ChieriMotion("ATL椅子脚組み3→脚組みやめ直後ポーズ", 0.5f, 0); }
        //    if (Input.GetKeyDown(KeyCode.F))
        //    { ChieriMotion("ATL椅子前かがみ", 0.5f, 0); }
        //    if (Input.GetKeyDown(KeyCode.G))
        //    { ChieriMotion("ATL椅子前かがみ→ちょいかがみ", 0.5f, 0); }
        //    if (Input.GetKeyDown(KeyCode.H))
        //    { ChieriMotion("ATL椅子深く座りなおし", 0.5f, 0); }
        //    if (Input.GetKeyDown(KeyCode.J))
        //    { ChieriMotion("ATL椅子左足出し", 0.5f, 0); }

        //    if (Input.GetKeyDown(KeyCode.T))
        //    {
        //        CameraObjectsTrs.localPosition = Player_02_ZibetaRensyuu2PosObj.transform.localPosition;
        //        CameraObjectsTrs.localEulerAngles = Player_02_ZibetaRensyuu2PosObj.transform.localEulerAngles;
        //    }

        //    if (Input.GetKeyDown(KeyCode.Y))
        //    {
        //        if (AN_PlayerHuseSphereCollider.enabled == true)
        //        {
        //            AN_PlayerHuseSphereCollider.enabled = false;
        //            AN_PlayerNormalCapsuleCollider.enabled = true;
        //        }
        //        else if (AN_PlayerNormalCapsuleCollider.enabled == true)
        //        {
        //            AN_PlayerHuseSphereCollider.enabled = true;
        //            AN_PlayerNormalCapsuleCollider.enabled = false;
        //        }

        //    }
        //    if (Input.GetKeyDown(KeyCode.Comma))
        //    {
        //        //縮小
        //        FadeBlack(0.5f, 1f, false, Ease.InOutElastic, false);
        //        SEPlay("magic-attack-darkness1", 0.3f);
        //        yield return new WaitForSeconds(0.5f);
        //        SEPlay("magic-gravity2", 0.3f);

        //        Vector3 tmpScale = nowPlayerLocalScale / 1.5f;
        //        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x, tmpScale, 3f);

        //        yield return new WaitForSeconds(1f);

        //        FadeBlack(0f, 2f, false, Ease.OutQuad, false);

        //    }
        //    if (Input.GetKeyDown(KeyCode.Period))
        //    {
        //        //拡大
        //        FadeBlack(0.5f, 1f, false, Ease.InOutElastic, false);
        //        SEPlay("magic-attack-darkness1", 0.3f);
        //        yield return new WaitForSeconds(0.5f);
        //        SEPlay("magic-gravity2", 0.3f);

        //        Vector3 tmpScale = nowPlayerLocalScale * 1.5f;
        //        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x, tmpScale, 3f);

        //        yield return new WaitForSeconds(1f);

        //        FadeBlack(0f, 2f, false, Ease.OutQuad, false);

        //    }


        //    if (DB.isDebugMode)
        //    {
        //        if ((Input.GetAxis(DB.inputDict["移動ポイント前進後退アナログ"]) > 0))
        //        {
        //            //拡大
        //            FadeBlack(0.5f, 1f, false, Ease.InOutElastic, false);
        //            SEPlay("magic-attack-darkness1", 0.3f);
        //            yield return new WaitForSeconds(0.5f);
        //            SEPlay("magic-gravity2", 0.3f);

        //            Vector3 tmpScale = nowPlayerLocalScale * 1.5f;
        //            DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x, tmpScale, 3f);

        //            yield return new WaitForSeconds(1f);

        //            FadeBlack(0f, 2f, false, Ease.OutQuad, false);

        //        }
        //        if (Input.GetAxis(DB.inputDict["移動ポイント前進後退アナログ"]) < 0)
        //        {
        //            //縮小
        //            FadeBlack(0.5f, 1f, false, Ease.InOutElastic, false);
        //            SEPlay("magic-attack-darkness1", 0.3f);
        //            yield return new WaitForSeconds(0.5f);
        //            SEPlay("magic-gravity2", 0.3f);

        //            Vector3 tmpScale = nowPlayerLocalScale / 1.5f;
        //            DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x, tmpScale, 3f);

        //            yield return new WaitForSeconds(1f);

        //            FadeBlack(0f, 2f, false, Ease.OutQuad, false);

        //        }
        //    }
        //    #endregion

        //    yield return null;

        //};

        #endregion


        yield break;
    }

    IEnumerator E4000UT()//街へ行く
    {
        if (debugEventMoveFlag == true)
        {
        }
        EventReset();
        yield return new WaitForSeconds(0.1f);

        //■■■シーンロード用暗幕かかってること前提
        //とりあえずデバッグのため普通の暗幕かけ
        FadeBlack(1, 0);

        FadeWhite(1, 1, true);
        yield return new WaitForSeconds(1);

        //暗幕はずし（白幕になってるはず）
        FadeBlack(0, 0);

        yield return null;

        #region 白幕設定

        //プレイヤー大きさ
        nowPlayerLocalScale = DB.playerScale_City01;
        //プレイヤー位置
        GameObject Player01_DouroPosObj
            = Resources.Load("_PosObj/0510YokokuCity01Walk/Player01_DouroPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player01_DouroPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player01_DouroPosObj.transform.localEulerAngles;

        //カメラリセット、立ち
        CameraReset(Player01_DouroPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos
            , true
            , Vector3.zero//倒れのアンカーリセット
            , false
            , true);

        #region 智恵理

        GirlMeshTrs.gameObject.SetActive(false);

        //位置
        GameObject Chieri00_StartPosObj
            = Resources.Load("_PosObj/0510YokokuCity01Walk/Chieri00_StartPosObj") as GameObject;
        GirlTrs.localPosition = Chieri00_StartPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri00_StartPosObj.transform.localEulerAngles;

        //#region SoundObj左足に付与
        ////WindnoiseSoundObj付与
        //GameObject LFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
        //    , GirlLFootTrs);
        //DB.evMoveDelObjList.Add(LFootWindnoiseSoundObj);
        //LFootWindnoiseSoundObj.name = nameof(LFootWindnoiseSoundObj);
        //LFootWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        ////設定
        //WindnoiseSound tmpLFootWindnoiseSound = LFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        //tmpLFootWindnoiseSound.aSource.maxDistance = 180;
        //tmpLFootWindnoiseSound.pitchMax = 1f;
        //tmpLFootWindnoiseSound.pitchUpRateAdjustFloat = 2;
        //tmpLFootWindnoiseSound.pitchDownRateAdjustFloat = 100;

        //tmpLFootWindnoiseSound.aSource.volume = 0f;
        //#endregion
        //#region SoundObj右足に付与
        ////WindnoiseSoundObj付与
        //GameObject RFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
        //    , GirlRFootTrs);
        //DB.evMoveDelObjList.Add(RFootWindnoiseSoundObj);
        //RFootWindnoiseSoundObj.name = nameof(RFootWindnoiseSoundObj);
        //RFootWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        ////設定
        //WindnoiseSound tmpRFootWindnoiseSound = RFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        //tmpRFootWindnoiseSound.aSource.maxDistance = 180;
        //tmpRFootWindnoiseSound.pitchMax = 1f;
        //tmpRFootWindnoiseSound.pitchUpRateAdjustFloat = 2;
        //tmpRFootWindnoiseSound.pitchDownRateAdjustFloat = 100;

        //tmpRFootWindnoiseSound.aSource.volume = 0f;
        //#endregion

        //GirlTrs.GetComponent<ChieriFootStepSpawn>().isFootStepObj = true;
        //GirlTrs.GetComponent<ChieriFootStepSpawn>().isFootStepDecal = true;

        ////足Volume
        //tmpRFootWindnoiseSound.aSource.DOFade(0.4f, 1);
        //tmpLFootWindnoiseSound.aSource.DOFade(0.4f, 1);

        #endregion

        #region Room Soto Particle_Dust Lightオフ
        RoomTrs.gameObject.SetActive(false);
        SotoTrs.gameObject.SetActive(false);
        Particle_DustTrs.gameObject.SetActive(false);
        LightFolder.gameObject.SetActive(false);
        #endregion


        ////もし都市でかくれおに移動をするならシステム起動後に0.6に
        //KO_CharacterController.center = new Vector3(0, 0.6f, 0);//Geo00（都市床）に置く時は0.6fに
        #endregion

        //既にCity読み込み済みなら
        if (GameObjects_City != null)
        {
            //なにもしない（ここで読み込み済みは今の所有り得ない）
        }
        else //ないならシーンとPrefab読み込み
        {
            #region City用Fogシーンを読み込み

            Debug.Log("□Cityx100Fogシーンをロード開始");
            yield return null;

            #region シーン読み込み

            UnityEngine.SceneManagement.SceneManager.LoadSceneAsync("Cityx100Fog", UnityEngine.SceneManagement.LoadSceneMode.Additive);

            //FogVolume出てくるまで待機
            while (GameObject.Find("CitySKy/Fog Volume Data") == null)
            {
                Debug.Log("Cityx100Fogシーンロード中");
                yield return null;
            }


            //カメラ削除
            if (GameObject.Find("CameraAll_Cityx100") != null) { Destroy(GameObject.Find("CameraAll_Cityx100")); }

            //FogVolumeに割り当て
            GameObject.Find("CitySKy/Fog Volume Data").GetComponent<FogVolumeData>()
                .GameCamera = VRCamera;

            #endregion
            //■GameObjects_Cityを取得（CityのPrefabを入れる入れ物）
            if (GameObject.Find("GameObjects_City"))
            { GameObjects_City = GameObject.Find("GameObjects_City"); }
            else
            { Debug.Log("■GameObjects_Cityがオフまたはない？"); }


            Debug.Log("■Cityx100Fogシーンロード終了");

            #endregion

            #region CityのPrefab設置
            GameObject City_ALL
                = Instantiate(Resources.Load("Main/City_Prefab/City_ALL") as GameObject
                , GameObjects_City.transform
                , false);
            City_ALL.name = Resources.Load("Main/City_Prefab/City_ALL").name;

            GameObject City_Expansion
                = Instantiate(Resources.Load("Main/City_Prefab/City_Expansion") as GameObject
                , GameObjects_City.transform
                , false);
            City_Expansion.name = Resources.Load("Main/City_Prefab/City_Expansion").name;

            #endregion

            //街へ行くシーンではライトはオンのまま

        }


        #region 環境音（時計 エアコン 町の環境音）
        //環境音（セミのみあげて、エアコンと時計を鳴らさない）
        KankyouBGMVolumer(0.5f, 1f, semiSE.audioSource);

        //街環境音(これに環境・犬・事故・悲鳴のAudioSourceが入ってる)
        GameObject SEObjs_YokokuCity01
            = Instantiate(Resources.Load("_PosObj/0510YokokuCity01Walk/SEObjs_YokokuCity01") as GameObject
            , GameObjectsTrs
            , false);

        //専用環境音フェードイン
        SEObjs_YokokuCity01.transform.Find("KankyouSEObj").GetComponent<AudioSource>().volume = 0;
        SEObjs_YokokuCity01.transform.Find("KankyouSEObj").GetComponent<AudioSource>().DOFade(0.05f, 1f);

        //事故　犬　悲鳴消し
        Destroy(SEObjs_YokokuCity01.transform.Find("Inu3DSEObj").gameObject);
        Destroy(SEObjs_YokokuCity01.transform.Find("Ziko3DSEObj").gameObject);
        Destroy(SEObjs_YokokuCity01.transform.Find("Himei003DSEObj").gameObject);

        #endregion


        yield return new WaitForSeconds(1);
        FadeWhite(0, 1, true);

        #region PD再生

        //Prefabにして取り出し（TimelineAssetをスクリプトのみで読み出して再生が難しかったので）
        GameObject CityIN_60_TimelineObj
            = Instantiate(Resources.Load("Main/Timeline/CityIN_60_TimelineObj") as GameObject);
        CityIN_60_TimelineObj.name = nameof(CityIN_60_TimelineObj);

        PlayableDirector CityIN_60_TimelinePD
            = CityIN_60_TimelineObj.GetComponent<PlayableDirector>();

        //Stoppedで終了検知（Stoppedは、多分ストップ時に行うアクションを追加できるもの。 引数にPD指定必要。）
        bool isPDStopped = false;

        CityIN_60_TimelinePD.stopped += (PlayableDirector aDirector) =>
        { isPDStopped = true; };//終了したらtrue

        #endregion

        CityIN_60_TimelinePD.Play();

        while (isPDStopped == false) { yield return null; }

        //環境音フェードアウト（セミのみ）
        KankyouBGMVolumer(0f, 3f, semiSE.audioSource);

        //専用環境音フェードアウト
        SEObjs_YokokuCity01.transform.Find("KankyouSEObj").GetComponent<AudioSource>().DOFade(0, 3f);

        //白幕
        FadeWhite(1, 2);
        yield return new WaitForSeconds(2);

        EventMove("転送都市1");

        yield break;
    }
    GameObject GameObjects_City = null;//都市Objの入れ物（Fogシーンに入っている）（これの取得をすることで、既に都市読み込まれてるかのifをとる）
    IEnumerator E4010UT()//転送都市1
    {
        if (debugEventMoveFlag == true)
        {
        }
        EventReset();

        #region FogシーンとCityPrefab設置（設置済みなら設定のみ）
        //既にCity読み込み済みなら
        if (GameObjects_City != null)
        {
            //オフになっているROOMその他（ライト含む）をONにする
            RoomTrs.gameObject.SetActive(true);
            SotoTrs.gameObject.SetActive(true);
            Particle_DustTrs.gameObject.SetActive(true);
            LightFolder.gameObject.SetActive(true);

            //City_Expansionあれば削除
            if (GameObjects_City.transform.Find("City_Expansion") != null)
            { Destroy(GameObjects_City.transform.Find("City_Expansion").gameObject); }

            //ライトあればオフ
            if (GameObjects_City.transform.Find("City_Light") != null)
            { GameObjects_City.transform.Find("City_Light").gameObject.SetActive(false); }
        }
        else //ないならシーンとPrefab読み込み
        {
            //■■■シーンロード用暗幕かかってること前提
            //とりあえずデバッグのため普通の暗幕かけ
            FadeBlack(1, 0);

            //白幕
            FadeWhite(1, 1, true);
            yield return new WaitForSeconds(1);
            //暗幕はずし（白幕になってるはず）
            FadeBlack(0, 0);

            #region City用Fogシーンを読み込み

            Debug.Log("□Cityx100Fogシーンをロード開始");
            yield return null;

            #region シーン読み込み

            UnityEngine.SceneManagement.SceneManager.LoadSceneAsync("Cityx100Fog", UnityEngine.SceneManagement.LoadSceneMode.Additive);

            //FogVolume出てくるまで待機
            while (GameObject.Find("CitySKy/Fog Volume Data") == null)
            {
                Debug.Log("Cityx100Fogシーンロード中");
                yield return null;
            }


            //カメラ削除
            if (GameObject.Find("CameraAll_Cityx100") != null) { Destroy(GameObject.Find("CameraAll_Cityx100")); }

            //FogVolumeに割り当て
            GameObject.Find("CitySKy/Fog Volume Data").GetComponent<FogVolumeData>()
                .GameCamera = VRCamera;

            #endregion
            //■GameObjects_Cityを取得（CityのPrefabを入れる入れ物）
            if (GameObject.Find("GameObjects_City"))
            { GameObjects_City = GameObject.Find("GameObjects_City"); }
            else
            { Debug.Log("■GameObjects_Cityがオフまたはない？"); }


            Debug.Log("■Cityx100Fogシーンロード終了");

            #endregion

            #region CityのPrefab設置
            GameObject City_ALL
                = Instantiate(Resources.Load("Main/City_Prefab/City_ALL") as GameObject
                , GameObjects_City.transform
                , false);
            City_ALL.name = Resources.Load("Main/City_Prefab/City_ALL").name;

            ////このシーンでは読み込まない
            //GameObject City_Expansion
            //    = Instantiate(Resources.Load("Main/City_Prefab/City_Expansion") as GameObject
            //    , GameObjects_City.transform
            //    , false);
            //City_Expansion.name = Resources.Load("Main/City_Prefab/City_Expansion").name;

            //City_Expansionあれば削除
            if (GameObjects_City.transform.Find("City_Expansion") != null)
            { Destroy(GameObjects_City.transform.Find("City_Expansion").gameObject); }

            //ライトあればオフ
            if (GameObjects_City.transform.Find("City_Light") != null)
            { GameObjects_City.transform.Find("City_Light").gameObject.SetActive(false); }
            #endregion
        }
        //CityALL取得
        var tmpCity_ALL
            = GameObjects_City.transform.Find("City_ALL");

        #endregion


        DB.isChieriPosLock = false;
        girlAnim.speed = doorAnim.speed = 0.3f;

        #region 白幕設定

        //プレイヤー大きさ
        nowPlayerLocalScale = DB.playerScale_City01;
        //プレイヤー位置
        GameObject Player01_DouroPosObj
            = Resources.Load("_PosObj/0510YokokuCity01Walk/Player01_DouroPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player01_DouroPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player01_DouroPosObj.transform.localEulerAngles;

        //カメラリセット、立ち
        CameraReset(Player01_DouroPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos
            , true
            , Vector3.zero//倒れのアンカーリセット
            , false
            , true);

        #region 智恵理

        //前イベントで消したのでON
        GirlMeshTrs.gameObject.SetActive(true);

        //位置
        GameObject Chieri00_StartPosObj
            = Resources.Load("_PosObj/0510YokokuCity01Walk/Chieri00_StartPosObj") as GameObject;
        GirlTrs.localPosition = Chieri00_StartPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri00_StartPosObj.transform.localEulerAngles;

        #region SoundObj左足に付与
        //WindnoiseSoundObj付与
        GameObject LFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlLFootTrs);
        DB.evMoveDelObjList.Add(LFootWindnoiseSoundObj);
        LFootWindnoiseSoundObj.name = nameof(LFootWindnoiseSoundObj);
        LFootWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpLFootWindnoiseSound = LFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpLFootWindnoiseSound.aSource.maxDistance = 180;
        tmpLFootWindnoiseSound.pitchMax = 1f;
        tmpLFootWindnoiseSound.pitchUpRateAdjustFloat = 2;
        tmpLFootWindnoiseSound.pitchDownRateAdjustFloat = 100;

        tmpLFootWindnoiseSound.aSource.volume = 0f;
        #endregion
        #region SoundObj右足に付与
        //WindnoiseSoundObj付与
        GameObject RFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRFootTrs);
        DB.evMoveDelObjList.Add(RFootWindnoiseSoundObj);
        RFootWindnoiseSoundObj.name = nameof(RFootWindnoiseSoundObj);
        RFootWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpRFootWindnoiseSound = RFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpRFootWindnoiseSound.aSource.maxDistance = 180;
        tmpRFootWindnoiseSound.pitchMax = 1f;
        tmpRFootWindnoiseSound.pitchUpRateAdjustFloat = 2;
        tmpRFootWindnoiseSound.pitchDownRateAdjustFloat = 100;

        tmpRFootWindnoiseSound.aSource.volume = 0f;
        #endregion

        #endregion


        GirlTrs.GetComponent<ChieriFootStepSpawn>().isFootStepObj = true;
        GirlTrs.GetComponent<ChieriFootStepSpawn>().isFootStepDecal = true;

        #region 小物消し
        GrasstableTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);
        Drill_chieriTrs.gameObject.SetActive(false);
        KeshigomuObj.SetActive(false);
        isHomeworkSystem = false;
        CarpetTrs.gameObject.SetActive(false);
        SchoolBagTrs.gameObject.SetActive(false);
        SharpenObj.SetActive(false);
        #endregion


        #endregion

        StartCoroutine(GirlAnimReadSystem());
        //足Volume
        tmpRFootWindnoiseSound.aSource.DOFade(0.4f, 1);
        tmpLFootWindnoiseSound.aSource.DOFade(0.4f, 1);


        #region 03

        #region Crows（鳥演出）タイムライン取り出して再生
        GameObject Crows
            = Instantiate(Resources.Load("CIty_Fractured/City_All/Timeline/Crows") as GameObject
            , tmpCity_ALL.transform
            , false);
        PlayableDirector crowPD
            = Crows.transform.Find("Hieralchy_CrowsTimeline").GetComponent<PlayableDirector>();

        crowPD.Play();

        GameObject SECrow_ReObj = Crows.transform.Find("Crow_Re").gameObject;


        //while (true)
        //{
        //    Debug.Log(crowPD.time);
        //    yield return null;
        //}

        #endregion

        #region モブタイムライン取り出して再生 トラック取得
        GameObject Mob_Character
            = Instantiate(Resources.Load("CIty_Fractured/City_All/Timeline/Mob_Character") as GameObject
            , tmpCity_ALL.transform
            , false);

        //サラリーマン00
        PlayableDirector Salaryman00PD
            = Mob_Character.transform.Find("Hieralchy_Salaryman00_MobCharacterTimeline").GetComponent<PlayableDirector>();
        //女00
        PlayableDirector Woman00PD
            = Mob_Character.transform.Find("Hieralchy_Woman00_MobCharacterTimeline").GetComponent<PlayableDirector>();

        Salaryman00PD.Play();
        Woman00PD.Play();

        //トラック読み込み
        var salaryman00Track
            = ((TimelineAsset)Salaryman00PD.playableAsset).GetOutputTracks()
            .First(c => c.name.Equals("Loop Pause Track")) as LoopPauseTrack;
        var woman00Track
            = ((TimelineAsset)Woman00PD.playableAsset).GetOutputTracks()
            .First(c => c.name.Equals("Loop Pause Track")) as LoopPauseTrack;

        salaryman00Track.nowLoopClipInt =
        woman00Track.nowLoopClipInt = 0;

        //while (true)
        //{
        //    Debug.Log(crowPD.time);
        //    yield return null;
        //}

        #endregion

        #region SE音設定
        //時計エアコン環境音
        KankyouBGMVolumer(0.7f, 1f, aircon.audioSource);
        KankyouBGMVolumer(0.7f, 1f, clockSE.audioSource);

        //街環境音(これに環境・犬・事故・悲鳴のAudioSourceが入ってる)
        GameObject SEObjs_YokokuCity01
            = Instantiate(Resources.Load("_PosObj/0510YokokuCity01Walk/SEObjs_YokokuCity01") as GameObject
            , GameObjectsTrs
            , false);

        //犬　事故　悲鳴
        AudioSource inu00as
            = SEObjs_YokokuCity01.transform.Find("Inu3DSEObj").GetComponent<AudioSource>();
        AudioSource himei00as
            = SEObjs_YokokuCity01.transform.Find("Himei003DSEObj").GetComponent<AudioSource>();

        SEPlay(Other3DSEObj, "nc105293", SECrow_ReObj, 0.4f, 5);

        #endregion


        #region 智恵理 目IKを頭にペアレント（ずっと下見てる感じに）
        GameObject IKLookAtPareHead00_EyeTargetPosObj
            = Resources.Load("_PosObj/0510YokokuCity01Walk/IKLookAtPareHead00_EyeTargetPosObj") as GameObject;

        IKLookAtEyeTargetTrs.SetParent(Bip001HeadTrs, false);
        IKLookAtEyeTargetTrs.localPosition = IKLookAtPareHead00_EyeTargetPosObj.transform.localPosition;

        //LAIKEye.solver.clampWeightEyes = 0.924f;
        //FollowDOMove(IKLookAtEyeTargetTrs, IKLookAt03_EyeTargetPosObj.transform.position, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, 1, 0);
        #endregion

        //開幕
        FadeBlack(0, 4f);
        FadeWhite(0, 4f);

        ChieriMotion("出現見渡し", 0f, 0);
        ChieriMotion("f_本当に小さいね～", 0.1f, 2);
        Hukidashi("Y0200");//わぁ～
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        woman00Track.nowLoopClipInt++;
        Hukidashi("Y0203");//1/100の町って
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("f_笑顔口眉ジト目40", 0.1f, 2);
        TereHohoAlphaChange(0.5f);
        TereHoho();
        Hukidashi("Y0207");//かわいい・・
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        while (nowGirlAnimClipName != "出現見渡し") { yield return null; }

        while (girlAnimNomTime <= 0.3f) { yield return null; }

        NovelSetVis("Y200");//こんなことが可能とは

        while (girlAnimNomTime <= 1) { yield return null; }

        while (isNovelSetVisIng) { yield return null; }

        TereHoho(false, 4);
        ChieriMotion("腰に手を当てる", 0f, 0);
        while (nowGirlAnimClipName != "腰に手を当てる") { yield return null; }
        while (girlAnimNomTime <= 0.4f) { yield return null; }

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1f, "f_眉高い笑顔少しジト目", 0.05f, 2);//時間差表情戻し

        Hukidashi("Y0210");//ふふっ・・
        salaryman00Track.nowLoopClipInt++;
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("Y0215");//伝わってくるよ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        while (girlAnimNomTime <= 1) { yield return null; }

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        Hukidashi("Y0220");//もっと恐く
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        Hukidashi("Y0230");//早く逃げないと
        salaryman00Track.nowLoopClipInt++;
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("f_笑顔口眉ジト目40", 0.1f, 2);
        yield return new WaitForSeconds(1);
        Hukidashi("Y0240");//逃げる場所なんて無いけどね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("一歩目足上げ", 0f, 0);
        while (nowGirlAnimClipName != "一歩目足上げ") { yield return null; }
        while (girlAnimNomTime <= 1f) { yield return null; }

        Hukidashi("Y0250");//記念すべき一歩
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        Hukidashi("Y0260");//いくよ～
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("一歩目足下ろし", 0f, 0);
        while (nowGirlAnimClipName != "一歩目足下ろし") { yield return null; }
        while (girlAnimNomTime <= 1) { yield return null; }


        woman00Track.isForceLoopEnd = true;
        yield return null;
        woman00Track.nowLoopClipInt++;

        inu00as.Stop();

        #region IK 家見る
        //ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        //GameObject IKLookAt03_HeadTargetPosObj
        //    = Resources.Load("_PosObj/0510YokokuCity01Walk/IKLookAt03_HeadTargetPosObj") as GameObject;
        //FollowDOMove(IKLookAtHeadTargetTrs, IKLookAt03_HeadTargetPosObj.transform.position);
        //DOTweenToLAIKSHead(LAIKHeadS, 0.5f, 2);
        #endregion

        yield return new WaitForSeconds(2);

        TereHoho();

        yield return new WaitForSeconds(2);

        ChieriMotion("f_笑顔口眉ジト目40", 0.1f, 2);
        Hukidashi("Y0270");//一踏みで
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("踏み後足上げ", 0f, 0);
        while (nowGirlAnimClipName != "踏み後足上げ") { yield return null; }
        while (girlAnimNomTime <= 1) { yield return null; }

        Hukidashi("Y0275");//お菓子の箱
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        TereHoho(false, 4);
        ChieriMotion("踏み後足降ろし", 0f, 0);
        while (nowGirlAnimClipName != "踏み後足降ろし") { yield return null; }
        while (girlAnimNomTime <= 1) { yield return null; }

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1f, "f_眉高い笑顔少しジト目", 0.05f, 2);//時間差表情戻し
        Hukidashi("Y0280");//家になんか隠れても無駄なんだからね
        yield return new WaitForSeconds(1);

        //肩腕なし上半身マスクできょろきょろ（ArmOffSpineMask）
        ChieriMotion("出現見渡し", 1f, 14);

        yield return KeyOrWait(3);


        NovelSetVis("Y210");//うそだろ　大勢の人　許されるわけ
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);

        ChieriMotion("_noData", 1f, 9);


        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        Hukidashi("Y0290");//ふふっ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("f_眉高い笑顔少しジト目", 0.2f, 2);
        Hukidashi("Y0295");//お散歩
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        ChieriMotion("歩き出し", 0f, 0);
        while (nowGirlAnimClipName != "歩き出し") { yield return null; }
        while (girlAnimNomTime <= 0.02f) { yield return null; }


        while (girlAnimNomTime <= 0.3f) { yield return null; }
        DelAll_Hukidashi();
        himei00as.Play();
        woman00Track.nowLoopClipInt++;


        while (girlAnimNomTime <= 0.8f) { yield return null; }

        FadeBlack(1, 2f);
        yield return new WaitForSeconds(2f);


        #region ちえりモーション系リセット
        //出現見渡しオフ
        ChieriMotion("_noData", 0f, 14);

        DOTweenToLAIKSHead(LAIKEyeS, 0f, 0);
        DOTweenToLAIKSHead(LAIKBodyS, 0f, 0);
        DOTweenToLAIKSHead(LAIKHeadS, 0f, 0);
        DOTweenToLAIKSBody(LAIKEyeS, 0f, 0);
        DOTweenToLAIKSBody(LAIKBodyS, 0f, 0);
        DOTweenToLAIKSBody(LAIKHeadS, 0f, 0);
        DOTweenToLAIKSEyes(LAIKEyeS, 0f, 0);
        DOTweenToLAIKSEyes(LAIKBodyS, 0f, 0);
        DOTweenToLAIKSEyes(LAIKHeadS, 0f, 0);



        #endregion


        yield return new WaitForSeconds(3f);


        #endregion

        //isFlowChartEventMove = true;
        //EventMove("タイトル", true, true);

        EventMove("転送都市2");


        #region //以前のかくれんぼの
        ////■■■■■■■■■■■■■暗幕前提
        ////智恵理0位置ロック解除
        //DB.isChieriPosLock = false; ChieriMotion("立ちスマホ取り出し", 0f, 0);
        //ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);


        ////予告用トランスフォーム情報取得
        //Transform YokokuChieriPossTrs = GameObject.Find("YokokuChieriPoss").transform,
        //          YokokuCameraPossTrs = GameObject.Find("YokokuCameraPoss").transform;
        //List<Transform> YokokuChieriTrsList = new List<Transform>(),
        //                YokokuCameraTrsList = new List<Transform>();
        //foreach (Transform k in YokokuChieriPossTrs)
        //{ YokokuChieriTrsList.Add(k.transform); }
        //foreach (Transform k in YokokuCameraPossTrs)
        //{ YokokuCameraTrsList.Add(k.transform); }



        ////予告01位置に
        //GirlTrs.localPosition = YokokuChieriTrsList[2].transform.localPosition;
        //GirlTrs.localEulerAngles = YokokuChieriTrsList[2].transform.localEulerAngles;
        //CameraObjectsTrs.localPosition = YokokuCameraTrsList[2].localPosition;
        //CameraObjectsTrs.localEulerAngles = YokokuCameraTrsList[2].localEulerAngles;
        //nowPlayerLocalScale = YokokuCameraTrsList[2].localScale;

        ////スマホオン
        //ChieriSumahoObj.SetActive(true);
        ////スマホ見
        //FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform);
        //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        //FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform);
        //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);


        ////小物消し
        //if (GameObject.Find("Speaker") != null)
        //{ GameObject.Find("Speaker").SetActive(false); }
        //if (GameObject.Find("Combined Meshes") != null)
        //{ GameObject.Find("Combined Meshes").SetActive(false); }

        ////HomeworkTrs.gameObject.SetActive(false);
        //Drill_chieriTrs.gameObject.SetActive(false);

        ////fog
        //RenderSettings.fogDensity = 0.001f;


        ////右下テキスト透明
        //RightUnderText.color = new Color(1, 1, 1, 0);
        //yield return null;
        ////右下テキスト入れ替え 予告
        //RightUnderText.text = serihuDict["UI1000"];
        ////表示
        //RightUnderText.color = new Color(1, 1, 1, 1);



        //yield return new WaitForSeconds(2);

        ////サブタイトル
        //SubTitleVis(true, serihuDict["S0030"]);

        //yield return new WaitForSeconds(2);

        ////「えーと今の大きさは」
        //Hukidashi("Y0110");
        //yield return new WaitForSeconds(2);

        //girlAnim.speed = 0.35f;

        ////■■■■■■■■■■■■■■■フェードイン開幕
        //FadeWhite(0, 1, Ease.InOutQuad);
        //FadeBlack(0, 1, Ease.InOutQuad);
        //yield return new WaitForSeconds(5);

        //SubTitleVis(false, 2);

        ////「5.1cm」
        //Hukidashi("Y0120");
        //ChieriMotion("立ちスマホしまい", 0.4f, 0);

        ////目だけに
        //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        //DOTweenToLAIKSHead(LAIKHeadS, 0, 1);
        //yield return new WaitForSeconds(3);

        //Destroy(subTitleTextObj);

        ////スマホオフ
        //ChieriSumahoObj.SetActive(false);
        //yield return new WaitForSeconds(3);

        ////「うーん・・」
        //Hukidashi("Y0130");
        //ChieriMotion("監視向き変更開始", 0.4f, 0);
        //yield return new WaitForSeconds(5);

        ////「あ、じゃあベッドの足裏？」
        //Hukidashi("Y0140");
        //ChieriMotion("片膝立ち宿題促し開始", 0.4f, 0);
        ////アニメスピードだんだん速く
        //DOTween.To(() => girlAnim.speed, (x) => girlAnim.speed = x,
        //    0.5f, 3f);
        ////■暗転
        //FadeBlack(1, 4.5f, Ease.InOutQuad);
        //yield return new WaitForSeconds(1f);
        //SEPlay("bosu23_fire02__goro03_胸山潰し2000倍_長く");
        //yield return new WaitForSeconds(1.5f);


        //yield return null;



        //yield return new WaitForSeconds(2);
        //DelAll_Hukidashi();
        //yield return new WaitForSeconds(3);


        //EventMove("予告 行ってきます");
        #endregion

        yield break;
    }
    IEnumerator E4020UT()//転送都市2
    {
        if (debugEventMoveFlag == true)
        {
        }
        EventReset();

        #region FogシーンとCityPrefab設置（設置済みなら設定のみ）
        //既にCity読み込み済みなら
        if (GameObjects_City != null)
        {
            //オフになっているROOMその他（ライト含む）をONにする
            RoomTrs.gameObject.SetActive(true);
            SotoTrs.gameObject.SetActive(true);
            Particle_DustTrs.gameObject.SetActive(true);
            LightFolder.gameObject.SetActive(true);

            //City_Expansionあれば削除
            if (GameObjects_City.transform.Find("City_Expansion") != null)
            { Destroy(GameObjects_City.transform.Find("City_Expansion").gameObject); }

            //ライトあればオフ
            if (GameObjects_City.transform.Find("City_Light") != null)
            { GameObjects_City.transform.Find("City_Light").gameObject.SetActive(false); }
        }
        else //ないならシーンとPrefab読み込み
        {
            //■■■シーンロード用暗幕かかってること前提
            //とりあえずデバッグのため普通の暗幕かけ
            FadeBlack(1, 0);

            //白幕
            FadeWhite(1, 1, true);
            yield return new WaitForSeconds(1);
            //暗幕はずし（白幕になってるはず）
            FadeBlack(0, 0);

            #region City用Fogシーンを読み込み

            Debug.Log("□Cityx100Fogシーンをロード開始");
            yield return null;

            #region シーン読み込み

            UnityEngine.SceneManagement.SceneManager.LoadSceneAsync("Cityx100Fog", UnityEngine.SceneManagement.LoadSceneMode.Additive);

            //FogVolume出てくるまで待機
            while (GameObject.Find("CitySKy/Fog Volume Data") == null)
            {
                Debug.Log("Cityx100Fogシーンロード中");
                yield return null;
            }


            //カメラ削除
            if (GameObject.Find("CameraAll_Cityx100") != null) { Destroy(GameObject.Find("CameraAll_Cityx100")); }

            //FogVolumeに割り当て
            GameObject.Find("CitySKy/Fog Volume Data").GetComponent<FogVolumeData>()
                .GameCamera = VRCamera;

            #endregion
            //■GameObjects_Cityを取得（CityのPrefabを入れる入れ物）
            if (GameObject.Find("GameObjects_City"))
            { GameObjects_City = GameObject.Find("GameObjects_City"); }
            else
            { Debug.Log("■GameObjects_Cityがオフまたはない？"); }


            Debug.Log("■Cityx100Fogシーンロード終了");

            #endregion

            #region CityのPrefab設置
            GameObject City_ALL
                = Instantiate(Resources.Load("Main/City_Prefab/City_ALL") as GameObject
                , GameObjects_City.transform
                , false);
            City_ALL.name = Resources.Load("Main/City_Prefab/City_ALL").name;

            ////このシーンでは読み込まない
            //GameObject City_Expansion
            //    = Instantiate(Resources.Load("Main/City_Prefab/City_Expansion") as GameObject
            //    , GameObjects_City.transform
            //    , false);
            //City_Expansion.name = Resources.Load("Main/City_Prefab/City_Expansion").name;

            //City_Expansionあれば削除
            if (GameObjects_City.transform.Find("City_Expansion") != null)
            { Destroy(GameObjects_City.transform.Find("City_Expansion").gameObject); }

            //ライトあればオフ
            if (GameObjects_City.transform.Find("City_Light") != null)
            { GameObjects_City.transform.Find("City_Light").gameObject.SetActive(false); }

            #endregion
        }
        //CityALL取得
        var tmpCity_ALL
            = GameObjects_City.transform.Find("City_ALL");

        #endregion

        //DB.isChieriPosLock = false;
        //girlAnim.speed = doorAnim.speed = 0.3f;

        #region 白or黒幕設定

        //プレイヤー大きさ
        nowPlayerLocalScale = DB.playerScale_City01;
        //プレイヤー位置
        GameObject Player01_DouroPosObj
            = Resources.Load("_PosObj/0510YokokuCity01Walk/Player01_DouroPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player01_DouroPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player01_DouroPosObj.transform.localEulerAngles;

        //カメラリセット、立ち
        CameraReset(Player01_DouroPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos
            , true
            , Vector3.zero//倒れのアンカーリセット
            , false
            , true);

        #region 小物消し
        GrasstableTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);
        Drill_chieriTrs.gameObject.SetActive(false);
        KeshigomuObj.SetActive(false);
        isHomeworkSystem = false;
        CarpetTrs.gameObject.SetActive(false);
        SchoolBagTrs.gameObject.SetActive(false);
        SharpenObj.SetActive(false);
        #endregion

        #region 智恵理

        girlAnim.speed = 1;

        //デカールと煙音
        GirlTrs.GetComponent<ChieriFootStepSpawn>().isFootStepObj = true;
        GirlTrs.GetComponent<ChieriFootStepSpawn>().isFootStepDecal = true;



        #region //SoundObj左足に付与
        ////WindnoiseSoundObj付与
        //GameObject LFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
        //    , GirlLFootTrs);
        //DB.evMoveDelObjList.Add(LFootWindnoiseSoundObj);
        //LFootWindnoiseSoundObj.name = nameof(LFootWindnoiseSoundObj);
        //LFootWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        ////設定
        //WindnoiseSound tmpLFootWindnoiseSound = LFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        //tmpLFootWindnoiseSound.aSource.maxDistance = 180;
        //tmpLFootWindnoiseSound.pitchMax = 1f;
        //tmpLFootWindnoiseSound.pitchUpRateAdjustFloat = 2;
        //tmpLFootWindnoiseSound.pitchDownRateAdjustFloat = 100;

        //tmpLFootWindnoiseSound.aSource.volume = 0f;
        //#endregion
        //#region SoundObj右足に付与
        ////WindnoiseSoundObj付与
        //GameObject RFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
        //    , GirlRFootTrs);
        //DB.evMoveDelObjList.Add(RFootWindnoiseSoundObj);
        //RFootWindnoiseSoundObj.name = nameof(RFootWindnoiseSoundObj);
        //RFootWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        ////設定
        //WindnoiseSound tmpRFootWindnoiseSound = RFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        //tmpRFootWindnoiseSound.aSource.maxDistance = 180;
        //tmpRFootWindnoiseSound.pitchMax = 1f;
        //tmpRFootWindnoiseSound.pitchUpRateAdjustFloat = 2;
        //tmpRFootWindnoiseSound.pitchDownRateAdjustFloat = 100;

        //tmpRFootWindnoiseSound.aSource.volume = 0f;
        //#endregion

        //#endregion


        //GirlTrs.GetComponent<ChieriFootStepSpawn>().isFootStepObj = true;
        //GirlTrs.GetComponent<ChieriFootStepSpawn>().isFootStepDecal = true;

        //#region 小物消し
        //GrasstableTrs.gameObject.SetActive(false);
        //DrillTrs.gameObject.SetActive(false);
        //Drill_chieriTrs.gameObject.SetActive(false);
        //KeshigomuObj.SetActive(false);
        //isHomeworkSystem = false;
        //CarpetTrs.gameObject.SetActive(false);
        //SchoolBagTrs.gameObject.SetActive(false);
        //SharpenObj.SetActive(false);
        //#endregion


        #endregion

        StartCoroutine(GirlAnimReadSystem());
        ////足Volume
        //tmpRFootWindnoiseSound.aSource.DOFade(0.4f, 1);
        //tmpLFootWindnoiseSound.aSource.DOFade(0.4f, 1);

        #endregion

        #endregion

        #region 環境音（時計 エアコン 町の環境音）
        //時計エアコン環境音
        KankyouBGMVolumer(0.5f, 0.5f, aircon.audioSource);
        KankyouBGMVolumer(0.5f, 0.5f, clockSE.audioSource);

        //街環境音(これに環境・犬・事故・悲鳴のAudioSourceが入ってる)
        GameObject SEObjs_YokokuCity01
            = Instantiate(Resources.Load("_PosObj/0510YokokuCity01Walk/SEObjs_YokokuCity01") as GameObject
            , GameObjectsTrs
            , false);

        //専用環境音フェードイン
        SEObjs_YokokuCity01.transform.Find("KankyouSEObj").GetComponent<AudioSource>().volume = 0;
        SEObjs_YokokuCity01.transform.Find("KankyouSEObj").GetComponent<AudioSource>().DOFade(0.05f, 1f);

        //事故　犬　悲鳴消し
        Destroy(SEObjs_YokokuCity01.transform.Find("Inu3DSEObj").gameObject);
        Destroy(SEObjs_YokokuCity01.transform.Find("Ziko3DSEObj").gameObject);
        Destroy(SEObjs_YokokuCity01.transform.Find("Himei003DSEObj").gameObject);

        #endregion

        #region 左人差し指にWindnoiseSoundObj付与

        GameObject LHitosasiSoundObj
            = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlLhitosashi02Trs);
        LHitosasiSoundObj.name = nameof(LHitosasiSoundObj);
        DB.evMoveDelObjList.Add(LHitosasiSoundObj);

        //設定
        WindnoiseSound tmpLHitosasiSound = LHitosasiSoundObj.GetComponent<WindnoiseSound>();
        tmpLHitosasiSound.aSource.maxDistance = 100;
        tmpLHitosasiSound.pitchMax = 1f;
        tmpLHitosasiSound.pitchUpRateAdjustFloat = 3;

        tmpLHitosasiSound.aSource.volume = 1;

        //SoundObjのPos
        GameObject SoundObj_04_TsumamiYubi_LHitosasiPosObj
            = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_04_TsumamiYubi_RHitosasiPosObj") as GameObject;
        LHitosasiSoundObj.transform.localPosition = SoundObj_04_TsumamiYubi_LHitosasiPosObj.transform.localPosition;

        #endregion
        #region SoundObj左足に付与
        //WindnoiseSoundObj付与
        GameObject LFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlLFootTrs);
        DB.evMoveDelObjList.Add(LFootWindnoiseSoundObj);
        LFootWindnoiseSoundObj.name = nameof(LFootWindnoiseSoundObj);
        LFootWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpLFootWindnoiseSound = LFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpLFootWindnoiseSound.aSource.maxDistance = 180;
        tmpLFootWindnoiseSound.pitchMax = 1f;
        tmpLFootWindnoiseSound.pitchUpRateAdjustFloat = 2;
        tmpLFootWindnoiseSound.pitchDownRateAdjustFloat = 100;

        tmpLFootWindnoiseSound.aSource.volume = 0.6f;
        #endregion
        #region SoundObj右足に付与
        //WindnoiseSoundObj付与
        GameObject RFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRFootTrs);
        DB.evMoveDelObjList.Add(RFootWindnoiseSoundObj);
        RFootWindnoiseSoundObj.name = nameof(RFootWindnoiseSoundObj);
        RFootWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpRFootWindnoiseSound = RFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpRFootWindnoiseSound.aSource.maxDistance = 180;
        tmpRFootWindnoiseSound.pitchMax = 1f;
        tmpRFootWindnoiseSound.pitchUpRateAdjustFloat = 2;
        tmpRFootWindnoiseSound.pitchDownRateAdjustFloat = 100;

        tmpRFootWindnoiseSound.aSource.volume = 0.6f;
        #endregion

        yield return new WaitForSeconds(1);
        FadeWhite(0, 1, true);
        FadeBlack(0, 1, true);

        #region ちえりの親指人差し指のコリダーをオフ（あとでONにする必要あり ガムテ修正）
        var tmpOya02Coll = GameObject.Find("Oya02_L_coll");
        tmpOya02Coll.SetActive(false);
        var tmpHitosashi02Coll = GameObject.Find("Hitosashi02_L_coll");
        tmpHitosashi02Coll.SetActive(false);

        #endregion


        #region PD再生

        //Prefabにして取り出し（TimelineAssetをスクリプトのみで読み出して再生が難しかったので）
        GameObject City_62_TimelineObj
            = Instantiate(Resources.Load("Main/Timeline/City_62_TimelineObj") as GameObject);
        City_62_TimelineObj.name = nameof(City_62_TimelineObj);

        PlayableDirector City_62_TimelinePD
            = City_62_TimelineObj.GetComponent<PlayableDirector>();

        //Stoppedで終了検知bool
        bool isPDStopped = false;

        //（Stoppedは、多分ストップ時に行うアクションを追加できるもの。 引数にPD指定必要。）
        City_62_TimelinePD.stopped += (PlayableDirector aDirector) =>
        { isPDStopped = true; };//終了したらtrue

        #endregion

        City_62_TimelinePD.Play();

        while (isPDStopped == false) { yield return null; }


        #region ちえりの親指人差し指のコリダーをオン（あとで修正）
        tmpOya02Coll.SetActive(true);
        tmpHitosashi02Coll.SetActive(true);

        #endregion

        #region //ToBeContinued

        //FadeBlack(1, 5, true);
        //isMenuLock = true;//メニューロック
        //isHwVisLock = true;//宿題ロック

        ////TO BE CONTINUED設置
        //GameObject tempTobecontinuedObj = Instantiate(Resources.Load("Main/UI/ToBeContinued/TobecontinuedCanvas") as GameObject
        //    , VRUICameraTrs);
        //DB.evMoveDelObjList.Add(tempTobecontinuedObj);//削除用にDBのリストへ登録

        ////■■幕中なので前面表示
        ////取得
        //Image tmpImage = tempTobecontinuedObj.GetComponent<Image>();
        ////透明に
        //tmpImage.color = new Color(1, 1, 1, 0);
        ////徐々に不透明に
        //DOTween.To(() => tmpImage.color, (x) => tmpImage.color = x, new Color(1, 1, 1, 1)
        //    , 5f)
        //     .SetEase(Ease.InOutQuad)
        //     .SetUpdate(true);

        //yield return new WaitForSeconds(5f);

        ////徐々に透明に
        //DOTween.To(() => tmpImage.color, (x) => tmpImage.color = x, new Color(1, 1, 1, 0)
        //    , 5f)
        //     .SetEase(Ease.InOutQuad)
        //     .SetUpdate(true);

        ////NovelSetVis("ToBeContinued");

        ////智恵理メッシュON
        //GirlMeshTrs.gameObject.SetActive(true);

        //isNovelFadeTween = isNovelSetVisIng = false;
        //KankyouBGMVolumer(0f, 5);
        //yield return new WaitForSeconds(5f);

        ////EventMove("おまけ01", true, true);
        //EventMove("タイトル", true, true);


        #endregion

        FadeBlack(1, 1, true);
        yield return new WaitForSeconds(1);

        EventMove("追う");

        yield break;
    }
    IEnumerator E4030UT()//追う
    {
        if (debugEventMoveFlag == true)
        {
        }
        EventReset();

        #region FogシーンとCityPrefab設置（設置済みなら設定のみ）
        //既にCity読み込み済みなら
        if (GameObjects_City != null)
        {
            //オフになっているROOMその他（ライト含む）をONにする
            RoomTrs.gameObject.SetActive(true);
            SotoTrs.gameObject.SetActive(true);
            Particle_DustTrs.gameObject.SetActive(true);
            LightFolder.gameObject.SetActive(true);

            //City_Expansionあれば削除
            if (GameObjects_City.transform.Find("City_Expansion") != null)
            { Destroy(GameObjects_City.transform.Find("City_Expansion").gameObject); }

            //ライトあればオフ
            if (GameObjects_City.transform.Find("City_Light") != null)
            { GameObjects_City.transform.Find("City_Light").gameObject.SetActive(false); }
        }
        else //ないならシーンとPrefab読み込み
        {
            //■■■シーンロード用暗幕かかってること前提
            //とりあえずデバッグのため普通の暗幕かけ
            FadeBlack(1, 0);

            //白幕
            FadeWhite(1, 1, true);
            yield return new WaitForSeconds(1);
            //暗幕はずし（白幕になってるはず）
            FadeBlack(0, 0);

            #region City用Fogシーンを読み込み

            Debug.Log("□Cityx100Fogシーンをロード開始");
            yield return null;

            #region シーン読み込み

            UnityEngine.SceneManagement.SceneManager.LoadSceneAsync("Cityx100Fog", UnityEngine.SceneManagement.LoadSceneMode.Additive);

            //FogVolume出てくるまで待機
            while (GameObject.Find("CitySKy/Fog Volume Data") == null)
            {
                Debug.Log("Cityx100Fogシーンロード中");
                yield return null;
            }


            //カメラ削除
            if (GameObject.Find("CameraAll_Cityx100") != null) { Destroy(GameObject.Find("CameraAll_Cityx100")); }

            //FogVolumeに割り当て
            GameObject.Find("CitySKy/Fog Volume Data").GetComponent<FogVolumeData>()
                .GameCamera = VRCamera;

            #endregion
            //■GameObjects_Cityを取得（CityのPrefabを入れる入れ物）
            if (GameObject.Find("GameObjects_City"))
            { GameObjects_City = GameObject.Find("GameObjects_City"); }
            else
            { Debug.Log("■GameObjects_Cityがオフまたはない？"); }


            Debug.Log("■Cityx100Fogシーンロード終了");

            #endregion

            #region CityのPrefab設置
            GameObject City_ALL
                = Instantiate(Resources.Load("Main/City_Prefab/City_ALL") as GameObject
                , GameObjects_City.transform
                , false);
            City_ALL.name = Resources.Load("Main/City_Prefab/City_ALL").name;

            ////このシーンでは読み込まない
            //GameObject City_Expansion
            //    = Instantiate(Resources.Load("Main/City_Prefab/City_Expansion") as GameObject
            //    , GameObjects_City.transform
            //    , false);
            //City_Expansion.name = Resources.Load("Main/City_Prefab/City_Expansion").name;

            //GameObject City_Light
            //    = Instantiate(Resources.Load("Main/City_Prefab/City_Light") as GameObject
            //    , GameObjects_City.transform
            //    , false);
            //City_Light.name = Resources.Load("Main/City_Prefab/City_Light").name;

            //City_Expansionあれば削除
            if (GameObjects_City.transform.Find("City_Expansion") != null)
            { Destroy(GameObjects_City.transform.Find("City_Expansion").gameObject); }

            //ライトあればオフ
            if (GameObjects_City.transform.Find("City_Light") != null)
            { GameObjects_City.transform.Find("City_Light").gameObject.SetActive(false); }
            #endregion
        }
        //CityALL取得
        var tmpCity_ALL
            = GameObjects_City.transform.Find("City_ALL");

        #endregion

        //DB.isChieriPosLock = false;
        //girlAnim.speed = doorAnim.speed = 0.3f;

        #region 白or黒幕設定

        //プレイヤー大きさ
        nowPlayerLocalScale = DB.playerScale_City01;
        //プレイヤー位置
        GameObject Player01_DouroPosObj
            = Resources.Load("_PosObj/0510YokokuCity01Walk/Player01_DouroPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player01_DouroPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player01_DouroPosObj.transform.localEulerAngles;

        //カメラリセット、立ち
        CameraReset(Player01_DouroPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos
            , true
            , Vector3.zero//倒れのアンカーリセット
            , false
            , true);

        #region 小物消し
        GrasstableTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);
        Drill_chieriTrs.gameObject.SetActive(false);
        KeshigomuObj.SetActive(false);
        isHomeworkSystem = false;
        CarpetTrs.gameObject.SetActive(false);
        SchoolBagTrs.gameObject.SetActive(false);
        SharpenObj.SetActive(false);
        #endregion

        #region 智恵理

        girlAnim.speed = 1;

        //デカールと煙音
        GirlTrs.GetComponent<ChieriFootStepSpawn>().isFootStepObj = true;
        GirlTrs.GetComponent<ChieriFootStepSpawn>().isFootStepDecal = true;

        #region //soundObj

        //#region 左人差し指にWindnoiseSoundObj付与

        //GameObject LHitosasiSoundObj
        //    = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
        //    , GirlLhitosashi02Trs);
        //LHitosasiSoundObj.name = nameof(LHitosasiSoundObj);
        //DB.evMoveDelObjList.Add(LHitosasiSoundObj);

        ////設定
        //WindnoiseSound tmpLHitosasiSound = LHitosasiSoundObj.GetComponent<WindnoiseSound>();
        //tmpLHitosasiSound.aSource.maxDistance = 100;
        //tmpLHitosasiSound.pitchMax = 1f;
        //tmpLHitosasiSound.pitchUpRateAdjustFloat = 3;

        //tmpLHitosasiSound.aSource.volume = 1;

        ////SoundObjのPos
        //GameObject SoundObj_04_TsumamiYubi_LHitosasiPosObj
        //    = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_04_TsumamiYubi_RHitosasiPosObj") as GameObject;
        //LHitosasiSoundObj.transform.localPosition = SoundObj_04_TsumamiYubi_LHitosasiPosObj.transform.localPosition;

        //#endregion
        //#region SoundObj左足に付与
        ////WindnoiseSoundObj付与
        //GameObject LFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
        //    , GirlLFootTrs);
        //DB.evMoveDelObjList.Add(LFootWindnoiseSoundObj);
        //LFootWindnoiseSoundObj.name = nameof(LFootWindnoiseSoundObj);
        //LFootWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        ////設定
        //WindnoiseSound tmpLFootWindnoiseSound = LFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        //tmpLFootWindnoiseSound.aSource.maxDistance = 180;
        //tmpLFootWindnoiseSound.pitchMax = 1f;
        //tmpLFootWindnoiseSound.pitchUpRateAdjustFloat = 2;
        //tmpLFootWindnoiseSound.pitchDownRateAdjustFloat = 100;

        //tmpLFootWindnoiseSound.aSource.volume = 0.6f;
        //#endregion
        //#region SoundObj右足に付与
        ////WindnoiseSoundObj付与
        //GameObject RFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
        //    , GirlRFootTrs);
        //DB.evMoveDelObjList.Add(RFootWindnoiseSoundObj);
        //RFootWindnoiseSoundObj.name = nameof(RFootWindnoiseSoundObj);
        //RFootWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        ////設定
        //WindnoiseSound tmpRFootWindnoiseSound = RFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        //tmpRFootWindnoiseSound.aSource.maxDistance = 180;
        //tmpRFootWindnoiseSound.pitchMax = 1f;
        //tmpRFootWindnoiseSound.pitchUpRateAdjustFloat = 2;
        //tmpRFootWindnoiseSound.pitchDownRateAdjustFloat = 100;

        //tmpRFootWindnoiseSound.aSource.volume = 0.6f;
        //#endregion

        #endregion

        StartCoroutine(GirlAnimReadSystem());
        ////足Volume
        //tmpRFootWindnoiseSound.aSource.DOFade(0.4f, 1);
        //tmpLFootWindnoiseSound.aSource.DOFade(0.4f, 1);

        #endregion

        #endregion

        #region 環境音（時計 エアコン 町の環境音）
        //時計エアコン環境音
        KankyouBGMVolumer(0.5f, 0.5f, aircon.audioSource);
        KankyouBGMVolumer(0.5f, 0.5f, clockSE.audioSource);

        //街環境音(これに環境・犬・事故・悲鳴のAudioSourceが入ってる)
        GameObject SEObjs_YokokuCity01
            = Instantiate(Resources.Load("_PosObj/0510YokokuCity01Walk/SEObjs_YokokuCity01") as GameObject
            , GameObjectsTrs
            , false);

        //専用環境音フェードイン
        SEObjs_YokokuCity01.transform.Find("KankyouSEObj").GetComponent<AudioSource>().volume = 0;
        SEObjs_YokokuCity01.transform.Find("KankyouSEObj").GetComponent<AudioSource>().DOFade(0.05f, 1f);

        //事故　犬　悲鳴消し
        Destroy(SEObjs_YokokuCity01.transform.Find("Inu3DSEObj").gameObject);
        Destroy(SEObjs_YokokuCity01.transform.Find("Ziko3DSEObj").gameObject);
        Destroy(SEObjs_YokokuCity01.transform.Find("Himei003DSEObj").gameObject);

        #endregion



        yield return new WaitForSeconds(1);
        FadeWhite(0, 1, true);
        //FadeBlack(0, 1, true);

        #region PD再生

        //Prefabにして取り出し（TimelineAssetをスクリプトのみで読み出して再生が難しかったので）
        GameObject City_63_TimelineObj
            = Instantiate(Resources.Load("Main/Timeline/City_63_TimelineObj") as GameObject);
        City_63_TimelineObj.name = nameof(City_63_TimelineObj);

        PlayableDirector City_63_TimelinePD
            = City_63_TimelineObj.GetComponent<PlayableDirector>();

        //Stoppedで終了検知bool
        isPDStopped = false;

        //今回からタイムライン上で手動で終了
        ////（Stoppedは、多分ストップ時に行うアクションを追加できるもの。 引数にPD指定必要。）
        //City_63_TimelinePD.stopped += (PlayableDirector aDirector) =>
        //{ isPDStopped = true; };//終了したらtrue

        #endregion

        City_63_TimelinePD.Play();

        while (isPDStopped == false) { yield return null; }



        //FadeBlack(0, 3, true);
        //yield return new WaitForSeconds(3);


        //isFlowChartEventMove = true;
        EventMove("追われる");

        yield break;
    }
    IEnumerator E4040UT()//追われる
    {
        if (debugEventMoveFlag == true)
        {
        }
        EventReset();

        #region FogシーンとCityPrefab設置（設置済みなら設定のみ）
        //既にCity読み込み済みなら
        if (GameObjects_City != null)
        {
            //オフになっているROOMその他（ライト含む）をONにする
            RoomTrs.gameObject.SetActive(true);
            SotoTrs.gameObject.SetActive(true);
            Particle_DustTrs.gameObject.SetActive(true);
            LightFolder.gameObject.SetActive(true);

            //City_Expansionあれば削除
            if (GameObjects_City.transform.Find("City_Expansion") != null)
            { Destroy(GameObjects_City.transform.Find("City_Expansion").gameObject); }

            //ライトあればオフ
            if (GameObjects_City.transform.Find("City_Light") != null)
            { GameObjects_City.transform.Find("City_Light").gameObject.SetActive(false); }
        }
        else //ないならシーンとPrefab読み込み
        {
            //■■■シーンロード用暗幕かかってること前提
            //とりあえずデバッグのため普通の暗幕かけ
            FadeBlack(1, 0);

            //白幕
            FadeWhite(1, 1, true);
            yield return new WaitForSeconds(1);
            //暗幕はずし（白幕になってるはず）
            FadeBlack(0, 0);

            #region City用Fogシーンを読み込み

            Debug.Log("□Cityx100Fogシーンをロード開始");
            yield return null;

            #region シーン読み込み

            UnityEngine.SceneManagement.SceneManager.LoadSceneAsync("Cityx100Fog", UnityEngine.SceneManagement.LoadSceneMode.Additive);

            //FogVolume出てくるまで待機
            while (GameObject.Find("CitySKy/Fog Volume Data") == null)
            {
                Debug.Log("Cityx100Fogシーンロード中");
                yield return null;
            }


            //カメラ削除
            if (GameObject.Find("CameraAll_Cityx100") != null) { Destroy(GameObject.Find("CameraAll_Cityx100")); }

            //FogVolumeに割り当て
            GameObject.Find("CitySKy/Fog Volume Data").GetComponent<FogVolumeData>()
                .GameCamera = VRCamera;

            #endregion
            //■GameObjects_Cityを取得（CityのPrefabを入れる入れ物）
            if (GameObject.Find("GameObjects_City"))
            { GameObjects_City = GameObject.Find("GameObjects_City"); }
            else
            { Debug.Log("■GameObjects_Cityがオフまたはない？"); }


            Debug.Log("■Cityx100Fogシーンロード終了");

            #endregion

            #region CityのPrefab設置
            GameObject City_ALL
                = Instantiate(Resources.Load("Main/City_Prefab/City_ALL") as GameObject
                , GameObjects_City.transform
                , false);
            City_ALL.name = Resources.Load("Main/City_Prefab/City_ALL").name;

            ////このシーンでは読み込まない
            //GameObject City_Expansion
            //    = Instantiate(Resources.Load("Main/City_Prefab/City_Expansion") as GameObject
            //    , GameObjects_City.transform
            //    , false);
            //City_Expansion.name = Resources.Load("Main/City_Prefab/City_Expansion").name;

            //GameObject City_Light
            //    = Instantiate(Resources.Load("Main/City_Prefab/City_Light") as GameObject
            //    , GameObjects_City.transform
            //    , false);
            //City_Light.name = Resources.Load("Main/City_Prefab/City_Light").name;

            //City_Expansionあれば削除
            if (GameObjects_City.transform.Find("City_Expansion") != null)
            { Destroy(GameObjects_City.transform.Find("City_Expansion").gameObject); }

            //ライトあればオフ
            if (GameObjects_City.transform.Find("City_Light") != null)
            { GameObjects_City.transform.Find("City_Light").gameObject.SetActive(false); }

            #endregion
        }
        //CityALL取得
        var tmpCity_ALL
            = GameObjects_City.transform.Find("City_ALL");

        #endregion

        DB.isChieriPosLock = true;
        //girlAnim.speed = doorAnim.speed = 0.3f;

        #region 白or黒幕設定

        //プレイヤー大きさ
        nowPlayerLocalScale = DB.playerScale_City01;
        ////プレイヤー位置
        //GameObject Player01_DouroPosObj
        //    = Resources.Load("_PosObj/0510YokokuCity01Walk/Player01_DouroPosObj") as GameObject;
        //CameraObjectsTrs.localPosition = Player01_DouroPosObj.transform.localPosition;
        //CameraObjectsTrs.localEulerAngles = Player01_DouroPosObj.transform.localEulerAngles;

        ////カメラリセット、立ち
        //CameraReset(Player01_DouroPosObj.transform.localEulerAngles
        //    , DB.cameraStandAnchorDefLocalPos
        //    , true
        //    , Vector3.zero//倒れのアンカーリセット
        //    , false
        //    , true);

        #region 小物消し
        GrasstableTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);
        Drill_chieriTrs.gameObject.SetActive(false);
        KeshigomuObj.SetActive(false);
        isHomeworkSystem = false;
        CarpetTrs.gameObject.SetActive(false);
        SchoolBagTrs.gameObject.SetActive(false);
        SharpenObj.SetActive(false);
        #endregion

        #region 智恵理

        girlAnim.speed = 1;

        //デカールと煙音
        GirlTrs.GetComponent<ChieriFootStepSpawn>().isFootStepObj = true;
        GirlTrs.GetComponent<ChieriFootStepSpawn>().isFootStepDecal = true;

        #region //soundObj

        //#region 左人差し指にWindnoiseSoundObj付与

        //GameObject LHitosasiSoundObj
        //    = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
        //    , GirlLhitosashi02Trs);
        //LHitosasiSoundObj.name = nameof(LHitosasiSoundObj);
        //DB.evMoveDelObjList.Add(LHitosasiSoundObj);

        ////設定
        //WindnoiseSound tmpLHitosasiSound = LHitosasiSoundObj.GetComponent<WindnoiseSound>();
        //tmpLHitosasiSound.aSource.maxDistance = 100;
        //tmpLHitosasiSound.pitchMax = 1f;
        //tmpLHitosasiSound.pitchUpRateAdjustFloat = 3;

        //tmpLHitosasiSound.aSource.volume = 1;

        ////SoundObjのPos
        //GameObject SoundObj_04_TsumamiYubi_LHitosasiPosObj
        //    = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_04_TsumamiYubi_RHitosasiPosObj") as GameObject;
        //LHitosasiSoundObj.transform.localPosition = SoundObj_04_TsumamiYubi_LHitosasiPosObj.transform.localPosition;

        //#endregion
        //#region SoundObj左足に付与
        ////WindnoiseSoundObj付与
        //GameObject LFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
        //    , GirlLFootTrs);
        //DB.evMoveDelObjList.Add(LFootWindnoiseSoundObj);
        //LFootWindnoiseSoundObj.name = nameof(LFootWindnoiseSoundObj);
        //LFootWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        ////設定
        //WindnoiseSound tmpLFootWindnoiseSound = LFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        //tmpLFootWindnoiseSound.aSource.maxDistance = 180;
        //tmpLFootWindnoiseSound.pitchMax = 1f;
        //tmpLFootWindnoiseSound.pitchUpRateAdjustFloat = 2;
        //tmpLFootWindnoiseSound.pitchDownRateAdjustFloat = 100;

        //tmpLFootWindnoiseSound.aSource.volume = 0.6f;
        //#endregion
        //#region SoundObj右足に付与
        ////WindnoiseSoundObj付与
        //GameObject RFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
        //    , GirlRFootTrs);
        //DB.evMoveDelObjList.Add(RFootWindnoiseSoundObj);
        //RFootWindnoiseSoundObj.name = nameof(RFootWindnoiseSoundObj);
        //RFootWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        ////設定
        //WindnoiseSound tmpRFootWindnoiseSound = RFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        //tmpRFootWindnoiseSound.aSource.maxDistance = 180;
        //tmpRFootWindnoiseSound.pitchMax = 1f;
        //tmpRFootWindnoiseSound.pitchUpRateAdjustFloat = 2;
        //tmpRFootWindnoiseSound.pitchDownRateAdjustFloat = 100;

        //tmpRFootWindnoiseSound.aSource.volume = 0.6f;
        //#endregion

        #endregion

        StartCoroutine(GirlAnimReadSystem());
        ////足Volume
        //tmpRFootWindnoiseSound.aSource.DOFade(0.4f, 1);
        //tmpLFootWindnoiseSound.aSource.DOFade(0.4f, 1);

        #endregion

        #endregion

        #region 環境音（時計 エアコン 町の環境音）
        //時計エアコン環境音
        KankyouBGMVolumer(0.5f, 0.5f, aircon.audioSource);
        KankyouBGMVolumer(0.5f, 0.5f, clockSE.audioSource);

        //街環境音(これに環境・犬・事故・悲鳴のAudioSourceが入ってる)
        GameObject SEObjs_YokokuCity01
            = Instantiate(Resources.Load("_PosObj/0510YokokuCity01Walk/SEObjs_YokokuCity01") as GameObject
            , GameObjectsTrs
            , false);

        //専用環境音フェードイン
        SEObjs_YokokuCity01.transform.Find("KankyouSEObj").GetComponent<AudioSource>().volume = 0;
        SEObjs_YokokuCity01.transform.Find("KankyouSEObj").GetComponent<AudioSource>().DOFade(0.05f, 1f);

        //事故　犬　悲鳴消し
        Destroy(SEObjs_YokokuCity01.transform.Find("Inu3DSEObj").gameObject);
        Destroy(SEObjs_YokokuCity01.transform.Find("Ziko3DSEObj").gameObject);
        Destroy(SEObjs_YokokuCity01.transform.Find("Himei003DSEObj").gameObject);

        #endregion

        yield return new WaitForSeconds(1);
        FadeWhite(0, 1, true);
        //FadeBlack(0, 1, true);//タイムライン上でONにするのでこちらではしない

        #region PD再生

        //Prefabにして取り出し（TimelineAssetをスクリプトのみで読み出して再生が難しかったので）
        GameObject City_64_StreetPlay_Timeline
            = Instantiate(Resources.Load("Main/Timeline/City_64_StreetPlay_Timeline") as GameObject);
        City_64_StreetPlay_Timeline.name = nameof(City_64_StreetPlay_Timeline);

        PlayableDirector City_64_StreetPlay_TimelinePD
            = City_64_StreetPlay_Timeline.GetComponent<PlayableDirector>();

        //Stoppedで終了検知bool
        isPDStopped = false;

        //今回からタイムライン上で手動で終了
        ////（Stoppedは、多分ストップ時に行うアクションを追加できるもの。 引数にPD指定必要。）
        //City_63_TimelinePD.stopped += (PlayableDirector aDirector) =>
        //{ isPDStopped = true; };//終了したらtrue

        #endregion

        City_64_StreetPlay_TimelinePD.Play();

        while (isPDStopped == false) { yield return null; }


        #region //ToBeContinued
        //FadeBlack(1, 5, true);
        //isMenuLock = true;//メニューロック
        //isHwVisLock = true;//宿題ロック

        ////TO BE CONTINUED設置
        //GameObject tempTobecontinuedObj = Instantiate(Resources.Load("Main/UI/ToBeContinued/TobecontinuedCanvas") as GameObject
        //    , VRUICameraTrs);
        //DB.evMoveDelObjList.Add(tempTobecontinuedObj);//削除用にDBのリストへ登録

        ////■■幕中なので前面表示
        ////取得
        //Image tmpImage = tempTobecontinuedObj.GetComponent<Image>();
        ////透明に
        //tmpImage.color = new Color(1, 1, 1, 0);
        ////徐々に不透明に
        //DOTween.To(() => tmpImage.color, (x) => tmpImage.color = x, new Color(1, 1, 1, 1)
        //    , 5f)
        //     .SetEase(Ease.InOutQuad)
        //     .SetUpdate(true);

        //yield return new WaitForSeconds(5f);

        ////徐々に透明に
        //DOTween.To(() => tmpImage.color, (x) => tmpImage.color = x, new Color(1, 1, 1, 0)
        //    , 5f)
        //     .SetEase(Ease.InOutQuad)
        //     .SetUpdate(true);

        ////NovelSetVis("ToBeContinued");

        ////智恵理メッシュON
        //GirlMeshTrs.gameObject.SetActive(true);

        //isNovelFadeTween = isNovelSetVisIng = false;
        //KankyouBGMVolumer(0f, 5);
        //yield return new WaitForSeconds(5f);


        //EventMove("タイトル", true, true);
        #endregion

        Debug.Log("イベント終了" + nameof(City_64_StreetPlay_Timeline));
        Debug.Log("次イベントへ移動");

        EventMove();

        yield break;
    }
    IEnumerator E4045UT()//追われる2
    {
        if (debugEventMoveFlag == true)
        {
        }
        EventReset();

        //■既に都市が置かれてるならそのまま(エディタ再生のためライトなどのONOFF命令)
        if (GameObjects_City != null)
        {
            Debug.Log("追われる2 既存読み込み");
            //オフになっているROOMその他（ライト含む）をONにする
            RoomTrs.gameObject.SetActive(true);
            SotoTrs.gameObject.SetActive(true);
            Particle_DustTrs.gameObject.SetActive(true);
            LightFolder.gameObject.SetActive(true);

            //カメラ削除
            if (GameObject.Find("CameraAll_Cityx100") != null) { Destroy(GameObject.Find("CameraAll_Cityx100")); }

            //Enkeiフォルダをオフ
            if (GameObject.Find("GameObjects_Cityx100/City_ALL/Enkei") != null) { GameObject.Find("GameObjects_Cityx100/City_ALL/Enkei").SetActive(false); }

            //Cityx100のライトをオフ
            if (GameObject.Find("GameObjects_Cityx100/Light") != null) { GameObject.Find("GameObjects_Cityx100/Light").SetActive(false); }

        }
        else //■都市がなければシーンロードなので白フェード化してから都市データ読み込み
        {
            Debug.Log("追われる2 新規読み込み");
            //■■■シーンロード用暗幕かかってること前提
            //とりあえずデバッグのため普通の暗幕かけ
            FadeBlack(1, 0);

            //白幕
            FadeWhite(1, 1, true);
            yield return new WaitForSeconds(1);
            //暗幕はずし（白幕になってるはず）
            FadeBlack(0, 0);

            #region 2つともまとまったシーンを一個読み込み

            Debug.Log("□Cityx100Fogシーンをロード開始");
            yield return null;

            #region シーン読み込み

            UnityEngine.SceneManagement.SceneManager.LoadSceneAsync("Cityx100Fog", UnityEngine.SceneManagement.LoadSceneMode.Additive);

            //FogVolume出てくるまで待機
            while (GameObject.Find("CitySKy/Fog Volume Data") == null)
            {
                Debug.Log("Cityx100Fogシーンロード中");
                yield return new WaitForSeconds(0.5f);
            }

            //カメラ削除
            if (GameObject.Find("CameraAll_Cityx100") != null) { Destroy(GameObject.Find("CameraAll_Cityx100")); }

            //FogVolumeに割り当て
            GameObject.Find("CitySKy/Fog Volume Data").GetComponent<FogVolumeData>()
                .GameCamera = VRCamera;

            #endregion
            Debug.Log("■Cityx100Fogシーンロード終了");

            #endregion

            //Enkeiフォルダをオフ
            if (GameObject.Find("GameObjects_Cityx100/City_ALL/Enkei") != null) { GameObject.Find("GameObjects_Cityx100/City_ALL/Enkei").SetActive(false); }

            //Cityx100のライトをオフ
            if (GameObject.Find("GameObjects_Cityx100/Light") != null) { GameObject.Find("GameObjects_Cityx100/Light").SetActive(false); }

            yield return null;
        }


        //CityALL取得
        var tmpCity_ALL
            = GameObject.Find("GameObjects_Cityx100/City_ALL");

        DB.isChieriPosLock = true;
        //girlAnim.speed = doorAnim.speed = 0.3f;

        #region 白or黒幕設定

        //プレイヤー大きさ
        nowPlayerLocalScale = DB.playerScale_City01;
        ////プレイヤー位置
        //GameObject Player01_DouroPosObj
        //    = Resources.Load("_PosObj/0510YokokuCity01Walk/Player01_DouroPosObj") as GameObject;
        //CameraObjectsTrs.localPosition = Player01_DouroPosObj.transform.localPosition;
        //CameraObjectsTrs.localEulerAngles = Player01_DouroPosObj.transform.localEulerAngles;

        ////カメラリセット、立ち
        //CameraReset(Player01_DouroPosObj.transform.localEulerAngles
        //    , DB.cameraStandAnchorDefLocalPos
        //    , true
        //    , Vector3.zero//倒れのアンカーリセット
        //    , false
        //    , true);

        #region 小物消し
        GrasstableTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);
        Drill_chieriTrs.gameObject.SetActive(false);
        KeshigomuObj.SetActive(false);
        isHomeworkSystem = false;
        CarpetTrs.gameObject.SetActive(false);
        SchoolBagTrs.gameObject.SetActive(false);
        SharpenObj.SetActive(false);
        #endregion

        #region 智恵理

        girlAnim.speed = 1;

        //デカールと煙音
        GirlTrs.GetComponent<ChieriFootStepSpawn>().isFootStepObj = true;
        GirlTrs.GetComponent<ChieriFootStepSpawn>().isFootStepDecal = true;

        #region //soundObj

        //#region 左人差し指にWindnoiseSoundObj付与

        //GameObject LHitosasiSoundObj
        //    = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
        //    , GirlLhitosashi02Trs);
        //LHitosasiSoundObj.name = nameof(LHitosasiSoundObj);
        //DB.evMoveDelObjList.Add(LHitosasiSoundObj);

        ////設定
        //WindnoiseSound tmpLHitosasiSound = LHitosasiSoundObj.GetComponent<WindnoiseSound>();
        //tmpLHitosasiSound.aSource.maxDistance = 100;
        //tmpLHitosasiSound.pitchMax = 1f;
        //tmpLHitosasiSound.pitchUpRateAdjustFloat = 3;

        //tmpLHitosasiSound.aSource.volume = 1;

        ////SoundObjのPos
        //GameObject SoundObj_04_TsumamiYubi_LHitosasiPosObj
        //    = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_04_TsumamiYubi_RHitosasiPosObj") as GameObject;
        //LHitosasiSoundObj.transform.localPosition = SoundObj_04_TsumamiYubi_LHitosasiPosObj.transform.localPosition;

        //#endregion
        //#region SoundObj左足に付与
        ////WindnoiseSoundObj付与
        //GameObject LFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
        //    , GirlLFootTrs);
        //DB.evMoveDelObjList.Add(LFootWindnoiseSoundObj);
        //LFootWindnoiseSoundObj.name = nameof(LFootWindnoiseSoundObj);
        //LFootWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        ////設定
        //WindnoiseSound tmpLFootWindnoiseSound = LFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        //tmpLFootWindnoiseSound.aSource.maxDistance = 180;
        //tmpLFootWindnoiseSound.pitchMax = 1f;
        //tmpLFootWindnoiseSound.pitchUpRateAdjustFloat = 2;
        //tmpLFootWindnoiseSound.pitchDownRateAdjustFloat = 100;

        //tmpLFootWindnoiseSound.aSource.volume = 0.6f;
        //#endregion
        //#region SoundObj右足に付与
        ////WindnoiseSoundObj付与
        //GameObject RFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
        //    , GirlRFootTrs);
        //DB.evMoveDelObjList.Add(RFootWindnoiseSoundObj);
        //RFootWindnoiseSoundObj.name = nameof(RFootWindnoiseSoundObj);
        //RFootWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        ////設定
        //WindnoiseSound tmpRFootWindnoiseSound = RFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        //tmpRFootWindnoiseSound.aSource.maxDistance = 180;
        //tmpRFootWindnoiseSound.pitchMax = 1f;
        //tmpRFootWindnoiseSound.pitchUpRateAdjustFloat = 2;
        //tmpRFootWindnoiseSound.pitchDownRateAdjustFloat = 100;

        //tmpRFootWindnoiseSound.aSource.volume = 0.6f;
        //#endregion

        #endregion

        StartCoroutine(GirlAnimReadSystem());
        ////足Volume
        //tmpRFootWindnoiseSound.aSource.DOFade(0.4f, 1);
        //tmpLFootWindnoiseSound.aSource.DOFade(0.4f, 1);

        #endregion

        #endregion

        #region 環境音（時計 エアコン 町の環境音）
        //時計エアコン環境音
        KankyouBGMVolumer(0.5f, 0.5f, aircon.audioSource);
        KankyouBGMVolumer(0.5f, 0.5f, clockSE.audioSource);

        //街環境音(これに環境・犬・事故・悲鳴のAudioSourceが入ってる)
        GameObject SEObjs_YokokuCity01
            = Instantiate(Resources.Load("_PosObj/0510YokokuCity01Walk/SEObjs_YokokuCity01") as GameObject
            , GameObjectsTrs
            , false);

        //専用環境音フェードイン
        SEObjs_YokokuCity01.transform.Find("KankyouSEObj").GetComponent<AudioSource>().volume = 0;
        SEObjs_YokokuCity01.transform.Find("KankyouSEObj").GetComponent<AudioSource>().DOFade(0.05f, 1f);

        //事故　犬　悲鳴消し
        Destroy(SEObjs_YokokuCity01.transform.Find("Inu3DSEObj").gameObject);
        Destroy(SEObjs_YokokuCity01.transform.Find("Ziko3DSEObj").gameObject);
        Destroy(SEObjs_YokokuCity01.transform.Find("Himei003DSEObj").gameObject);

        #endregion

        yield return new WaitForSeconds(1);
        FadeWhite(0, 1, true);
        //FadeBlack(0, 1, true);//タイムライン上でONにするのでこちらではしない

        #region PD再生

        //Prefabにして取り出し（TimelineAssetをスクリプトのみで読み出して再生が難しかったので）
        GameObject City_64_StreetPlay_Kouhan_Timeline
            = Instantiate(Resources.Load("Main/Timeline/City_64_StreetPlay_Kouhan_Timeline") as GameObject);
        City_64_StreetPlay_Kouhan_Timeline.name = nameof(City_64_StreetPlay_Kouhan_Timeline);

        PlayableDirector City_64_StreetPlay_TimelinePD
            = City_64_StreetPlay_Kouhan_Timeline.GetComponent<PlayableDirector>();

        //Stoppedで終了検知bool
        isPDStopped = false;

        //今回からタイムライン上で手動で終了
        ////（Stoppedは、多分ストップ時に行うアクションを追加できるもの。 引数にPD指定必要。）
        //City_63_TimelinePD.stopped += (PlayableDirector aDirector) =>
        //{ isPDStopped = true; };//終了したらtrue

        #endregion

        //開始
        City_64_StreetPlay_TimelinePD.Play();

        //終了命令くるまで待機
        while (isPDStopped == false) { yield return null; }


        #region //ToBeContinued
        //FadeBlack(1, 5, true);
        //isMenuLock = true;//メニューロック
        //isHwVisLock = true;//宿題ロック

        ////TO BE CONTINUED設置
        //GameObject tempTobecontinuedObj = Instantiate(Resources.Load("Main/UI/ToBeContinued/TobecontinuedCanvas") as GameObject
        //    , VRUICameraTrs);
        //DB.evMoveDelObjList.Add(tempTobecontinuedObj);//削除用にDBのリストへ登録

        ////■■幕中なので前面表示
        ////取得
        //Image tmpImage = tempTobecontinuedObj.GetComponent<Image>();
        ////透明に
        //tmpImage.color = new Color(1, 1, 1, 0);
        ////徐々に不透明に
        //DOTween.To(() => tmpImage.color, (x) => tmpImage.color = x, new Color(1, 1, 1, 1)
        //    , 5f)
        //     .SetEase(Ease.InOutQuad)
        //     .SetUpdate(true);

        //yield return new WaitForSeconds(5f);

        ////徐々に透明に
        //DOTween.To(() => tmpImage.color, (x) => tmpImage.color = x, new Color(1, 1, 1, 0)
        //    , 5f)
        //     .SetEase(Ease.InOutQuad)
        //     .SetUpdate(true);

        ////NovelSetVis("ToBeContinued");

        ////智恵理メッシュON
        //GirlMeshTrs.gameObject.SetActive(true);

        //isNovelFadeTween = isNovelSetVisIng = false;
        //KankyouBGMVolumer(0f, 5);
        //yield return new WaitForSeconds(5f);


        //EventMove("タイトル", true, true);
        #endregion


        Debug.Log("イベント終了" + nameof(City_64_StreetPlay_Kouhan_Timeline));

        yield break;
    }

    IEnumerator F3000()//摘まむだけで
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;

            #region 小物
            //小物消し
            Drill_chieriTrs.gameObject.SetActive(false);
            DrillTrs.gameObject.SetActive(false);
            KeshigomuObj.SetActive(true);
            SharpenObj.SetActive(true);

            #endregion

        }
        EventReset();

        //暗幕
        FadeBlack(1, 0);
        //環境音フェード
        KankyouBGMVolumer(0f, 2);
        yield return new WaitForSeconds(2);

        //環境音フェード
        KankyouBGMVolumer(0.7f, 5);
        //ヒグラシに変え
        KankyouBGMChanger(semiSE.audioSource, "Higurashi_nc104892_間追加");

        HukidashiNovelDistanceChange(3, 3);

        #region スマホ ケーブル バッテリー残ってたら移動と削除
        #region ケーブル バッテリー設置
        //置いてあったら削除
        if (GameObject.Find("USBCable02_Battery_NoboriPrefab") != null)
        {
            Destroy(GameObject.Find("USBCable02_Battery_NoboriPrefab"));
        }
        //置いてあったら削除
        if (GameObject.Find("USBCable02_Bone0LHito3Pare_OriteMisetePrefab") != null)
        {
            Destroy(GameObject.Find("USBCable02_Bone0LHito3Pare_OriteMisetePrefab"));
        }

        //置いてあったら削除
        if (GameObject.Find("Battery") != null)
        { Destroy(GameObject.Find("Battery")); }

        //■スマホ智恵理に持たしてオフ
        ChieriSumahoObj.transform.SetParent(GirlLHandTrs);
        ChieriSumahoObj.transform.localPosition = ChieriSumaho_LHand_DefPosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_LHand_DefPosObj.transform.localEulerAngles;
        ChieriSumahoObj.transform.localScale = ChieriSumaho_LHand_DefPosObj.transform.localScale;
        ChieriSumahoObj.SetActive(false);
        //ケーブルもオフ
        ChieriSumahoUSBCableObj.SetActive(false);

        //画面オフ
        ChieriSumahoPower(false, 0);
        #endregion



        #endregion

        #region 設定       

        //アニメスピード
        girlAnim.speed =
        doorAnim.speed =
        chairAnim.speed = 0.4f;

        //智恵理0位置ロック
        DB.isChieriPosLock = true;

        //スピーカー 位置に
        SpeakerTrs.gameObject.SetActive(true);
        GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
        SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        //プレイヤー 会話1位置に
        GameObject Player_01_DeskUeKaiwa1PosObj = Resources.Load("_PosObj/E_Kankin_Day1/Player_01_DeskUeKaiwa1PosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_01_DeskUeKaiwa1PosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_01_DeskUeKaiwa1PosObj.transform.localEulerAngles;
        //カメラリセット値変更してリセット
        CameraReset(Player_01_DeskUeKaiwa1PosObj.transform.localEulerAngles
            , DB.cameraSitAnchorDefLocalPos//Anchorを座りに
            , false
            , Vector3.zero
            , false
            , true);

        //寝っぱなしにならないよう念のため
        isPlayerUniqueMotion = false;


        ChieriMotion("ドアからデスク横小皿持ちポーズ", 0f, 0);
        //ChieriMotion("デスク肘つきポーズ", 0f, 0);
        //ChieriMotion("f_ちぇー控えめ", 0f, 2);
        //ChieriMotion("f_怒ってる・・？", 0f, 2);
        ChieriMotion("f_ん？少し笑顔", 0f, 2);

        //顔傾け用 事前
        ChieriMotion("h_noData", 0f, 7);

        #region ■智恵理紐摘む手のコリダーオフ（ちゃんとあとで元に戻す）
        for (int i = 0; i < ChieriColliderObjs.Length; i++)
        {
            if (
                ChieriColliderObjs[i].name == "Hitosashi02_R_coll" ||
                ChieriColliderObjs[i].name == "Oya02_R_coll"
                )
            {
                ChieriColliderObjs[i].SetActive(false);
            }
        }
        #endregion



        //IKプレイヤー見る(一瞬)
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 0f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);

        //余韻設定のため1フレーム後再設定
        yield return null;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);


        //右手マスクでつまみ
        ChieriMotion("デスクペットボトルへ落とす前ポーズ", 0, 5);

        #region プレイヤー摘まれ状態（ペットボトルのつまみ流用）


        //プレイヤーダミー
        isPlayerUniqueMotion = true;
        PlayerMotion("_noData", 0f, 0);
        yield return null;
        GameObject PlayerFBBIKtoHeadEffector010_TsumamarePosObj
            = Resources.Load("_PosObj/0300Yubizeme/PlayerFBBIKtoHeadEffector010_TsumamarePosObj") as GameObject;

        PlayerFBBIKtoHeadEffectorObj.transform.localPosition = PlayerFBBIKtoHeadEffector010_TsumamarePosObj.transform.localPosition;
        PlayerFBBIKtoHeadEffectorObj.transform.localEulerAngles = PlayerFBBIKtoHeadEffector010_TsumamarePosObj.transform.localEulerAngles;


        FixedAction(() =>
        {
            //指にペアレントし、Tweenで所定位置に
            CameraObjectsTrs.SetParent(GirlRhitosashi02Trs);

            GameObject Player010_PareRHitosashi02_TsumamarePosObj
            = Resources.Load("_PosObj/0300Yubizeme/Player010_PareRHitosashi02_TsumamarePosObj") as GameObject;

            CameraObjectsTrs.DOLocalMove(Player010_PareRHitosashi02_TsumamarePosObj.transform.localPosition
                , 0f)
            .OnComplete(() =>
            {
                CameraReset(Player010_PareRHitosashi02_TsumamarePosObj.transform.localEulerAngles
                    , null
                    , false
                    , null
                    , false
                    , false
                    );
            });
        });
        #endregion

        #region 右手置きIK用設定
        GirlPosToIKTargetPosRot();
        while (isGirlPosToIKTargetPosRotLoading) { yield return null; }

        DOTweenToIKEfPos(IKRHandEf, 1, 0);
        DOTweenToIKEfRot(IKRHandEf, 1, 0);

        var tmpDefIKRHandTargetPos = IKRHandTargetTrs.transform.position;
        #endregion

        #region 右人差し指にWindnoiseSoundObj付与

        GameObject RHitosasiSoundObj
            = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRhitosashi02Trs);
        RHitosasiSoundObj.name = nameof(RHitosasiSoundObj);
        DB.evMoveDelObjList.Add(RHitosasiSoundObj);

        //設定
        WindnoiseSound tmpRHitosasiSound = RHitosasiSoundObj.GetComponent<WindnoiseSound>();
        tmpRHitosasiSound.aSource.maxDistance = 50;
        tmpRHitosasiSound.pitchMax = 0.4f;
        tmpRHitosasiSound.pitchUpRateAdjustFloat = 2;

        tmpRHitosasiSound.aSource.volume = 0;

        //SoundObjのPos
        GameObject SoundObj_04_TsumamiYubi_RHitosasiPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_04_TsumamiYubi_RHitosasiPosObj") as GameObject;
        RHitosasiSoundObj.transform.localPosition = SoundObj_04_TsumamiYubi_RHitosasiPosObj.transform.localPosition;

        #endregion

        #region SoundObj頭に付与
        //WindnoiseSoundObj付与（左手）
        GameObject HeadWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , Bip001HeadTrs);
        HeadWindnoiseSoundObj.name = nameof(HeadWindnoiseSoundObj);
        DB.evMoveDelObjList.Add(HeadWindnoiseSoundObj);

        //設定
        WindnoiseSound tmpHeadWindnoiseSound = HeadWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpHeadWindnoiseSound.aSource.maxDistance = 150;
        tmpHeadWindnoiseSound.pitchMax = 0.4f;
        tmpHeadWindnoiseSound.pitchUpRateAdjustFloat = 3;

        tmpHeadWindnoiseSound.aSource.volume = 0;

        //位置
        HeadWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        #endregion

        #endregion 設定

        yield return new WaitForSeconds(2f);
        //開幕
        FadeBlack(0, 3);
        yield return new WaitForSeconds(2);

        //SoundObjボリューム
        tmpRHitosasiSound.aSource.volume = 1;
        tmpHeadWindnoiseSound.aSource.volume = 1;


        #region 机に落として座るまで

        //アニメスピード
        girlAnim.speed =
        doorAnim.speed =
        chairAnim.speed = 0.5f;

        #region 机上置き位置に手運び
        GameObject IKRHand010_TsukueOkiPosObj
            = Resources.Load("_PosObj/0300Yubizeme/IKRHand010_TsukueOkiPosObj") as GameObject;

        //手伸ばす位置まで待機用
        var isRHandTouchaku = false;

        //同時にモーション
        ChieriMotion("ドアからデスク横小皿置く直前まで", 0f, 0);

        IKRHandTargetTrs.DOLocalMove(IKRHand010_TsukueOkiPosObj.transform.localPosition
            , 1 / girlAnim.speed)
            .SetEase(Ease.InOutQuad);
        IKRHandTargetTrs.DOLocalRotate(IKRHand010_TsukueOkiPosObj.transform.localEulerAngles
            , 1 / girlAnim.speed)
            .SetEase(Ease.InOutQuad)
            .OnComplete(() =>
            {
                //到着フラグ
                isRHandTouchaku = true;
            });

        //到着まで待機
        while (isRHandTouchaku == false) { yield return null; }
        #endregion

        Hukidashi("F3000010");//離すよ

        yield return new WaitForSeconds(2f);

        NovelSetVis("F3000010");//えっちょ、待っ

        DelAll_Hukidashi();
        Hukidashi("F3000020");//3
        yield return new WaitForSeconds(1);
        DelAll_Hukidashi();
        Hukidashi("F3000030");//2
        yield return new WaitForSeconds(1);
        DelAll_Hukidashi();
        Hukidashi("F3000040");//1
        yield return new WaitForSeconds(1);

        #region マコト離し

        FixedAction(() =>
        {
            //ペアレント外し、
            CameraObjectsTrs.SetParent(GameObjectsTrs);
        });
        while (isFixedAction) { yield return null; }


        //Tweenで所定位置に
        GameObject Player020_TsukueOkarePosObj
            = Resources.Load("_PosObj/0300Yubizeme/Player020_TsukueOkarePosObj") as GameObject;

        //ダミーも
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalMove(Vector3.zero
            , 0.3f).SetEase(Ease.InQuad);
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalRotate(Vector3.zero
            , 0.3f).SetEase(Ease.InQuad);
        //アンカーも
        CameraAnchorTrs.DOLocalMove(DB.cameraStandAnchorDefLocalPos
            , 0.3f).SetEase(Ease.InQuad);

        //マコト着地まで待機用
        var isMakotoRakka = false;

        //カメラ移動（落下イメージ）(高さのみ)
        CameraObjectsTrs.DOLocalMoveY(Player020_TsukueOkarePosObj.transform.localPosition.y
            , 0.3f).SetEase(Ease.InQuad)
            .OnComplete(() =>
            {
                isMakotoRakka = true;
            });

        //落ちるまで待機
        while (isMakotoRakka == false) { yield return null; }
        #endregion

        #region プレイヤーダメージとカメラ倒れ 直 （うつぶせ）

        //フラッシュと音とダメージ
        FadeWhite(1, 0);
        SEPlay("dan01");
        yield return new WaitForSeconds(0.05f);
        FadeWhite(0, 0);

        //TPSプレイヤー倒れモーション
        isPlayerUniqueMotion = true;
        PlayerMotion("liedown_00_Re", 0.2f, 0);
        //プレイヤーダミーうつ伏せに
        GameObject PlayerFBBIKtoHeadEffector020_UtsubusePosObj
            = Resources.Load("_PosObj/0300Yubizeme/PlayerFBBIKtoHeadEffector020_UtsubusePosObj") as GameObject;
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalMove(
            PlayerFBBIKtoHeadEffector020_UtsubusePosObj.transform.localPosition
            , 0.5f);
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalRotate(
            PlayerFBBIKtoHeadEffector020_UtsubusePosObj.transform.localEulerAngles
            , 0.5f);

        //回転直打ち
        CameraObjectsTrs.localEulerAngles = new Vector3(0, -60, 0);

        Vector3
            tmpDefCameraPos = CameraAnchorTrs.localPosition,
            tmpDefCameraEul = CameraAnchorTrs.localEulerAngles,
            tmpFlowCameraPos = new Vector3(0, 1.2f, 0),
            tmpSlipCameraPos = new Vector3(0, 0.3f, 0),
            tmpSlipCameraEul = new Vector3(80, 0, 0);

        Tweener tmpTweener =
            CameraAnchorTrs.DOLocalMove(tmpFlowCameraPos, 0.05f);
        yield return new WaitForSeconds(0.05f);
        tmpTweener.Kill();
        tmpTweener =
            CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.5f).SetEase(Ease.OutBounce);
        yield return new WaitForSeconds(0.05f);
        tmpTweener.Kill();
        tmpTweener =
            CameraAnchorTrs.DOLocalMove(tmpDefCameraPos, 0.05f);
        yield return new WaitForSeconds(0.05f);

        CameraAnchorTrs.DOLocalRotate(tmpSlipCameraEul, 0.2f).SetEase(Ease.InSine);

        tmpTweener.Kill();
        tmpTweener =
        CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.5f).SetEase(Ease.OutBounce)
            .OnComplete(() =>
            {
                CameraReset(new Vector3(0, -60, 0)
                    , tmpSlipCameraPos
                    , false
                    , tmpSlipCameraEul
                    , false
                    , false);
            });

        #endregion

        NovelSetVis("F3000020");//あっぶ！

        yield return new WaitForSeconds(2.5f);

        #region ちえり姿勢戻し

        //モーション
        ChieriMotion("ドアからデスク横小皿置いて戻るまで", 0f, 0);

        //手マスクはずし
        ChieriMotion("_noData", 0.5f, 5);

        //IKオフ
        DOTweenToIKEfPos(IKRHandEf, 0, 1 / girlAnim.speed);
        DOTweenToIKEfRot(IKRHandEf, 0, 1 / girlAnim.speed);

        //手戻し待ち
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "ドアからデスク横小皿置いて戻るまで") { yield return null; }
        while (girlAnimNomTime <= 1f) { yield return null; }

        #endregion

        NovelSetVis("F3000030");//いづづ・・

        //ちえり座りまでの流れコルーチン
        StartCoroutine(F3000ChieriSuwari());

        while (isNovelSetVisIng) { yield return null; }

        #region 立ち上がり
        FadeBlack(1, 0.5f);
        yield return new WaitForSeconds(0.5f);

        //立ちに戻る
        isPlayerUniqueMotion = false;
        //PlayerMotion("_noData", 0f, 0);

        PlayerFBBIKtoHeadEffectorObj.transform.localPosition =
        PlayerFBBIKtoHeadEffectorObj.transform.localEulerAngles = Vector3.zero;

        yield return null;
        tmpTweener.Kill();
        tmpTweener = CameraAnchorTrs.DOLocalMove(DB.cameraStandAnchorDefLocalPos, 0);
        yield return null;

        CameraReset(Player020_TsukueOkarePosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos//立ち
            , true
            , Vector3.zero
            , false
            , true
            );


        //やたらこの命令が効かないので二回
        yield return null;
        tmpTweener.Kill();
        tmpTweener = CameraAnchorTrs.DOLocalMove(DB.cameraStandAnchorDefLocalPos, 0);
        yield return null;


        FadeBlack(0, 0.5f);
        yield return new WaitForSeconds(0.5f);

        //ダメ押しの開幕後に3回目
        yield return null;
        tmpTweener.Kill();
        tmpTweener = CameraAnchorTrs.DOLocalMove(DB.cameraStandAnchorDefLocalPos, 0);
        yield return null;


        #endregion

        NovelSetVis("F3000040");//もう少しやさしく
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        ChieriMotion("f_あ！ほら！口普通キョトン", 0.5f, 2);
        Hukidashi("F3000050");//今のが高かったの？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("f_十分？", 0.5f, 2);
        Hukidashi("F3000060");//机に比べたら
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        NovelSetVis("F3000050");//いや直接じゃないって！
        while (isNovelSetVisIng) { yield return null; }

        //座り完了待ち
        while (nowGirlAnimClipName != "ドアからデスク横ポーズから椅子に座って手を置く前") { yield return null; }
        while (girlAnimNomTime <= 1f) { yield return null; }

        #endregion

        #region 更に二回落とし

        #region つまむために手運び


        //■構え

        //IKTarget設置
        GameObject IKRHand015_TsumamiKamaePosObj
            = Resources.Load("_PosObj/0300Yubizeme/IKRHand015_TsumamiKamaePosObj") as GameObject;
        IKRHandTargetTrs.localPosition = IKRHand015_TsumamiKamaePosObj.transform.localPosition;
        IKRHandTargetTrs.localEulerAngles = IKRHand015_TsumamiKamaePosObj.transform.localEulerAngles;

        //右手マスクでつまみ
        ChieriMotion("椅子に座って手を置く", 1f, 0);

        //yield return new WaitForSeconds(0.5f / girlAnim.speed);

        //IKON
        DOTweenToIKEfPos(IKRHandEf, 1, 1f / girlAnim.speed);
        DOTweenToIKEfRot(IKRHandEf, 1, 1f / girlAnim.speed);
        //ChieriMotion("デスクペットボトルへ落とす前ポーズ", 1, 5);

        yield return new WaitForSeconds(0.5f / girlAnim.speed);


        //■つまむ

        //IKTarget設置
        GameObject IKRHand020_TsumamiPosObj
            = Resources.Load("_PosObj/0300Yubizeme/IKRHand020_TsumamiPosObj") as GameObject;

        //摘み手
        ChieriMotion("デスクペットボトルへ落とす前ポーズ", 0.5f / girlAnim.speed, 5);

        //待機用
        var isRHandTsumamiPos = false;
        IKRHandTargetTrs.DOLocalMove(IKRHand020_TsumamiPosObj.transform.localPosition
            , 1 / girlAnim.speed)
            .SetEase(Ease.InOutQuad);
        IKRHandTargetTrs.DOLocalRotate(IKRHand020_TsumamiPosObj.transform.localEulerAngles
            , 1 / girlAnim.speed)
            .SetEase(Ease.InOutQuad)
            .OnComplete(() =>
            {
                //到着フラグ
                isRHandTsumamiPos = true;
            });

        //到着まで待機
        while (isRHandTsumamiPos == false) { yield return null; }

        NovelSetVis("F3000060");//また？！

        FixedAction(() =>
        {
            //ペアレント
            CameraObjectsTrs.SetParent(GirlRhitosashi02Trs);
        });
        while (isFixedAction) { yield return null; }

        CameraReset(CameraObjectsTrs.localEulerAngles
            , CameraAnchorTrs.localPosition
            , false
            , CameraAnchorTrs.localEulerAngles
            , false
            , false);

        //ダミー
        isPlayerUniqueMotion = true;
        PlayerMotion("_noData", 1f, 0);
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalMoveY(1, 1f)
            .SetEase(Ease.Linear);

        //■あげる

        //IKTarget設置
        GameObject IKRHand030_TsumamiAgePosObj
            = Resources.Load("_PosObj/0300Yubizeme/IKRHand030_TsumamiAgePosObj") as GameObject;

        //摘み手
        ChieriMotion("デスクペットボトルへ落とす前ポーズ", 0.5f / girlAnim.speed, 5);

        //待機用
        var isRHandPos = false;
        IKRHandTargetTrs.DOLocalMove(IKRHand030_TsumamiAgePosObj.transform.localPosition
            , 1 / girlAnim.speed)
            .SetEase(Ease.InOutQuad);
        IKRHandTargetTrs.DOLocalRotate(IKRHand030_TsumamiAgePosObj.transform.localEulerAngles
            , 1 / girlAnim.speed)
            .SetEase(Ease.InOutQuad)
            .OnComplete(() =>
            {
                //到着フラグ
                isRHandPos = true;
            });

        //到着まで待機
        while (isRHandPos == false) { yield return null; }


        #endregion

        #region 会話

        ChieriMotion("f_え、なになんて？", 0.5f, 2);
        Hukidashi("F3000080");//うーん
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        Hukidashi("F3000090");//こんなに軽い
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("f_どうして謝るの？", 0.5f, 2);
        Hukidashi("F3000100");//そこまで
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("F3000070");//痛いよ！
        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("f_え？（半呆れ）", 0.5f, 2);
        Hukidashi("F3000110");//肘くらい
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("f_気づき（明）", 0.5f, 2);
        Hukidashi("F3000020");//3
        yield return new WaitForSeconds(1);

        NovelSetVis("F3000080");//え、待て待て！

        DelAll_Hukidashi();
        Hukidashi("F3000030");//2
        yield return new WaitForSeconds(1);
        DelAll_Hukidashi();
        Hukidashi("F3000040");//1
        yield return new WaitForSeconds(1);

        #endregion

        #region マコト離し

        FixedAction(() =>
        {
            //ペアレント外し、
            CameraObjectsTrs.SetParent(GameObjectsTrs);
        });
        while (isFixedAction) { yield return null; }

        //ダミーも
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalMove(Vector3.zero
            , 0.5f).SetEase(Ease.InQuad);
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalRotate(Vector3.zero
            , 0.5f).SetEase(Ease.InQuad);
        //アンカーも
        CameraAnchorTrs.DOLocalMove(DB.cameraStandAnchorDefLocalPos
            , 0.5f).SetEase(Ease.InQuad);

        //マコト着地まで待機用
        isMakotoRakka = false;

        //カメラ移動（落下イメージ）(高さのみ)
        CameraObjectsTrs.DOLocalMoveY(Player020_TsukueOkarePosObj.transform.localPosition.y
            , 0.5f).SetEase(Ease.InQuad)
            .OnComplete(() =>
            {
                isMakotoRakka = true;
            });

        //落ちるまで待機
        while (isMakotoRakka == false) { yield return null; }
        #endregion

        #region プレイヤーダメージとカメラ倒れ 直 （うつぶせ）

        //フラッシュと音とダメージ
        FadeWhite(1, 0);
        SEPlay("dan01");
        yield return new WaitForSeconds(0.05f);
        FadeWhite(0, 0);

        DelAll_Hukidashi();

        //TPSプレイヤー倒れモーション
        isPlayerUniqueMotion = true;
        PlayerMotion("liedown_00_Re", 0.2f, 0);
        //プレイヤーダミーうつ伏せに
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalMove(
            PlayerFBBIKtoHeadEffector020_UtsubusePosObj.transform.localPosition
            , 0.5f);
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalRotate(
            PlayerFBBIKtoHeadEffector020_UtsubusePosObj.transform.localEulerAngles
            , 0.5f);

        //回転直打ち
        CameraObjectsTrs.localEulerAngles = new Vector3(0, -60, 0);

        tmpDefCameraPos = CameraAnchorTrs.localPosition;
        tmpDefCameraEul = CameraAnchorTrs.localEulerAngles;
        tmpFlowCameraPos = new Vector3(0, 1.2f, 0);
        tmpSlipCameraPos = new Vector3(0, 0.3f, 0);
        tmpSlipCameraEul = new Vector3(80, 0, 0);

        CameraAnchorTrs.DOLocalMove(tmpFlowCameraPos, 0.05f);
        yield return new WaitForSeconds(0.05f);
        CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.5f).SetEase(Ease.OutBounce);
        yield return new WaitForSeconds(0.05f);
        CameraAnchorTrs.DOLocalMove(tmpDefCameraPos, 0.05f);
        yield return new WaitForSeconds(0.05f);

        CameraAnchorTrs.DOLocalRotate(tmpSlipCameraEul, 0.2f).SetEase(Ease.InSine);
        CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.5f).SetEase(Ease.OutBounce)
            .OnComplete(() =>
            {
                CameraReset(new Vector3(0, -60, 0)
                    , tmpSlipCameraPos
                    , false
                    , tmpSlipCameraEul
                    , false
                    , false);
            });

        #endregion

        NovelSetVis("F3000020");//あっぶ！

        yield return new WaitForSeconds(2);

        //ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        Hukidashi("F3000120");//ほら、ポト
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        #region つまむために手運び


        //■つまむ

        //IKTarget設置
        GameObject IKRHand040_Tsumami3PosObj
            = Resources.Load("_PosObj/0300Yubizeme/IKRHand040_Tsumami3PosObj") as GameObject;

        //指開き
        ChieriMotion("デスクペットボトル摘む前", 0.5f / girlAnim.speed, 5);

        //待機用
        isRHandTsumamiPos = false;
        IKRHandTargetTrs.DOLocalMove(IKRHand040_Tsumami3PosObj.transform.localPosition
            , 2 / girlAnim.speed)
            .SetEase(Ease.InOutQuad);
        IKRHandTargetTrs.DOLocalRotate(IKRHand040_Tsumami3PosObj.transform.localEulerAngles
            , 2 / girlAnim.speed)
            .SetEase(Ease.InOutQuad)
            .OnComplete(() =>
            {
                //摘み指
                ChieriMotion("デスクペットボトルへ落とす前ポーズ", 0.2f / girlAnim.speed, 5);
                //到着フラグ
                isRHandTsumamiPos = true;
            });

        //到着まで待機
        while (isRHandTsumamiPos == false) { yield return null; }

        NovelSetVis("F3000090");//なにやって……

        FixedAction(() =>
        {
            //ペアレント
            CameraObjectsTrs.SetParent(GirlRhitosashi02Trs);
        });
        while (isFixedAction) { yield return null; }

        //ダミー
        isPlayerUniqueMotion = true;
        PlayerMotion("_noData", 1f, 0);
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalMoveY(1, 1f)
            .SetEase(Ease.Linear);

        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalMove(Vector3.zero, 1f)
            .SetEase(Ease.Linear);
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalRotate(Vector3.zero, 1f)
            .SetEase(Ease.Linear);

        //カメラ位置
        GameObject Player030_PareRHitosashi02_TsumamiagePosObj
            = Resources.Load("_PosObj/0300Yubizeme/Player030_PareRHitosashi02_TsumamiagePosObj") as GameObject;
        CameraObjectsTrs.DOLocalMove(Player030_PareRHitosashi02_TsumamiagePosObj.transform.localPosition
            , 1f);
        CameraObjectsTrs.DOLocalRotate(Player030_PareRHitosashi02_TsumamiagePosObj.transform.localEulerAngles
            , 1f);
        //CameraUserControlTrs.DOLocalRotateQuaternion(Player030_PareRHitosashi02_TsumamiagePosObj.transform.localRotation
        //    , 1f);

        CameraAnchorTrs.DOLocalRotate(Vector3.zero, 1)
            .OnComplete(() =>
            {
                CameraReset(CameraObjectsTrs.localEulerAngles
                    , CameraAnchorTrs.localPosition
                    , false
                    , Vector3.zero
                    , false
                    , false);
            });



        //■あげる

        ////IKTarget設置
        //GameObject IKRHand030_TsumamiAgePosObj
        //    = Resources.Load("_PosObj/0300Yubizeme/IKRHand030_TsumamiAgePosObj") as GameObject;

        //摘み手
        ChieriMotion("デスクペットボトルへ落とす前ポーズ", 0.5f / girlAnim.speed, 5);

        //待機用
        isRHandPos = false;
        IKRHandTargetTrs.DOLocalMove(IKRHand030_TsumamiAgePosObj.transform.localPosition
            , 1 / girlAnim.speed)
            .SetEase(Ease.InOutQuad);
        IKRHandTargetTrs.DOLocalRotate(IKRHand030_TsumamiAgePosObj.transform.localEulerAngles
            , 1 / girlAnim.speed)
            .SetEase(Ease.InOutQuad)
            .OnComplete(() =>
            {
                //到着フラグ
                isRHandPos = true;
            });

        //到着まで待機
        while (isRHandPos == false) { yield return null; }


        #endregion

        #region 会話カウントダウン

        ChieriMotion("f_気づき（明）", 0.5f, 2);
        Hukidashi("F3000020");//3
        yield return new WaitForSeconds(1);

        NovelSetVis("F3000100");//冗談じゃ無く

        DelAll_Hukidashi();
        Hukidashi("F3000030");//2
        yield return new WaitForSeconds(1);
        DelAll_Hukidashi();
        Hukidashi("F3000040");//1
        yield return new WaitForSeconds(1);

        #endregion

        #region マコト離し

        FixedAction(() =>
        {
            //ペアレント外し、
            CameraObjectsTrs.SetParent(GameObjectsTrs);
        });
        while (isFixedAction) { yield return null; }

        //ダミーも
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalMove(Vector3.zero
            , 0.5f).SetEase(Ease.InQuad);
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalRotate(Vector3.zero
            , 0.5f).SetEase(Ease.InQuad);
        //アンカーも
        CameraAnchorTrs.DOLocalMove(DB.cameraStandAnchorDefLocalPos
            , 0.5f).SetEase(Ease.InQuad);

        //マコト着地まで待機用
        isMakotoRakka = false;

        //カメラ移動（落下イメージ）(高さのみ)
        CameraObjectsTrs.DOLocalMoveY(Player020_TsukueOkarePosObj.transform.localPosition.y
            , 0.5f).SetEase(Ease.InQuad)
            .OnComplete(() =>
            {
                isMakotoRakka = true;
            });

        //落ちるまで待機
        while (isMakotoRakka == false) { yield return null; }
        #endregion

        #region プレイヤーダメージとカメラ倒れ 直 （仰向け）

        //フラッシュと音とダメージ
        FadeWhite(1, 0);
        SEPlay("dan01");

        //カメラ位置
        GameObject Player040_3kaiOtosarePosObj
            = Resources.Load("_PosObj/0300Yubizeme/Player040_3kaiOtosarePosObj") as GameObject;
        CameraObjectsTrs.DOLocalMove(Player040_3kaiOtosarePosObj.transform.localPosition
            , 0f);
        CameraObjectsTrs.DOLocalRotate(Player040_3kaiOtosarePosObj.transform.localEulerAngles
            , 0f);

        //強制調整リセット
        CameraReset(
            Player040_3kaiOtosarePosObj.transform.localEulerAngles
            , DB.cameraSitAnchorDefLocalPos
            , true
            , Vector3.zero
            , false
            , true);

        yield return new WaitForSeconds(0.05f);
        FadeWhite(0, 0);

        DelAll_Hukidashi();

        //TPSプレイヤー倒れモーション
        isPlayerUniqueMotion = true;
        PlayerMotion("liedown_00_Re", 0.2f, 0);

        //プレイヤーダミー顔位置をカメラ位置に
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalMoveZ(
            0.7f
            , 0.5f);

        tmpDefCameraPos = DB.cameraSitAnchorDefLocalPos;
        tmpDefCameraEul = Vector3.zero;
        tmpFlowCameraPos = new Vector3(0, 1.2f, 0);
        tmpSlipCameraPos = new Vector3(0, 0.3f, 0);
        tmpSlipCameraEul = new Vector3(-45, 0, 0);

        CameraAnchorTrs.DOLocalMove(tmpFlowCameraPos, 0.05f);
        yield return new WaitForSeconds(0.05f);
        CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.5f).SetEase(Ease.OutBounce);
        yield return new WaitForSeconds(0.05f);
        CameraAnchorTrs.DOLocalMove(tmpDefCameraPos, 0.05f);
        yield return new WaitForSeconds(0.05f);

        CameraAnchorTrs.DOLocalRotate(tmpSlipCameraEul, 0.2f).SetEase(Ease.InSine);
        CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.5f).SetEase(Ease.OutBounce)
            .OnComplete(() =>
            {
                CameraReset(Player040_3kaiOtosarePosObj.transform.localEulerAngles
                    , tmpSlipCameraPos
                    , false
                    , tmpSlipCameraEul
                    , false
                    , false);
            });

        #endregion
        #endregion

        NovelSetVis("F3000110");//状況把握できないまま
        while (novelCurrentPageInt < 3) { yield return null; }

        #region 手降ろし（BendGoal調整入り）

        GameObject IKRHand050_TsumamiMaePosObj
            = Resources.Load("_PosObj/0300Yubizeme/IKRHand050_TsumamiMaePosObj") as GameObject;

        //指開き
        ChieriMotion("デスクペットボトル摘む前", 1f, 5);


        IKRHandTargetTrs.DOLocalMove(IKRHand050_TsumamiMaePosObj.transform.localPosition
            , 6f);
        IKRHandTargetTrs.DOLocalRotate(IKRHand050_TsumamiMaePosObj.transform.localEulerAngles
            , 6f);


        DOTween.To(() => FBBIK.solver.rightArmChain.bendConstraint.weight, (x) => FBBIK.solver.rightArmChain.bendConstraint.weight = x
        , 0.97f, 6f);



        #endregion

        #region やめてくれ　ホントに痛いの？
        yield return new WaitForSeconds(3);

        HukidashiNovelDistanceChange(0.6f, 0);
        NovelSetVis("F3000120");//やめてくれ
        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("f_怒ってる・・？", 0.4f, 2);
        Hukidashi("F3000130");//ほんとにそんなに痛いの？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("F3000130");//ホントに痛い
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        #endregion

        #region 摘み上げて 　会話 煽るまで

        #region つまむために手運び

        //■つまむ

        //IKTarget設置
        GameObject IKRHand060_Tsumami4PosObj
            = Resources.Load("_PosObj/0300Yubizeme/IKRHand060_Tsumami4PosObj") as GameObject;

        //摘み指
        ChieriMotion("デスクペットボトルへ落とす前ポーズ", 0.5f / girlAnim.speed, 5);

        //待機用
        isRHandTsumamiPos = false;
        IKRHandTargetTrs.DOLocalMove(IKRHand060_Tsumami4PosObj.transform.localPosition
            , 0.5f / girlAnim.speed)
            .SetEase(Ease.InOutQuad);
        IKRHandTargetTrs.DOLocalRotate(IKRHand060_Tsumami4PosObj.transform.localEulerAngles
            , 0.5f / girlAnim.speed)
            .SetEase(Ease.InOutQuad)
            .OnComplete(() =>
            {
                //到着フラグ
                isRHandTsumamiPos = true;
            });

        //到着まで待機
        while (isRHandTsumamiPos == false) { yield return null; }

        NovelSetVis("F3000140");//たのむから……

        FixedAction(() =>
        {
            //ペアレント
            CameraObjectsTrs.SetParent(GirlRhitosashi02Trs);
        });
        while (isFixedAction) { yield return null; }

        //ダミー
        isPlayerUniqueMotion = true;
        PlayerMotion("_noData", 1f, 0);
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalMoveY(1, 1f)
            .SetEase(Ease.Linear);

        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalMove(Vector3.zero, 1f)
            .SetEase(Ease.Linear);
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalRotate(Vector3.zero, 1f)
            .SetEase(Ease.Linear);

        //カメラ位置
        GameObject Player050_PareRHitosashi02_TsumamiagePosObj
            = Resources.Load("_PosObj/0300Yubizeme/Player050_PareRHitosashi02_TsumamiagePosObj") as GameObject;
        CameraObjectsTrs.DOLocalMove(Player050_PareRHitosashi02_TsumamiagePosObj.transform.localPosition
            , 1f);
        CameraObjectsTrs.DOLocalRotate(Player050_PareRHitosashi02_TsumamiagePosObj.transform.localEulerAngles
            , 1f);
        //CameraUserControlTrs.DOLocalRotateQuaternion(Player030_PareRHitosashi02_TsumamiagePosObj.transform.localRotation
        //    , 1f);

        CameraAnchorTrs.DOLocalRotate(Vector3.zero, 1)
            .OnComplete(() =>
            {
                CameraReset(CameraObjectsTrs.localEulerAngles
                    , CameraAnchorTrs.localPosition
                    , false
                    , Vector3.zero
                    , false
                    , false);
            });



        //■あげる

        //待機用
        isRHandPos = false;
        IKRHandTargetTrs.DOLocalMove(IKRHand030_TsumamiAgePosObj.transform.localPosition
            , 3 / girlAnim.speed)
            .SetEase(Ease.InOutQuad);
        IKRHandTargetTrs.DOLocalRotate(IKRHand030_TsumamiAgePosObj.transform.localEulerAngles
            , 3 / girlAnim.speed)
            .SetEase(Ease.InOutQuad)
            .OnComplete(() =>
            {
                //到着フラグ
                isRHandPos = true;
            });

        //到着まで待機
        while (isRHandPos == false) { yield return null; }


        #endregion

        while (isNovelSetVisIng) { yield return null; }

        HukidashiNovelDistanceChange(3, 0);

        #region 煽り会話になる　う～ん　～　なんでそんなこと・・
        ChieriMotion("f_え、なになんて？", 0.5f, 2);
        Hukidashi("F3000080");//う～ん
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1f);


        ChieriMotion("f_怒ってる・・？", 0.4f, 2);
        ChieriMotion("h_右少し傾け", 0f, 7);
        Hukidashi("F3000140");//本気出しても？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("F3000150");//本気もくそもないだろ！
        CameraAnchorTrs.DOShakePosition(0.5f, 0.1f);
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        ChieriMotion("f_気づき（明）", 0.3f, 2);
        ChieriMotion("h_noData", 0.5f, 7);
        Hukidashi("F3000150");//そうそう、そんな風に・・
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1f);


        #region 目IK どっかへ
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, BedTrs, 0f);
        #endregion

        Hukidashi("・・・");
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        #region 目IK 戻し
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        #endregion

        yield return new WaitForSeconds(2f);


        ChieriMotion("f_安堵", 0.3f, 2);
        Hukidashi("F3000160");//ふーーん弱虫だったんだ

        #region 肘つきポーズに移行しながら マコト奥へ 左手埋まらないよう少し浮かして戻し
        ChieriMotion("デスク起き上がり→肘つき", 1.5f, 0);

        //右手奥へ
        GameObject IKRHand070_SukosiOkuPosObj
                = Resources.Load("_PosObj/0300Yubizeme/IKRHand070_SukosiOkuPosObj") as GameObject;
        IKRHandTargetTrs.DOLocalMove(IKRHand070_SukosiOkuPosObj.transform.localPosition,
            1.5f / girlAnim.speed)
            .SetEase(Ease.InOutQuad);
        IKRHandTargetTrs.DOLocalRotate(IKRHand070_SukosiOkuPosObj.transform.localEulerAngles,
            1.5f / girlAnim.speed)
            .SetEase(Ease.InOutQuad);
        #region 左手少し浮かし戻しIK
        GameObject IKLHand020_NoridasiUmariBoushiPosObj
            = Resources.Load("_PosObj/0300Yubizeme/IKLHand020_NoridasiUmariBoushiPosObj") as GameObject;

        IKLHandTargetTrs.localPosition = IKLHand020_NoridasiUmariBoushiPosObj.transform.localPosition;
        IKLHandTargetTrs.localEulerAngles = IKLHand020_NoridasiUmariBoushiPosObj.transform.localEulerAngles;

        //IKちょいオン
        DOTweenToIKEfPos(IKLHandEf, 0.5f, 0.75f / girlAnim.speed);
        DOTweenToIKEfRot(IKLHandEf, 0.5f, 0.75f / girlAnim.speed);

        yield return new WaitForSeconds(0.75f / girlAnim.speed);

        //IKオフ
        DOTweenToIKEfPos(IKLHandEf, 0f, 0.75f / girlAnim.speed);
        DOTweenToIKEfRot(IKLHandEf, 0f, 0.75f / girlAnim.speed);
        #endregion


        #endregion
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("F3000160");//はあ・・？
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);


        ChieriMotion("f_余裕感笑顔", 0.4f, 2);
        Hukidashi("F3000170");//めそめそしちゃって
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("F3000170");//めそめそっていうか！
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        ChieriMotion("f_気づき（明）", 0.4f, 2);
        Hukidashi("F3000180");//今も怯えてるんでしょ？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("F3000185");//「離さないで～」って
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.2f);

        ChieriMotion("f_十分？", 0.3f, 2);
        Hukidashi("F3000190");//恥ずかしくないの？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("F3000180");//思わせるようなことしといて！
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        ChieriMotion("f_安堵", 0.3f, 2);
        Hukidashi("F3000200");//ふぅーん？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        ChieriMotion("f_気づき（明）", 0.4f, 2);
        yield return new WaitForSeconds(0.5f);

        Hukidashi("F3000210");//お願いしてみる？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("h_右少し傾け", 0f, 7);
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1.5f, "笑顔01口眉_目閉じない", 0.2f, 2);//時間差表情戻し
        Hukidashi("F3000220");//お願いしますって
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("F3000190");//？　なんでそんなこと
        while (novelCurrentPageInt < 1) { yield return null; }
        yield return new WaitForSeconds(1f);

        #endregion

        #endregion

        NovelSetVis("F3000200");//はっあっ　あぶっ！

        #region マコト離し

        FixedAction(() =>
        {
            //ペアレント外し、
            CameraObjectsTrs.SetParent(GameObjectsTrs);
        });
        while (isFixedAction) { yield return null; }

        //ダミーも
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalMove(Vector3.zero
            , 0.5f).SetEase(Ease.InQuad);
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalRotate(Vector3.zero
            , 0.5f).SetEase(Ease.InQuad);
        //アンカーも
        CameraAnchorTrs.DOLocalMove(DB.cameraStandAnchorDefLocalPos
            , 0.5f).SetEase(Ease.InQuad);

        //マコト着地まで待機用
        isMakotoRakka = false;

        //カメラ移動（落下イメージ）(高さのみ)
        CameraObjectsTrs.DOLocalMoveY(Player020_TsukueOkarePosObj.transform.localPosition.y
            , 0.5f).SetEase(Ease.InQuad)
            .OnComplete(() =>
            {
                isMakotoRakka = true;
            });

        //落ちるまで待機
        while (isMakotoRakka == false) { yield return null; }
        #endregion

        #region プレイヤーダメージとカメラ倒れ 直 （仰向け）

        //フラッシュと音とダメージ
        FadeWhite(1, 0);
        SEPlay("dan01");

        //カメラ位置
        GameObject Player060_SukosiOkuOtosarePosObj
            = Resources.Load("_PosObj/0300Yubizeme/Player060_SukosiOkuOtosarePosObj") as GameObject;
        CameraObjectsTrs.DOLocalMove(Player060_SukosiOkuOtosarePosObj.transform.localPosition
            , 0f);
        CameraObjectsTrs.DOLocalRotate(Player060_SukosiOkuOtosarePosObj.transform.localEulerAngles
            , 0f);

        //強制調整リセット
        CameraReset(
            Player060_SukosiOkuOtosarePosObj.transform.localEulerAngles
            , DB.cameraSitAnchorDefLocalPos
            , true
            , Vector3.zero
            , false
            , true);

        yield return new WaitForSeconds(0.05f);
        FadeWhite(0, 0);

        DelAll_Hukidashi();

        //TPSプレイヤー倒れモーション
        isPlayerUniqueMotion = true;
        PlayerMotion("liedown_00_Re", 0.2f, 0);

        //プレイヤーダミー顔位置をカメラ位置に
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalMoveZ(
            0.7f
            , 0.5f);

        tmpDefCameraPos = DB.cameraSitAnchorDefLocalPos;
        tmpDefCameraEul = Vector3.zero;
        tmpFlowCameraPos = new Vector3(0, 1.2f, 0);
        tmpSlipCameraPos = new Vector3(0, 0.3f, 0);
        tmpSlipCameraEul = new Vector3(-45, 0, 0);

        CameraAnchorTrs.DOLocalMove(tmpFlowCameraPos, 0.05f);
        yield return new WaitForSeconds(0.05f);
        CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.5f).SetEase(Ease.OutBounce);
        yield return new WaitForSeconds(0.05f);
        CameraAnchorTrs.DOLocalMove(tmpDefCameraPos, 0.05f);
        yield return new WaitForSeconds(0.05f);

        CameraAnchorTrs.DOLocalRotate(tmpSlipCameraEul, 0.2f).SetEase(Ease.InSine);
        CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.5f).SetEase(Ease.OutBounce)
            .OnComplete(() =>
            {
                CameraReset(Player060_SukosiOkuOtosarePosObj.transform.localEulerAngles
                    , tmpSlipCameraPos
                    , false
                    , tmpSlipCameraEul
                    , false
                    , false);
            });

        #endregion

        while (isNovelSetVisIng) { yield return null; }

        #region つまむために手運び 「やめろって・・」

        //■運び
        //IKTarget設置
        GameObject IKRHand080_TsumamiSukosiOkuPosObj
            = Resources.Load("_PosObj/0300Yubizeme/IKRHand080_TsumamiSukosiOkuPosObj") as GameObject;

        //指開き
        ChieriMotion("デスクペットボトル摘む前", 0.5f / girlAnim.speed, 5);

        //待機用
        isRHandTsumamiPos = false;
        IKRHandTargetTrs.DOLocalMove(IKRHand080_TsumamiSukosiOkuPosObj.transform.localPosition
            , 2 / girlAnim.speed)
            .SetEase(Ease.InOutQuad);
        IKRHandTargetTrs.DOLocalRotate(IKRHand080_TsumamiSukosiOkuPosObj.transform.localEulerAngles
            , 2 / girlAnim.speed)
            .SetEase(Ease.InOutQuad)
            .OnComplete(() =>
            {
                //到着フラグ
                isRHandTsumamiPos = true;
            });

        yield return new WaitForSeconds(1 / girlAnim.speed);

        HukidashiNovelDistanceChange(0.8f, 0);
        NovelSetVis("F3000210");//やめろって……


        //到着まで待機
        while (isRHandTsumamiPos == false) { yield return null; }

        #endregion

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "f_余裕感笑顔", 0.1f, 2);//時間差表情戻し
        Hukidashi("F3000230");//やめてくださいでしょ？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        #region 摘んで上げる

        //■摘む
        //IKTarget設置
        GameObject IKRHand085_TsumamuSukosiOkuPosObj
            = Resources.Load("_PosObj/0300Yubizeme/IKRHand085_TsumamuSukosiOkuPosObj") as GameObject;

        //待機用
        isRHandTsumamiPos = false;
        IKRHandTargetTrs.DOLocalMove(IKRHand085_TsumamuSukosiOkuPosObj.transform.localPosition
            , 0.5f / girlAnim.speed)
            .SetEase(Ease.InOutQuad);
        IKRHandTargetTrs.DOLocalRotate(IKRHand085_TsumamuSukosiOkuPosObj.transform.localEulerAngles
            , 0.5f / girlAnim.speed)
            .SetEase(Ease.InOutQuad)
            .OnComplete(() =>
            {
                //到着フラグ
                isRHandTsumamiPos = true;
            });


        //到着まで待機
        while (isRHandTsumamiPos == false) { yield return null; }

        FixedAction(() =>
        {
            //ペアレント
            CameraObjectsTrs.SetParent(GirlRhitosashi02Trs);
        });
        while (isFixedAction) { yield return null; }

        //ダミー
        isPlayerUniqueMotion = true;
        PlayerMotion("_noData", 1f, 0);
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalMoveY(1, 1f)
            .SetEase(Ease.Linear);

        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalMove(Vector3.zero, 1f)
            .SetEase(Ease.Linear);
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalRotate(Vector3.zero, 1f)
            .SetEase(Ease.Linear);

        //カメラ位置
        GameObject Player0301_PareRHitosashi02_TsumamiagePosObj
            = Resources.Load("_PosObj/0300Yubizeme/Player030_PareRHitosashi02_TsumamiagePosObj") as GameObject;
        CameraObjectsTrs.DOLocalMove(Player0301_PareRHitosashi02_TsumamiagePosObj.transform.localPosition
            , 1f);
        CameraObjectsTrs.DOLocalRotate(Player0301_PareRHitosashi02_TsumamiagePosObj.transform.localEulerAngles
            , 1f);
        //CameraUserControlTrs.DOLocalRotateQuaternion(Player030_PareRHitosashi02_TsumamiagePosObj.transform.localRotation
        //    , 1f);

        CameraAnchorTrs.DOLocalRotate(Vector3.zero, 1)
            .OnComplete(() =>
            {
                CameraReset(CameraObjectsTrs.localEulerAngles
                    , CameraAnchorTrs.localPosition
                    , false
                    , Vector3.zero
                    , false
                    , false);
            });



        //■あげる

        ////右手奥へ
        //GameObject IKRHand070_SukosiOkuPosObj
        //        = Resources.Load("_PosObj/0300Yubizeme/IKRHand070_SukosiOkuPosObj") as GameObject;

        //摘み手
        ChieriMotion("デスクペットボトルへ落とす前ポーズ", 0.2f / girlAnim.speed, 5);

        //待機用
        isRHandPos = false;
        IKRHandTargetTrs.DOLocalMove(IKRHand070_SukosiOkuPosObj.transform.localPosition
            , 2 / girlAnim.speed)
            .SetEase(Ease.InOutQuad);
        IKRHandTargetTrs.DOLocalRotate(IKRHand070_SukosiOkuPosObj.transform.localEulerAngles
            , 2 / girlAnim.speed)
            .SetEase(Ease.InOutQuad)
            .OnComplete(() =>
            {
                //到着フラグ
                isRHandPos = true;
            });

        //到着まで待機
        while (isRHandPos == false) { yield return null; }

        #endregion

        HukidashiNovelDistanceChange(3, 0);

        #region 煽り2度目 一言
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        Hukidashi("F3000240");//ほら、言わないと落ちちゃうよ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        yield return new WaitForSeconds(0.5f);
        NovelSetVis("F3000220");//まだばかなこと
        yield return new WaitForSeconds(1f);
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        #endregion

        #region マコト離し

        FixedAction(() =>
        {
            //ペアレント外し、
            CameraObjectsTrs.SetParent(GameObjectsTrs);
        });
        while (isFixedAction) { yield return null; }

        //ダミーも
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalMove(Vector3.zero
            , 0.5f).SetEase(Ease.InQuad);
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalRotate(Vector3.zero
            , 0.5f).SetEase(Ease.InQuad);
        //アンカーも
        CameraAnchorTrs.DOLocalMove(DB.cameraStandAnchorDefLocalPos
            , 0.5f).SetEase(Ease.InQuad);

        //マコト着地まで待機用
        isMakotoRakka = false;

        //カメラ移動（落下イメージ）(高さのみ)
        CameraObjectsTrs.DOLocalMoveY(Player020_TsukueOkarePosObj.transform.localPosition.y
            , 0.5f).SetEase(Ease.InQuad)
            .OnComplete(() =>
            {
                isMakotoRakka = true;
            });

        //落ちるまで待機
        while (isMakotoRakka == false) { yield return null; }
        #endregion
        NovelSetVis("F3000230");//うぶっ

        #region プレイヤーダメージとカメラ倒れ 直 （仰向け）

        //フラッシュと音とダメージ
        FadeWhite(1, 0);
        SEPlay("dan01");

        //カメラ位置
        //GameObject Player060_SukosiOkuOtosarePosObj
        //    = Resources.Load("_PosObj/0300Yubizeme/Player060_SukosiOkuOtosarePosObj") as GameObject;
        CameraObjectsTrs.DOLocalMove(Player060_SukosiOkuOtosarePosObj.transform.localPosition
            , 0f);
        CameraObjectsTrs.DOLocalRotate(Player060_SukosiOkuOtosarePosObj.transform.localEulerAngles
            , 0f);

        //強制調整リセット
        CameraReset(
            Player060_SukosiOkuOtosarePosObj.transform.localEulerAngles
            , DB.cameraSitAnchorDefLocalPos
            , true
            , Vector3.zero
            , false
            , true);

        yield return new WaitForSeconds(0.05f);
        FadeWhite(0, 0);

        DelAll_Hukidashi();

        //TPSプレイヤー倒れモーション
        isPlayerUniqueMotion = true;
        PlayerMotion("liedown_00_Re", 0.2f, 0);

        //プレイヤーダミー顔位置をカメラ位置に
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalMoveZ(
            0.7f
            , 0.5f);

        tmpDefCameraPos = DB.cameraSitAnchorDefLocalPos;
        tmpDefCameraEul = Vector3.zero;
        tmpFlowCameraPos = new Vector3(0, 1.2f, 0);
        tmpSlipCameraPos = new Vector3(0, 0.3f, 0);
        tmpSlipCameraEul = new Vector3(-45, 0, 0);

        CameraAnchorTrs.DOLocalMove(tmpFlowCameraPos, 0.05f);
        yield return new WaitForSeconds(0.05f);
        CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.5f).SetEase(Ease.OutBounce);
        yield return new WaitForSeconds(0.05f);
        CameraAnchorTrs.DOLocalMove(tmpDefCameraPos, 0.05f);
        yield return new WaitForSeconds(0.05f);

        CameraAnchorTrs.DOLocalRotate(tmpSlipCameraEul, 0.2f).SetEase(Ease.InSine);
        CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.5f).SetEase(Ease.OutBounce)
            .OnComplete(() =>
            {
                CameraReset(Player060_SukosiOkuOtosarePosObj.transform.localEulerAngles
                    , tmpSlipCameraPos
                    , false
                    , tmpSlipCameraEul
                    , false
                    , false);
            });

        #endregion
        while (isNovelSetVisIng) { yield return null; }

        #region つまむために手運び 「この馬鹿・・！」

        //■運び
        //IKTarget設置
        GameObject IKRHand090_YubiOshiAiPosObj
            = Resources.Load("_PosObj/0300Yubizeme/IKRHand090_YubiOshiAiPosObj") as GameObject;

        //指開き
        ChieriMotion("デスクペットボトル摘む前", 0.5f / girlAnim.speed, 5);

        //待機用
        isRHandTsumamiPos = false;
        IKRHandTargetTrs.DOLocalMove(IKRHand090_YubiOshiAiPosObj.transform.localPosition
            , 2 / girlAnim.speed)
            .SetEase(Ease.InOutQuad);
        IKRHandTargetTrs.DOLocalRotate(IKRHand090_YubiOshiAiPosObj.transform.localEulerAngles
            , 2 / girlAnim.speed)
            .SetEase(Ease.InOutQuad)
            .OnComplete(() =>
            {
                //到着フラグ
                isRHandTsumamiPos = true;
            });

        yield return new WaitForSeconds(1 / girlAnim.speed);

        HukidashiNovelDistanceChange(0.3f, 0);
        NovelSetVis("F3000240");//この馬鹿……！


        ////到着まで待機
        //while (isRHandTsumamiPos == false) { yield return null; }

        yield return new WaitForSeconds(0.5f / girlAnim.speed);

        #endregion

        OriBreathController.enabled = false;
        #region 押し合い用 プレイヤーIK(指にペアレント)

        #region プレイヤーIK(指にペアレント)
        //左手 親指に
        PlayerIKLHandTargetTrs.SetParent(GirlRoya02Trs);
        //右手 親指に
        PlayerIKRHandTargetTrs.SetParent(GirlRoya02Trs);

        GameObject PlayerIKLHand010_PareRoya02_AtePosObj
            = Resources.Load("_PosObj/0300Yubizeme/PlayerIKLHand010_PareRoya02_AtePosObj") as GameObject;

        PlayerIKLHandTargetTrs.localPosition = PlayerIKLHand010_PareRoya02_AtePosObj.transform.localPosition;
        PlayerIKLHandTargetTrs.localEulerAngles = PlayerIKLHand010_PareRoya02_AtePosObj.transform.localEulerAngles;

        GameObject PlayerIKRHand010_PareRoya02_AtePosObj
            = Resources.Load("_PosObj/0300Yubizeme/PlayerIKRHand010_PareRoya02_AtePosObj") as GameObject;
        PlayerIKRHandTargetTrs.localPosition = PlayerIKRHand010_PareRoya02_AtePosObj.transform.localPosition;
        PlayerIKRHandTargetTrs.localEulerAngles = PlayerIKRHand010_PareRoya02_AtePosObj.transform.localEulerAngles;

        //ArmBendGoal 1
        PlayerFBBIK.solver.rightArmChain.bendConstraint.weight = 1;
        //PlayerFBBIK.solver.leftArmChain.bendConstraint.weight = 1;

        //Reach 0
        PlayerFBBIK.solver.rightArmChain.reach =
        PlayerFBBIK.solver.leftArmChain.reach = 0;

        //Dummyハンド表示
        isDummyHandVis = true;
        Dummy_Hand.SetActive(true);

        #endregion
        PlayerMotion("登りパー", 0f, 2);
        PlayerMotion("登りパー", 0f, 3);

        #region プレイヤーIKON
        DOTweenToIKEfPos(PlayerIKLHandEf, 1, 0.3f, Ease.InQuad);
        DOTweenToIKEfRot(PlayerIKLHandEf, 1, 0.3f, Ease.InQuad);
        DOTweenToIKEfPos(PlayerIKRHandEf, 1, 0.35f, Ease.InQuad);
        DOTweenToIKEfRot(PlayerIKRHandEf, 1, 0.35f, Ease.InQuad);
        #endregion

        yield return new WaitForSeconds(0.3f);
        CameraAnchorTrs.DOShakePosition(0.2f, 0.1f);
        //SE
        SEPlay(Other3DSEObj, grapHadaStrList[Random.Range(0, grapHadaStrList.Count)], PlayerIKLHandTargetTrs.gameObject, 4);

        yield return new WaitForSeconds(0.05f);
        SEPlay(Other3DSEObj, grapHadaStrList[Random.Range(0, grapHadaStrList.Count)], PlayerIKRHandTargetTrs.gameObject, 4);


        #region プレイヤー左手たたきTweener事前設定
        GameObject PlayerIKLHand015_PareRoya02_HuriagePosObj
            = Resources.Load("_PosObj/0300Yubizeme/PlayerIKLHand015_PareRoya02_HuriagePosObj") as GameObject;

        Tweener playerLHandTatakiTweener =
            PlayerIKLHandTargetTrs.DOLocalMove(PlayerIKLHand015_PareRoya02_HuriagePosObj.transform.localPosition
            , 0.1f)
            .SetEase(Ease.OutQuad)
            .OnComplete(() =>
            {
                //SEPlay(Other3DSEObj, "足音3_footsteps_shoe_grass_walk_05", PlayerIKRHandTargetTrs.gameObject, 0.5f);
                SEPlay(Other3DSEObj, grapHadaStrList[Random.Range(0, grapHadaStrList.Count)], PlayerIKLHandTargetTrs.gameObject, 1);
                PlayerIKLHandTargetTrs.DOLocalMove(PlayerIKLHand010_PareRoya02_AtePosObj.transform.localPosition
                    , 0.05f)
                    .SetEase(Ease.OutBounce);
            })
            .SetAutoKill(false);
        playerLHandTatakiTweener.Pause();
        #endregion
        #region プレイヤー右手たたきTweener事前設定
        GameObject PlayerIKRHand015_PareRoya02_HuriagePosObj
            = Resources.Load("_PosObj/0300Yubizeme/PlayerIKRHand015_PareRoya02_HuriagePosObj") as GameObject;

        Tweener playerRHandTatakiTweener =
            PlayerIKRHandTargetTrs.DOLocalMove(PlayerIKRHand015_PareRoya02_HuriagePosObj.transform.localPosition
            , 0.1f)
            .SetEase(Ease.OutQuad)
            .OnComplete(() =>
            {
                //SEPlay(Other3DSEObj, "足音3_footsteps_shoe_grass_walk_05", PlayerIKRHandTargetTrs.gameObject, 0.5f);
                SEPlay(Other3DSEObj, grapHadaStrList[Random.Range(0, grapHadaStrList.Count)], PlayerIKRHandTargetTrs.gameObject, 1);
                PlayerIKRHandTargetTrs.DOLocalMove(PlayerIKRHand010_PareRoya02_AtePosObj.transform.localPosition
                    , 0.05f)
                    .SetEase(Ease.OutBounce);
            })
            .SetAutoKill(false);
        playerRHandTatakiTweener.Pause();
        #endregion
        #endregion

        #region 押し合い 暫定
        ChieriMotion("デスクペットボトルへ落とす前ポーズ", 4f, 5);
        yield return new WaitForSeconds(1);
        CameraAnchorTrs.DOShakePosition(6f, 0.002f, 40);

        Hukidashi("F3000250");//抵抗してる？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        Hukidashi("F3000260");//おしあいっこしよっか
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("デスクペットボトル摘む前", 3f, 5);
        yield return new WaitForSeconds(2);

        CameraAnchorTrs.DOShakePosition(6f, 0.002f, 40);
        Hukidashi("F3000270");//あはは、押してる押してる
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        CameraAnchorTrs.DOShakePosition(6f, 0.002f, 40);
        ChieriMotion("ひとさし指差し", 3f, 5);
        Hukidashi("F3000280");//わーつよいつよい
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(2);


        Hukidashi("F3000290");//こっちの指はいいの？
        yield return new WaitForSeconds(1);
        CameraAnchorTrs.DOShakePosition(0.7f / girlAnim.speed, 0.05f, 40);
        ChieriMotion("デスクペットボトルへ落とす前ポーズ", 0.5f, 5);
        yield return KeyOrWait(3);

        ChieriMotion("デスクペットボトル摘む前", 0.2f, 5);
        yield return new WaitForSeconds(0.3f);
        ChieriMotion("デスクペットボトルへ落とす前ポーズ", 0.2f, 5);


        Hukidashi("F3000300");//親指だけで精一杯？

        ChieriMotion("デスクペットボトル摘む前", 0.2f, 5);
        yield return new WaitForSeconds(0.3f);
        ChieriMotion("デスクペットボトルへ落とす前ポーズ", 0.2f, 5);

        yield return new WaitForSeconds(1);

        ChieriMotion("デスクペットボトル摘む前", 0.2f, 5);
        yield return new WaitForSeconds(0.3f);
        ChieriMotion("デスクペットボトルへ落とす前ポーズ", 0.2f, 5);

        yield return KeyOrWait(3);

        ChieriMotion("デスクペットボトル摘む前", 0.5f, 5);
        yield return new WaitForSeconds(1);
        ChieriMotion("デスクペットボトルへ落とす前ポーズ", 0.5f, 5);

        yield return new WaitForSeconds(1);
        ChieriMotion("ひとさし指差し", 1f, 5);

        #endregion

        #region 摘んで上げる プレイヤー手IK ONOFF入り OriBreathもON
        #region プレイヤーIKちょいOFF
        DOTweenToIKEfPos(PlayerIKLHandEf, 0.5f, 1f, Ease.InOutQuad);
        DOTweenToIKEfRot(PlayerIKLHandEf, 0.5f, 1f, Ease.InOutQuad);
        DOTweenToIKEfPos(PlayerIKRHandEf, 0.5f, 1f, Ease.InOutQuad);
        DOTweenToIKEfRot(PlayerIKRHandEf, 0.5f, 1f, Ease.InOutQuad);
        #endregion

        //■摘む
        ////IKTarget設置
        //GameObject IKRHand085_TsumamuSukosiOkuPosObj
        //    = Resources.Load("_PosObj/0300Yubizeme/IKRHand085_TsumamuSukosiOkuPosObj") as GameObject;

        //待機用
        isRHandTsumamiPos = false;
        IKRHandTargetTrs.DOLocalMove(IKRHand085_TsumamuSukosiOkuPosObj.transform.localPosition
            , 0.5f / girlAnim.speed)
            .SetEase(Ease.InOutQuad);
        IKRHandTargetTrs.DOLocalRotate(IKRHand085_TsumamuSukosiOkuPosObj.transform.localEulerAngles
            , 0.5f / girlAnim.speed)
            .SetEase(Ease.InOutQuad)
            .OnComplete(() =>
            {
                //到着フラグ
                isRHandTsumamiPos = true;
            });

        OriBreathController.enabled = true;

        //到着まで待機
        while (isRHandTsumamiPos == false) { yield return null; }

        #region プレイヤーIKOFF
        DOTweenToIKEfPos(PlayerIKLHandEf, 0f, 0.4f, Ease.InOutQuad);
        DOTweenToIKEfRot(PlayerIKLHandEf, 0f, 0.4f, Ease.InOutQuad);
        DOTweenToIKEfPos(PlayerIKRHandEf, 0f, 0.4f, Ease.InOutQuad);
        DOTweenToIKEfRot(PlayerIKRHandEf, 0f, 0.4f, Ease.InOutQuad);
        #endregion



        FixedAction(() =>
        {
            //ペアレント
            CameraObjectsTrs.SetParent(GirlRhitosashi02Trs);
        });
        while (isFixedAction) { yield return null; }

        //ダミー
        isPlayerUniqueMotion = true;
        PlayerMotion("_noData", 1f, 0);
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalMoveY(1, 1f)
            .SetEase(Ease.Linear);

        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalMove(Vector3.zero, 1f)
            .SetEase(Ease.Linear);
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalRotate(Vector3.zero, 1f)
            .SetEase(Ease.Linear);

        ////カメラ位置
        //GameObject Player050_PareRHitosashi02_TsumamiagePosObj
        //    = Resources.Load("_PosObj/0300Yubizeme/Player050_PareRHitosashi02_TsumamiagePosObj") as GameObject;
        CameraObjectsTrs.DOLocalMove(Player050_PareRHitosashi02_TsumamiagePosObj.transform.localPosition
            , 1f);
        CameraObjectsTrs.DOLocalRotate(Player050_PareRHitosashi02_TsumamiagePosObj.transform.localEulerAngles
            , 1f);
        //CameraUserControlTrs.DOLocalRotateQuaternion(Player030_PareRHitosashi02_TsumamiagePosObj.transform.localRotation
        //    , 1f);

        CameraAnchorTrs.DOLocalRotate(Vector3.zero, 1)
            .OnComplete(() =>
            {
                CameraReset(CameraObjectsTrs.localEulerAngles
                    , CameraAnchorTrs.localPosition
                    , false
                    , Vector3.zero
                    , false
                    , false);
            });



        //■あげる

        ////右手奥へ
        //GameObject IKRHand070_SukosiOkuPosObj
        //        = Resources.Load("_PosObj/0300Yubizeme/IKRHand070_SukosiOkuPosObj") as GameObject;

        //摘み手
        ChieriMotion("デスクペットボトルへ落とす前ポーズ", 0.2f / girlAnim.speed, 5);

        //待機用
        isRHandPos = false;
        IKRHandTargetTrs.DOLocalMove(IKRHand070_SukosiOkuPosObj.transform.localPosition
            , 2 / girlAnim.speed)
            .SetEase(Ease.InOutQuad);
        IKRHandTargetTrs.DOLocalRotate(IKRHand070_SukosiOkuPosObj.transform.localEulerAngles
            , 2 / girlAnim.speed)
            .SetEase(Ease.InOutQuad)
            .OnComplete(() =>
            {
                //到着フラグ
                isRHandPos = true;
            });

        yield return new WaitForSeconds(1 / girlAnim.speed);

        #region プレイヤーIK(指にペアレントなど)

        #region プレイヤーIK(指にペアレント)
        //左手 親指に
        PlayerIKLHandTargetTrs.SetParent(GirlRoya02Trs);
        //右手 親指に
        PlayerIKRHandTargetTrs.SetParent(GirlRoya02Trs);

        GameObject PlayerIKLHand020_PareRoya02_AtePosObj
            = Resources.Load("_PosObj/0300Yubizeme/PlayerIKLHand020_PareRoya02_AtePosObj") as GameObject;

        PlayerIKLHandTargetTrs.localPosition = PlayerIKLHand020_PareRoya02_AtePosObj.transform.localPosition;
        PlayerIKLHandTargetTrs.localEulerAngles = PlayerIKLHand020_PareRoya02_AtePosObj.transform.localEulerAngles;

        GameObject PlayerIKRHand020_PareRoya02_AtePosObj
            = Resources.Load("_PosObj/0300Yubizeme/PlayerIKRHand020_PareRoya02_AtePosObj") as GameObject;
        PlayerIKRHandTargetTrs.localPosition = PlayerIKRHand020_PareRoya02_AtePosObj.transform.localPosition;
        PlayerIKRHandTargetTrs.localEulerAngles = PlayerIKRHand020_PareRoya02_AtePosObj.transform.localEulerAngles;

        //ArmBendGoal 1
        PlayerFBBIK.solver.rightArmChain.bendConstraint.weight = 1;
        //PlayerFBBIK.solver.leftArmChain.bendConstraint.weight = 1;

        //Reach 0
        PlayerFBBIK.solver.rightArmChain.reach =
        PlayerFBBIK.solver.leftArmChain.reach = 0;

        //Dummyハンド表示
        isDummyHandVis = true;
        Dummy_Hand.SetActive(true);

        #endregion

        PlayerMotion("登りパー", 0f, 2);
        PlayerMotion("登りパー", 0f, 3);

        #region プレイヤーIKON
        DOTweenToIKEfPos(PlayerIKLHandEf, 1, 0.7f, Ease.InQuad);
        DOTweenToIKEfRot(PlayerIKLHandEf, 1, 0.7f, Ease.InQuad);
        DOTweenToIKEfPos(PlayerIKRHandEf, 1, 0.75f, Ease.InQuad);
        DOTweenToIKEfRot(PlayerIKRHandEf, 1, 0.75f, Ease.InQuad);
        #endregion

        ////SE
        //yield return new WaitForSeconds(0.7f);
        //SEPlay(Other3DSEObj, grapHadaStrList[Random.Range(0, grapHadaStrList.Count)], PlayerIKLHandTargetTrs.gameObject, 1);
        //yield return new WaitForSeconds(0.05f);
        //SEPlay(Other3DSEObj, grapHadaStrList[Random.Range(0, grapHadaStrList.Count)], PlayerIKRHandTargetTrs.gameObject, 1);


        #region プレイヤー左手たたきTweener事前設定
        GameObject PlayerIKLHand025_PareRoya02_HuriagePosObj
            = Resources.Load("_PosObj/0300Yubizeme/PlayerIKLHand025_PareRoya02_HuriagePosObj") as GameObject;

        Tweener playerLHandTataki2Tweener =
            PlayerIKLHandTargetTrs.DOLocalMove(PlayerIKLHand025_PareRoya02_HuriagePosObj.transform.localPosition
            , 0.1f)
            .SetEase(Ease.OutQuad)
            .OnComplete(() =>
            {
                //SEPlay(Other3DSEObj, "足音3_footsteps_shoe_grass_walk_05", PlayerIKRHandTargetTrs.gameObject, 0.5f);
                SEPlay(Other3DSEObj, grapHadaStrList[Random.Range(0, grapHadaStrList.Count)], PlayerIKLHandTargetTrs.gameObject, 1);
                PlayerIKLHandTargetTrs.DOLocalMove(PlayerIKLHand020_PareRoya02_AtePosObj.transform.localPosition
                    , 0.05f)
                    .SetEase(Ease.OutBounce);
            })
            .SetAutoKill(false);
        playerLHandTataki2Tweener.Pause();
        #endregion
        #region プレイヤー右手たたきTweener事前設定
        GameObject PlayerIKRHand025_PareRoya02_HuriagePosObj
            = Resources.Load("_PosObj/0300Yubizeme/PlayerIKRHand025_PareRoya02_HuriagePosObj") as GameObject;

        Tweener playerRHandTataki2Tweener =
            PlayerIKRHandTargetTrs.DOLocalMove(PlayerIKRHand025_PareRoya02_HuriagePosObj.transform.localPosition
            , 0.1f)
            .SetEase(Ease.OutQuad)
            .OnComplete(() =>
            {
                //SEPlay(Other3DSEObj, "足音3_footsteps_shoe_grass_walk_05", PlayerIKRHandTargetTrs.gameObject, 0.5f);
                SEPlay(Other3DSEObj, grapHadaStrList[Random.Range(0, grapHadaStrList.Count)], PlayerIKRHandTargetTrs.gameObject, 1);
                PlayerIKRHandTargetTrs.DOLocalMove(PlayerIKRHand020_PareRoya02_AtePosObj.transform.localPosition
                    , 0.05f)
                    .SetEase(Ease.OutBounce);
            })
            .SetAutoKill(false);
        playerRHandTataki2Tweener.Pause();
        #endregion
        #endregion


        ChieriMotion("笑顔01口眉", 0.1f, 2);
        HukidashiNovelDistanceChange(3, 0);
        Hukidashi("F3000310");//えへへ～
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        //到着まで待機
        while (isRHandPos == false) { yield return null; }
        yield return new WaitForSeconds(1);


        #endregion


        #region 会話 つまめちゃった　～　わ・・まで
        ChieriMotion("笑顔02アルカイック口眉", 0.1f, 2);
        Hukidashi("F3000320");//つまめちゃった
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1.5f, "笑顔02アルカイック口眉", 0.2f, 2);//時間差表情戻し
        Hukidashi("F3000340");//諦めて言ってみて
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("F3000250");//やめないつもりか・・・
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        NovelSetVis("F3000255");//は……は ちえりはきっと残念がるだろう
        ChieriMotionDelay(1.5f, "笑顔01口眉_目閉じない", 0.5f, 2);//時間差表情戻し
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);

        NovelSetVis("F3000257");//離さないで下さい
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);


        ChieriMotion("h_noData", 0.5f, 7);
        ChieriMotion("f_あ！ほら！口普通キョトン", 0.3f, 2);
        //ChieriMotion("f_え？？", 1f, 2);
        TereHoho();

        yield return new WaitForSeconds(0.5f);

        Hukidashi("F3000350");//わ・・
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        #endregion

        ChieriMotion("デスク肘つき→起き上がり", 2f, 0);
        #region 前傾やめに併せて　IK右手近づけ

        GameObject IKRHand110_IttyattaPosObj
                = Resources.Load("_PosObj/0300Yubizeme/IKRHand110_IttyattaPosObj") as GameObject;

        //待機用
        isRHandPos = false;
        IKRHandTargetTrs.DOLocalMove(IKRHand110_IttyattaPosObj.transform.localPosition
            , 2 / girlAnim.speed)
            .SetEase(Ease.InOutQuad);
        IKRHandTargetTrs.DOLocalRotate(IKRHand110_IttyattaPosObj.transform.localEulerAngles
            , 2 / girlAnim.speed)
            .SetEase(Ease.InOutQuad)
            .OnComplete(() =>
            {
                //到着フラグ
                isRHandPos = true;
            });

        //待ち
        while (isRHandPos == false) { yield return null; }


        #endregion

        #region 会話 ・・・ ～ 顔近づける直前まで
        Hukidashi("・・・");
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("f_十分？", 1f, 2);
        Hukidashi("F3000360");//ほんとに言っちゃった
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        ChieriMotion("f_ほんとに手の上だ・・？", 2f, 2);

        NovelSetVis("F3000260");//な、なんだよ・・・
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);

        Hukidashi("F3000370");//そっか
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        HukidashiNovelDistanceChange(1.7f, 0);

        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1f, "笑顔02アルカイック口眉", 0.2f, 2);//時間差表情戻し
        Hukidashi("F3000380");//えへへ・・

        #endregion



        ChieriMotion("デスク肘つきポーズミラー", 1f, 0);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        #region 更にIK右手近づけ

        GameObject IKRHand120_KatameMitsumePosObj
                = Resources.Load("_PosObj/0300Yubizeme/IKRHand120_KatameMitsumePosObj") as GameObject;

        //待機用
        isRHandPos = false;
        IKRHandTargetTrs.DOLocalMove(IKRHand120_KatameMitsumePosObj.transform.localPosition
            , 2 / girlAnim.speed)
            .SetEase(Ease.InOutQuad);
        IKRHandTargetTrs.DOLocalRotate(IKRHand120_KatameMitsumePosObj.transform.localEulerAngles
            , 2 / girlAnim.speed)
            .SetEase(Ease.InOutQuad)
            .OnComplete(() =>
            {
                //到着フラグ
                isRHandPos = true;
            });

        //待ち
        while (isRHandPos == false) { yield return null; }


        #endregion

        HukidashiNovelDistanceChange(1f, 0);
        #region 会話 顔で埋まった　～ 持ち上げて とめてくれなかったよね　まで
        NovelSetVis("F3000270");//顔で埋まった　無力
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        Hukidashi("・・・");
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        NovelSetVis("F3000280");//無言の眼球　言ったんだから　迷う
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        ChieriMotion("笑顔01口眉", 0.2f, 2);
        Hukidashi("F3000385");//ふふ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("笑顔02アルカイック口眉", 0.2f, 2);
        yield return new WaitForSeconds(2);

        Hukidashi("F3000390");//ね、マコト
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        Hukidashi("F3000400");//昔さ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("F3000290");//あったような・・
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1f);

        #endregion

        ChieriMotion("デスク肘つき→起き上がり", 1f, 0);
        //頭IK プレイヤーへの高さ変更
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f / girlAnim.speed);

        ChieriMotion("笑顔01口眉_目閉じない", 3f, 2);

        #region IK右手見上げ位置 会話入り

        GameObject IKRHand130_MiagePosObj
                = Resources.Load("_PosObj/0300Yubizeme/IKRHand130_MiagePosObj") as GameObject;

        //待機用
        isRHandPos = false;
        IKRHandTargetTrs.DOLocalMove(IKRHand130_MiagePosObj.transform.localPosition
            , 2 / girlAnim.speed)
            .SetEase(Ease.InOutQuad);
        IKRHandTargetTrs.DOLocalRotate(IKRHand130_MiagePosObj.transform.localEulerAngles
            , 2 / girlAnim.speed)
            .SetEase(Ease.InOutQuad)
            .OnComplete(() =>
            {
                //到着フラグ
                isRHandPos = true;
            });



        HukidashiNovelDistanceChange(3, 0);

        Hukidashi("F3000410");//下り坂
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("F3000300");//あぶな・・！
        yield return new WaitForSeconds(2);

        ChieriMotion("f_あはは・・2", 0.1f, 2);
        ChieriMotionDelay(1, "f_あはは・・2目開き", 0.1f, 2);//時間差表情戻し
        Hukidashi("F3000420");//怖くてお願い
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        Hukidashi("F3000430");//平気平気って
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        ChieriMotion("f_あはは・・2", 0.1f, 2);
        ChieriMotionDelay(1, "f_あはは・・2目開き", 0.1f, 2);//時間差表情戻し
        Hukidashi("F3000435");//とめてくれなかったよね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        //待ち
        while (isRHandPos == false) { yield return null; }



        #endregion
        yield return new WaitForSeconds(1);

        #region 仕返しを？　～ 結構楽しかったよ
        NovelSetVis("F3000310");//仕返しを……？
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.2f);


        ChieriMotion("笑顔01口眉_目閉じない", 0.2f, 2);
        Hukidashi("F3000440");//違うよ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        #region 目IK どっかへ
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, CalenderTrs, 0f);
        #endregion

        Hukidashi("F3000450");//凄く怖かったけど
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);


        ChieriMotion("h_右少し傾け", 0f, 7);
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.2f, 2);//時間差表情戻し

        Hukidashi("F3000455");//結構楽しかったよ
        yield return new WaitForSeconds(1);
        #region 目IK 戻し
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        #endregion
        yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        #endregion

        //ChieriMotion("h_noData", 1f, 7);
        //頭IK プレイヤーへの高さ変更
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs
            , new Vector3(0, -0.11f, 0)
            , 1f / girlAnim.speed);
        ChieriMotion("デスク肘つきポーズミラー", 2f, 0);

        #region 手IK下へ

        GameObject IKRHand140_NatsukasiiyonePosObj
            = Resources.Load("_PosObj/0300Yubizeme/IKRHand140_NatsukasiiyonePosObj") as GameObject;

        isRHandTsumamiPos = false;
        IKRHandTargetTrs.DOLocalMove(IKRHand140_NatsukasiiyonePosObj.transform.localPosition
            , 2f / girlAnim.speed)
            .SetEase(Ease.InOutQuad);
        IKRHandTargetTrs.DOLocalRotate(IKRHand140_NatsukasiiyonePosObj.transform.localEulerAngles
            , 2f / girlAnim.speed)
            .SetEase(Ease.InOutQuad)
            .OnComplete(() =>
            {
                //到着フラグ
                isRHandTsumamiPos = true;
            });


        //到着まで待機
        while (isRHandTsumamiPos == false) { yield return null; }

        #endregion

        HukidashiNovelDistanceChange(4, 0);

        #region 懐かしいよね ～
        Hukidashi("F3000460");//懐かしいよね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        Hukidashi("F3000470");//しがみついて叩いたけど
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        Hukidashi("F3000480");//今は摘むだけで
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("f_ジト目40ん？私のハンカチで？", 0.8f, 2);
        Hukidashi("F3000490");//言うこと聞いてくれるんだーって
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1f);

        NovelSetVis("F3000320");//同じちえりだと感傷
        while (isNovelSetVisIng) { yield return null; }
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.2f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1);

        NovelSetVis("F3000330");//いやあれはさ・・　悪かったと思ううん
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        ChieriMotion("f_あはは・・2", 0.2f, 2);
        ChieriMotionDelay(1.5f, "f_あはは・・2目開き", 0.1f, 2);//時間差表情戻し
        Hukidashi("F3000500");//そう？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        #endregion

        #region 落として指押さえつけ開始まで一連 会話入り
        ChieriMotion("h_noData", 1f, 7);

        ChieriMotion("デスク肘つき→起き上がり", 1f, 0);

        #region 手IK少し奥に戻し 会話入り

        isRHandTsumamiPos = false;
        IKRHandTargetTrs.DOLocalMove(IKRHand070_SukosiOkuPosObj.transform.localPosition
            , 1f / girlAnim.speed)
            .SetEase(Ease.InOutQuad);
        IKRHandTargetTrs.DOLocalRotate(IKRHand070_SukosiOkuPosObj.transform.localEulerAngles
            , 1f / girlAnim.speed)
            .SetEase(Ease.InOutQuad)
            .OnComplete(() =>
            {
                //到着フラグ
                isRHandTsumamiPos = true;
            });

        ChieriMotion("笑顔01口眉_目閉じない", 0.5f, 2);
        yield return new WaitForSeconds(0.5f);

        Hukidashi("F3000510");//じゃあやっぱりお返しした方が
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("笑顔02アルカイック口眉", 0.2f, 2);
        Hukidashi("F3000520");//おあいこになっていいかな？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        TereHoho(false, 8f);

        //到着まで待機
        while (isRHandTsumamiPos == false) { yield return null; }

        #endregion

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        NovelSetVis("F3000340");//いやそれは！　がっ
        yield return new WaitForSeconds(0.3f);

        #region プレイヤーIKOFF
        DOTweenToIKEfPos(PlayerIKLHandEf, 0f, 1f, Ease.InOutQuad);
        DOTweenToIKEfRot(PlayerIKLHandEf, 0f, 1f, Ease.InOutQuad);
        DOTweenToIKEfPos(PlayerIKRHandEf, 0f, 1f, Ease.InOutQuad);
        DOTweenToIKEfRot(PlayerIKRHandEf, 0f, 1f, Ease.InOutQuad);
        #endregion
        #region マコト離し

        FixedAction(() =>
        {
            //ペアレント外し、
            CameraObjectsTrs.SetParent(GameObjectsTrs);
        });
        while (isFixedAction) { yield return null; }

        //ダミーも
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalMove(Vector3.zero
            , 0.5f).SetEase(Ease.InQuad);
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalRotate(Vector3.zero
            , 0.5f).SetEase(Ease.InQuad);
        //アンカーも
        CameraAnchorTrs.DOLocalMove(DB.cameraStandAnchorDefLocalPos
            , 0.5f).SetEase(Ease.InQuad);

        //マコト着地まで待機用
        isMakotoRakka = false;

        //カメラ移動（落下イメージ）(高さのみ)
        CameraObjectsTrs.DOLocalMoveY(Player020_TsukueOkarePosObj.transform.localPosition.y
            , 0.5f).SetEase(Ease.InQuad)
            .OnComplete(() =>
            {
                isMakotoRakka = true;
            });

        //落ちるまで待機
        while (isMakotoRakka == false) { yield return null; }
        #endregion

        #region プレイヤーダメージとカメラ倒れ 直 （仰向け）

        //フラッシュと音とダメージ
        FadeWhite(1, 0);
        SEPlay("dan01");

        //カメラ位置
        //GameObject Player060_SukosiOkuOtosarePosObj
        //    = Resources.Load("_PosObj/0300Yubizeme/Player060_SukosiOkuOtosarePosObj") as GameObject;
        CameraObjectsTrs.DOLocalMove(Player060_SukosiOkuOtosarePosObj.transform.localPosition
            , 0f);
        CameraObjectsTrs.DOLocalRotate(Player060_SukosiOkuOtosarePosObj.transform.localEulerAngles
            , 0f);

        //強制調整リセット
        CameraReset(
            Player060_SukosiOkuOtosarePosObj.transform.localEulerAngles
            , DB.cameraSitAnchorDefLocalPos
            , true
            , Vector3.zero
            , false
            , true);

        yield return new WaitForSeconds(0.05f);
        FadeWhite(0, 0);

        DelAll_Hukidashi();

        //TPSプレイヤー倒れモーション
        isPlayerUniqueMotion = true;
        PlayerMotion("liedown_00_Re", 0.2f, 0);

        //プレイヤーダミー顔位置をカメラ位置に
        PlayerFBBIKtoHeadEffectorObj.transform.DOLocalMoveZ(
            0.7f
            , 0.5f);

        tmpDefCameraPos = DB.cameraSitAnchorDefLocalPos;
        tmpDefCameraEul = Vector3.zero;
        tmpFlowCameraPos = new Vector3(0, 1.2f, 0);
        tmpSlipCameraPos = new Vector3(0, 0.3f, 0);
        tmpSlipCameraEul = new Vector3(-45, 0, 0);

        CameraAnchorTrs.DOLocalMove(tmpFlowCameraPos, 0.05f);
        yield return new WaitForSeconds(0.05f);
        CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.5f).SetEase(Ease.OutBounce);
        yield return new WaitForSeconds(0.05f);
        CameraAnchorTrs.DOLocalMove(tmpDefCameraPos, 0.05f);
        yield return new WaitForSeconds(0.05f);

        CameraAnchorTrs.DOLocalRotate(tmpSlipCameraEul, 0.2f).SetEase(Ease.InSine);
        CameraAnchorTrs.DOLocalMove(tmpSlipCameraPos, 0.5f).SetEase(Ease.OutBounce)
            .OnComplete(() =>
            {
                CameraReset(Player060_SukosiOkuOtosarePosObj.transform.localEulerAngles
                    , tmpSlipCameraPos
                    , false
                    , tmpSlipCameraEul
                    , false
                    , false);
            });

        #endregion

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);


        NovelSetVis("F3000350");//結局落とすのかよ・・　瞬間
        while (novelCurrentPageInt < 1) { yield return null; }
        ChieriMotion("笑顔02アルカイック口眉", 0.2f, 2);

        ChieriMotion("デスク肘つきポーズミラー", 1f, 0);
        #endregion

        #region ■指抑え開始
        //■運び
        //IKTarget設置
        GameObject IKRHand100_YubiOsaePosObj
            = Resources.Load("_PosObj/0300Yubizeme/IKRHand100_YubiOsaePosObj") as GameObject;

        //指開き
        ChieriMotion("ひとさし指差し", 1f, 5);

        //待機用
        isRHandTsumamiPos = false;
        IKRHandTargetTrs.DOLocalMove(IKRHand100_YubiOsaePosObj.transform.localPosition
            , 1.5f / girlAnim.speed)
            .SetEase(Ease.InOutQuad);
        IKRHandTargetTrs.DOLocalRotate(IKRHand100_YubiOsaePosObj.transform.localEulerAngles
            , 1.5f / girlAnim.speed)
            .SetEase(Ease.InOutQuad)
            .OnComplete(() =>
            {
                //到着フラグ
                isRHandTsumamiPos = true;
            });

        //BendGoal調整
        DOTween.To(() => FBBIK.solver.rightArmChain.bendConstraint.weight, (x) => FBBIK.solver.rightArmChain.bendConstraint.weight = x
        , 0.983f
        , 1.5f / girlAnim.speed)
        .SetEase(Ease.InQuad);


        yield return new WaitForSeconds(0.4f / girlAnim.speed);
        ChieriMotion("h_右少し傾け", 0f, 7);
        OriBreathController.enabled = false;
        yield return new WaitForSeconds(0.9f / girlAnim.speed);

        #region 白フラッシュと音と揺れ
        FadeWhite(0.5f, 0f, true); yield return new WaitForSecondsRealtime(0.1f); FadeWhite(0, 0f);
        SEPlay("soccer-ball1", 3f);
        SEPlay("walk-flooring1-06", 3f);
        SEPlay("倒れ_Custom_85532__maj061785__body-hitting-mat", 0.5f);
        SEPlay("nuno_washing-machine-laundry-put1", 2f, 0.5f);
        SEPlay("紐・ロープ・引っ張る・きしむ02_単発09", 3f);
        CameraAnchorTrs.DOShakePosition(0.5f, 0.2f);
        #endregion

        HukidashiNovelDistanceChange(0.3f, 0);
        NovelSetVis("F3000360");//おぅぶ！？

        #region プレイヤー手IK 設置してON
        GameObject PlayerIKLHand030_PareRHitosashi02_OsaePosObj
            = Resources.Load("_PosObj/0300Yubizeme/PlayerIKLHand030_PareRHitosashi02_OsaePosObj") as GameObject;
        PlayerIKLHandTargetTrs.SetParent(GirlRhitosashi02Trs);
        PlayerIKLHandTargetTrs.localPosition = PlayerIKLHand030_PareRHitosashi02_OsaePosObj.transform.localPosition;
        PlayerIKLHandTargetTrs.localEulerAngles = PlayerIKLHand030_PareRHitosashi02_OsaePosObj.transform.localEulerAngles;

        GameObject PlayerIKRHand030_PareRHitosashi02_OsaePosObj
            = Resources.Load("_PosObj/0300Yubizeme/PlayerIKRHand030_PareRHitosashi02_OsaePosObj") as GameObject;
        PlayerIKRHandTargetTrs.SetParent(GirlRhitosashi02Trs);
        PlayerIKRHandTargetTrs.localPosition = PlayerIKRHand030_PareRHitosashi02_OsaePosObj.transform.localPosition;
        PlayerIKRHandTargetTrs.localEulerAngles = PlayerIKRHand030_PareRHitosashi02_OsaePosObj.transform.localEulerAngles;

        DOTweenToIKEfPos(PlayerIKLHandEf, 1f, 0.5f, Ease.InOutQuad);
        DOTweenToIKEfRot(PlayerIKLHandEf, 1f, 0.5f, Ease.InOutQuad);
        DOTweenToIKEfPos(PlayerIKRHandEf, 1f, 0.5f, Ease.InOutQuad);
        DOTweenToIKEfRot(PlayerIKRHandEf, 1f, 0.5f, Ease.InOutQuad);
        #endregion


        //到着まで待機
        while (isRHandTsumamiPos == false) { yield return null; }

        #endregion

        //指攻め命令 受付開始
        StartCoroutine(F3000Yubizeme());
        isF3000YubizemeSousa = true;

        #region 会話 重、嘘だろ　～　"たが"を外した？　まで

        yield return new WaitForSeconds(1);

        isF3000YbizemeTrigger020Oshituke = true;

        NovelSetVis("F3000370");//重・・嘘だろ・・
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);


        isF3000YbizemeTrigger010Def = true;
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔02アルカイック口眉", 0.2f, 2);
        Hukidashi("F3000530");//あはは、これでも動けない？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);



        isF3000YbizemeTrigger020Oshituke = true;
        Hukidashi("F3000540");//そんなに弱くなっちゃったんだ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("笑顔01口眉_目閉じない", 0.5f, 2);
        Hukidashi("F3000550");//成績だって追い抜いたけど
        isF3000YbizemeTrigger010Def = true;
        yield return new WaitForSeconds(1);
        isF3000YbizemeTrigger020Oshituke = true;
        yield return KeyOrWait(3);

        isF3000YbizemeTrigger010Def = true;
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔02アルカイック口眉", 0.2f, 2);
        Hukidashi("F3000560");//力関係も逆転しちゃった
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        isF3000YbizemeTrigger020Oshituke = true;
        NovelSetVis("F3000380");//小さくなっただけだろ　ツッコミ
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);


        ChieriMotion("rh_ひとさし指責め010Def", 2f, 5);


        ChieriMotion("f_え？（半呆れ）", 0.3f, 2);
        Hukidashi("F3000570");//そうだよ？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("F3000580");//"今"小さいんだから
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("F3000590");//本当のことでしょ？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        isF3000YbizemeTrigger055Hineri = true;
        ChieriMotion("笑顔02アルカイック口眉", 0.3f, 2);
        Hukidashi("F3000600");//宿題も
        yield return new WaitForSeconds(1);
        CameraAnchorTrs.DOShakePosition(1f, 0.01f, 10, 90, false, false);


        yield return KeyOrWait(3);
        FadeWhite(0.5f, 0f, true); yield return new WaitForSecondsRealtime(0.1f); FadeWhite(0, 0f);

        Hukidashi("F3000610");//指もどけてもらわないと
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        isF3000YbizemeTrigger055Hineri = true;
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔02アルカイック口眉", 0.2f, 2);
        Hukidashi("F3000620");//それが"今の"マコト
        yield return new WaitForSeconds(1);
        CameraAnchorTrs.DOShakePosition(1f, 0.01f, 10, 90, false, false);

        FadeWhite(0.5f, 0f, true); yield return new WaitForSecondsRealtime(0.1f); FadeWhite(0, 0f);
        yield return KeyOrWait(3);


        NovelSetVis("F3000390");//もういいから・・
        while (isNovelSetVisIng) { yield return null; }

        isF3000YbizemeTrigger010Def = true;
        ChieriMotion("f_むっ", 0.6f, 2);
        yield return new WaitForSeconds(3);

        Hukidashi("F3000630");//どけて下さいでしょ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("F3000400");//まだそんな馬鹿な！
        yield return new WaitForSeconds(1);

        isF3000YbizemeTrigger040Tataki = true;
        yield return new WaitForSeconds(0.3f);
        #region 白フラッシュと音と揺れ
        FadeWhite(0.5f, 0f, true); yield return new WaitForSecondsRealtime(0.1f); FadeWhite(0, 0f);
        //SEPlay("soccer-ball1", 3f);
        //SEPlay("walk-flooring1-06", 3f);
        SEPlay("倒れ_Custom_85532__maj061785__body-hitting-mat", 0.5f);
        SEPlay("nuno_washing-machine-laundry-put1", 2f, 0.5f);
        //SEPlay("紐・ロープ・引っ張る・きしむ02_単発09", 3f);
        //CameraAnchorTrs.DOShakePosition(0.2f, 0.1f);
        #endregion
        NovelSetVis("F3000405");//・・・あっがああ！
        while (novelCurrentPageInt < 2) { yield return null; }

        PPv2Memai(true, 20f);
        CameraAnchorTrs.DOShakePosition(0.1f, 0.1f);

        isF3000YbizemeTrigger020Oshituke = true;
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        GirlPosToIKTargetPosRot();

        #endregion

        #region 泊まるの流れ
        TereHoho();
        ChieriMotion("f_安堵", 1f, 2);
        yield return new WaitForSeconds(2);
        Hukidashi("F3000640");//あはは、また言っちゃった
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        isF3000YbizemeTrigger050TateKaisi = true;
        Hukidashi("F3000650");//指を乗せてるだけなのに
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("F3000660");//そんな泣きそうな顔で言っちゃうんだ？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.2f, 2);
        //f_惚け

        //目時計に　頭IK高さ変更
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, clockLongTrs, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs
            , new Vector3(0, -0.09f, 0)
            , 1f / girlAnim.speed);


        Hukidashi("F3000670");//どうしよっかな～
        isF3000YbizemeTrigger055Hineri = true;
        yield return new WaitForSeconds(1);
        CameraAnchorTrs.DOShakePosition(1f, 0.01f, 10, 90, false, false);
        yield return KeyOrWait(3);


        NovelSetVis("F3000410");//ぐああ　たがを外してしまった

        while (novelCurrentPageInt < 4) { yield return null; }
        ChieriMotion("なんか変だよね～", 6f, 2);
        isF3000YbizemeTrigger055Hineri = true;
        yield return new WaitForSeconds(1);
        CameraAnchorTrs.DOShakePosition(1f, 0.01f, 10, 90, false, false);

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(2);

        isF3000YbizemeTrigger010Def = true;

        //目プレイヤーに
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);

        PPv2Memai(false, 10f);

        ChieriMotion("笑顔01口眉_目閉じない", 0.3f, 2);
        Hukidashi("F3000680");//泊まっていかない？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        yield return new WaitForSeconds(0.5f);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.2f, 2);
        Hukidashi("F3000690");//泊まってくれるなら
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("F3000420");//え、泊ま・・・？
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        //目どっか（ベッド）に
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, BedTrs, 0f);

        ChieriMotion("f_十分？", 0.1f, 2);
        Hukidashi("F3000700");//お願いみたいで変かな
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);


        NovelSetVis("F3000430");//泊まるってどう　あが！
        yield return new WaitForSeconds(0.5f);
        isF3000YbizemeTrigger020Oshituke = true;

        //目プレイヤーに
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);

        while (novelCurrentPageInt < 1) { yield return null; }
        CameraAnchorTrs.DOShakePosition(0.1f, 0.05f);

        ChieriMotion("笑顔02アルカイック口眉", 0.4f, 2);

        while (isNovelSetVisIng) { yield return null; }


        Hukidashi("F3000710");//泊まっていくこと
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);



        isF3000YbizemeTrigger050TateKaisi = true;
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔02アルカイック口眉", 0.2f, 2);
        Hukidashi("F3000720");//わかった？　マコト
        yield return new WaitForSeconds(1);

        CameraAnchorTrs.DOShakePosition(0.1f, 0.1f);
        FadeWhite(0.5f, 0f, true); yield return new WaitForSecondsRealtime(0.1f); FadeWhite(0, 0f);
        PPv2Memai(true, 5f);

        yield return KeyOrWait(3);
        yield return new WaitForSeconds(1f);

        NovelSetVis("F3000440");//～～～！　わかってはいる　わがっだ
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        isF3000YbizemeTrigger010Def = true;
        yield return new WaitForSeconds(1);
        #endregion

        HukidashiNovelDistanceChange(3f, 0);
        #region よろしい 手離し

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.2f, 2);
        Hukidashi("F3000730");//ふふ、よろしい
        yield return new WaitForSeconds(1);

        #region プレイヤーIKOFF
        DOTweenToIKEfPos(PlayerIKLHandEf, 0f, 1f, Ease.InOutQuad);
        DOTweenToIKEfRot(PlayerIKLHandEf, 0f, 1f, Ease.InOutQuad);
        DOTweenToIKEfPos(PlayerIKRHandEf, 0f, 1f, Ease.InOutQuad);
        DOTweenToIKEfRot(PlayerIKRHandEf, 0f, 1f, Ease.InOutQuad);
        #endregion
        CameraAnchorTrs.DOShakePosition(0.1f, 0.1f);
        #region 手IK下へ

        //GameObject IKRHand140_NatsukasiiyonePosObj
        //    = Resources.Load("_PosObj/0300Yubizeme/IKRHand140_NatsukasiiyonePosObj") as GameObject;

        isRHandTsumamiPos = false;
        IKRHandTargetTrs.DOLocalMove(IKRHand140_NatsukasiiyonePosObj.transform.localPosition
            , 2f / girlAnim.speed)
            .SetEase(Ease.InOutQuad);
        IKRHandTargetTrs.DOLocalRotate(IKRHand140_NatsukasiiyonePosObj.transform.localEulerAngles
            , 2f / girlAnim.speed)
            .SetEase(Ease.InOutQuad)
            .OnComplete(() =>
            {
                //到着フラグ
                isRHandTsumamiPos = true;
            });


        //到着まで待機
        while (isRHandTsumamiPos == false) { yield return null; }

        #endregion

        CameraAnchorTrs.DOShakePosition(0.1f, 0.1f);
        NovelSetVis("F3000450");//ぶはっ　はあ
        PPv2Memai(false, 4f);


        while (isNovelSetVisIng) { yield return null; }
        ChieriMotion("笑顔02アルカイック口眉", 0.4f, 2);
        yield return new WaitForSeconds(1);

        Hukidashi("F3000740");//逆らえなくなっちゃったね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        NovelSetVis("F3000470");//はぁーー　何を馬鹿な　全身で現実味わっていた　
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        ChieriMotion("_noData", 2f, 5);
        #region 手IKOFF
        DOTweenToIKEfPos(IKLHandEf, 0f, 2f / girlAnim.speed, Ease.InOutQuad);
        DOTweenToIKEfRot(IKLHandEf, 0f, 2f / girlAnim.speed, Ease.InOutQuad);
        DOTweenToIKEfPos(IKRHandEf, 0f, 2f / girlAnim.speed, Ease.InOutQuad);
        DOTweenToIKEfRot(IKRHandEf, 0f, 2f / girlAnim.speed, Ease.InOutQuad);
        #endregion
        ChieriMotion("デスク肘つき→起き上がり", 0.8f, 0);
        ChieriMotion("h_noData", 1f, 7);

        ChieriMotion("笑顔01口眉_目閉じない", 0.3f, 2);

        HukidashiNovelDistanceChange(2, 0);
        Hukidashi("F3000750");//限界かな？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("デスク少しうつ伏せポーズ", 1f, 0);
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔02アルカイック口眉", 0.2f, 2);
        HukidashiNovelDistanceChange(1.3f, 0);
        Hukidashi("F3000760");//ご飯持ってきてあげようかな
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);
        #endregion


        #region 暗幕モノローグ
        FadeBlack(1, 4f);

        NovelSetVis("F3000480");//・・・・・・・・・・・・・・・・・
        yield return new WaitForSeconds(6);

        ChieriMotion("ドアからデスク横へ歩く逆再生", 0f, 0);

        while (isNovelSetVisIng) { yield return null; }

        HukidashiNovelDistanceChange(1f, 0);

        NovelSetVis("F3000490");//返事をせずとも
        while (isNovelSetVisIng) { yield return null; }

        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "ドアからデスク横へ歩く") { yield return null; }
        while (girlAnimNomTime <= 0.5f) { yield return null; }
        isGirlAnimReadSystem = false;

        doorAnim.speed = 2;
        doorAnim.CrossFadeInFixedTime("ドア開き閉じ", 0f, 0);
        yield return new WaitForSeconds(3);

        NovelSetVis("F3000495");//・・・　頭が冷えているのを祈るばかり
        while (isNovelSetVisIng) { yield return null; }
        #endregion

        yield return new WaitForSeconds(4);
        EventMove("パン", true, true);


        #region 前の

        #region 待っててって言ったのに

        //yield return new WaitForSeconds(2);
        //NovelSetVis("D3200");
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);

        Hukidashi("E3000010");//帰ろうとしてた？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        if (staticFlagDict["カレンダー誕生日チェック"])
        { ChieriMotion("f_怒ってる・・？", 0.5f, 2); }
        else
        { ChieriMotion("f_ふーん・・", 1f, 2); }

        Hukidashi("E3000020");//待っててって言ったのに
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        yield return new WaitForSeconds(0.5f);
        NovelSetVis("E3000010");//マコトの違和感は拭われないまま



        #endregion

        #region //ToBeContinued
        //FadeBlack(1, 5, true);
        //isMenuLock = true;//メニューロック
        //isHwVisLock = true;//宿題ロック

        ////TO BE CONTINUED設置
        //GameObject tempTobecontinuedObj = Instantiate(Resources.Load("Main/UI/ToBeContinued/TobecontinuedCanvas") as GameObject
        //    , VRUICameraTrs);
        //DB.evMoveDelObjList.Add(tempTobecontinuedObj);//削除用にDBのリストへ登録

        ////■■幕中なので前面表示
        ////取得
        //Image tmpImage = tempTobecontinuedObj.GetComponent<Image>();
        ////透明に
        //tmpImage.color = new Color(1, 1, 1, 0);
        ////徐々に不透明に
        //DOTween.To(() => tmpImage.color, (x) => tmpImage.color = x, new Color(1, 1, 1, 1)
        //    , 5f)
        //     .SetEase(Ease.InOutQuad)
        //     .SetUpdate(true);

        //yield return new WaitForSeconds(5f);

        ////徐々に透明に
        //DOTween.To(() => tmpImage.color, (x) => tmpImage.color = x, new Color(1, 1, 1, 0)
        //    , 5f)
        //     .SetEase(Ease.InOutQuad)
        //     .SetUpdate(true);

        ////NovelSetVis("ToBeContinued");

        ////智恵理メッシュON
        //GirlMeshTrs.gameObject.SetActive(true);

        //isNovelFadeTween = isNovelSetVisIng = false;
        //KankyouBGMVolumer(0f, 5);
        //yield return new WaitForSeconds(5f);


        //EventMove("タイトル", true, true);
        #endregion



        #region 悪かった ～ ペットボトル置き暗幕まで

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        NovelSetVis("E3000020");//悪かったよ
        ChieriMotionDelay(1, "ん？", 1f, 2);
        while (isNovelSetVisIng) { yield return null; }


        //■"デスク肘つき→起き上がり"モーションだけ速度変更（animatorのParametersでスピード変更（ステート毎に設定できるので、表情が遅くならない））
        girlAnim.SetFloat("デスク肘つき→起き上がりSpeed", 0.4f); yield return null;
        ChieriMotion("デスク肘つき→起き上がり", 0, 0);

        HukidashiNovelDistanceChange(2.5f, 3);



        ChieriMotion("f_けど・・・", 0.2f, 2);
        Hukidashi("E3000030");//謝らなくていいの
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("f_笑顔眉下がり", 0.3f, 2);
        ChieriMotionDelay(1, "f_笑顔眉下がり目閉じない", 0.02f, 2);//時間差表情戻し
        Hukidashi("E3000040");//わかってくれれば
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("E3000030");//確かにあぶなかった
        while (isNovelSetVisIng) { yield return null; }


        #region IK少し伏目
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        GameObject IKLookEyeHead010_HusimePosObj = Resources.Load("_PosObj/0175Kaeroutositeta？/IKLookEyeHead010_HusimePosObj") as GameObject;
        FollowDOMove(IKLookAtEyeTargetTrs, IKLookEyeHead010_HusimePosObj.transform.localPosition, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, IKLookEyeHead010_HusimePosObj.transform.localPosition, 2f);
        #endregion

        ChieriMotion("f_ちぇー控えめ", 0.3f, 2);
        Hukidashi("E3000050");//降りると思わなくて
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //IK目プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);

        Hukidashi("E3000060");//考えなしだったよね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("E3000040");//俺も勝手だった　あっ思い出した
        while (novelCurrentPageInt < 3) { yield return null; }
        ChieriMotion("f_笑顔眉下がり目閉じない", 0.5f, 2);

        while (isNovelSetVisIng) { yield return null; }


        NovelSetVis("E3000050");//もう一つ謝らないと
        ChieriMotion("ん？", 0.1f, 2);
        //IK顔プレイヤー向け
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2.5f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        Hukidashi("E3000070");//うん？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        while (isNovelSetVisIng) { yield return null; }

        NovelSetVis("E3000060");//めがねなくしちゃった
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        ChieriMotion("f_本当に小さいね～", 0.3f, 2);
        Hukidashi("E3000080");//えっとそれはね・・
        yield return new WaitForSeconds(1);

        //IKカレンダー見//上向き
        ChieriMotion("b_まばたきSlow用", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, CalenderTrs, 0f);

        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("E3000070");//弁償するよ戻れる？

        #region IK顔目プレイヤー見る
        //IK目プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 1.5f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        #endregion
        while (novelCurrentPageInt < 2) { yield return null; }
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 1.5f, 2);//時間差表情戻し

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        Hukidashi("E3000090");//戻れるよ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);


        NovelSetVis("E3000080");//よかった～～・・・
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(2);

        Hukidashi("E3000100");//ご飯持ってきてあげるけど
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        Hukidashi("E3000110");//その前にいいものあげるね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        //SoundObjボリューム
        tmpRHitosasiSound.aSource.DOFade(0, 0.5f);
        tmpHeadWindnoiseSound.aSource.DOFade(0, 0.5f);


        NovelSetVis("E3000090");//いいもの？
        while (novelCurrentPageInt < 2) { yield return null; }
        //暗幕
        FadeBlack(1, 0.5f);
        yield return new WaitForSeconds(0.5f);


        while (isNovelSetVisIng) { yield return null; }




        #region 暗幕設定と開幕　ペットボトル取り出しポーズに
        DB.isChieriPosLock = true;
        ChieriMotion("デスクペットボトル取り出し前ポーズ", 0f, 0);

        //プレイヤー 会話1位置立ちに
        CameraObjectsTrs.localPosition = Player_01_DeskUeKaiwa1PosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_01_DeskUeKaiwa1PosObj.transform.localEulerAngles;
        //カメラリセット値変更してリセット
        CameraReset(Player_01_DeskUeKaiwa1PosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos//Anchorを立ちに
            , false
            , Vector3.zero
            , false
            , true);


        yield return new WaitForSeconds(1);
        while (isNovelSetVisIng) { yield return null; }

        HukidashiNovelDistanceChange(5f, 0);


        //■開幕
        FadeBlack(0, 0.5f);
        yield return new WaitForSeconds(0.5f);
        while (isNovelSetVisIng) { yield return null; }

        //SoundObjボリューム
        tmpRHitosasiSound.aSource.DOFade(1, 0.5f);
        tmpHeadWindnoiseSound.aSource.DOFade(1, 0.5f);

        #endregion

        #region ～　ペットボトル取り出し暗幕開幕まで

        yield return new WaitForSeconds(1);
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        Hukidashi("E3000115");//こっちに来て
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);


        //■ペットボトル取り出し開始
        ChieriMotion("デスクペットボトル取り出し", 0f, 0);
        NovelSetVis("E3000095");//あ、いいけど　ファミレス行きたい

        //鞄へ手を伸ばすあたりまで待ち
        StartCoroutine(GirlAnimReadSystem());
        yield return null;
        while (girlAnimNomTime <= 0.5f)
        { yield return null; }

        //IK鞄に
        ChieriMotion("b_まばたきSlow用", 0f, 4); blinkTime = 0;
        GameObject tmpSchoolBagObj = GameObject.Find("SchoolBag");
        FollowDOMove(IKLookAtEyeTargetTrs, tmpSchoolBagObj.transform, 0f);
        //顔はオフ
        DOTweenToLAIKSHead(LAIKHeadS, 0, 1.5f);


        //暗幕
        FadeBlack(1, 2f);
        yield return new WaitForSeconds(2f);
        while (isNovelSetVisIng) { yield return null; }


        NovelSetVis("E3000100");//鞄をまさぐる

        //プレイヤー 机の上位置に
        GameObject Player_010_DeskUeChieriTsumamiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_010_DeskUeChieriTsumamiPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_010_DeskUeChieriTsumamiPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_010_DeskUeChieriTsumamiPosObj.transform.localEulerAngles;
        CameraReset(Player_010_DeskUeChieriTsumamiPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos);//立ち位置に

        //まさぐり音仮
        SEPlay("laundry-spread1", tmpSchoolBagObj);
        yield return new WaitForSeconds(2);

        //風切り音出す用に逆再生
        ChieriMotion("デスクペットボトル取り出し逆再生", 0f, 0);
        yield return null;
        while (girlAnimNomTime <= 0.8f)
        { yield return null; }
        isGirlAnimReadSystem = false;

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        #endregion
        SEPlay(Other3DSEObj, "putting_a_tray_01_pich-6", PetBottleObj, 0.6f);
        yield return new WaitForSeconds(1);
        SEPlay(Other3DSEObj, "putting_a_tray_02", CapObj, 0.7f);

        #endregion

        #region ペットボトル置きとスマホ持ち

        #region ペットボトル取得

        //ペットボトル既に取得されていればなにもせず、なければシーンから、それでもなければリソースからクローン
        ObjSceneOrResouceLoad(ref PetBottleObj, "PetBottle", "Main/KomonoObj/PetBottle/PetBottle");
        DB.evMoveDelObjList.Add(PetBottleObj);

        //ペットボトル机の上位置　縮小時に見せるよう位置
        PetBottleObj.transform.SetParent(GameObjectsTrs, false);
        GameObject PetBottle010_SyukusyouMisePosObj = Resources.Load("_PosObj/0180Petbottle/PetBottle010_SyukusyouMisePosObj") as GameObject;
        PetBottleObj.transform.localPosition = PetBottle010_SyukusyouMisePosObj.transform.localPosition;
        PetBottleObj.transform.localEulerAngles = PetBottle010_SyukusyouMisePosObj.transform.localEulerAngles;
        PetBottleObj.transform.localScale = PetBottle010_SyukusyouMisePosObj.transform.localScale;


        //キャップ既に取得されていればなにもしない
        if (CapObj != null) { }
        else
        {
            //キャップ、クローンで取得(ペアレント変えるので、プレファブ上書きで消さないようにクローン)
            CapObj = Instantiate(PetBottleObj.transform.Find("Cap").gameObject);
            DB.evMoveDelObjList.Add(CapObj);

            //クローンON
            CapObj.transform.gameObject.SetActive(true);
            //ペアレント
            CapObj.transform.SetParent(GameObjectsTrs);
            //オリジナルをオフ
            PetBottleObj.transform.Find("Cap").gameObject.SetActive(false);
            //クローンキャップ机の上へ
            GameObject Cap_DeskUePosObj = Resources.Load("_PosObj/0180Petbottle/Cap010_SyukusyouMisePosObj") as GameObject;
            CapObj.transform.localPosition = Cap_DeskUePosObj.transform.localPosition;
            CapObj.transform.localEulerAngles = Cap_DeskUePosObj.transform.localEulerAngles;
            CapObj.transform.localScale = Cap_DeskUePosObj.transform.localScale;
        }

        //ペットボトル準備
        PetBottleObj.SetActive(true);
        CapObj.SetActive(true);


        #endregion
        //水滴ON
        PetBottleObj.transform.Find("Suiteki00").gameObject.SetActive(true);

        #region ■左手スマホ取り出し　マスク IK版

        GirlPosToIKTargetPosRot();

        string
            tmpBaseAnimStateName = "片膝立ちミラー手伸ばしループ原点";
        #region スマホ片手いじりPosへ
        GameObject ChieriSumaho_LHand_SekurabeKatatePosObj = Resources.Load("_PosObj/_ParentPoseObjs/ChieriSumaho_LHand_SekurabeKatatePosObj") as GameObject;
        ChieriSumahoObj.transform.localPosition = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localEulerAngles;
        #endregion

        StartCoroutine(GirlAnimReadSystem(11));

        //マスクのため、レイヤーのアニメを1フレでベースと同じモーション状態にする（ParameterでNormlizedTimeが指定できる（ただし指定し続けないと静止））
        ChieriMotion(tmpBaseAnimStateName, 0f, 11);//現在のベースアニメと同じアニメ指定
        girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeに

        yield return null;//↑適用に1フレ必要

        ChieriMotion("背比べ左手スマホ取り出し", 0f, 11);

        while (nowGirlAnimOtherLayerClipNameDict[11] != "背比べスマホ取り出し") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[11] <= 0.375f) { yield return null; }
        isGirlAnimReadSystem = false;
        //スマホObjオン（取り出し）
        ChieriSumahoObj.SetActive(true);
        //画面つける（画面更新も一緒に起動される）
        ChieriSumahoPower(true);

        #region スマホ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, new Vector3(0, -0.5f, 0), 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.8f, 1);
        #endregion


        #region 左手IKいじり位置へ（力技
        //まずターゲットTween移動
        GameObject IKLHand010_Chieri_Sumaho010IziriPosObj
            = Resources.Load("_PosObj/0180Petbottle/IKLHand010_Chieri_Sumaho010IziriPosObj") as GameObject;
        IKLHandTargetTrs.DOLocalMove(IKLHand010_Chieri_Sumaho010IziriPosObj.transform.localPosition, 1f);
        IKLHandTargetTrs.DOLocalRotate(IKLHand010_Chieri_Sumaho010IziriPosObj.transform.localEulerAngles, 1f);

        //少しウェイト下げて
        DOTweenToIKEfPos(IKLHandEf, 0.6f, 0.5f);
        DOTweenToIKEfRot(IKLHandEf, 0.6f, 0.5f);

        yield return new WaitForSeconds(0.5f);
        //ウェイト戻す
        DOTweenToIKEfPos(IKLHandEf, 1, 0.5f);
        DOTweenToIKEfRot(IKLHandEf, 1, 0.5f);
        #endregion

        #endregion


        #endregion
        HukidashiNovelDistanceChange(1f, 0);

        NovelSetVis("E3000110");//出てきたそれは

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        //開幕
        FadeBlack(0, 1f);
        yield return new WaitForSeconds(1f);

        #region ペットボトル見つつ縮小

        NovelSetVis("E3000120");//うおおでっか
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        NovelSetVis("E3000130");//中身がない？
        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("f_笑顔眉下がり", 0.3f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.2f, 2);//時間差表情戻し
        Hukidashi("E3000120");//部活で飲んじゃった
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        NovelSetVis("E3000140");//じゃあいいものって・・　スマホ気になる
        while (isNovelSetVisIng) { yield return null; }

        #region スマホいじって縮小
        ChieriMotion("背比べ左手スマホいじり", 0f, 11);
        yield return new WaitForSeconds(1);

        #region //IKプレイヤ見（頭Clamp0.8）
        //ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        //DOTweenToLAIKSEyes(LAIKEyeS, 1, 0f);

        //LAIKHead.solver.clampWeightHead = 0.8f;

        //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
        //DOTweenToLAIKSHead(LAIKHeadS, 1, 1f);
        #endregion
        #region IK顔目プレイヤー見る
        //IK目プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 1.5f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        #endregion

        #region ■目眩リトルとDOTWeenTOでプレイヤーサイズ縮小(縮小完了bool付き)マスク版
        bool isShrinkComplete = false;
        //段階別で目眩具合と縮小度変更して縮小
        PPv2MemaiLittle(1f);

        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
        , DB.playerScale_PetbottleIreZero, 15f)
        .OnComplete(() => { isShrinkComplete = true; });
        SEPlay("magic-attack-darkness1_long(-12)", 0.5f);

        #endregion
        #endregion
        yield return new WaitForSeconds(1);

        NovelSetVis("E3000150");//おお・・　縮んでる？！
        while (isNovelSetVisIng) { yield return null; }

        HukidashiNovelDistanceChange(0.6f, 10);


        while (isShrinkComplete == false) { yield return null; }

        Hukidashi("E3000130");//こんなところかな？　2.5センチ！
        #region スマホ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, new Vector3(0, -0.5f, 0), 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.8f, 1);
        #endregion

        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        #region IK顔目プレイヤー見る
        //IK目プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 1.5f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        #endregion

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        NovelSetVis("E3000160");//え、あ・・・
        while (isNovelSetVisIng) { yield return null; }


        NovelSetVis("E3000170");//待ってちえりこれ以上は
        while (novelCurrentPageInt < 1) { yield return null; }

        //暗幕
        FadeBlack(1, 1f);

        while (isNovelSetVisIng) { yield return null; }

        #endregion


        //SoundObjボリューム
        tmpRHitosasiSound.aSource.DOFade(0, 0.5f);
        tmpHeadWindnoiseSound.aSource.DOFade(0, 0.5f);

        yield return new WaitForSeconds(1);

        //終了処理
        #region スマホなくしたりマスク外したり
        //スマホObjオフ（しまう）
        ChieriSumahoObj.SetActive(false);
        //ウェイト戻す
        DOTweenToIKEfPos(IKLHandEf, 0, 0f);
        DOTweenToIKEfRot(IKLHandEf, 0, 0f);

        ChieriMotion("_noData", 0f, 11);

        #endregion

        EventMove("ペットボトル");
        yield break;





        #region //以前の(小さい理由話せなくて・・・　私といるのいや？　ありがとう　宿題しなきゃね)
        //選択肢1:

        //NovelSetVis("■E3020");//さてどうしよう

        //#endregion
        //#region ■選択肢 不安で　遊んでた
        //while (isNovelSentakushiWait) { yield return null; }
        //yield return new WaitForSeconds(1f);
        //Sentakushi("■E3020a", Mathf.Infinity);
        //Sentakushi("■E3020b", Mathf.Infinity);
        //while (sentakuListNum == 99) { yield return null; }
        //yield return null;
        //switch (sentakuListNum)
        //{
        //    case 0://選択肢a 不安で
        //        sentakuListNum = 99;
        //        yield return new WaitForSeconds(1);

        //        #region そうだ不安になってしまったんだ - 私といても
        //        NovelSetVis("E3020a010");//そうだ不安になってしまったんだ

        //        while (novelCurrentPageInt < 1) { yield return null; }

        //        //IK少し伏目
        //        GameObject Chieri_01_Look_EyeHusimePosObj = Resources.Load("_PosObj/E_Kankin_Day1/Chieri_01_Look_EyeHusimePosObj") as GameObject;
        //        GameObject Chieri_02_Look_HeadHusimePosObj = Resources.Load("_PosObj/E_Kankin_Day1/Chieri_02_Look_HeadHusimePosObj") as GameObject;
        //        FollowDOMove(IKLookAtEyeTargetTrs, Chieri_01_Look_EyeHusimePosObj.transform.localPosition, 0.5f);
        //        FollowDOMove(IKLookAtHeadTargetTrs, Chieri_02_Look_HeadHusimePosObj.transform.localPosition, 2f);

        //        while (novelCurrentPageInt < 3) { yield return null; }

        //        Hukidashi("E3020a010");//不安、そっか・・
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //        while (novelCurrentPageInt < 12) { yield return null; }

        //        ChieriMotion("つまんなそう", 0f, 2);
        //        //目プレイヤーへ
        //        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);

        //        while (isNovelSetVisIng) { yield return null; }

        //        Hukidashi("E3020a020");//え？　別のところに体？
        //        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2f);
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //        Hukidashi("E3020a030");//あ、えっとー・・
        //        ChieriMotion("f_あ、えっとー・・", 0.2f, 2);
        //        girlAnim.speed = 0.3f;
        //        ChieriMotion("デスク肘つき→起き上がり", 0f, 0);
        //        AseTare(8f);
        //        FollowDOMove(IKLookAtEyeTargetTrs, Chieri_01_Look_EyeHusimePosObj.transform.localPosition, 0.5f);
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //        Hukidashi("E3020a040");//その眼鏡は宿題ができるだけで
        //        FollowDOMove(IKLookAtHeadTargetTrs, Chieri_02_Look_HeadHusimePosObj.transform.localPosition, 2f);
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //        Hukidashi("E3020a050");//体は実際に縮んでいるというか・・
        //        ChieriMotion("f_えっと、その・・", 0.8f, 2);
        //        ChieriMotion("デスク少しうつ伏せポーズ", 0.7f, 0);

        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        //        yield return new WaitForSeconds(0.5f);

        //        NovelSetVis("E3020a020");//え、実際に縮んでるってどういうこと？！
        //        while (isNovelSetVisIng) { yield return null; }

        //        yield return new WaitForSeconds(1);

        //        Hukidashi("E3020a060");//詳しく説明するのは・・
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //        //IK更に伏目横目
        //        GameObject Chieri_03_Look_EyeHusimePosObj = Resources.Load("_PosObj/E_Kankin_Day1/Chieri_03_Look_EyeHusimePosObj") as GameObject;
        //        GameObject Chieri_04_Look_HeadHusimePosObj = Resources.Load("_PosObj/E_Kankin_Day1/Chieri_04_Look_HeadHusimePosObj") as GameObject;
        //        FollowDOMove(IKLookAtEyeTargetTrs, Chieri_03_Look_EyeHusimePosObj.transform.localPosition, 0.5f);
        //        FollowDOMove(IKLookAtHeadTargetTrs, Chieri_04_Look_HeadHusimePosObj.transform.localPosition, 1f);

        //        Hukidashi("E3020a070");//ちょっと難しくて
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        //        yield return new WaitForSeconds(2);

        //        NovelSetVis("E3020a030");//……嘘を言って驚かそうとしてる様ではなさそうだ。
        //        while (isNovelSetVisIng) { yield return null; }
        //        yield return new WaitForSeconds(1);

        //        Hukidashi("E3020a080");//ご、ごめんね、黙ってて・・
        //        ChieriMotion("f_怒ってる・・？", 0.8f, 2);

        //        yield return new WaitForSeconds(0.5f);
        //        //IKプレイヤー見る
        //        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        //        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        //        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2f);
        //        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        //        yield return new WaitForSeconds(0.5f); yield return KeyOrWait(3);

        //        Hukidashi("E3020a090");//まさかいなくなるとは
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //        NovelSetVis("E3020a040");//「ああ、いや……」
        //        while (isNovelSetVisIng) { yield return null; }
        //        yield return new WaitForSeconds(1);

        //        //伏目
        //        FollowDOMove(IKLookAtEyeTargetTrs, Chieri_03_Look_EyeHusimePosObj.transform.localPosition, 0.5f);
        //        FollowDOMove(IKLookAtHeadTargetTrs, Chieri_04_Look_HeadHusimePosObj.transform.localPosition, 1.5f);
        //        Hukidashi("E3020a100");//その・・
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        //        Hukidashi("E3020a105");//言い難いんだけど
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        //        yield return new WaitForSeconds(1);
        //        Hukidashi("E3020a110");//私といても、やっぱり
        //        TereHohoAlphaChange(0.4f);
        //        TereHoho(3f);
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //        //girlAnim.speed = 0.4f;

        //        ChieriMotion("デスクうつ伏せポーズ", 1f, 0);
        //        //IKプレイヤー見る
        //        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        //        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        //        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2f);
        //        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        //        Hukidashi("E3020a120");//小さいのって怖くて いや・・かな・・？
        //        ChieriMotion("f_いやかな・・？", 1.5f, 2);
        //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //        yield return new WaitForSeconds(2);
        //        #endregion

        //        #region ■選択肢 「まあ智恵理となら・・」「無理無理！」
        //        選択肢2:
        //        NovelSetVis("■E3020a050");//……う、ううう……む……。

        //        while (isNovelSentakushiWait) { yield return null; }
        //        yield return new WaitForSeconds(1f);
        //        Sentakushi("■E3020a120a", Mathf.Infinity);
        //        Sentakushi("■E3020a120b", Mathf.Infinity);
        //        while (sentakuListNum == 99) { yield return null; }
        //        yield return null;
        //        switch (sentakuListNum)
        //        {
        //            case 0://選択肢a 「まあ智恵理となら・・」
        //                yield return new WaitForSeconds(1f);
        //                NovelSetVis("E3020a120a010");//まあ智恵理となら・・
        //                TereHohoAlphaChange(1f);
        //                TereHoho(1f);
        //                ChieriMotionDelay(0.5f, "f_照れ驚き", 0.1f / girlAnim.speed, 2);//時間差表情戻し

        //                while (novelCurrentPageInt < 1) { yield return null; }

        //                Hukidashi("E3020a120a010");//・・・・・・。

        //                yield return new WaitForSeconds(0.8f / girlAnim.speed);

        //                //顔目逸らし
        //                GameObject Chieri_05_Look_EyeHusimePosObj = Resources.Load("_PosObj/E_Kankin_Day1/Chieri_05_Look_EyeHusimePosObj") as GameObject;
        //                GameObject Chieri_06_Look_HeadHusimePosObj = Resources.Load("_PosObj/E_Kankin_Day1/Chieri_06_Look_HeadHusimePosObj") as GameObject;
        //                FollowDOMove(IKLookAtEyeTargetTrs, Chieri_05_Look_EyeHusimePosObj.transform.localPosition, 0.5f);
        //                FollowDOMove(IKLookAtHeadTargetTrs, Chieri_06_Look_HeadHusimePosObj.transform.localPosition, 1.5f);

        //                Hukidashi("E3020a120a020");//あ、ありがとう
        //                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //                //顔IKオフ
        //                DOTweenToLAIKSHead(LAIKHeadS, 0, 1 / girlAnim.speed);

        //                Hukidashi("E3020a120a030");//うん・・
        //                ChieriMotion("f_ありがとう泣き顔", 0.2f / girlAnim.speed, 2);
        //                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //                //IK顔右うつ伏せ位置事前取得
        //                GameObject Chieri_07_Look_HeadUtsubuseRPosObj = Resources.Load("_PosObj/E_Kankin_Day1/Chieri_07_Look_HeadUtsubuseRPosObj") as GameObject;
        //                IKLookAtHeadTargetTrs.localPosition = Chieri_07_Look_HeadUtsubuseRPosObj.transform.localPosition;

        //                Hukidashi("E3020a120a040");//本当に、ありがとう・・
        //                yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        //                //顔IK ON
        //                DOTweenToLAIKSHead(LAIKHeadS, 1, 1f / girlAnim.speed);
        //                ChieriMotion("f_嬉しい・・・", 0.2f / girlAnim.speed, 2);

        //                yield return new WaitForSeconds(4);

        //                NovelSetVis("E3020a120a020");//あ、えっと・・！
        //                while (isNovelSetVisIng) { yield return null; }

        //                yield return new WaitForSeconds(3);

        //                Hukidashi("E3020a120a030");//うん・・
        //                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //                Hukidashi("E3020a120a050");//私、やっぱり公がいないと駄目みたい
        //                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //                yield return new WaitForSeconds(2);
        //                NovelSetVis("E3020a120a030");//やっぱり重いぞ・・！
        //                while (isNovelSetVisIng) { yield return null; }

        //                yield return new WaitForSeconds(1);
        //                isNovelFadeTween = isNovelSetVisIng = false;

        //                yield return new WaitForSeconds(1);


        //                //IKプレイヤー見る
        //                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        //                DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 2);
        //                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 3f);
        //                DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 2);


        //                girlAnim.speed = 0.2f;

        //                Hukidashi("E3020a120a060");//そ、そうだね、宿題！
        //                ChieriMotion("デスクうつ伏せ→起き上がり", 0f, 0);
        //                ChieriMotion("笑顔01口眉", 0.1f, 2);
        //                ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        //                yield return new WaitForSeconds(3f); yield return KeyOrWait(3);

        //                TereHoho(false, 5f);
        //                girlAnim.speed = 0.4f;

        //                ChieriMotion("デスク少しうつ伏せポーズ", 0.7f, 0);
        //                yield return new WaitForSeconds(0.5f);

        //                Hukidashi("E3020a120a070");//お詫びに私がやってあげるね
        //                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //                yield return new WaitForSeconds(1);

        //                NovelSetVis("E3020a120a040");//え、　ああ、それは有難いなあ！
        //                while (novelCurrentPageInt < 1) { yield return null; }

        //                //暗幕
        //                FadeBlack(1, 1);
        //                yield return new WaitForSeconds(1f);

        //                while (isNovelSetVisIng) { yield return null; }

        //                break;
        //            case 1:

        //                sentakuListNum = 99;

        //                NovelSetVis("tmpまだなし");
        //                while (isNovelSetVisIng) { yield return null; }
        //                goto 選択肢2;
        //                break;
        //        }
        //        #endregion

        //        break;
        //    case 1://選択肢b 遊んでただけだよ
        //        sentakuListNum = 99;

        //        NovelSetVis("tmpまだなし");
        //        while (isNovelSetVisIng) { yield return null; }
        //        goto 選択肢1;
        //        break;
        //}
        #endregion

        DB.isKankinFlag = true;

        EventMove("会話1_宿題");
        #region 椅子モーション原点確認用

        while (true)
        {

            #region 原点時の座り位置調整 HJKL
            if (Input.GetKeyDown(KeyCode.H))
            {
                DB.isChieriPosLock = false;
                //椅子位置に
                GameObject Chieri_02Old_DeskChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02Old_DeskChairPosObj") as GameObject;
                GirlTrs.localPosition = Chieri_02Old_DeskChairPosObj.transform.localPosition;
                GirlTrs.localEulerAngles = Chieri_02Old_DeskChairPosObj.transform.localEulerAngles;
            }
            if (Input.GetKeyDown(KeyCode.J))
            {
                DB.isChieriPosLock = false;
                //椅子位置に
                GameObject Chieri_02Old2_DeskChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02Old2_DeskChairPosObj") as GameObject;
                GirlTrs.localPosition = Chieri_02Old2_DeskChairPosObj.transform.localPosition;
                GirlTrs.localEulerAngles = Chieri_02Old2_DeskChairPosObj.transform.localEulerAngles;
            }
            if (Input.GetKeyDown(KeyCode.K))
            {
                DB.isChieriPosLock = false;
                //椅子位置に
                GameObject Chieri_02_DeskNyuusituChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02_DeskNyuusituChairPosObj") as GameObject;
                GirlTrs.localPosition = Chieri_02_DeskNyuusituChairPosObj.transform.localPosition;
                GirlTrs.localEulerAngles = Chieri_02_DeskNyuusituChairPosObj.transform.localEulerAngles;
            }
            if (Input.GetKeyDown(KeyCode.L))
            {
                DB.isChieriPosLock = false;
                //椅子位置に
                GameObject Chieri_02_DeskChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02_DeskChairPosObj") as GameObject;
                GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
                GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;
            }
            #endregion


            #region Test_入室後の座り位置 IO
            if (Input.GetKeyDown(KeyCode.I))
            {
                DB.isChieriPosLock = true;
                ChieriMotion("Test_入室後の座り位置", 0f, 0);
            }
            if (Input.GetKeyDown(KeyCode.O))
            {
                ChieriMotion("Test_入室後の座り位置原点", 0f, 0);
            }
            #endregion

            #region デスク宿題待機 デスク起き上がりポーズ TY
            if (Input.GetKeyDown(KeyCode.T))
            {
                ChieriMotion("デスク宿題待機", 0f, 0);
            }
            if (Input.GetKeyDown(KeyCode.Y))
            {
                ChieriMotion("デスク起き上がりポーズ", 0f, 0);
            }
            #endregion

            #region デスクペットボトル取り出し FG
            if (Input.GetKeyDown(KeyCode.F))
            {
                DB.isChieriPosLock = true;
                ChieriMotion("デスク肘つきポーズ", 0f, 0);
            }
            if (Input.GetKeyDown(KeyCode.G))
            {
                ChieriMotion("デスク肘つきポーズ原点", 0f, 0);
            }
            #endregion

            #region デスクペットボトル手伸ばし前の両手置き VB
            if (Input.GetKeyDown(KeyCode.V))
            {
                DB.isChieriPosLock = true;
                ChieriMotion("デスクペットボトル手伸ばし立てるため", 0f, 0);
            }
            if (Input.GetKeyDown(KeyCode.B))
            {
                ChieriMotion("デスクペットボトル手伸ばし立てるため原点", 0f, 0);
            }

            #endregion

            #region temp確認 NM
            if (Input.GetKeyDown(KeyCode.N))
            {
                ChieriMotion("デスク肘つきポーズ", 0f, 0);
            }
            if (Input.GetKeyDown(KeyCode.M))
            {
                ChieriMotion("デスクうつ伏せポーズ", 0f, 0);
            }

            #endregion



            yield return null;
        }


        #endregion

        #endregion

    }
    #region┗■座る動き 指攻めのコルーチンなど
    //ちえりと椅子座りアニメ
    IEnumerator F3000ChieriSuwari()
    {
        //アニメスピード
        girlAnim.speed =
        doorAnim.speed =
        chairAnim.speed = 0.5f;

        //座り
        ChieriMotion("ドアからデスク横ポーズから椅子に座って手を置く前", 1f, 0);
        chairAnim.enabled = true;
        chairAnim.CrossFadeInFixedTime("智恵理座り", 0f, 0);


        //目頭IK 椅子へ
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, ChairTrs, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, ChairTrs, new Vector3(0, 0.8f, 0));
        yield return new WaitForSeconds(3f / girlAnim.speed);

        //頭だけIK弱めに（首埋まり対策）
        DOTweenToLAIKSHead(LAIKHeadS, 0.4f, 1);
        yield return new WaitForSeconds(1f / girlAnim.speed);

        //目頭IK プレイヤーへ
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
        yield return new WaitForSeconds(1f / girlAnim.speed);

        //頭IK 戻し（ON）
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        yield return new WaitForSeconds(1f / girlAnim.speed);


        yield break;
    }
    #region 指攻め
    bool isF3000Yubizeme = false;
    bool
        isF3000YubizemeSousa = false;
    bool
        isF3000YbizemeTrigger010Def = false,
        isF3000YbizemeTrigger020Oshituke = false,
        isF3000YbizemeTrigger040Tataki = false,
        isF3000YbizemeTrigger050TateKaisi = false,
        isF3000YbizemeTrigger055Hineri = false;
    IEnumerator F3000Yubizeme()
    {
        isF3000Yubizeme = true;
        while (isF3000Yubizeme)
        {
            //Def
            if ((isF3000YubizemeSousa && Input.GetKeyDown(KeyCode.F))
                || isF3000YbizemeTrigger010Def)
            {
                isF3000YbizemeTrigger010Def = false;
                ChieriMotion("rh_ひとさし指責め010Def", 1f, 5);
                #region IK
                //IKTarget設置
                GameObject IKRHand100_YubiOsaePosObjTwo
                    = Resources.Load("_PosObj/0300Yubizeme/IKRHand100_YubiOsaePosObj") as GameObject;

                ////待機用
                //isRHandTsumamiPos = false;
                IKRHandTargetTrs.DOLocalMove(IKRHand100_YubiOsaePosObjTwo.transform.localPosition
                    , 1f / girlAnim.speed)
                    .SetEase(Ease.Linear);
                IKRHandTargetTrs.DOLocalRotate(IKRHand100_YubiOsaePosObjTwo.transform.localEulerAngles
                    , 1f / girlAnim.speed)
                    .SetEase(Ease.Linear)
                    .OnComplete(() =>
                    {
                        ////到着フラグ
                        //isRHandTsumamiPos = true;
                    });

                //BendGoal調整
                DOTween.To(() => FBBIK.solver.rightArmChain.bendConstraint.weight, (x) => FBBIK.solver.rightArmChain.bendConstraint.weight = x
                , 0.983f
                , 1f / girlAnim.speed)
                .SetEase(Ease.InQuad);

                #endregion
            }

            //押し付け
            else if ((isF3000YubizemeSousa && Input.GetKeyDown(KeyCode.G))
                || isF3000YbizemeTrigger020Oshituke)
            {
                isF3000YbizemeTrigger020Oshituke = false;
                #region DefIK戻し
                //IKTarget設置
                GameObject IKRHand100_YubiOsaePosObjTwo
                    = Resources.Load("_PosObj/0300Yubizeme/IKRHand100_YubiOsaePosObj") as GameObject;

                ////待機用
                //isRHandTsumamiPos = false;
                IKRHandTargetTrs.DOLocalMove(IKRHand100_YubiOsaePosObjTwo.transform.localPosition
                    , 0.2f / girlAnim.speed)
                    .SetEase(Ease.Linear);
                IKRHandTargetTrs.DOLocalRotate(IKRHand100_YubiOsaePosObjTwo.transform.localEulerAngles
                    , 0.2f / girlAnim.speed)
                    .SetEase(Ease.Linear)
                    .OnComplete(() =>
                    {
                        ////到着フラグ
                        //isRHandTsumamiPos = true;
                    });

                //BendGoal調整
                DOTween.To(() => FBBIK.solver.rightArmChain.bendConstraint.weight, (x) => FBBIK.solver.rightArmChain.bendConstraint.weight = x
                , 0.983f
                , 0.2f / girlAnim.speed)
                .SetEase(Ease.InQuad);

                #endregion
                ChieriMotion("rh_ひとさし指責め020押し付け", 1f, 5);
                SEPlay(FootStepSE(himoKishimiShortSEStrList), 3f);
            }

            //叩き
            else if ((isF3000YubizemeSousa && Input.GetKeyDown(KeyCode.H))
                || isF3000YbizemeTrigger040Tataki)
            {
                isF3000YbizemeTrigger040Tataki = false;
                #region DefIK戻し
                //IKTarget設置
                GameObject IKRHand100_YubiOsaePosObjTwo
                    = Resources.Load("_PosObj/0300Yubizeme/IKRHand100_YubiOsaePosObj") as GameObject;

                ////待機用
                //isRHandTsumamiPos = false;
                IKRHandTargetTrs.DOLocalMove(IKRHand100_YubiOsaePosObjTwo.transform.localPosition
                    , 0.2f / girlAnim.speed)
                    .SetEase(Ease.Linear);
                IKRHandTargetTrs.DOLocalRotate(IKRHand100_YubiOsaePosObjTwo.transform.localEulerAngles
                    , 0.2f / girlAnim.speed)
                    .SetEase(Ease.Linear)
                    .OnComplete(() =>
                    {
                        ////到着フラグ
                        //isRHandTsumamiPos = true;
                    });

                //BendGoal調整
                DOTween.To(() => FBBIK.solver.rightArmChain.bendConstraint.weight, (x) => FBBIK.solver.rightArmChain.bendConstraint.weight = x
                , 0.983f
                , 0.2f / girlAnim.speed)
                .SetEase(Ease.InQuad);

                #endregion
                ChieriMotion("rh_ひとさし指責め040叩き1", 0f, 5);
                #region アニメ待ち
                StartCoroutine(GirlAnimReadSystem(5));
                yield return null;
                while (nowGirlAnimOtherLayerClipNameDict[5] != "rh_ひとさし指責め040叩き1") { yield return null; }
                while (girlAnimOtherLayerNomTimeDict[5] <= 0.46f) { yield return null; }
                isGirlAnimReadSystem = false;
                #endregion
                #region 白フラッシュと音と揺れ
                FadeWhite(0.5f, 0f, true); yield return new WaitForSecondsRealtime(0.1f); FadeWhite(0, 0f);
                SEPlay("soccer-ball1", 3f);
                SEPlay("walk-flooring1-06", 3f);
                //SEPlay("倒れ_Custom_85532__maj061785__body-hitting-mat", 0.5f);
                //SEPlay("nuno_washing-machine-laundry-put1", 2f, 0.5f);
                //SEPlay("紐・ロープ・引っ張る・きしむ02_単発09", 3f);
                CameraAnchorTrs.DOShakePosition(0.2f, 0.1f);
                #endregion
            }

            //指立て
            else if ((isF3000YubizemeSousa && Input.GetKeyDown(KeyCode.V))
                || isF3000YbizemeTrigger050TateKaisi)
            {
                isF3000YbizemeTrigger050TateKaisi = false;

                ChieriMotion("rh_ひとさし指責め050立て1", 1f, 5);
                #region 立て開始位置IK
                //IKTarget設置
                GameObject IKRHandYubizeme050_TateKaisiPosObj
                    = Resources.Load("_PosObj/0300Yubizeme/YubizemeAnimAndPosObj/IKRHandYubizeme050_TateKaisiPosObj") as GameObject;

                ////待機用
                //isRHandTsumamiPos = false;
                IKRHandTargetTrs.DOLocalMove(IKRHandYubizeme050_TateKaisiPosObj.transform.localPosition
                    , 1f / girlAnim.speed)
                    .SetEase(Ease.Linear);
                IKRHandTargetTrs.DOLocalRotate(IKRHandYubizeme050_TateKaisiPosObj.transform.localEulerAngles
                    , 1f / girlAnim.speed)
                    .SetEase(Ease.Linear)
                    .OnComplete(() =>
                    {
                        ////到着フラグ
                        //isRHandTsumamiPos = true;
                    });

                //BendGoal調整
                DOTween.To(() => FBBIK.solver.rightArmChain.bendConstraint.weight, (x) => FBBIK.solver.rightArmChain.bendConstraint.weight = x
                , 0.983f
                , 1f / girlAnim.speed)
                .SetEase(Ease.InQuad);

                #endregion
                SEPlay(FootStepSE(himoKishimiShortSEStrList), 3f);
            }

            //↑で立ててからの捻り
            else if ((isF3000YubizemeSousa && Input.GetKeyDown(KeyCode.B))
                || isF3000YbizemeTrigger055Hineri)
            {
                isF3000YbizemeTrigger055Hineri = false;
                ChieriMotion("rh_ひとさし指責め050立て1", 0.5f, 5);
                SEPlay(FootStepSE(himoKishimiShortSEStrList), 3f);
                #region 立てひねりIK
                //IKTarget立て開始位置
                GameObject IKRHandYubizeme050_TateKaisiPosObj
                    = Resources.Load("_PosObj/0300Yubizeme/YubizemeAnimAndPosObj/IKRHandYubizeme050_TateKaisiPosObj") as GameObject;

                //IKTargetひねり
                GameObject IKRHandYubizeme055_TateHineri1PosObj
                    = Resources.Load("_PosObj/0300Yubizeme/YubizemeAnimAndPosObj/IKRHandYubizeme055_TateHineri1PosObj") as GameObject;

                //BendGoal調整
                DOTween.To(() => FBBIK.solver.rightArmChain.bendConstraint.weight, (x) => FBBIK.solver.rightArmChain.bendConstraint.weight = x
                , 0.983f
                , 1f / girlAnim.speed)
                .SetEase(Ease.InOutQuad);


                IKRHandTargetTrs.DOLocalMove(IKRHandYubizeme055_TateHineri1PosObj.transform.localPosition
                    , 1f / girlAnim.speed)
                    .SetEase(Ease.InOutQuad);
                IKRHandTargetTrs.DOLocalRotate(IKRHandYubizeme055_TateHineri1PosObj.transform.localEulerAngles
                    , 1f / girlAnim.speed)
                    .SetEase(Ease.InOutQuad)
                    .OnComplete(() =>
                    {
                        IKRHandTargetTrs.DOLocalMove(IKRHandYubizeme050_TateKaisiPosObj.transform.localPosition
                            , 1f / girlAnim.speed)
                            .SetEase(Ease.InOutQuad);
                        IKRHandTargetTrs.DOLocalRotate(IKRHandYubizeme050_TateKaisiPosObj.transform.localEulerAngles
                            , 1f / girlAnim.speed)
                            .SetEase(Ease.InOutQuad);
                    });



                #endregion
            }



            else if (Input.GetKeyDown(KeyCode.M))
            {
                //ChieriMotion("lh_手乗せつつきの指", 0.5f, 6);
            }
            else if (Input.GetKeyDown(KeyCode.J))
            {
                //playerLHandTatakiTweener.Restart();
            }
            else if (Input.GetKeyDown(KeyCode.K))
            {
                //playerRHandTatakiTweener.Restart();
            }
            yield return null;
        }

        yield break;
    }
    #endregion
    #endregion
    IEnumerator F3010()//パン
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            //nowPlayerLocalScl = new Vector3(0.1f, 0.1f, 0.1f);
            nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;

            #region //宿題置き


            ////宿題 位置に
            //Drill_chieriTrs.gameObject.SetActive(true);
            //GameObject Drill_chieri_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/Drill_chieri_DeskPosObj") as GameObject;
            //Drill_chieriTrs.localPosition = Drill_chieri_DeskPosObj.transform.localPosition;
            //Drill_chieriTrs.localEulerAngles = Drill_chieri_DeskPosObj.transform.localEulerAngles;
            //////一応主人公の宿題も
            ////HomeworkObjectsTrs.SetParent(DrillTrs);
            ////DrillTrs.localPosition = Drill_chieri_DeskPosObj.transform.localPosition;
            ////DrillTrs.localEulerAngles = Drill_chieri_DeskPosObj.transform.localEulerAngles;
            ////DrillTrs.gameObject.SetActive(false);

            ////ペン置く
            //SharpenObj.transform.SetParent(RoomTrs);
            //GameObject tmpPenPosObj = (GameObject)Resources.Load("_PosObj/D_Henai_Day1/Sharpen_DeskOkuTrsPosObj");
            //SharpenObj.transform.localPosition = tmpPenPosObj.transform.localPosition;
            //SharpenObj.transform.localEulerAngles = tmpPenPosObj.transform.localEulerAngles;
            ////消しゴム置く
            //KeshigomuObj.transform.SetParent(RoomTrs);
            //KeshigomuObj.SetActive(true);
            //GameObject tmpKeshigomuPosObj = (GameObject)Resources.Load("_PosObj/D_Henai_Day1/Keshigomu_DeskOkuPosObj");
            //KeshigomuObj.transform.localPosition = tmpKeshigomuPosObj.transform.localPosition;
            //KeshigomuObj.transform.localEulerAngles = tmpKeshigomuPosObj.transform.localEulerAngles;

            #endregion //宿題置き

        }
        EventReset();

        //こもり虫に変え
        KankyouBGMChanger(semiSE.audioSource, "musi2_loop_EQKomori");

        //環境音フェード
        KankyouBGMVolumer(0.4f, 5);


        //暗幕
        FadeBlack(1, 1);
        yield return new WaitForSeconds(1f);

        #region 設定
        //智恵理オフ
        GirlMeshTrs.gameObject.SetActive(false);
        //智恵理0位置ロック
        DB.isChieriPosLock = true;

        //アニメスピード
        girlAnim.speed = 0.5f;
        doorAnim.speed = 0.5f;
        chairAnim.speed = 0.5f;

        //■PosObjで読み込み
        //プレイヤー 机の上探索位置に
        GameObject Player010_TsukueHaziPanMaePosObj
            = Resources.Load("_PosObj/0310Pan/Player010_TsukueHaziPanMaePosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player010_TsukueHaziPanMaePosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player010_TsukueHaziPanMaePosObj.transform.localEulerAngles;

        //カメラリセット値変更してリセット
        CameraReset(Player010_TsukueHaziPanMaePosObj.transform.localEulerAngles
            , DB.cameraSitAnchorDefLocalPos//Anchorを座りに
            , false
            , Vector3.zero
            , false
            , true);


        //スピーカー 位置に
        SpeakerTrs.gameObject.SetActive(true);
        GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
        SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        #region 皿パン設定
        GameObject
            SaraObj = Instantiate(Resources.Load("Main/KomonoObj/Sara/Sara") as GameObject, RoomTrs, false),
        PanObj = SaraObj.transform.Find("Pan").gameObject,
        Pan_AObj = PanObj.transform.Find("Pan_A").gameObject,
        Pan_BObj = PanObj.transform.Find("Pan_B").gameObject,
        PankuzuObj = SaraObj.transform.Find("Pankuzu").gameObject,
        Pankuzu01Obj = PankuzuObj.transform.Find("Pankuzu01").gameObject,
        Pankuzu02Obj = PankuzuObj.transform.Find("Pankuzu02").gameObject;

        DB.evMoveDelObjList.Add(SaraObj);

        GameObject
            SaraHandObj = Instantiate(Resources.Load("Main/KomonoObj/Sara/SaraHand") as GameObject, GirlRHandTrs, false);
        DB.evMoveDelObjList.Add(SaraHandObj);

        saraAnim
            = SaraObj.GetComponent<Animator>();
        saraAnim.CrossFadeInFixedTime("デスク皿置かれてる", 0f, 0);
        yield return null;
        SaraObj.SetActive(false);

        #endregion //皿パン設定

        #endregion 設定

        HukidashiNovelDistanceChange(5, 0);


        //開幕
        FadeBlack(0, 3);
        yield return new WaitForSeconds(2);

        #region 智恵理ドアから椅子に座るまで～暗幕

        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);
        ChieriMotion("ドア入室小皿持ち", 0f, 0);
        doorAnim.CrossFadeInFixedTime("ドア開き閉じ", 0f, 0);

        yield return new WaitForSeconds(2.2f / girlAnim.speed);

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        Hukidashi("F3010000");//お待たせ
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し



        //■ポーズ状態まで待ち
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 0.9f) { yield return null; }
        isGirlAnimReadSystem = false;

        ChieriMotion("ドアからデスク横へ歩く小皿持ち", 0.1f, 0);
        yield return new WaitForSeconds(3.5f / girlAnim.speed);


        Hukidashi("F3010010");//おやつ用の

        yield return new WaitForSeconds(1.5f / girlAnim.speed);



        //■ポーズ状態まで待ち
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "ドアからデスク横小皿持ちポーズ") { yield return null; }
        //while (girlAnimNomTime <= 1f) { yield return null; }//このアニメはスピード0のためオフ

        ChieriMotion("ドアからデスク横小皿置き", 0.1f, 0);


        bool isSaraPut = true;
        while (isSaraPut == true)
        {
            //小皿置く 0.362f（フレーム177）で
            if (girlAnim.GetCurrentAnimatorClipInfo(0)[0].clip.name == "ドアからデスク横小皿置き" &&
                //girlAnimNomPrevTime < 0.362f && girlAnimNomTime >= 0.362f)
                girlAnimNomPrevTime < 0.315f && girlAnimNomTime >= 0.315f)
            {
                SaraHandObj.SetActive(false);
                SaraObj.SetActive(true);
                saraAnim.CrossFadeInFixedTime("デスク皿置き", 0f, 0);
                isSaraPut = false;
                SEPlay(Other3DSEObj, "cup-put1", SaraObj);
            }
            yield return null;
        }
        //yield return new WaitForSeconds(1.5f / girlAnim.speed);

        isGirlAnimReadSystem = false;

        yield return new WaitForSeconds(1.5f / girlAnim.speed);

        HukidashiNovelDistanceChange(1f, 0);

        NovelSetVis("F3010000");//足りるもなにも・・・
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.2f, 2);//時間差表情戻し
        Hukidashi("F3010020");//男の子なんだし
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("F3010010");//無茶言うなって！
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        ChieriMotion("f_十分？", 1f, 2);
        Hukidashi("F3010030");//ふーん？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        chairAnim.enabled = true;
        yield return null;

        ChieriMotion("ドアからデスク横ポーズから椅子に座る", 0.1f, 0);
        chairAnim.CrossFadeInFixedTime("智恵理座り", 0f, 0);

        //ChieriMotion("あはは・・・", 0.2f, 2);
        //ChieriMotionDelay(3, "f_笑顔01口眉下がり_目閉じない", 0.1f, 2);//時間差表情戻し
        //AseTare();
        Hukidashi("F3010040"); //ちぎってあげるね

        //IK 椅子へ
        FollowDOMove(IKLookAtEyeTargetTrs, ChairTrs);
        FollowDOMove(IKLookAtHeadTargetTrs, ChairTrs, new Vector3(0, 0.8f, 0));
        yield return new WaitForSeconds(3f / girlAnim.speed);

        //頭だけIK弱めに（首埋まり対策）
        DOTweenToLAIKSHead(LAIKHeadS, 0.4f, 1);
        yield return new WaitForSeconds(1f / girlAnim.speed);



        ////暗幕 TobeContinuedではオフ
        //FadeBlack(1, 4);


        //IK プレイヤーへ
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
        yield return new WaitForSeconds(1f / girlAnim.speed);

        //頭IK 戻し（ON）
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        yield return new WaitForSeconds(1f / girlAnim.speed);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        #endregion

        #region //ToBeContinued
        //FadeBlack(1, 5, true);
        //isMenuLock = true;//メニューロック
        //isHwVisLock = true;//宿題ロック

        ////TO BE CONTINUED設置
        //GameObject tempTobecontinuedObj = Instantiate(Resources.Load("Main/UI/ToBeContinued/TobecontinuedCanvas") as GameObject
        //    , VRUICameraTrs);
        //DB.evMoveDelObjList.Add(tempTobecontinuedObj);//削除用にDBのリストへ登録

        ////■■幕中なので前面表示
        ////取得
        //Image tmpImage = tempTobecontinuedObj.GetComponent<Image>();
        ////透明に
        //tmpImage.color = new Color(1, 1, 1, 0);
        ////徐々に不透明に
        //DOTween.To(() => tmpImage.color, (x) => tmpImage.color = x, new Color(1, 1, 1, 1)
        //    , 5f)
        //     .SetEase(Ease.InOutQuad)
        //     .SetUpdate(true);

        //yield return new WaitForSeconds(5f);

        ////徐々に透明に
        //DOTween.To(() => tmpImage.color, (x) => tmpImage.color = x, new Color(1, 1, 1, 0)
        //    , 5f)
        //     .SetEase(Ease.InOutQuad)
        //     .SetUpdate(true);

        ////NovelSetVis("ToBeContinued");

        ////智恵理メッシュON
        //GirlMeshTrs.gameObject.SetActive(true);

        //isNovelFadeTween = isNovelSetVisIng = false;
        //KankyouBGMVolumer(0f, 5);
        //yield return new WaitForSeconds(5f);


        //EventMove("タイトル", true, true);

        //yield break;
        #endregion

        FadeBlack(1, 4);
        yield return new WaitForSeconds(4);

        //■ポーズ状態まで待ち
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 1f) { yield return null; }
        isGirlAnimReadSystem = false;

        chairAnim.enabled = false;

        EventMove("食べられる？");

        #region // 以前の
        //#region 設定

        //////アニメスピード
        ////girlAnim.speed = 0.5f;
        ////doorAnim.speed = 0.5f;
        ////chairAnim.speed = 0.5f;

        ////智恵理0位置ロック
        //DB.isChieriPosLock = true;

        ////宿題セット消し
        //SharpenObj.SetActive(false);
        //KeshigomuObj.SetActive(false);
        //Drill_chieriTrs.gameObject.SetActive(false);

        ////皿動かすためにアニメーター止め
        //saraAnim.enabled = false;

        ////皿 食事1位置に
        //GameObject Sara_01_DeskSyokuzi01PosObj = Resources.Load("_PosObj/D_Henai_Day1/Sara_01_DeskSyokuzi01PosObj") as GameObject;
        //SaraObj.transform.localPosition = Sara_01_DeskSyokuzi01PosObj.transform.localPosition;
        //SaraObj.transform.localEulerAngles = Sara_01_DeskSyokuzi01PosObj.transform.localEulerAngles;

        ////パンを片方消す
        //Pan_AObj.SetActive(false);
        ////パンくずを消す
        //PankuzuObj.SetActive(false);

        ////プレイヤー パン前位置に
        //GameObject Player020_PanMaePosObj = Resources.Load("_PosObj/0310Pan/Player020_PanMaePosObj") as GameObject;
        //CameraObjectsTrs.localPosition = Player020_PanMaePosObj.transform.localPosition;
        //CameraObjectsTrs.localEulerAngles = Player020_PanMaePosObj.transform.localEulerAngles;

        //////智恵理 椅子すわり位置に
        ////GameObject Chieri_02_DeskChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02_DeskChairPosObj") as GameObject;
        ////GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
        ////GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;

        ////椅子位置
        //GameObject Chair_01_SuwariPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chair_01_SuwariPosObj") as GameObject;
        //ChairTrs.localPosition = Chair_01_SuwariPosObj.transform.localPosition;
        //ChairTrs.localEulerAngles = Chair_01_SuwariPosObj.transform.localEulerAngles;

        //ChieriMotion("デスク肘つきポーズ", 0f, 0);


        //#endregion //設定

        //yield return new WaitForSeconds(1f);
        ////開幕
        //FadeBlack(0, 3);
        //yield return new WaitForSeconds(2);

        //yield return new WaitForSeconds(1);

        //#region 会話 はい、半分こ　～

        //ChieriMotion("あはは・・・", 0.2f, 2);
        ////AseTare(10);
        //Hukidashi("F3010050");//半分こ　//元 半分でも大きかったかな
        //yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        //yield return new WaitForSeconds(1);

        //NovelSetVis("F3010020");//半分こ、ねえ・・　//元選択肢位置
        //while (isNovelSetVisIng) { yield return null; }
        //yield return new WaitForSeconds(0.5f);

        //Hukidashi("F3010060");//嬉しくないの？
        //yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        //Hukidashi("F3010070");//食事抜きでもいいんだよ？
        //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //NovelSetVis("F3010030");//「嬉しいうれしい！　食べるって！」　管理下
        //while (novelCurrentPageInt < 1) { yield return null; }


        //#region フェードアウトして乗りあがる
        ////暗幕
        //FadeBlack(1, 0.5f);
        //yield return new WaitForSeconds(0.5f);

        //#region プレイヤー位置とパン位置移動と智恵理ポーズ
        ////プレイヤー 皿の上位置に
        //GameObject Player_05_DeskSyokuzi02PosObj = Resources.Load("_PosObj/D_Henai_Day1/Player_05_DeskSyokuzi02PosObj") as GameObject;
        //CameraObjectsTrs.localPosition = Player_05_DeskSyokuzi02PosObj.transform.localPosition;
        //CameraObjectsTrs.localEulerAngles = Player_05_DeskSyokuzi02PosObj.transform.localEulerAngles;

        ////パン 皿のはじ位置に
        //GameObject Pan_01_DeskSyokuzi02PosObj = Resources.Load("_PosObj/D_Henai_Day1/Pan_01_DeskSyokuzi02PosObj") as GameObject;
        //PanObj.transform.localPosition = Pan_01_DeskSyokuzi02PosObj.transform.localPosition;
        //PanObj.transform.localEulerAngles = Pan_01_DeskSyokuzi02PosObj.transform.localEulerAngles;

        //ChieriMotion("デスクうつ伏せ→起き上がり", 0f, 0);
        //#endregion

        //while (isNovelSetVisIng) { yield return null; }

        ////開幕
        //FadeBlack(0, 2);
        //yield return new WaitForSeconds(2);
        //#endregion

        //yield return new WaitForSeconds(1);

        //NovelSetVis("F3010040");//うおぉ　手をかけた
        //while (isNovelSetVisIng) { yield return null; }

        //#region 食べモノローグでゆっくりフェード
        //FadeBlack(1, 10f);
        //yield return new WaitForSeconds(1);
        //NovelSetVis("F3010050");//皿の上で食事　　もぐもぐ
        //while (isNovelSetVisIng) { yield return null; }

        //#region 確定暗幕して設定
        //FadeBlack(1, 1);
        //yield return new WaitForSeconds(1);

        //ChieriMotion("ん？", 0f, 2);

        ////パンくずON
        //PankuzuObj.SetActive(true);

        //#endregion


        //Hukidashi("F3010080");//食べてる食べてる
        //yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        //yield return new WaitForSeconds(1);

        //NovelSetVis("F3010060");//ペットになったような
        //while (isNovelSetVisIng) { yield return null; }
        //yield return new WaitForSeconds(2);

        //FadeBlack(0, 2f);
        //yield return new WaitForSeconds(2);
        //#endregion

        //NovelSetVis("F3010070");//ごちそうさま
        //while (isNovelSetVisIng) { yield return null; }

        //Hukidashi("F3010090");//え、食べ終わったの？
        //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //ChieriMotion("デスク少しうつ伏せポーズ", 0.4f / girlAnim.speed, 0);
        //Hukidashi("F3010100");//全然減ってないけど
        //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //NovelSetVis("F3010080");//毟った場所もわからない




        //while (isNovelSetVisIng) { yield return null; }




        //while (true)
        //{
        //    if (Input.GetKeyDown(KeyCode.F))
        //    {
        //        ChieriMotion("デスク肘つき→起き上がり", 0.6f / girlAnim.speed, 0);
        //    }
        //    if (Input.GetKeyDown(KeyCode.G))
        //    {
        //        ChieriMotion("デスク少しうつ伏せポーズ", 0.6f / girlAnim.speed, 0);
        //    }
        //    if (Input.GetKeyDown(KeyCode.H))
        //    {
        //        ChieriMotion("デスク起き上がり→肘つき", 0.6f / girlAnim.speed, 0);
        //    }
        //    yield return null;
        //}

        //#region 顔悩み上見「ん～じゃあ」
        //ChieriMotion("ん？", 0.1f, 2);
        ////IK上見
        //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, new Vector3(0, 1f, 0), 0.2f);
        ////DOTweenToLAIKSHead(LAIKHeadS, 0, 3);
        //Hukidashi("D33040a03");//ん～じゃあ
        //yield return new WaitForSeconds(1);
        //yield return KeyOrWait(3);
        //#endregion

        //#region IKプレイヤー戻し 笑顔 「残したら罰ゲームね」「えっ！」
        ////IKプレイヤー見る
        //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.2f);
        //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
        //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);


        //ChieriMotion("デスク肘つき→起き上がり", 0f, 0);
        //ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);
        //yield return new WaitForSeconds(0.6f / girlAnim.speed);
        //ChieriMotion("デスク少しうつ伏せポーズ", 0.6f / girlAnim.speed, 0);

        //Hukidashi("D33040a04");//残したら罰ゲームね
        //yield return new WaitForSeconds(1);
        //yield return KeyOrWait(3);

        //NovelSetVis("D33040a4");//えっ！　食べるまで
        //while (isNovelSetVisIng) { yield return null; }
        //#endregion


        //#region 「あれ、もう終わり？」IKパン見る デスク少しうつぶせ 「一口も食べてないように」 「実際自分にも」
        //ChieriMotion("つまんなそう", 0.1f, 2);
        //Hukidashi("D33040a06");//あれ？　もう終わり？
        //yield return new WaitForSeconds(1);
        //yield return KeyOrWait(3);

        //NovelSetVis("D33040a6");//パンの隙間を増やしただけ
        //while (isNovelSetVisIng) { yield return null; }

        ////IKパン見
        //FollowDOMove(IKLookAtEyeTargetTrs, PanObj.transform, 0.2f);
        //FollowDOMove(IKLookAtHeadTargetTrs, PanObj.transform, 3f);

        //yield return new WaitForSeconds(0.6f / girlAnim.speed);
        //ChieriMotion("デスク少しうつ伏せポーズ", 0.6f / girlAnim.speed, 0);

        //yield return new WaitForSeconds(1);
        //ChieriMotion("ｆ_けど・・", 0.1f, 2);
        //Hukidashi("D33040a07");//一口も食べてないように見えるけど
        //yield return new WaitForSeconds(1);
        //yield return KeyOrWait(3);

        //NovelSetVis("D33040a8");//実際自分にもわからない
        //while (isNovelSetVisIng) { yield return null; }
        //#endregion

        //#region まあしょうがないっか罰ゲームね スマホ操作 「え、まさか」
        //Hukidashi("D33040a08");//まあしょうがないっか
        //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ////IKプレイヤー見る
        //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.2f);
        //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
        //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);


        //ChieriMotion("デスク起き上がりポーズ", 0.6f / girlAnim.speed, 0);
        //ChieriMotion("笑顔01口眉", 0.1f, 2);
        //ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        //Hukidashi("D33040a09");//罰ゲームね
        //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //NovelSetVis("D33040a9");//一体何を
        //while (novelCurrentPageInt < 1) { yield return null; }


        //#endregion

        //#region 縮小
        //yield return new WaitForSeconds(2);

        ////縮小(2分の1)
        //FadeBlack(0.5f, 1f, false, Ease.InOutElastic, false);
        //DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x,
        //    nowPlayerLocalScale / 2,
        //    5f)
        //    .SetEase(Ease.InBounce);
        //SEPlay("magic-attack-darkness1", 0.3f);
        //yield return new WaitForSeconds(1);

        //Hukidashi("D33040a10");//えへへ、半分くらいかな～
        //ChieriMotion("笑顔01口眉", 0.1f, 2);
        //ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        //FadeBlack(0f, 2f, false, Ease.OutQuad, false);
        //yield return new WaitForSeconds(1f);

        //SEPlay("magic-gravity2", 0.3f);

        //#endregion

        //#region 「ちょっとまっ・・」接近「パンよりちっちゃくなっちゃった」「このパンだけで」
        //NovelSetVis("D33040a10");//ちょっとまっ・・
        //while (isNovelSetVisIng) { yield return null; }

        //yield return new WaitForSeconds(1f);

        //ChieriMotion("笑顔01口眉", 0.1f, 2);
        //ChieriMotionDelay(2, "f_こうするとー・・", 0.1f, 2);//時間差表情戻し
        //Hukidashi("D33040a11");//パンよりちっちゃくなっちゃった
        //yield return new WaitForSeconds(1);
        //ChieriMotion("デスク少しうつ伏せポーズ", 1.5f / girlAnim.speed, 0);
        //yield return new WaitForSeconds(1);
        //yield return KeyOrWait(2);

        ////IKパン見
        //FollowDOMove(IKLookAtEyeTargetTrs, PanObj.transform, 0.2f);
        //FollowDOMove(IKLookAtHeadTargetTrs, PanObj.transform, 3f);
        //Hukidashi("D33040a12");//このパンだけで何日も
        //yield return new WaitForSeconds(2);

        //#endregion

        //#region IKでパンの方に右手

        ////パンの上あたり右手IKTargetPos
        //GameObject Chieri_04_IKRHandTarget_PanGrabPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_04_IKRHandTarget_PanGrabPosObj") as GameObject;
        //IKRHandTargetTrs.localPosition = Chieri_04_IKRHandTarget_PanGrabPosObj.transform.localPosition;
        //IKRHandTargetTrs.localEulerAngles = Chieri_04_IKRHandTarget_PanGrabPosObj.transform.localEulerAngles;

        ////右手
        //DOTweenToIKEfPos(IKRHandEf, 1, 3);
        //DOTweenToIKEfRot(IKRHandEf, 1, 3);//偶然。この回転で肘つきすると口元を手の甲で隠してるようになるので、場合によってはありかも
        //SEPlay("swing41_12低い_長い", RHandSphereTrs.gameObject);
        //#endregion

        //#region 「う、うわ！」暗転 設定 開幕
        //NovelSetVis("D33040a11");//う、うわ！

        //while (novelCurrentPageInt < 1) { yield return null; }
        ////暗幕
        //FadeBlack(1, 1);
        //yield return new WaitForSeconds(1f);

        //while (novelCurrentPageInt < 3) { yield return null; }
        //Hukidashi("D33040a13");//あ～んむ

        ////■右手IKOFF 智恵理ポーズ表情 パン消し
        //DOTweenToIKEfPos(IKRHandEf, 0, 0);
        //DOTweenToIKEfRot(IKRHandEf, 0, 0);

        //ChieriMotion("デスク起き上がりポーズ", 0, 0);
        //ChieriMotion("笑顔01口眉", 0f, 2);
        //PanObj.SetActive(false);
        ////IKプレイヤー見る
        //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
        //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);

        //while (isNovelSetVisIng) { yield return null; }


        ////右手IK戻し予備（キャンセル式になっていればいらない）
        //DOTweenToIKEfPos(IKRHandEf, 0, 0);

        ////開幕
        //FadeBlack(0, 3);
        //yield return new WaitForSeconds(2);
        //#endregion

        //#region たべちゃった　あれを一口？ 車みたいなおおきさだったかもだけど・・

        ////■"デスク起き上がり→肘つき"モーションだけ速度変更（animatorのParametersでスピード変更（ステート毎に設定できるので、表情が遅くならない））
        //girlAnim.SetFloat("デスク起き上がり→肘つきSpeed", 0.4f); yield return null;
        //ChieriMotion("デスク起き上がり→肘つき", 0, 0);

        //Hukidashi("D33040a14");//あはは、私がほとんど食べちゃった
        //ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        //yield return new WaitForSeconds(2);

        //NovelSetVis("D33040a12");//あれを一口で？！
        //while (novelCurrentPageInt < 1) { yield return null; }
        //yield return new WaitForSeconds(2);

        //TereHohoAlphaChange(0.3f);
        //TereHoho();
        //ChieriMotion("ん？", 0.3f, 2);
        //Hukidashi("D33040a15");//一口パンの半分だよ？
        //yield return new WaitForSeconds(1);
        //yield return KeyOrWait(6);

        ////IK上見
        //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, new Vector3(0, 1f, 0), 0.2f);

        //AseTare();
        //ChieriMotion("やっぱり・・・？", 2f, 2);
        //Hukidashi("D33040a16");//車ぐらいかもだけど
        //yield return new WaitForSeconds(1);
        //yield return KeyOrWait(3);

        //while (isNovelSetVisIng) { yield return null; }
        //yield return new WaitForSeconds(1);
        //#endregion

        //#endregion

        //#region 肘つきから起き上がり　またおなかすいたら
        ////■"デスク肘つき→起き上がり"モーションだけ速度変更（animatorのParametersでスピード変更（ステート毎に設定できるので、表情が遅くならない））
        //girlAnim.SetFloat("デスク肘つき→起き上がりSpeed", 0.4f); yield return null;
        //ChieriMotion("デスク肘つき→起き上がり", 0, 0);

        //AseTare();
        //Hukidashi("D33050");//また、おなかすいたら
        //ChieriMotion("あはは・・・", 0.2f, 2);
        //ChieriMotionDelay(2, "f_あはは目開き", 0.2f, 2);//時間差表情戻し

        //yield return new WaitForSeconds(1);

        ////IKプレイヤー見る
        //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.2f);
        //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
        //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        //yield return new WaitForSeconds(1);

        //NovelSetVis("D33040a13");//食いしん坊めとでも
        //while (isNovelSetVisIng) { yield return null; }
        //#endregion

        //#region ところで ～　泊まっていかない？

        //ChieriMotion("ん？", 2f, 2);
        //yield return new WaitForSeconds(1);

        ////IKカレンダー見
        //FollowDOMove(IKLookAtEyeTargetTrs, CalenderTrs, 0f);
        //yield return new WaitForSeconds(1);


        //TereHoho(false, 6);
        //Hukidashi("D33060");//ところで
        //yield return new WaitForSeconds(1);
        //yield return KeyOrWait(3);

        //Hukidashi("D33063");//明日休みだよね
        //yield return new WaitForSeconds(1);
        //yield return KeyOrWait(3);

        ////IKプレイヤー見る
        //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
        //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        //Hukidashi("D33066");//ご飯の心配もないし
        //yield return new WaitForSeconds(1);
        //yield return KeyOrWait(3);

        //#region 泊まっていかない？

        //ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);
        //yield return new WaitForSeconds(0.6f / girlAnim.speed);
        //ChieriMotion("デスク少しうつ伏せポーズ", 0.6f / girlAnim.speed, 0);

        //Hukidashi("D33070");//泊まっていかない？
        //yield return new WaitForSeconds(1);
        //yield return KeyOrWait(3);

        //NovelSetVis("■D33080");//また突然の話
        //while (novelCurrentPageInt < 2) { yield return null; }

        //Hukidashi("D33080");//遅いし、ね？
        //#endregion

        //#endregion

        //#region ■選択肢　じゃあ泊まろうかな　この大きさのまま？
        //sentakuListNum = 99;//初期化
        //while (isNovelSentakushiWait) { yield return null; }
        //Sentakushi("■D33080a", Mathf.Infinity);
        ////Sentakushi("■D33080b", Mathf.Infinity);

        //while (sentakuListNum == 99) { yield return null; }
        //yield return null;

        //switch (sentakuListNum)
        //{
        //    case 0://選択肢a 「じゃあ泊まろうかな！」

        //        #region 「じゃあ泊まろうかな」「やった」「寝返りあぶないか」「布団作ってあげる」
        //        yield return new WaitForSeconds(0.5f);
        //        NovelSetVis("D33080a01");//「じゃあ泊まろうかな」
        //        yield return new WaitForSeconds(1);

        //        Hukidashi("D33080a01");//やった！
        //        ChieriMotion("デスク起き上がりポーズ", 0.5f, 0);
        //        ChieriMotion("笑顔01口眉", 0.1f, 2);
        //        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        //        yield return new WaitForSeconds(1);
        //        yield return KeyOrWait(2);


        //        NovelSetVis("D33080a02");//（残念）
        //        SEPlay("heart_def");
        //        while (isNovelSetVisIng) { yield return null; }

        //        yield return new WaitForSeconds(1);

        //        //IKカレンダー見
        //        FollowDOMove(IKLookAtEyeTargetTrs, CalenderTrs, 0f);
        //        TereHohoAlphaChange(0.2f); TereHoho();
        //        AseTare();
        //        Hukidashi("D33080a02");//あ、そっか　一緒に寝ると
        //        yield return new WaitForSeconds(1);
        //        ChieriMotion("f_あ！ほら！口閉じ", 0.2f, 2);
        //        yield return KeyOrWait(3);
        //        yield return new WaitForSeconds(1);

        //        TereHoho(false, 2);

        //        //ChieriMotion("ん？", 0.5f, 2);
        //        ChieriMotion("怒01もうちょっと下がって", 0.2f, 2);
        //        Hukidashi("D33080a03");//寝返りが危ないか
        //        yield return new WaitForSeconds(1);
        //        yield return KeyOrWait(2);
        //        NovelSetVis("D33080a03");//残念

        //        Hukidashi("D33080a04");//ん～・・
        //                               //ChieriMotion("f_けど・・・", 1f, 2);
        //        yield return new WaitForSeconds(3);

        //        while (isNovelSetVisIng) { yield return null; }

        //        //そうだ！
        //        yield return new WaitForSeconds(1);
        //        ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);
        //        yield return new WaitForSeconds(1);


        //        //プレイヤー見
        //        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        //        ChieriMotion("f_あ！ほら！口閉じ", 0.5f, 2);
        //        ChieriMotion("デスク少しうつ伏せポーズ", 1f, 0);
        //        Hukidashi("D33080a05");//そうだ！布団作ってあげる！
        //        yield return new WaitForSeconds(2);
        //        yield return KeyOrWait(3);
        //        yield return new WaitForSeconds(1);




        //        #endregion

        //        //暗幕
        //        FadeBlack(1, 2);
        //        yield return new WaitForSeconds(2f);

        //        DB.isBunki_Day1_SleepBedPos = true;

        //        break;

        //    case 1://選択肢b　「この大きさのまま？」
        //        yield return new WaitForSeconds(1);

        //        break;
        //}
        //#endregion

        //EventMove("会話3_ハンカチベッド");
        #endregion

        yield break;
    }
    IEnumerator F3020()//食べられる？
    {
        if (debugEventMoveFlag == true)
        {
        }
        EventReset();

        //暗幕
        FadeBlack(1, 0);
        yield return null;

        //こもり虫に変え
        KankyouBGMChanger(semiSE.audioSource, "musi2_loop_EQKomori");

        //環境音フェード
        KankyouBGMVolumer(0.5f, 5);


        #region 設定
        //智恵理0位置ロック
        DB.isChieriPosLock = true;

        //アニメスピード
        girlAnim.speed = 1f;
        doorAnim.speed = 1f;
        chairAnim.speed = 1f;

        //椅子アニメオフ
        chairAnim.enabled = false;

        //スピーカー 位置に
        SpeakerTrs.gameObject.SetActive(true);
        GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
        SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        //宿題セット消し
        SharpenObj.SetActive(false);
        KeshigomuObj.SetActive(false);
        Drill_chieriTrs.gameObject.SetActive(false);


        #region 皿パン設定

        //皿生成
        GameObject
            SaraObj = Instantiate(Resources.Load("Main/KomonoObj/Sara/Sara") as GameObject, RoomTrs, false),
        //取得(GameObject変数連続で指定している)
        PanObj = SaraObj.transform.Find("Pan").gameObject,
        Pan_AObj = PanObj.transform.Find("Pan_A").gameObject,
        Pan_BObj = PanObj.transform.Find("Pan_B").gameObject,
        PankuzuObj = SaraObj.transform.Find("Pankuzu").gameObject,
        Pankuzu01Obj = PankuzuObj.transform.Find("Pankuzu01").gameObject,
        Pankuzu02Obj = PankuzuObj.transform.Find("Pankuzu02").gameObject;

        DB.evMoveDelObjList.Add(SaraObj);

        GameObject
            SaraHandObj = Instantiate(Resources.Load("Main/KomonoObj/Sara/SaraHand") as GameObject, GirlRHandTrs, false);
        DB.evMoveDelObjList.Add(SaraHandObj);

        saraAnim
            = SaraObj.GetComponent<Animator>();
        saraAnim.CrossFadeInFixedTime("デスク皿置かれてる", 0f, 0);
        yield return null;
        SaraObj.SetActive(false);


        //皿動かすためにアニメーター止め
        saraAnim.enabled = false;

        //皿 食事1位置に
        GameObject Sara_01_DeskSyokuzi01PosObj = Resources.Load("_PosObj/D_Henai_Day1/Sara_01_DeskSyokuzi01PosObj") as GameObject;
        SaraObj.transform.localPosition = Sara_01_DeskSyokuzi01PosObj.transform.localPosition;
        SaraObj.transform.localEulerAngles = Sara_01_DeskSyokuzi01PosObj.transform.localEulerAngles;

        //パンを片方消す
        Pan_AObj.SetActive(false);

        //手の皿消し
        SaraHandObj.SetActive(false);
        //机の皿ON
        SaraObj.SetActive(true);

        #endregion //皿パン設定


        //■プレイヤー パン前位置に
        GameObject Player020_PanMaePosObj
            = Resources.Load("_PosObj/0310Pan/Player020_PanMaePosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player020_PanMaePosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player020_PanMaePosObj.transform.localEulerAngles;

        //カメラリセット値変更してリセット
        CameraReset(Player020_PanMaePosObj.transform.localEulerAngles
            , DB.cameraSitAnchorDefLocalPos//Anchorを座りに
            , false
            , Vector3.zero
            , false
            , true);

        //プレイヤー大きさ
        nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;

        //椅子位置
        GameObject Chair_01_SuwariPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chair_01_SuwariPosObj") as GameObject;
        ChairTrs.localPosition = Chair_01_SuwariPosObj.transform.localPosition;
        ChairTrs.localEulerAngles = Chair_01_SuwariPosObj.transform.localEulerAngles;

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.2f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);




        #endregion □設定
        HukidashiNovelDistanceChange(1.6f, 0);
        kutipakuString = "口パクゆっくり";

        #region 設定2
        //ちえり
        ChieriMotion("デスク手のせパンくずポーズ", 0f, 0);
        ChieriMotion("笑顔01口眉_目閉じない", 0f, 2);
        //顔傾け用 事前
        ChieriMotion("h_noData", 0f, 7);

        //右手IK位置
        GameObject IKRHand020_NamePosObj
            = Resources.Load("_PosObj/0320Taberareru/IKRHand020_NamePosObj") as GameObject;
        IKRHandTargetTrs.localPosition = IKRHand020_NamePosObj.transform.localPosition;
        IKRHandTargetTrs.localEulerAngles = IKRHand020_NamePosObj.transform.localEulerAngles;

        ////右手IKON
        //DOTweenToIKEfPos(IKRHandEf, 1, 0);
        //DOTweenToIKEfRot(IKRHandEf, 1, 0);


        //■プレイヤー 乗ってのって位置に
        //CameraObjectsTrs.SetParent(GirlRHandTrs);
        GameObject Player005_NotteNottePosObj
            = Resources.Load("_PosObj/0320Taberareru/Player005_NotteNottePosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player005_NotteNottePosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player005_NotteNottePosObj.transform.localEulerAngles;

        //カメラリセット値変更してリセット
        CameraReset(Player005_NotteNottePosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos//Anchorを立ちに
            , false
            , Vector3.zero
            , false
            , true);


        //パンくず02 手乗せ位置に(ペアレント) ひとまず大きさも
        Pankuzu02Obj.transform.SetParent(GirlRHandTrs);
        GameObject Pankuzu02010_PareRHand_TenosePosObj
            = Resources.Load("_PosObj/0320Taberareru/Pankuzu02010_PareRHand_TenosePosObj") as GameObject;
        Pankuzu02Obj.transform.localPosition = Pankuzu02010_PareRHand_TenosePosObj.transform.localPosition;
        Pankuzu02Obj.transform.localEulerAngles = Pankuzu02010_PareRHand_TenosePosObj.transform.localEulerAngles;
        Pankuzu02Obj.transform.localScale = Pankuzu02010_PareRHand_TenosePosObj.transform.localScale;

        //皿 とりあえずの机位置に
        GameObject Sara010_DeskPosObj
            = Resources.Load("_PosObj/0320Taberareru/Sara010_DeskPosObj") as GameObject;
        SaraObj.transform.localPosition = Sara010_DeskPosObj.transform.localPosition;
        SaraObj.transform.localEulerAngles = Sara010_DeskPosObj.transform.localEulerAngles;


        #region 右手にWindnoiseSoundObj付与

        GameObject RHandSoundObj
            = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRHandTrs);
        RHandSoundObj.name = nameof(RHandSoundObj);
        DB.evMoveDelObjList.Add(RHandSoundObj);

        //設定
        WindnoiseSound tmpRHandSound = RHandSoundObj.GetComponent<WindnoiseSound>();
        tmpRHandSound.aSource.maxDistance = 50;
        tmpRHandSound.pitchMax = 1f;
        tmpRHandSound.pitchUpRateAdjustFloat = 4;

        tmpRHandSound.aSource.volume = 0;

        //SoundObjのPos
        GameObject RHandSound010_MakotoIchiPosObj
            = Resources.Load("_PosObj/0320Taberareru/RHandSound010_MakotoIchiPosObj") as GameObject;
        RHandSoundObj.transform.localPosition = RHandSound010_MakotoIchiPosObj.transform.localPosition;

        #endregion

        #region HeadにWindnoiseSoundObj付与

        GameObject HeadSoundObj
            = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlHeadTrs);
        HeadSoundObj.name = nameof(HeadSoundObj);
        DB.evMoveDelObjList.Add(HeadSoundObj);

        //設定
        WindnoiseSound tmpHeadSound = HeadSoundObj.GetComponent<WindnoiseSound>();
        tmpHeadSound.aSource.maxDistance = 50;
        tmpHeadSound.pitchMax = 1f;
        tmpHeadSound.pitchUpRateAdjustFloat = 3;

        tmpHeadSound.aSource.volume = 0;

        //SoundObjのPos
        GameObject HeadSound010_MikenIchiPosObj
            = Resources.Load("_PosObj/0320Taberareru/HeadSound010_MikenIchiPosObj") as GameObject;
        HeadSoundObj.transform.localPosition
            = HeadSound010_MikenIchiPosObj.transform.localPosition;
        //= Vector3.zero;
        #endregion


        #region 鼻息設置
        GameObject BreathSound_Taberareru
            = Instantiate(Resources.Load("Main/KomonoObj/Kounai/BreathSound_Taberareru") as GameObject
            , Bip001HeadTrs, false);

        DB.evMoveDelObjList.Add(BreathSound_Taberareru);


        #endregion

        #endregion

        //開幕
        FadeBlack(0, 1);
        yield return new WaitForSeconds(3);


        #region 会話して手の平に乗るまで
        Hukidashi("F3020010");//これくらいなら
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("F3020010");//千切られたパン　これくらいなら
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1f);

        Hukidashi("F3020020");//どうぞ
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        ChieriMotion("h_右少し傾けSmooth", 0f, 7);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1f);

        NovelSetVis("F3020020");//どうぞって、え？　便利だよ。お皿
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("F3020030");//だーめ
        ChieriMotion("h_右少し傾け戻しSmooth", 0f, 7);
        ChieriMotion("f_え、なになんて？", 0.5f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        Hukidashi("F3020040");//はやくのってのって
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.2f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        yield return new WaitForSeconds(1f);

        NovelSetVis("F3020030");//やっぱりかー　立ち上がる
        while (novelCurrentPageInt < 1) { yield return null; }

        //暗幕
        FadeBlack(1, 1);
        yield return new WaitForSeconds(1f);

        ChieriMotion("_noData", 0f, 7);//解除　首の動きが固定されて、舐めシーン動かなくなるので

        OriBreathController.enabled = false;

        #region 手の平に乗る
        //■プレイヤー 手乗り位置に（ペアレント）
        CameraObjectsTrs.SetParent(GirlRHandTrs);
        GameObject Player008_PareRHand_NottaPosObj
            = Resources.Load("_PosObj/0320Taberareru/Player008_PareRHand_NottaPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player008_PareRHand_NottaPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player008_PareRHand_NottaPosObj.transform.localEulerAngles;

        //カメラリセット値変更してリセット
        CameraReset(Player008_PareRHand_NottaPosObj.transform.localEulerAngles
            , DB.cameraSitAnchorDefLocalPos//座りに
            , false
            , Vector3.zero
            , false
            , true);


        #endregion

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1f);

        NovelSetVis("F3020040");//少しこわかった
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1f);


        //開幕
        FadeBlack(0, 1);
        yield return new WaitForSeconds(1);

        #endregion

        tmpRHandSound.aSource.DOFade(1, 1f);
        tmpHeadSound.aSource.DOFade(1, 1f);

        #region でっか ～ スマホ取り出しまで
        yield return new WaitForSeconds(2);

        HukidashiNovelDistanceChange(0.45f, 0);


        NovelSetVis("F3020050");//でっか！　怪しいサイズだった
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("F3020050");//これでも大きいの？
        ChieriMotion("つまんなそう", 0.5f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        Hukidashi("F3020060");//潰しちゃいそう
        ChieriMotion("f_あ！ほら！口普通キョトン眉下がり", 1f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1f);

        NovelSetVis("F3020060");//潰・・・　わかった！　物騒な響きだった
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1f);

        NovelSetVis("F3020070");//ちぎりもぐもぐ
        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("f_本当に小さいね～", 5f, 2);
        TereHohoAlphaChange(0.3f);
        TereHoho(10f);
        yield return new WaitForSeconds(1f);

        NovelSetVis("F3020080");//思ったよりうまい　遠足思い出す
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1f);


        Hukidashi("F3020070");//食べてる食べてる
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.3f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        //手持ち上げ開始
        ChieriMotion("デスク手のせパンくず持ち上げ", 0, 0);
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "デスク手のせパンくず持ち上げ") { yield return null; }

        yield return new WaitForSeconds(1);

        #region //プレイヤー向き回転
        ////■プレイヤー 手乗り位置　ちえり向きに（ペアレント）
        //CameraObjectsTrs.SetParent(GirlRHandTrs);
        //GameObject Player008_PareRHand_NottaChieriMukiPosObj
        //    = Resources.Load("_PosObj/0320Taberareru/Player008_PareRHand_NottaChieriMukiPosObj") as GameObject;
        //CameraObjectsTrs.localPosition = Player008_PareRHand_NottaChieriMukiPosObj.transform.localPosition;
        //CameraObjectsTrs.localEulerAngles = Player008_PareRHand_NottaChieriMukiPosObj.transform.localEulerAngles;

        ////カメラリセット値変更してリセット
        //CameraReset(Player008_PareRHand_NottaChieriMukiPosObj.transform.localEulerAngles
        //    , DB.cameraSitAnchorDefLocalPos//座りに
        //    , false
        //    , Vector3.zero
        //    , false
        //    , false);

        ////ユーザー回転補正　できなかった
        //userCameraControlEul += Player008_PareRHand_NottaChieriMukiPosObj.transform.localEulerAngles - Player008_PareRHand_NottaPosObj.transform.localEulerAngles;


        #endregion

        NovelSetVis("F3020090");//ゴフッ　バランスが崩れる
        CameraAnchorTrs.DOShakePosition(0.2f, 0.1f);

        while (girlAnimNomTime <= 1) { yield return null; }
        while (isNovelSetVisIng) { yield return null; }

        HukidashiNovelDistanceChange(1.5f, 0);


        NovelSetVis("F3020100");//危ないって！　あまりに不安定
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1f);

        Hukidashi("F3020080");//そう？
        //ChieriMotion("f_あ！ほら！口普通キョトン", 0.5f, 2);
        ChieriMotion("f_え？(軽驚)", 0.7f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("F3020085");//大丈夫だよ
        ChieriMotion("f_笑顔01口眉下がり_目閉じない", 0.8f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("F3020110");//崖がすぐそば　可愛らしい
        TereHohoAlphaChange(0.4f, 5);
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1f);

        Hukidashi("F3020090");//そんなに言うなら
        yield return new WaitForSeconds(1);
        //ChieriMotion("f_更にキリッ", 3f, 2);
        ChieriMotion("f_降りてみる？", 1f, 2);

        #region スマホ取り出し

        #region スマホ位置


        GameObject ChieriSumaho010_PareLHand_SousaPosObj
            = Resources.Load("_PosObj/0320Taberareru/ChieriSumaho010_PareLHand_SousaPosObj") as GameObject;

        var defChieriSumahoPos = ChieriSumahoObj.transform.localPosition;
        var defChieriSumahoRot = ChieriSumahoObj.transform.localEulerAngles;

        ChieriSumahoObj.transform.localPosition = ChieriSumaho010_PareLHand_SousaPosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho010_PareLHand_SousaPosObj.transform.localEulerAngles;

        #endregion


        ChieriMotion("デスク手のせスマホ取り出し", 0, 0);
        //スマホ取り出しまで待機
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "デスク手のせスマホ取り出し") { yield return null; }
        while (girlAnimNomTime <= 0.35f) { yield return null; }

        //スマホObjオン（取り出し）
        ChieriSumahoObj.SetActive(true);
        //画面つける（画面更新も一緒に起動される）
        ChieriSumahoPower(true);



        //スマホ見る位置まで待機
        while (nowGirlAnimClipName != "デスク手のせスマホ取り出し") { yield return null; }
        while (girlAnimNomTime <= 0.65f) { yield return null; }
        #region スマホ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);

        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, 3f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.8f, 3f);
        #endregion
        #endregion

        while (girlAnimNomTime <= 1f) { yield return null; }
        isGirlAnimReadSystem = false;

        DelAll_Hukidashi();

        Hukidashi("F3020100");//広くしてあげようかな
        ChieriMotion("笑顔01口眉", 0.4f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.2f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1f);

        #endregion

        #region スマホ操作直前　～　縮み終わるまで

        NovelSetVis("F3020120");//え、広く・・あ・・　血の気が引く
        while (isNovelSetVisIng) { yield return null; }

        TereHoho(false, 5);
        Hukidashi("F3020110");//今の半分だと
        ChieriMotion("f_だーめ、宿題終わるまで", 1f, 2);
        yield return new WaitForSeconds(2);

        NovelSetVis("F3020130");//これまだ縮・・　呆然
        yield return new WaitForSeconds(0.5f);
        while (isNovelSetVisIng) { yield return null; }

        DelAll_Hukidashi();
        Hukidashi("F3020120");//1.7cmでいっか
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.2f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1);
        yield return KeyOrWait(3);

        #region スマホ操作して縮小してしまい
        ChieriMotion("デスク手のせスマホ操作", 0, 0);

        yield return new WaitForSeconds(2);
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        Hukidashi("F3020130");//100分の1になっちゃえ


        #region IK顔目プレイヤー見る
        //IK目プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 1.5f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        #endregion

        #region ■目眩リトルとDOTWeenTOでプレイヤーサイズ縮小(縮小完了bool付き)マスク版
        bool isShrinkComplete = false;
        //段階別で目眩具合と縮小度変更して縮小
        PPv2MemaiLittle(1f);

        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
        , DB.playerScale_Vore01, 20f)
        .OnComplete(() => { isShrinkComplete = true; });
        SEPlay("magic-attack-darkness1_long(-12)", 0.5f);

        #endregion

        yield return new WaitForSeconds(1);
        ChieriMotion("f_降りてみる？", 0.3f, 2);
        yield return new WaitForSeconds(1);
        NovelSetVis("F3020140");//何時間振りの縮小　想像できない

        #region スマホ操作終了してしまう
        //スマホ操作終了まで待機
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "デスク手のせスマホ操作") { yield return null; }
        while (girlAnimNomTime <= 1f) { yield return null; }

        //スマホしまい
        ChieriMotion("デスク手のせスマホ取り出し逆再生", 0.3f, 0);

        //スマホしまう位置まで待機
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "デスク手のせスマホ取り出し") { yield return null; }
        while (girlAnimNomTime <= 0.65f) { yield return null; }

        //スマホ位置もとに
        ChieriSumahoObj.transform.localPosition = defChieriSumahoPos;
        ChieriSumahoObj.transform.localEulerAngles = defChieriSumahoRot;


        //スマホObjオフ（しまい）//画面勝手に消える
        ChieriSumahoObj.SetActive(false);

        #endregion

        #endregion

        while (girlAnimNomTime <= 1f) { yield return null; }
        isGirlAnimReadSystem = false;

        while (isNovelSetVisIng) { yield return null; }

        #endregion
        //ChieriMotion("_noData", 0f, 2);
        //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));

        #region 顔寄せ2

        //顔寄せ
        ChieriMotion("デスク手のせ顔よせ", 0.3f, 0);
        ChieriMotion("f_ジト目40ん？私のハンカチで？", 3f, 2);

        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "デスク手のせ顔よせ") { yield return null; }
        while (girlAnimNomTime <= 0.8f) { yield return null; }


        HukidashiNovelDistanceChange(1f, 0);


        NovelSetVis("F3020150");//あ、ひ、ちえり？　混乱
        while (girlAnimNomTime <= 1f) { yield return null; }
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("F3020140");//これで落ちない
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.2f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        ChieriMotion("f_ジト目70笑顔", 2f, 2);
        yield return new WaitForSeconds(1);
        Hukidashi("F3020150");//ちっちゃいパンより
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("F3020160");//マコトの方がちっちゃく見える
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        NovelSetVis("F3020160");//言われてパンを見ると
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1f);

        Hukidashi("F3020170");//何日も暮らせそう
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        NovelSetVis("F3020170");//何日も・・　いらないから　否定されそう
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        Hukidashi("F3020180");//食べる姿がかわいいのに
        ChieriMotion("つまんなそう", 0.5f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        Hukidashi("F3020190");//もったいないからたべてたべて
        ChieriMotion("f_あ！ほら！口閉じ", 0.5f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("F3020180");//いらないから・・・　怖くて……
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1.5f);

        Hukidashi("F3020200");//私が食べるの？
        ChieriMotion("f_え？(軽驚)", 0.5f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        Hukidashi("F3020210");//だって私が食べたら・・
        ChieriMotion("_noData", 2f, 2);
        yield return new WaitForSeconds(2);

        #endregion

        #region パン舐め取り

        #region IK右手
        //右手IK位置
        GameObject IKRHand015_PanNamePosObj
            = Resources.Load("_PosObj/0320Taberareru/IKRHand015_PanNamePosObj") as GameObject;
        IKRHandTargetTrs.localPosition = IKRHand015_PanNamePosObj.transform.localPosition;
        IKRHandTargetTrs.localEulerAngles = IKRHand015_PanNamePosObj.transform.localEulerAngles;

        yield return null;
        //右手IKON
        DOTweenToIKEfPos(IKRHandEf, 1, 4, Ease.InOutSine);
        DOTweenToIKEfRot(IKRHandEf, 1, 4, Ease.InOutSine);

        #endregion

        //口元よせ
        ChieriMotion("デスク手のせ口元よせ", 0, 0);
        //HeadIK切り
        DOTweenToLAIKSHead(LAIKHeadS, 0, 2);

        StartCoroutine(GirlAnimReadSystem()); yield return null;
        while (nowGirlAnimClipName != "デスク手のせ口元よせ") { yield return null; }
        while (girlAnimNomTime <= 0.7f) { yield return null; }


        #region パン 舐め取りとSE
        //舐め　同クリップ再生で舌出し同時（0レイヤーは口開けできないので）
        ChieriMotion("デスク手のせ舐め編集パン舐め取り", 0.7f, 0);
        ChieriMotion("デスク手のせ舐め編集パン舐め取り", 0.7f, 15);

        //SE1舌だし
        SEPlay(Other3DSEObj, "舐め02短", GirlTang0001Trs.gameObject, 1.5f);

        //大体1秒
        //舐める瞬間（ペアレント瞬間）まで待機
        yield return new WaitForSeconds(1f);

        //パン 舌へペアレント処理
        FixedAction(() =>
        {
            #region ■パン 舌先位置に（ペアレント）
            Pankuzu02Obj.transform.SetParent(GirlTang0003Trs);

            //念のためTweener移動
            GameObject Pankuzu02020_PareTang3_NametorarePosObj
                = Resources.Load("_PosObj/0320Taberareru/Pankuzu02020_PareTang3_NametorarePosObj") as GameObject;
            Pankuzu02Obj.transform.DOLocalMove(Pankuzu02020_PareTang3_NametorarePosObj.transform.localPosition
                , 0.1f);
            Pankuzu02Obj.transform.DOLocalRotate(Pankuzu02020_PareTang3_NametorarePosObj.transform.localEulerAngles
                , 0.1f);

            #endregion
        });
        while (isFixedAction) { yield return null; }


        StartCoroutine(GirlAnimReadSystem(15)); yield return null;
        ////SE2舌入れ
        //while (nowGirlAnimClipName != "デスク手のせ舐め編集パン舐め取り") { yield return null; }
        //while (girlAnimOtherLayerNomTimeDict[15] <= 0.26f) { yield return null; }
        //SEPlay(Other3DSEObj, "舐め03短", GirlTang0001Trs.gameObject, 0.4f);


        //パン口に入るまで待機
        while (girlAnimNomTime <= 0.5f) { yield return null; }

        SEPlay(Other3DSEObj, "舐め03短", GirlTang0001Trs.gameObject, 1.5f);

        #region パンモーション

        //パンTweener移動（消え）
        GameObject Pankuzu02030_PareTang3_KounaiKieruPosObj
            = Resources.Load("_PosObj/0320Taberareru/Pankuzu02030_PareTang3_KounaiKieruPosObj") as GameObject;
        Pankuzu02Obj.transform.DOLocalMove(Pankuzu02030_PareTang3_KounaiKieruPosObj.transform.localPosition
            , 2f)
            .SetEase(Ease.InQuad);
        Pankuzu02Obj.transform.DOLocalRotate(Pankuzu02030_PareTang3_KounaiKieruPosObj.transform.localEulerAngles
            , 2f)
            .SetEase(Ease.InQuad);
        Pankuzu02Obj.transform.DOScale(Pankuzu02030_PareTang3_KounaiKieruPosObj.transform.localScale
            , 2f)
            .SetEase(Ease.InQuad)
            .OnComplete(() =>
            {
                //消し
                Pankuzu02Obj.SetActive(false);
            });

        #endregion

        //SE3飲み込み
        while (girlAnimOtherLayerNomTimeDict[15] <= 0.7f) { yield return null; }
        SEPlay(SocksSEObj, "口ペチャペチャ02_飲み込みピッチ-10", GirlTang0000Trs.gameObject, 1.5f);

        while (girlAnimNomTime <= 1f) { yield return null; }

        #endregion

        #endregion

        #region パンくず持ち上げ位置に戻して おいしかったかも会話
        //右手IKOFF
        DOTweenToIKEfPos(IKRHandEf, 0, 4, Ease.InOutSine);
        DOTweenToIKEfRot(IKRHandEf, 0, 4, Ease.InOutSine);
        //HeadIK戻し
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        ChieriMotion("デスク手のせパンくず持ち上げ", 4f, 0);

        yield return new WaitForSeconds(1);




        Hukidashi("F3020220");//ほら　溶けちゃった
        ChieriMotion("あはは・・・", 0.2f, 2);
        ChieriMotionDelay(2, "f_笑顔01口眉下がり_目閉じない", 0.2f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);
        Hukidashi("F3020230");//お腹も膨れないし勿体無いよ？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1f);

        NovelSetVis("F3020190");//一瞬だった
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1.5f);

        Hukidashi("F3020240");//あはは、でも
        ChieriMotion("あはは・・・", 0.2f, 2);
        ChieriMotionDelay(1, "f_笑顔01口眉下がり_目閉じない", 0.2f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        Hukidashi("F3020250");//ちっちゃくても
        ChieriMotion("笑顔01口眉_目閉じない", 1f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        Hukidashi("F3020260");//ちょっと味がしておいしかったかも
        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.2f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        yield return new WaitForSeconds(1f);

        NovelSetVis("F3020200");//う、えと　一瞬で、目の前で捕食された。
        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("f_ほんとに手の上だ", 6f, 2);
        TereHohoAlphaChange(0.5f);
        TereHoho(true, 10);

        yield return new WaitForSeconds(2f);

        Hukidashi("・・・");//・・・
        yield return new WaitForSeconds(3);


        #endregion

        KankyouBGMVolumer(0.1f, 5);

        #region 顔寄せ位置に戻して不穏
        ChieriMotion("デスク手のせ顔よせ", 0f, 0);

        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "デスク手のせ顔よせ") { yield return null; }
        while (girlAnimNomTime <= 0.3f) { yield return null; }

        NovelSetVis("F3020210");//一瞬だった
        while (isNovelSetVisIng) { yield return null; }

        TereHohoAlphaChange(0.6f, 3);
        yield return new WaitForSeconds(1.5f);

        HukidashiNovelDistanceChange(1.5f, 0);

        Hukidashi("F3020270");//ね・・
        ChieriMotion("f_ジト目40ん？私のハンカチで？", 3f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1f);

        NovelSetVis("F3020220");//ちえ・・り・・・？　好奇心で一杯
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1.5f);

        Hukidashi("F3020280");//舐めるだけなら・・
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        TereHohoAlphaChange(0.8f, 3);
        yield return new WaitForSeconds(1f);

        Hukidashi("F3020290");//キスみたいなものだよね
        ChieriMotion("f_ジト目70笑顔", 2f, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1f);


        #endregion
        KankyouBGMVolumer(0.2f, 5);

        #region 口元寄せ 舌なめずり　舌舐め

        //口元よせ
        ChieriMotion("デスク手のせ口元よせ", 0, 0);
        //HeadIK切り
        DOTweenToLAIKSHead(LAIKHeadS, 0, 2);

        ChieriMotion("_noData", 2f, 2);

        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "デスク手のせ口元よせ") { yield return null; }
        while (girlAnimNomTime <= 0.2f) { yield return null; }

        HukidashiNovelDistanceChange(0.5f, 0);


        NovelSetVis("F3020230");//とめる術なし

        while (girlAnimNomTime <= 0.4f) { yield return null; }
        //舌なめずり
        ChieriMotion("デスク手のせ舐め位置で舌なめずり", 0, 15);

        StartCoroutine(GirlAnimReadSystem(15));
        yield return null;
        while (nowGirlAnimOtherLayerClipNameDict[15] != "デスク手のせ舐め位置で舌なめずり") { yield return null; }

        #region 舌なめずりSE手動で
        while (girlAnimOtherLayerNomTimeDict[15] <= 0.08f) { yield return null; }
        SEPlay(Other3DSEObj, "舐め02短", GirlTang0003Trs.gameObject, 1.5f);

        while (girlAnimOtherLayerNomTimeDict[15] <= 0.42f) { yield return null; }
        SEPlay(Other3DSEObj, "舐め03短", GirlTang0003Trs.gameObject, 1.5f);

        while (girlAnimOtherLayerNomTimeDict[15] <= 0.62f) { yield return null; }
        SEPlay(Other3DSEObj, "舐め01", GirlTang0003Trs.gameObject, 1.5f);

        while (girlAnimOtherLayerNomTimeDict[15] <= 0.82f) { yield return null; }
        SEPlay(SocksSEObj, "口ペチャペチャ02_飲み込みピッチ-10", GirlTang0000Trs.gameObject, 1.5f);

        #endregion

        while (girlAnimOtherLayerNomTimeDict[15] <= 1f) { yield return null; }

        while (isNovelSetVisIng) { yield return null; }


        //舌舐め同クリップ再生で舌出し同時（0レイヤーは口開けできないので）
        ChieriMotion("デスク手のせ舐め編集舌出し", 0, 0);
        ChieriMotion("デスク手のせ舐め編集舌出し", 0, 15);

        //クリップは手乗せ舐め編集
        while (nowGirlAnimClipName != "デスク手のせ舐め編集") { yield return null; }

        //SE1出し舐め
        while (girlAnimOtherLayerNomTimeDict[15] <= 0.12f) { yield return null; }
        SEPlay(Other3DSEObj, "舐め01", GirlTang0002Trs.gameObject, 4f);

        while (girlAnimNomTime <= 0.3f) { yield return null; }

        NovelSetVis("F3020240");//うぶっ　こそぎ取っていく

        //SE2しまい
        while (girlAnimOtherLayerNomTimeDict[15] <= 0.5f) { yield return null; }
        SEPlay(Other3DSEObj, "舐め03短", GirlTang0002Trs.gameObject, 1.5f);


        while (girlAnimNomTime <= 1f) { yield return null; }
        while (isNovelSetVisIng) { yield return null; }


        yield return new WaitForSeconds(1);
        //もう一回
        ChieriMotion("デスク手のせ舐め編集舌出し", 0, 0);
        ChieriMotion("デスク手のせ舐め編集舌出し", 0, 15);

        yield return null;
        yield return null;

        //SE1だし舐め
        while (girlAnimOtherLayerNomTimeDict[15] <= 0.12f) { yield return null; }
        SEPlay(Other3DSEObj, "舐め02短", GirlTang0002Trs.gameObject, 4f);

        //SE2しまい
        while (girlAnimOtherLayerNomTimeDict[15] <= 0.5f) { yield return null; }
        SEPlay(Other3DSEObj, "舐め03短", GirlTang0002Trs.gameObject, 1.5f);


        while (girlAnimNomTime <= 1f) { yield return null; }

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        kutipakuString = "口パク控えめゆっくり";

        Hukidashi("F3020300");//マコトの味がする
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(2);


        Hukidashi("F3020310");//ごめんね知らなかった
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);

        Hukidashi("F3020320");//舐めたものって
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        Hukidashi("F3020330");//口に入れたくなっちゃうんだね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        NovelSetVis("F3020250");//はぁっはぁっ
        while (isNovelSetVisIng) { yield return null; }

        #endregion

        #region 口に入れる流れ

        GirlPosToIKTargetPosRot();
        yield return null;
        yield return null;

        //顔上げの最初うつむきが厳しいので、LookAtHeadであげることにした
        //ChieriMotion("デスク手のせ舐め顔上げまで編集口開け", 2, 0);
        //口だけ
        ChieriMotion("デスク手のせ舐め顔上げまで編集口開け", 0.1f, 15);

        #region IK右手
        //右手IK位置
        GameObject IKRHand005_KounaiMisePosObj
            = Resources.Load("_PosObj/0320Taberareru/IKRHand005_KounaiMisePosObj") as GameObject;
        IKRHandTargetTrs.localPosition = IKRHand005_KounaiMisePosObj.transform.localPosition;
        IKRHandTargetTrs.localEulerAngles = IKRHand005_KounaiMisePosObj.transform.localEulerAngles;

        //右手IKON
        DOTweenToIKEfPos(IKRHandEf, 1, 4, Ease.InOutSine);
        DOTweenToIKEfRot(IKRHandEf, 1, 4, Ease.InOutSine);

        #endregion

        #region IKLookAtHead
        //IK位置
        GameObject IKLAHead010_KounaiMisePosObj
            = Resources.Load("_PosObj/0320Taberareru/IKLAHead010_KounaiMisePosObj") as GameObject;
        IKLookAtHeadTargetTrs.localPosition = IKLAHead010_KounaiMisePosObj.transform.localPosition;
        IKLookAtHeadTargetTrs.localEulerAngles = IKLAHead010_KounaiMisePosObj.transform.localEulerAngles;

        //IKON
        DOTweenToLAIKSHead(LAIKHeadS, 1, 3.5f, Ease.InOutSine);

        #endregion


        //口開け切るまで待機
        yield return null;
        StartCoroutine(GirlAnimReadSystem(15));
        yield return null;
        while (nowGirlAnimOtherLayerClipNameDict[15] != "デスク手のせ舐め顔上げまで編集口開け") { yield return null; }
        //SE1
        while (girlAnimOtherLayerNomTimeDict[15] <= 0.5f) { yield return null; }
        SEPlay(SocksSEObj, "舐め03短", GirlTang0003Trs.gameObject, 5f);

        while (girlAnimOtherLayerNomTimeDict[15] <= 1f) { yield return null; }

        KankyouBGMVolumer(0f, 1);
        BreathSound_Taberareru.GetComponent<AudioSource>().DOFade(0, 1);

        HukidashiNovelDistanceChange(2f, 0);

        NovelSetVis("F3020260");//真の姿　涙か唾液かわからない
        while (isNovelSetVisIng) { yield return null; }



        #region //デバッグ用

        //while (true)
        //{
        //    if (Input.GetKeyDown(KeyCode.G))
        //    {
        //        ChieriMotion("Tang005デスク手のせ舐め顔上げまで編集口開けから舐め取り", 0, 15);
        //        //大体1.5秒
        //        #region IK右手 舐め取り位置へ
        //        //右手IK位置
        //        GameObject IKRHand007_NametoriPosObjaa
        //            = Resources.Load("_PosObj/0320Taberareru/IKRHand007_NametoriPosObj") as GameObject;
        //        IKRHandTargetTrs.DOLocalMove(IKRHand007_NametoriPosObjaa.transform.localPosition
        //            , 1.5f)
        //            .SetEase(Ease.InOutSine);
        //        IKRHandTargetTrs.DOLocalRotate(IKRHand007_NametoriPosObjaa.transform.localEulerAngles
        //            , 1.5f)
        //            .SetEase(Ease.InOutSine);

        //        #endregion
        //        //舐める瞬間（ペアレント瞬間）まで待機
        //        StartCoroutine(GirlAnimReadSystem(15)); yield return null;
        //        while (nowGirlAnimOtherLayerClipNameDict[15] != "Tang005デスク手のせ舐め顔上げまで編集口開けから舐め取り") { yield return null; }
        //        while (girlAnimOtherLayerNomTimeDict[15] <= 0.2438f) { yield return null; }

        //        #region カメラ 舌へペアレント処理
        //        FixedAction(() =>
        //        {
        //            #region ■プレイヤー 舌先位置に（ペアレント）
        //            CameraObjectsTrs.SetParent(GirlTang0003Trs);

        //            //念のためTweener移動
        //            GameObject Player009_PareTang3_NametorarePosObj
        //                = Resources.Load("_PosObj/0320Taberareru/Player009_PareTang3_NametorarePosObj") as GameObject;
        //            CameraObjectsTrs.DOLocalMove(Player009_PareTang3_NametorarePosObj.transform.localPosition
        //                , 0.3f);
        //            //CameraObjectsTrs.DOLocalRotate(Player009_PareTang3_NametorarePosObj.transform.localEulerAngles
        //            //    , 0.3f);

        //            ////カメラリセット値変更してリセット
        //            //CameraReset(Player009_PareTang3_NametorarePosObj.transform.localEulerAngles
        //            //    , DB.cameraSitAnchorDefLocalPos//座りに
        //            //    , false
        //            //    , Vector3.zero
        //            //    , false
        //            //    , false);
        //            #endregion
        //            isPlayerUniqueMotion = true;
        //        });
        //        while (isFixedAction) { yield return null; }
        //        #endregion

        //    }


        //    if (Input.GetKeyDown(KeyCode.H))
        //    {
        //        SEPlay(SocksSEObj, "口ぺちゃぺちゃ01", GirlTang0002Trs.gameObject, 1f);
        //    }
        //    if (Input.GetKeyDown(KeyCode.J))
        //    {
        //        SEPlay(Other3DSEObj, "口ぺチャぺチャ00", GirlTang0002Trs.gameObject, 1f);
        //    }
        //    if (Input.GetKeyDown(KeyCode.K))
        //    {
        //        SEPlay(Other3DSEObj, "舐め02短", GirlTang0002Trs.gameObject, 1f);
        //    }
        //    if (Input.GetKeyDown(KeyCode.L))
        //    {
        //        SEPlay(Other3DSEObj, "舐め03短", GirlTang0002Trs.gameObject, 1f);
        //    }
        //    if (Input.GetKeyDown(KeyCode.V))
        //    {
        //        Debug.Log(girlAnimOtherLayerNomTimeDict[15]);
        //    }
        //    if (Input.GetKeyDown(KeyCode.B))
        //    {
        //        SEPlay(SocksSEObj, "口ペチャペチャ02_飲み込みピッチ-10", GirlTang0000Trs.gameObject, 0.3f);
        //    }
        //    if (Input.GetKeyDown(KeyCode.N))
        //    {
        //        SEPlay(Other3DSEObj, "舐め00", GirlTang0002Trs.gameObject, 1f);
        //    }
        //    if (Input.GetKeyDown(KeyCode.M))
        //    {
        //        SEPlay(Other3DSEObj, "舐め01", GirlTang0002Trs.gameObject, 1f);
        //    }
        //    yield return null;
        //}

        #endregion


        ChieriMotion("Tang005デスク手のせ舐め顔上げまで編集口開けから舐め取り", 0, 15);
        #region IK右手 舐め取り位置へ
        //右手IK位置
        GameObject IKRHand007_NametoriPosObj
            = Resources.Load("_PosObj/0320Taberareru/IKRHand007_NametoriPosObj") as GameObject;
        IKRHandTargetTrs.DOLocalMove(IKRHand007_NametoriPosObj.transform.localPosition
            , 1.5f)
            .SetEase(Ease.InOutSine);
        IKRHandTargetTrs.DOLocalRotate(IKRHand007_NametoriPosObj.transform.localEulerAngles
            , 1.5f)
            .SetEase(Ease.InOutSine);

        #endregion

        KankyouBGMVolumer(0.3f, 1);
        BreathSound_Taberareru.GetComponent<AudioSource>().DOFade(0.2f, 1);

        //舐める瞬間（ペアレント瞬間）まで待機
        StartCoroutine(GirlAnimReadSystem(15)); yield return null;
        while (nowGirlAnimOtherLayerClipNameDict[15] != "Tang005デスク手のせ舐め顔上げまで編集口開けから舐め取り") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[15] <= 0.2438f) { yield return null; }
        ////大体1.5秒
        //yield return new WaitForSeconds(1.5f);



        #region カメラ 舌へペアレント処理
        FixedAction(() =>
        {
            #region ■プレイヤー 舌先位置に（ペアレント）
            CameraObjectsTrs.SetParent(GirlTang0003Trs);

            //念のためTweener移動
            GameObject Player009_PareTang3_NametorarePosObj
                = Resources.Load("_PosObj/0320Taberareru/Player009_PareTang3_NametorarePosObj") as GameObject;
            CameraObjectsTrs.DOLocalMove(Player009_PareTang3_NametorarePosObj.transform.localPosition
                , 0.3f);
            //CameraObjectsTrs.DOLocalRotate(Player009_PareTang3_NametorarePosObj.transform.localEulerAngles
            //    , 0.3f);

            ////カメラリセット値変更してリセット
            //CameraReset(Player009_PareTang3_NametorarePosObj.transform.localEulerAngles
            //    , DB.cameraSitAnchorDefLocalPos//座りに
            //    , false
            //    , Vector3.zero
            //    , false
            //    , false);
            #endregion
            isPlayerUniqueMotion = true;
        });
        while (isFixedAction) { yield return null; }



        #endregion

        #region IK右手舐め取り後うごき
        //右手IK位置
        GameObject IKRHand008_NametoriAfterPosObj
            = Resources.Load("_PosObj/0320Taberareru/IKRHand008_NametoriAfterPosObj") as GameObject;
        IKRHandTargetTrs.DOLocalMove(IKRHand008_NametoriAfterPosObj.transform.localPosition
            , 1.5f)
            .SetEase(Ease.InOutSine);
        IKRHandTargetTrs.DOLocalRotate(IKRHand008_NametoriAfterPosObj.transform.localEulerAngles
            , 1.5f)
            .SetEase(Ease.InOutSine)
            .OnComplete(() =>
            {
                //さっきの位置へ戻し
                IKRHandTargetTrs.DOLocalMove(IKRHand007_NametoriPosObj.transform.localPosition
            , 1.5f)
            .SetEase(Ease.InOutSine);
                IKRHandTargetTrs.DOLocalRotate(IKRHand007_NametoriPosObj.transform.localEulerAngles
                    , 1.5f)
                    .SetEase(Ease.InOutSine);

            });

        #endregion


        //フェードタイミングまで待機（口閉じ）
        while (girlAnimOtherLayerNomTimeDict[15] <= 0.7f) { yield return null; }

        KankyouBGMVolumer(0f, 1);
        BreathSound_Taberareru.GetComponent<AudioSource>().DOFade(0, 1);
        tmpRHandSound.aSource.DOFade(0, 1f);
        tmpHeadSound.aSource.DOFade(0, 1f);

        FadeBlack(1, 1.5f);

        yield return new WaitForSeconds(4);

        #endregion


        #region //デバッグ用コマンド


        //while (true)
        //{
        //    if (Input.GetKeyDown(KeyCode.G))
        //    {

        //    }
        //    if (Input.GetKeyDown(KeyCode.H))
        //    {
        //    }

        //    if (Input.GetKeyDown(KeyCode.J))
        //    {
        //    }

        //    if (Input.GetKeyDown(KeyCode.K))
        //    {

        //    }
        //    if (Input.GetKeyDown(KeyCode.L))
        //    {
        //        EventMove("咥内", true, true);
        //    }
        //    if (Input.GetKeyDown(KeyCode.Equals))//セミコロン
        //    {


        //    }
        //    if (Input.GetKeyDown(KeyCode.Semicolon))//コロン
        //    {

        //    }

        //    if (Input.GetKeyDown(KeyCode.V))
        //    { StartCoroutine(F3030KounaiEffect()); }
        //    if (Input.GetKeyDown(KeyCode.B))
        //    { isF3030KounaiEffect = false; }

        //    if (Input.GetKeyDown(KeyCode.N))
        //    {
        //        //舌
        //        var tangSMR =
        //            GirlMeshTrs.Find("Tang_def").GetComponent<SkinnedMeshRenderer>();

        //        //マテリアルを置き換え
        //        tangSMR.material = tangSMR.GetComponent<MatChangeResources>().otherMat;
        //    }
        //    yield return null;
        //}

        #endregion

        EventMove("咥内", true, true);

        yield break;
    }
    IEnumerator F3030()//咥内
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            //nowPlayerLocalScl = new Vector3(0.1f, 0.1f, 0.1f);
            nowPlayerLocalScale = DB.playerScale_Vore01;

            #region 宿題置き

            //宿題 位置に
            Drill_chieriTrs.gameObject.SetActive(true);
            GameObject Drill_chieri_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/Drill_chieri_DeskPosObj") as GameObject;
            Drill_chieriTrs.localPosition = Drill_chieri_DeskPosObj.transform.localPosition;
            Drill_chieriTrs.localEulerAngles = Drill_chieri_DeskPosObj.transform.localEulerAngles;
            ////一応主人公の宿題も
            //HomeworkObjectsTrs.SetParent(DrillTrs);
            //DrillTrs.localPosition = Drill_chieri_DeskPosObj.transform.localPosition;
            //DrillTrs.localEulerAngles = Drill_chieri_DeskPosObj.transform.localEulerAngles;
            //DrillTrs.gameObject.SetActive(false);

            //ペン置く
            SharpenObj.transform.SetParent(RoomTrs);
            GameObject tmpPenPosObj = (GameObject)Resources.Load("_PosObj/D_Henai_Day1/Sharpen_DeskOkuTrsPosObj");
            SharpenObj.transform.localPosition = tmpPenPosObj.transform.localPosition;
            SharpenObj.transform.localEulerAngles = tmpPenPosObj.transform.localEulerAngles;
            //消しゴム置く
            KeshigomuObj.transform.SetParent(RoomTrs);
            KeshigomuObj.SetActive(true);
            GameObject tmpKeshigomuPosObj = (GameObject)Resources.Load("_PosObj/D_Henai_Day1/Keshigomu_DeskOkuPosObj");
            KeshigomuObj.transform.localPosition = tmpKeshigomuPosObj.transform.localPosition;
            KeshigomuObj.transform.localEulerAngles = tmpKeshigomuPosObj.transform.localEulerAngles;
            #endregion //宿題置き

        }
        EventReset();

        FadeBlack(1, 0);

        #region 設定
        //智恵理0位置ロック
        DB.isChieriPosLock = true;

        //智恵理椅子位置
        GameObject Chair_01_SuwariPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chair_01_SuwariPosObj") as GameObject;
        ChairTrs.localPosition = Chair_01_SuwariPosObj.transform.localPosition;
        ChairTrs.localEulerAngles = Chair_01_SuwariPosObj.transform.localEulerAngles;

        ChieriMotion("デスク起き上がりポーズ", 0f, 0);

        //アニメスピード
        girlAnim.speed =
        doorAnim.speed =
        chairAnim.speed = 1f;

        //スピーカー 位置に
        SpeakerTrs.gameObject.SetActive(true);
        GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
        SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        //宿題セット消し
        SharpenObj.SetActive(false);
        KeshigomuObj.SetActive(false);
        Drill_chieriTrs.gameObject.SetActive(false);

        #region 皿パン設定
        GameObject
            SaraObj = Instantiate(Resources.Load("Main/KomonoObj/Sara/Sara") as GameObject, RoomTrs, false),
        PanObj = SaraObj.transform.Find("Pan").gameObject,
        Pan_AObj = PanObj.transform.Find("Pan_A").gameObject,
        Pan_BObj = PanObj.transform.Find("Pan_B").gameObject,
        PankuzuObj = SaraObj.transform.Find("Pankuzu").gameObject,
        Pankuzu01Obj = PankuzuObj.transform.Find("Pankuzu01").gameObject,
        Pankuzu02Obj = PankuzuObj.transform.Find("Pankuzu02").gameObject;

        DB.evMoveDelObjList.Add(SaraObj);

        GameObject
            SaraHandObj = Instantiate(Resources.Load("Main/KomonoObj/Sara/SaraHand") as GameObject, GirlRHandTrs, false);
        DB.evMoveDelObjList.Add(SaraHandObj);

        saraAnim
            = SaraObj.GetComponent<Animator>();
        saraAnim.CrossFadeInFixedTime("デスク皿置かれてる", 0f, 0);
        yield return null;
        SaraObj.SetActive(false);

        //皿 食事1位置に
        GameObject Sara_01_DeskSyokuzi01PosObj = Resources.Load("_PosObj/D_Henai_Day1/Sara_01_DeskSyokuzi01PosObj") as GameObject;
        SaraObj.transform.localPosition = Sara_01_DeskSyokuzi01PosObj.transform.localPosition;
        SaraObj.transform.localEulerAngles = Sara_01_DeskSyokuzi01PosObj.transform.localEulerAngles;

        //パンを片方消す
        Pan_AObj.SetActive(false);
        //パンくずを消す
        PankuzuObj.SetActive(false);

        //皿動かすためにアニメーター止め
        saraAnim.enabled = false;


        SaraHandObj.SetActive(false);
        SaraObj.SetActive(true);
        saraAnim.CrossFadeInFixedTime("デスク皿置き", 0f, 0);

        #endregion //皿パン設定




        #region 咥内用ポストプロセスライト設定コルーチン開始　と　智恵理ブレス停止
        yield return null;
        StartCoroutine(F3030KounaiEffect());

        OriBreathController.enabled = false;
        #endregion

        //ひとまず口開け Wa 100 tooth60
        ChieriMotion("Kounai000口開けライト設定時", 0, 15);

        //コルーチン初期化待ち
        while (isF3030KounaiEffectInitialize == false) { yield return null; }

        //プレイヤー 口の中に（ペアレント）（↑のちえりONOFF処理の後でないとカメラがオフになるのでエラー出る）
        CameraObjectsTrs.SetParent(Bip001HeadTrs, false);
        GameObject Player_ChieriKounai_HeadParentPosObj
            = Resources.Load("_PosObj/Player_ChieriKounai_HeadParentPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_ChieriKounai_HeadParentPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_ChieriKounai_HeadParentPosObj.transform.localEulerAngles;

        //カメラリセット値変更してリセット
        CameraReset(Player_ChieriKounai_HeadParentPosObj.transform.localEulerAngles
            , DB.cameraSitAnchorDefLocalPos//Anchorを座りに
            , false
            , Vector3.zero
            , false
            , true);

        #endregion //設定


        #region スタート状態

        //プレイヤー 口の中に（ペアレント）（↑のちえりONOFF処理の後でないとカメラがオフになるのでエラー出る）
        CameraObjectsTrs.SetParent(Bip001HeadTrs, false);
        GameObject Player010_PareHead_StartMaebaOsaePosObj
            = Resources.Load("_PosObj/0330Kounai/Player010_PareHead_StartMaebaOsaePosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player010_PareHead_StartMaebaOsaePosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player010_PareHead_StartMaebaOsaePosObj.transform.localEulerAngles;

        //カメラリセット値変更してリセット
        CameraReset(Player010_PareHead_StartMaebaOsaePosObj.transform.localEulerAngles
            , DB.cameraSitAnchorDefLocalPos//Anchorを座りに
            , false
            , Vector3.zero
            , false
            , true);

        isPlayerUniqueMotion = true;
        PlayerMotion("Player010前歯前舌圧迫", 0f, 0);

        //カメラ
        VRCamera.nearClipPlane = 0.001f;
        TPSCamera.nearClipPlane = 0.001f;


        ChieriMotion("Kounai020咥内スタート前歯前舌圧迫", 0, 15);

        #endregion

        #region 舌にWindnoiseSoundObj付与

        GameObject TangSoundObj
            = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlTang0003Trs, false);
        TangSoundObj.name = nameof(TangSoundObj);
        DB.evMoveDelObjList.Add(TangSoundObj);

        //設定
        WindnoiseSound tmpTangSound = TangSoundObj.GetComponent<WindnoiseSound>();
        tmpTangSound.aSource.maxDistance = 50;
        tmpTangSound.pitchMax = 2f;
        tmpTangSound.pitchUpRateAdjustFloat = 8;

        tmpTangSound.aSource.volume = 0;

        //SoundObjのPos
        GameObject TangWindSound010_ShitaDownIchiPosObj
            = Resources.Load("_PosObj/0330Kounai/TangWindSound010_ShitaDownIchiPosObj") as GameObject;
        TangSoundObj.transform.localPosition
            = TangWindSound010_ShitaDownIchiPosObj.transform.localPosition;
        //= Vector3.zero;
        #endregion

        //ゆっくり開幕
        FadeBlack(0, 200);
        yield return new WaitForSeconds(2);


        GirlPosToIKTargetPosRot();

        NovelSetVis("F3030010");//……はぁっー！　掬うようにねじ込まれてきた
        while (isNovelSetVisIng) { yield return null; }

        //保険すぐ開幕
        FadeBlack(0, 3);

        //同期停止
        isF3030CameraObjectsGuideCubeDouki = false;

        tmpTangSound.aSource.DOFade(0.4f, 1);

        #region すくい上げて中央への流れ

        ChieriMotion("Kounai030舌先ですくう位置へ", 0, 15);
        yield return null;

        StartCoroutine(GirlAnimReadSystem(15));
        while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai030舌先ですくう位置へ") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[15] <= 1f) { yield return null; }

        #region プレイヤー 舌先3に（ペアレント）
        CameraObjectsTrs.SetParent(GirlTang0003Trs, false);
        GameObject Player020_PareTang3_MaebaOsaePosObj
            = Resources.Load("_PosObj/0330Kounai/Player020_PareTang3_MaebaOsaePosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player020_PareTang3_MaebaOsaePosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player020_PareTang3_MaebaOsaePosObj.transform.localEulerAngles;

        //カメラリセット値変更してリセット
        CameraReset(Player020_PareTang3_MaebaOsaePosObj.transform.localEulerAngles
            , DB.cameraSitAnchorDefLocalPos//Anchorを座りに
            , false
            , Vector3.zero
            , false
            , false);//ユーザーカメラリセットしない
        #endregion


        ChieriMotion("Kounai040舌中央へ運ぶ", 0, 15);
        while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai040舌中央へ運ぶ") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[15] <= 0.8f) { yield return null; }

        //プレイヤー Headに（ペアレント）
        CameraObjectsTrs.SetParent(GirlHeadTrs, true);
        PlayerMotion("Player020舌中央安定", 4f, 0);

        bool isTweenWait = true;
        #region Tweenで無理やりプレイヤー中央へ安定運び
        GameObject Player030_PareTang3_TyuuouAnteiPosObj
            = Resources.Load("_PosObj/0330Kounai/Player030_PareTang3_TyuuouAnteiPosObj") as GameObject;

        CameraObjectsTrs.DOLocalMove(Player030_PareTang3_TyuuouAnteiPosObj.transform.localPosition
            , 2)
            .SetEase(Ease.OutQuad);
        CameraObjectsTrs.DOLocalRotate(Player030_PareTang3_TyuuouAnteiPosObj.transform.localEulerAngles
            , 2)
            .SetEase(Ease.OutQuad)
            .OnComplete(() =>
            {
                GameObject Player040_PareTang3_SuberiotiPosObj
                = Resources.Load("_PosObj/0330Kounai/Player040_PareTang3_SuberiotiPosObj") as GameObject;

                CameraObjectsTrs.DOLocalMove(Player040_PareTang3_SuberiotiPosObj.transform.localPosition
                    , 3)
                    .SetEase(Ease.InOutQuad);
                CameraObjectsTrs.DOLocalRotate(Player040_PareTang3_SuberiotiPosObj.transform.localEulerAngles
                    , 3)
                    .SetEase(Ease.InOutQuad)
                    .OnComplete(() =>
                    {
                        //カメラリセット値変更してリセット
                        CameraReset(Player040_PareTang3_SuberiotiPosObj.transform.localEulerAngles
                    , DB.cameraSitAnchorDefLocalPos//Anchorを座りに
                    , false
                    , Vector3.zero
                    , false
                    , false);//ユーザーカメラリセットしない
                        isTweenWait = false;
                    });
            });

        #endregion

        ChieriMotion("Kounai050舌中央で安定化", 0.5f, 15);
        while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai050舌中央で安定化") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[15] <= 1f) { yield return null; }

        while (isTweenWait) { yield return null; }

        #endregion


        //同期スタート
        isF3030CameraObjectsGuideCubeDouki = true;

        HukidashiNovelDistanceChange(1.3f, 0);

        #region 口確認後、口閉じ
        NovelSetVis("F3030020");//光が差し込み　場所がわかった
        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("Kounai055安定化後口閉じ", 0, 15);
        yield return new WaitForSeconds(2);

        //一旦黒を濃く
        FadeBlack(0.9f, 1);

        NovelSetVis("F3030030");//肉の密室に戻された

        yield return new WaitForSeconds(1);

        //ゆっくり明るく
        FadeBlack(0, 80);

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1.5f);

        NovelSetVis("F3030040");//うそだうそだ　反響する声
        while (isNovelSetVisIng) { yield return null; }


        #endregion

        #region 口蓋押し付け、唾液貯め 解放まで
        ChieriMotion("Kounai056口蓋押し付け準備", 0f, 15);
        yield return new WaitForSeconds(0.5f);

        NovelSetVis("F3030050");//ひっあ　うねる　体預ける

        StartCoroutine(GirlAnimReadSystem(15));
        yield return null;
        while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai056口蓋押し付け準備") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[15] <= 0.7f) { yield return null; }

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        HukidashiNovelDistanceChange(0.8f, 0);

        NovelSetVis("F3030060");//狭い・・？　口蓋触れそう　気圧さえ支配
        while (isNovelSetVisIng) { yield return null; }

        //ダミーモーション
        PlayerMotion("Player030口蓋押し付けられ", 4f, 0);

        ChieriMotion("Kounai057口蓋押し付け開始", 0f, 15);
        while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai057口蓋押し付け開始") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[15] <= 0.6f) { yield return null; }

        HukidashiNovelDistanceChange(0.3f, 0);

        NovelSetVis("F3030070");//い、え、あぐが　口蓋に密着
        while (isNovelSetVisIng) { yield return null; }

        yield return null;
        while (girlAnimOtherLayerNomTimeDict[15] <= 1f) { yield return null; }


        NovelSetVis("F3030080");//息が　　頭が　　じゅるじゅる　　吸引
        while (novelCurrentPageInt < 1) { yield return null; }

        //押し離しループ
        ChieriMotion("Kounai060口蓋押し離しループ", 0f, 15);
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);
        ChieriMotion("Kounai065口蓋離し唾液貯め位置", 1f, 15);

        yield return null;
        while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai065口蓋離し唾液貯め位置") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[15] <= 1f) { yield return null; }

        HukidashiNovelDistanceChange(1f, 0);

        NovelSetVis("F3030090");//ぶはっ　一瞬の解放のあと
        while (isNovelSetVisIng) { yield return null; }

        #region //唾液取得 やっぱアニメでやる
        //Transform 
        //    juutenDaekiTrs =
        //    PostProcessVolumeKounaiObj.transform.Find("DaekiObjs/Daeki015舌裏から充填Obj"),
        //    suiiDaekiTrs =
        //    PostProcessVolumeKounaiObj.transform.Find("DaekiObjs/Daeki020充填で上がる水位Obj");

        //#region 唾液フェードイン

        //juutenDaekiTrs.GetComponent<>

        //#endregion
        #endregion

        ChieriMotion("Kounai067唾液貯めループ", 0f, 15);
        ChieriMotion("Kounai068Daeki唾液貯め", 0f, 16);//唾液ObjのPosとマテリアル操作のみ

        yield return new WaitForSeconds(2);
        NovelSetVis("F3030100");//はぁっ　ひっ　　唾液が分泌 自分の体まで浸り始めた頃、
        while (isNovelSetVisIng) { yield return null; }

        //押し離しループ
        ChieriMotion("Kounai060口蓋押し離しループ", 3f, 15);
        yield return new WaitForSeconds(2);
        ChieriMotion("Kounai069Daeki唾液貯め終了", 0f, 16);//唾液ObjのPosとマテリアル操作のみ

        HukidashiNovelDistanceChange(0.3f, 0);

        NovelSetVis("F3030110");//搾り出すように再開
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(2);

        ChieriMotion("Kounai070口蓋離し", 2f, 15);
        yield return null;
        while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai070口蓋離し") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[15] <= 1f) { yield return null; }

        HukidashiNovelDistanceChange(1f, 0);
        NovelSetVis("F3030120");//ふたたび解放　げふげふ　静かな時間
        while (novelCurrentPageInt < 3) { yield return null; }
        CameraAnchorTrs.DOShakePosition(0.2f, 0.1f);



        while (isNovelSetVisIng) { yield return null; }


        #endregion

        #region 口少し開け　舌で右奥歯に運び

        ChieriMotion("Kounai073口蓋離しから少し口開け", 0f, 15);
        while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai073口蓋離しから少し口開け") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[15] <= 0.9f) { yield return null; }

        NovelSetVis("F3030130");//光が流れ込み　解放のときかとおもった
        while (isNovelSetVisIng) { yield return null; }


        ChieriMotion("Kounai075少し口開けから右歯寄せ", 0f, 15);
        while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai075少し口開けから右歯寄せ") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[15] <= 0.9f) { yield return null; }


        HukidashiNovelDistanceChange(0.25f, 0);

        NovelSetVis("F3030140");//フックに　ごつごつ
        while (girlAnimOtherLayerNomTimeDict[15] <= 1f) { yield return null; }

        //同期停止
        isF3030CameraObjectsGuideCubeDouki = false;

        #region プレイヤーToothにペアレントして位置へ

        CameraObjectsTrs.SetParent(GirlTooth00Trs);
        GameObject Player050_PareTooth00_MigihaPosObj
            = Resources.Load("_PosObj/0330Kounai/Player050_PareTooth00_MigihaPosObj") as GameObject;
        CameraObjectsTrs.DOLocalMove(Player050_PareTooth00_MigihaPosObj.transform.localPosition
            , 0.3f);
        CameraObjectsTrs.DOLocalRotate(Player050_PareTooth00_MigihaPosObj.transform.localEulerAngles
            , 0.3f)
            .OnComplete(() =>
            {
                //カメラリセット値変更してリセット
                CameraReset(Player050_PareTooth00_MigihaPosObj.transform.localEulerAngles
                    , DB.cameraSitAnchorDefLocalPos//Anchorを座りに
                    , false
                    , Vector3.zero
                    , false
                    , false);//ユーザーカメラリセットしない
            });


        #endregion

        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("Kounai077右歯寄せから舌戻し", 0f, 15);
        yield return null;
        while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai077右歯寄せから舌戻し") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[15] <= 0.2f) { yield return null; }

        NovelSetVis("F3030150");//あ・・はは・・　全てひき潰して来た歯なのだろう
        while (isNovelSetVisIng) { yield return null; }

        while (girlAnimOtherLayerNomTimeDict[15] <= 1f) { yield return null; }

        ChieriMotion("Kounai079舌戻しから口閉じ", 0f, 15);
        yield return null;
        while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai079舌戻しから口閉じ") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[15] <= 0.2f) { yield return null; }


        #endregion
        HukidashiNovelDistanceChange(0.2f, 0);

        #region ■選択肢　任す 投げ出す
        sentakuListNum = 99;//初期化
        NovelSetVis("■F3030160");
        while (isNovelSentakushiWait) { yield return null; }
        Sentakushi("■F3030160a", Mathf.Infinity);
        Sentakushi("■F3030160b", Mathf.Infinity);

        while (sentakuListNum == 99) { yield return null; }
        yield return null;
        switch (sentakuListNum)
        {
            case 0://選択肢

                #region 甘噛み後解放

                #region 初回強い噛み後 ループ1まで
                yield return new WaitForSeconds(0.5f);

                ChieriMotion("Kounai100甘噛み開始", 0, 15);

                NovelSetVis("F3030160a010");//ゆっくりと、歯が接近してくる。次の瞬間には一気に

                while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai100甘噛み開始") { yield return null; }
                while (girlAnimOtherLayerNomTimeDict[15] <= 1f) { yield return null; }

                while (isNovelSetVisIng) { yield return null; }

                //噛まれ揺れ
                CameraAnchorTrs.DOShakePosition(0.1f, 0.01f);
                yield return new WaitForSeconds(0.5f);

                NovelSetVis("F3030160a020");//ついに触れた　……ぁぁぁああああっ
                while (novelCurrentPageInt < 2) { yield return null; }

                yield return new WaitForSeconds(0.5f);

                ChieriMotion("Kounai105甘噛み到達位置から少し噛んで止め", 0, 15);
                while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai105甘噛み到達位置から少し噛んで止め") { yield return null; }
                while (girlAnimOtherLayerNomTimeDict[15] <= 1f) { yield return null; }

                while (isNovelSetVisIng) { yield return null; }
                CameraAnchorTrs.DOShakePosition(0.1f, 0.01f);

                yield return new WaitForSeconds(0.5f);

                //逆再生で 離し
                ChieriMotion("Kounai105甘噛み到達位置から少し噛んで止め逆再生", 0, 15);

                yield return new WaitForSeconds(0.5f);
                NovelSetVis("F3030160a030");//フッ、と、その圧力が弱まる。　力自体はかかっていた。

                while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai105甘噛み到達位置から少し噛んで止め") { yield return null; }
                while (girlAnimOtherLayerNomTimeDict[15] <= 1f) { yield return null; }

                while (isNovelSetVisIng) { yield return null; }
                CameraAnchorTrs.DOShakePosition(0.1f, 0.01f);


                //甘噛みループ1
                ChieriMotion("Kounai110甘噛みループ1", 0, 15);
                yield return new WaitForSeconds(1f);

                CameraAnchorTrs.DOShakePosition(0.1f, 0.01f);

                NovelSetVis("F3030160a040");//ぁあぐっ……！！　甘噛まれているのだと
                while (isNovelSetVisIng) { yield return null; }

                yield return new WaitForSeconds(1f);

                #endregion

                #region 横ずり
                //カメラ同期オブジェをプレイヤーと同じ位置にしたアニメを開始し
                ChieriMotion("Kounai115甘噛み横ずりループ1", 0, 15);
                ////同時に同期スタート
                //isF3030CameraObjectsGuideCubeDouki = true;

                while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai115甘噛み横ずりループ1") { yield return null; }
                while (girlAnimOtherLayerNomTimeDict[15] <= 1f) { yield return null; }
                #endregion

                NovelSetVis("F3030160a050");//歯を横にずらされ始める
                while (isNovelSetVisIng) { yield return null; }

                FadeBlack(1, 3);
                yield return new WaitForSeconds(3);

                NovelSetVis("F3030160a060");//そして念押しの様にまた 抵抗する気力さえも
                while (isNovelSetVisIng) { yield return null; }

                yield return new WaitForSeconds(1);

                tmpTangSound.aSource.DOFade(0f, 1);

                //同期スタート
                isF3030CameraObjectsGuideCubeDouki = true;

                #region //ToBeContinued設置
                //FadeBlack(1, 5, true);
                //isMenuLock = true;//メニューロック
                //isHwVisLock = true;//宿題ロック

                ////TO BE CONTINUED設置
                //GameObject tempTobecontinuedObj = Instantiate(Resources.Load("Main/UI/ToBeContinued/TobecontinuedCanvas") as GameObject
                //    , VRUICameraTrs);
                //DB.evMoveDelObjList.Add(tempTobecontinuedObj);//削除用にDBのリストへ登録

                ////■■幕中なので前面表示
                ////取得
                //Image tmpImage = tempTobecontinuedObj.GetComponent<Image>();
                ////透明に
                //tmpImage.color = new Color(1, 1, 1, 0);
                ////徐々に不透明に
                //DOTween.To(() => tmpImage.color, (x) => tmpImage.color = x, new Color(1, 1, 1, 1)
                //    , 5f)
                //     .SetEase(Ease.InOutQuad)
                //     .SetUpdate(true);

                #endregion

                NovelSetVis("F3030160a070");//完全な脱力状態で、全身に巨大な 感じ取ったのか
                while (isNovelSetVisIng) { yield return null; }
                yield return new WaitForSeconds(2);

                HukidashiNovelDistanceChange(1.5f, 0);

                NovelSetVis("F3030160a080");//ちえりは舌で丁寧に
                while (isNovelSetVisIng) { yield return null; }

                yield return new WaitForSeconds(1);
                ChieriMotion("Kounai090落下時SE設定消音", 0f, 15);

                //デロっと口から出すところまでやった。フェードかけて舞台設定して会話に繋げるつもり
                #region 咥内から出す終了の流れ（年明けに追加）

                ChieriMotion("Kounai120咥内エンド唇裏舌圧迫位置", 0f, 15);
                girlAnim.speed = 0.00001f;

                FadeBlack(0, 3);
                yield return new WaitForSeconds(1);

                Hukidashi("F3030160a010");//んー
                yield return new WaitForSeconds(1);


                yield return KeyOrWait(3);
                girlAnim.speed = 0.7f;

                #region 口元右手だし IK右手
                //右手IK位置
                GameObject IKRHand040_DasuPosObj
                    = Resources.Load("_PosObj/0330Kounai/IKRHand040_DasuPosObj") as GameObject;
                IKRHandTargetTrs.localPosition = IKRHand040_DasuPosObj.transform.localPosition;
                IKRHandTargetTrs.localEulerAngles = IKRHand040_DasuPosObj.transform.localEulerAngles;

                yield return null;
                //右手IKON
                DOTweenToIKEfPos(IKRHandEf, 1, 4, Ease.InOutSine);
                DOTweenToIKEfRot(IKRHandEf, 1, 0, Ease.InOutSine);

                #endregion

                yield return new WaitForSeconds(1);

                while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai120咥内エンド唇裏舌圧迫位置") { yield return null; }
                while (girlAnimOtherLayerNomTimeDict[15] <= 1f) { yield return null; }


                yield return new WaitForSeconds(1);

                //同期停止
                isF3030CameraObjectsGuideCubeDouki = false;


                #endregion


                //こもり虫に変え
                KankyouBGMChanger(semiSE.audioSource, "musi2_loop_EQKomori");

                //環境音フェード
                KankyouBGMVolumer(0.4f, 5);


                NovelSetVis("F3030160a090");//ずるりと吐き出された場所は
                while (isNovelSetVisIng) { yield return null; }
                yield return new WaitForSeconds(1);

                NovelSetVis("F3030160a100");//…………あ……　未だに咥内で舐られ続けている
                FadeBlack(1, 3);
                yield return new WaitForSeconds(3);


                #region //暗幕設定 咥内環境から元に戻して手の平会話状態に//アニメーターに色々組み込んだせいか、削除するとちえりおかしくなるので、シーンリセットにすることに。


                ////プレイヤー手にペアレント
                //CameraObjectsTrs.SetParent(GirlRHandTrs);

                //#region IK顔目プレイヤー見る
                ////IK目プレイヤー見
                //ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

                //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);

                //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 1.5f);
                //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
                //#endregion

                //アニメーターに色々組み込んだせいか、削除するとちえりおかしくなるので、シーンリセットにすることに。
                ////ポストプロセスなどオフ
                //isF3030KounaiEffect = false;


                #endregion

                while (isNovelSetVisIng) { yield return null; }
                yield return new WaitForSeconds(1);

                EventMove("食後", true, true);

                #endregion

                yield break;

                break;
            case 1://選択肢b
                yield return new WaitForSeconds(0.5f);
                #region 胃の中バッドエンド

                HukidashiNovelDistanceChange(0.65f, 0);

                NovelSetVis("F3030160b010");//いやだ　身を投げ出す

                yield return new WaitForSeconds(1f);

                #region プレイヤー投げ出しTween

                GameObject Player055_PareTooth00_NagedashiPosObj
                    = Resources.Load("_PosObj/0330Kounai/Player055_PareTooth00_NagedashiPosObj") as GameObject;
                CameraObjectsTrs.DOLocalMove(Player055_PareTooth00_NagedashiPosObj.transform.localPosition
                    , 1f)
                    .SetEase(Ease.InOutSine);
                CameraObjectsTrs.DOLocalRotate(Player055_PareTooth00_NagedashiPosObj.transform.localEulerAngles
                    , 1f)
                    .SetEase(Ease.InOutSine)
                    .OnComplete(() =>
                    {
                        //カメラリセット値変更してリセット
                        CameraReset(Player055_PareTooth00_NagedashiPosObj.transform.localEulerAngles
                            , DB.cameraSitAnchorDefLocalPos//Anchorを座りに
                            , false
                            , Vector3.zero
                            , false
                            , false);//ユーザーカメラリセットしない
                    });

                #endregion



                FadeBlack(1, 1);
                yield return new WaitForSeconds(1);

                #region のどちんこにとびかかるまで

                #region 暗幕設定
                //同期開始
                isF3030CameraObjectsGuideCubeDouki = true;

                //プレイヤー Headに（ペアレント）
                CameraObjectsTrs.SetParent(GirlHeadTrs, true);
                PlayerMotion("Player040舌投げ出しうねりつかまり", 0f, 0);

                //うねり
                ChieriMotion("Kounai080マコト飛び出してうねり", 0f, 15);

                #endregion
                while (isNovelSetVisIng) { yield return null; }
                yield return new WaitForSeconds(0.5f);

                Hukidashi("F3030160b010");//んんっ
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                FadeBlack(0, 1);
                yield return new WaitForSeconds(1);

                NovelSetVis("F3030160b020");//ひい　モンスターに思える　
                while (isNovelSetVisIng) { yield return null; }
                yield return new WaitForSeconds(1);

                NovelSetVis("F3030160b030");//うあああ！　飛びついた
                yield return new WaitForSeconds(0.3f);

                //同期停止
                isF3030CameraObjectsGuideCubeDouki = false;

                #region 口蓋垂飛び掛り
                CameraObjectsTrs.SetParent(GirlHeadTrs);
                yield return null;

                GameObject Player060_PareHead_TobikakariPosObj
                    = Resources.Load("_PosObj/0330Kounai/Player060_PareHead_TobikakariPosObj") as GameObject;
                CameraObjectsTrs.DOLocalMove(Player060_PareHead_TobikakariPosObj.transform.localPosition
                    , 2f)
                    .SetEase(Ease.InOutSine);
                CameraObjectsTrs.DOLocalRotate(Player060_PareHead_TobikakariPosObj.transform.localEulerAngles
                    , 2f)
                    .SetEase(Ease.InOutSine)
                    .OnComplete(() =>
                    {
                    });

                #endregion

                #endregion

                FadeBlack(1, 2.5f);
                yield return new WaitForSeconds(2.5f);


                #region 滑り落ちるまで
                #region 暗幕設定

                #region プレイヤー口蓋垂つかまり位置

                GameObject Player070_PareHead_NodochinkoTsukamariPosObj
                    = Resources.Load("_PosObj/0330Kounai/Player070_PareHead_NodochinkoTsukamariPosObj") as GameObject;
                CameraObjectsTrs.localPosition = Player070_PareHead_NodochinkoTsukamariPosObj.transform.localPosition;
                CameraObjectsTrs.localEulerAngles = Player070_PareHead_NodochinkoTsukamariPosObj.transform.localEulerAngles;

                //カメラリセット値変更してリセット
                CameraReset(Player070_PareHead_NodochinkoTsukamariPosObj.transform.localEulerAngles
                    , DB.cameraSitAnchorDefLocalPos//Anchorを座りに
                    , false
                    , Vector3.zero
                    , false
                    , false);//ユーザーカメラリセットしない


                //ダミー
                PlayerMotion("Player070のどちんこ掴まり", 0f, 0);

                var defDummyPos = Player_DummyTrs.localPosition;
                var defDummyRot = Player_DummyTrs.localEulerAngles;

                GameObject Player070Dummy_NodochinkoTsukamariPosObj
                    = Resources.Load("_PosObj/0330Kounai/Player070Dummy_NodochinkoTsukamariPosObj") as GameObject;
                Player_DummyTrs.localPosition = Player070Dummy_NodochinkoTsukamariPosObj.transform.localPosition;
                Player_DummyTrs.localEulerAngles = Player070Dummy_NodochinkoTsukamariPosObj.transform.localEulerAngles;


                #region ちえり
                ChieriMotion("Kounai085のどちんこ掴まり開始時", 1f, 15);


                #endregion

                #endregion

                #endregion

                while (isNovelSetVisIng) { yield return null; }

                yield return new WaitForSeconds(2f);

                Hukidashi("F3030160b020");//んーっ
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);


                HukidashiNovelDistanceChange(0.35f, 0);

                FadeBlack(0, 2f);
                yield return new WaitForSeconds(3f);

                NovelSetVis("F3030160b040");//とびついたのは口蓋垂
                while (isNovelSetVisIng) { yield return null; }


                ChieriMotion("Kounai086のどちんこ掴まり開口開き", 0f, 15);
                yield return new WaitForSeconds(2f);

                HukidashiNovelDistanceChange(1.8f, 0);

                NovelSetVis("F3030160b050");//はっはっ　息を呑む 葛藤していたときだった
                while (novelCurrentPageInt < 6) { yield return null; }

                //途中で右手だし
                #region IK右手
                //右手IK位置
                GameObject IKRHand030_DetekitePosObj
                    = Resources.Load("_PosObj/0330Kounai/IKRHand030_DetekitePosObj") as GameObject;
                IKRHandTargetTrs.localPosition = IKRHand030_DetekitePosObj.transform.localPosition;
                IKRHandTargetTrs.localEulerAngles = IKRHand030_DetekitePosObj.transform.localEulerAngles;

                yield return null;
                //右手IKON
                DOTweenToIKEfPos(IKRHandEf, 1, 4, Ease.InOutSine);
                DOTweenToIKEfRot(IKRHandEf, 1, 0, Ease.InOutSine);

                #endregion

                while (isNovelSetVisIng) { yield return null; }


                Hukidashi("F3030160b030");//んー
                CameraAnchorTrs.DOShakePosition(2f, 0.1f, 40);
                yield return new WaitForSeconds(1f);

                NovelSetVis("F3030160b060");//衝撃で手が滑る。 戻ることができない
                yield return new WaitForSeconds(0.7f);

                #region すべり1

                GameObject Player071_PareHead_NodochinkoZuriochi1PosObj
                    = Resources.Load("_PosObj/0330Kounai/Player071_PareHead_NodochinkoZuriochi1PosObj") as GameObject;
                CameraObjectsTrs.DOLocalMove(Player071_PareHead_NodochinkoZuriochi1PosObj.transform.localPosition
                    , 0.2f)
                    .SetEase(Ease.InOutSine);
                CameraObjectsTrs.DOLocalRotate(Player071_PareHead_NodochinkoZuriochi1PosObj.transform.localEulerAngles
                    , 0.2f)
                    .SetEase(Ease.InOutSine)
                    .OnComplete(() =>
                    {
                    });

                #endregion

                while (isNovelSetVisIng) { yield return null; }

                HukidashiNovelDistanceChange(0.65f, 0);

                Hukidashi("F3030160b040");//んー んー
                CameraAnchorTrs.DOShakePosition(2f, 0.1f, 40);
                yield return new WaitForSeconds(2f);

                NovelSetVis("F3030160b070");//早く出て欲しいという合図なのか、　か細かった

                #region すべり2

                GameObject Player072_PareHead_NodochinkoZuriochi2PosObj
                    = Resources.Load("_PosObj/0330Kounai/Player072_PareHead_NodochinkoZuriochi2PosObj") as GameObject;
                CameraObjectsTrs.DOLocalMove(Player072_PareHead_NodochinkoZuriochi2PosObj.transform.localPosition
                    , 0.2f)
                    .SetEase(Ease.InOutSine);
                CameraObjectsTrs.DOLocalRotate(Player072_PareHead_NodochinkoZuriochi2PosObj.transform.localEulerAngles
                    , 0.2f)
                    .SetEase(Ease.InOutSine)
                    .OnComplete(() =>
                    {
                    });

                #endregion

                CameraAnchorTrs.DOShakePosition(2f, 0.1f, 40);
                yield return new WaitForSeconds(2f);

                #region すべり3

                GameObject Player073_PareHead_NodochinkoZuriochi3PosObj
                    = Resources.Load("_PosObj/0330Kounai/Player073_PareHead_NodochinkoZuriochi3PosObj") as GameObject;
                CameraObjectsTrs.DOLocalMove(Player073_PareHead_NodochinkoZuriochi3PosObj.transform.localPosition
                    , 0.2f)
                    .SetEase(Ease.InOutSine);
                CameraObjectsTrs.DOLocalRotate(Player073_PareHead_NodochinkoZuriochi3PosObj.transform.localEulerAngles
                    , 0.2f)
                    .SetEase(Ease.InOutSine)
                    .OnComplete(() =>
                    {
                    });

                #endregion

                HukidashiNovelDistanceChange(0.4f, 0);

                while (isNovelSetVisIng) { yield return null; }

                Hukidashi("F3030160b050");//んーっ！
                CameraAnchorTrs.DOShakePosition(3f, 0.15f, 50);
                yield return new WaitForSeconds(1f);

                #region すべり落ち

                GameObject Player074_PareHead_NodochinkoRakkaPosObj
                    = Resources.Load("_PosObj/0330Kounai/Player074_PareHead_NodochinkoRakkaPosObj") as GameObject;
                CameraObjectsTrs.DOLocalMove(Player074_PareHead_NodochinkoRakkaPosObj.transform.localPosition
                    , 1f)
                    .SetEase(Ease.InOutSine);
                CameraObjectsTrs.DOLocalRotate(Player074_PareHead_NodochinkoRakkaPosObj.transform.localEulerAngles
                    , 1f)
                    .SetEase(Ease.InOutSine)
                    .OnComplete(() =>
                    {
                    });

                #endregion

                FadeBlack(1, 1.5f);
                ChieriMotion("Kounai090落下時SE設定", 0f, 15);

                yield return new WaitForSeconds(2f);

                DelAll_Hukidashi();
                NovelSetVis("F3030160b080");//落ちたのは喉側の斜面
                while (isNovelSetVisIng) { yield return null; }
                yield return new WaitForSeconds(1f);

                NovelSetVis("F3030160b090");//あああ
                while (isNovelSetVisIng) { yield return null; }
                #endregion

                ChieriMotion("Kounai090落下時SE設定消音", 0f, 15);

                yield return new WaitForSeconds(2f);
                SEPlay("嚥下音00", 0.65f);
                yield return new WaitForSeconds(2f);

                HukidashiNovelDistanceChange(0.8f, 0);

                Hukidashi("F3030160b060");//飲んじゃった？
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                yield return new WaitForSeconds(4f);

                #region 胃

                #region 暗幕胃準備
                isF3030KounaiEffect = false;
                StartCoroutine(F3030StomachEffect());

                //ちえりオフ
                GirlMeshTrs.gameObject.SetActive(false);
                //部屋オフ
                RoomTrs.gameObject.SetActive(false);
                //外オフ
                SotoTrs.gameObject.SetActive(false);
                //ホコリオフ
                Particle_DustTrs.gameObject.SetActive(false);


                //胃プレファブ
                GameObject StomachObj
                    = Instantiate(Resources.Load("Main/KomonoObj/Stomach/StomachRoot") as GameObject
                    , GameObjectsTrs, false);

                //胃アニメ取得
                var stomachAnim
                    = StomachObj.GetComponent<Animator>();

                //胃液取得
                Transform IekiTrs
                    = StomachObj.transform.Find("Ieki");

                #region //胃ライト VR時は変更 やっぱやめ

                ////VRだったら交換
                //if (XRSettings.enabled)
                //{
                //    StomachObj.transform.Find("Spot Light").gameObject.SetActive(false);
                //    StomachObj.transform.Find("Spot LightVR").gameObject.SetActive(true);
                //}
                //元々VRライトのみオフなので、elseいらない

                #endregion


                #region プレイヤー設置
                //■プレイヤー 胃の位置に（ペアレントしない）
                CameraObjectsTrs.SetParent(GameObjectsTrs);

                GameObject Player200_StomachPosObj
                    = Resources.Load("_PosObj/0330Kounai/Player200_StomachPosObj") as GameObject;
                CameraObjectsTrs.localPosition = Player200_StomachPosObj.transform.localPosition;
                CameraObjectsTrs.localEulerAngles = Player200_StomachPosObj.transform.localEulerAngles;

                //カメラリセット値変更してリセット
                CameraReset(Player200_StomachPosObj.transform.localEulerAngles
                    , DB.cameraSitAnchorDefLocalPos//座りに
                    , false
                    , Vector3.zero
                    , false
                    , true);



                //ダミー
                PlayerMotion("Player020舌中央安定", 0f, 0);
                Player_DummyTrs.localPosition = defDummyPos;
                Player_DummyTrs.localEulerAngles = defDummyRot;


                #endregion

                //カメラ設定
                VRCamera.clearFlags
                    = TPSCamera.clearFlags
                    = CameraClearFlags.SolidColor;

                VRCamera.backgroundColor
                    = TPSCamera.backgroundColor
                    = Color.black;

                #endregion

                NovelSetVis("F3030160b100");//蠕動
                while (isNovelSetVisIng) { yield return null; }

                FadeBlack(0, 10);

                yield return new WaitForSeconds(4f);

                NovelSetVis("F3030160b110");//はは・・自嘲気味な感想
                while (isNovelSetVisIng) { yield return null; }

                yield return new WaitForSeconds(1f);

                #region 胃液上がり
                GameObject Ieki010_SuiiLastPosObj
                    = Resources.Load("_PosObj/0330Kounai/Ieki010_SuiiLastPosObj") as GameObject;

                IekiTrs.DOLocalMove(Ieki010_SuiiLastPosObj.transform.localPosition
                    , 150f)
                    .SetEase(Ease.Linear);

                stomachAnim.Play("RotRepair");

                #endregion

                NovelSetVis("F3030160b120");//静かな死の覚悟が　老廃物として
                while (isNovelSetVisIng) { yield return null; }

                yield return new WaitForSeconds(2f);

                NovelSetVis("F3030160b130");//胃液の水位が少しずつ 栄養になるのだろう。
                while (isNovelSetVisIng) { yield return null; }

                yield return new WaitForSeconds(2f);
                FadeBlack(1, 7);
                yield return new WaitForSeconds(2f);

                NovelSetVis("F3030160b140");//響く体内の音を子守唄に目を閉じることにした。
                while (isNovelSetVisIng) { yield return null; }

                yield return new WaitForSeconds(2f);

                NovelSetVis("F3030160b150");//何に使われるのだろう？　思った。
                while (isNovelSetVisIng) { yield return null; }

                yield return new WaitForSeconds(4f);


                FadeBlack(0, 3);
                //メニュー強制開き
                StartCoroutine(MenuSystemIEnum(true, false, true));


                #endregion

                #endregion

                break;
        }
        #endregion




        while (true)
        {
            if (Input.GetKeyDown(KeyCode.F))
            {
                //舌テスト
                ChieriMotion("Kounai010口開け", 0, 15);
            }
            if (Input.GetKeyDown(KeyCode.G))
            {
                PlayerMotion("Player040舌投げ出しうねりつかまり", 0f, 0);


            }
            if (Input.GetKeyDown(KeyCode.H))
            {
                //同期停止
                isF3030CameraObjectsGuideCubeDouki = false;
                #region すくい上げて中央への流れ

                ChieriMotion("Kounai030舌先ですくう位置へ", 0, 15);
                yield return null;

                StartCoroutine(GirlAnimReadSystem(15));
                while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai030舌先ですくう位置へ") { yield return null; }
                while (girlAnimOtherLayerNomTimeDict[15] <= 1f) { yield return null; }

                #region プレイヤー 舌先3に（ペアレント）
                CameraObjectsTrs.SetParent(GirlTang0003Trs, false);
                /*GameObject*/
                Player020_PareTang3_MaebaOsaePosObj
     = Resources.Load("_PosObj/0330Kounai/Player020_PareTang3_MaebaOsaePosObj") as GameObject;
                CameraObjectsTrs.localPosition = Player020_PareTang3_MaebaOsaePosObj.transform.localPosition;
                CameraObjectsTrs.localEulerAngles = Player020_PareTang3_MaebaOsaePosObj.transform.localEulerAngles;

                //カメラリセット値変更してリセット
                CameraReset(Player020_PareTang3_MaebaOsaePosObj.transform.localEulerAngles
                    , DB.cameraSitAnchorDefLocalPos//Anchorを座りに
                    , false
                    , Vector3.zero
                    , false
                    , false);//ユーザーカメラリセットしない
                #endregion


                ChieriMotion("Kounai040舌中央へ運ぶ", 0, 15);
                while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai040舌中央へ運ぶ") { yield return null; }
                while (girlAnimOtherLayerNomTimeDict[15] <= 0.8f) { yield return null; }

                //プレイヤー Headに（ペアレント）
                CameraObjectsTrs.SetParent(GirlHeadTrs, true);
                PlayerMotion("Player020舌中央安定", 4f, 0);

                /*bool*/
                isTweenWait = true;
                #region Tweenで無理やりプレイヤー中央へ安定運び
                /*GameObject*/
                Player030_PareTang3_TyuuouAnteiPosObj
     = Resources.Load("_PosObj/0330Kounai/Player030_PareTang3_TyuuouAnteiPosObj") as GameObject;

                CameraObjectsTrs.DOLocalMove(Player030_PareTang3_TyuuouAnteiPosObj.transform.localPosition
                    , 2)
                    .SetEase(Ease.OutQuad);
                CameraObjectsTrs.DOLocalRotate(Player030_PareTang3_TyuuouAnteiPosObj.transform.localEulerAngles
                    , 2)
                    .SetEase(Ease.OutQuad)
                    .OnComplete(() =>
                    {
                        GameObject Player040_PareTang3_SuberiotiPosObj
                        = Resources.Load("_PosObj/0330Kounai/Player040_PareTang3_SuberiotiPosObj") as GameObject;

                        CameraObjectsTrs.DOLocalMove(Player040_PareTang3_SuberiotiPosObj.transform.localPosition
                            , 3)
                            .SetEase(Ease.InOutQuad);
                        CameraObjectsTrs.DOLocalRotate(Player040_PareTang3_SuberiotiPosObj.transform.localEulerAngles
                            , 3)
                            .SetEase(Ease.InOutQuad)
                            .OnComplete(() =>
                            {
                                //カメラリセット値変更してリセット
                                CameraReset(Player040_PareTang3_SuberiotiPosObj.transform.localEulerAngles
                                    , DB.cameraSitAnchorDefLocalPos//Anchorを座りに
                                    , false
                                    , Vector3.zero
                                    , false
                                    , false);//ユーザーカメラリセットしない
                                isTweenWait = false;
                            });
                    });

                #endregion

                ChieriMotion("Kounai050舌中央で安定化", 0.5f, 15);
                while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai050舌中央で安定化") { yield return null; }
                while (girlAnimOtherLayerNomTimeDict[15] <= 1f) { yield return null; }

                while (isTweenWait) { yield return null; }

                #endregion


                //同期スタート
                isF3030CameraObjectsGuideCubeDouki = true;

                #region 口確認後、口閉じ
                NovelSetVis("F3030020");//光が差し込み　場所がわかった
                while (isNovelSetVisIng) { yield return null; }

                ChieriMotion("Kounai055安定化後口閉じ", 0, 15);
                yield return new WaitForSeconds(2);

                NovelSetVis("F3030030");//肉の密室に戻された
                while (isNovelSetVisIng) { yield return null; }
                #endregion

            }
            if (Input.GetKeyDown(KeyCode.J))
            {
                #region 中央から口蓋押し付けの流れ（GuideCube使用）

                //同期スタート
                isF3030CameraObjectsGuideCubeDouki = true;
                PlayerMotion("Player030口蓋押し付けられ", 4f, 0);

                ChieriMotion("Kounai057口蓋押し付け開始", 0f, 15);
                StartCoroutine(GirlAnimReadSystem(15));
                while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai060口蓋押し付け開始") { yield return null; }
                while (girlAnimOtherLayerNomTimeDict[15] <= 1f) { yield return null; }

                yield return KeyOrWait(3);

                ChieriMotion("Kounai070口蓋離し", 0f, 15);
                StartCoroutine(GirlAnimReadSystem(15));
                while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai070口蓋離し") { yield return null; }
                while (girlAnimOtherLayerNomTimeDict[15] <= 1f) { yield return null; }

                yield return KeyOrWait(3);

                ChieriMotion("Kounai070口蓋離し逆再生", 0f, 15);
                StartCoroutine(GirlAnimReadSystem(15));
                yield return null;//同じクリップ名なので、1フレ待ってカウント
                while (girlAnimOtherLayerNomTimeDict[15] <= 1f)
                { yield return null; }

                yield return KeyOrWait(3);

                ChieriMotion("Kounai070口蓋離し", 0f, 15);
                StartCoroutine(GirlAnimReadSystem(15));
                while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai070口蓋離し") { yield return null; }
                while (girlAnimOtherLayerNomTimeDict[15] <= 1f) { yield return null; }

                #endregion
            }
            if (Input.GetKeyDown(KeyCode.K))
            {
                #region 口蓋離しから甘噛み位置へ運ぶ流れ（GuideCube使用）

                //同期スタート
                isF3030CameraObjectsGuideCubeDouki = true;
                PlayerMotion("Player030口蓋押し付けられ", 0f, 0);
                girlAnim.Play("Kounai070口蓋離し", 15, 1);

                yield return KeyOrWait(3);

                ChieriMotion("Kounai080口蓋離しから右歯に寄せ", 0f, 15);
                StartCoroutine(GirlAnimReadSystem(15));
                while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai080口蓋離しから右歯に寄せ") { yield return null; }
                while (girlAnimOtherLayerNomTimeDict[15] <= 1f) { yield return null; }

                //同期停止
                isF3030CameraObjectsGuideCubeDouki = false;

                ChieriMotion("Kounai090右歯に寄せから押さえ", 0f, 15);
                while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai090右歯に寄せから押さえ") { yield return null; }
                while (girlAnimOtherLayerNomTimeDict[15] <= 1f) { yield return null; }

                #region プレイヤーToothにペアレントして位置へ

                //CameraObjectsTrs.SetParent(GirlTooth00Trs);
                //GameObject Player050_PareTooth00_Migiha762PosObj
                //    = Resources.Load("_PosObj/0330Kounai/Player050_PareTooth00_Migiha762PosObj") as GameObject;
                //CameraObjectsTrs.localPosition = Player050_PareTooth00_Migiha762PosObj.transform.localPosition;
                //CameraObjectsTrs.localEulerAngles = Player050_PareTooth00_Migiha762PosObj.transform.localEulerAngles;

                ////カメラリセット値変更してリセット
                //CameraReset(Player050_PareTooth00_Migiha762PosObj.transform.localEulerAngles
                //    , DB.cameraSitAnchorDefLocalPos//Anchorを座りに
                //    , false
                //    , Vector3.zero
                //    , false
                //    , false);//ユーザーカメラリセットしない

                #endregion

                #endregion

            }
            if (Input.GetKeyDown(KeyCode.L))
            {
                //同期停止
                isF3030CameraObjectsGuideCubeDouki = false;
                girlAnim.Play("Kounai090右歯に寄せから押さえ", 15, 1);

                #region 甘噛み

                #region プレイヤーToothにペアレントして位置へ

                CameraObjectsTrs.SetParent(GirlTooth00Trs);
                GameObject Player050_PareTooth00_Migiha762PosObj
                    = Resources.Load("_PosObj/0330Kounai/Player050_PareTooth00_Migiha762PosObj") as GameObject;
                CameraObjectsTrs.localPosition = Player050_PareTooth00_Migiha762PosObj.transform.localPosition;
                CameraObjectsTrs.localEulerAngles = Player050_PareTooth00_Migiha762PosObj.transform.localEulerAngles;

                //カメラリセット値変更してリセット
                CameraReset(Player050_PareTooth00_Migiha762PosObj.transform.localEulerAngles
                    , DB.cameraSitAnchorDefLocalPos//Anchorを座りに
                    , false
                    , Vector3.zero
                    , false
                    , false);//ユーザーカメラリセットしない

                #endregion

                yield return KeyOrWait(3);

                ChieriMotion("Kounai100歯閉じ", 0f, 15);
                StartCoroutine(GirlAnimReadSystem(15));
                while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai100歯閉じ") { yield return null; }
                while (girlAnimOtherLayerNomTimeDict[15] <= 1f) { yield return null; }

                yield return KeyOrWait(3);

                ChieriMotion("Kounai100歯閉じ逆再生", 0f, 15);
                yield return null;//クリップ名同じなので1フレ待ち
                while (nowGirlAnimOtherLayerClipNameDict[15] != "Kounai100歯閉じ") { yield return null; }
                while (girlAnimOtherLayerNomTimeDict[15] <= 1f) { yield return null; }

                #endregion

            }
            if (Input.GetKeyDown(KeyCode.Semicolon))//コロン
            {
                #region 胃の中セットアップ
                isF3030KounaiEffect = false;
                StartCoroutine(F3030StomachEffect());

                //ちえりオフ
                GirlMeshTrs.gameObject.SetActive(false);
                //部屋オフ
                RoomTrs.gameObject.SetActive(false);
                //外オフ
                SotoTrs.gameObject.SetActive(false);
                //ホコリオフ
                Particle_DustTrs.gameObject.SetActive(false);

                #region プレイヤー設置
                //■プレイヤー 胃の位置に（ペアレントしない）
                CameraObjectsTrs.SetParent(GameObjectsTrs);

                GameObject Player200_StomachPosObj
                    = Resources.Load("_PosObj/0330Kounai/Player200_StomachPosObj") as GameObject;
                CameraObjectsTrs.localPosition = Player200_StomachPosObj.transform.localPosition;
                CameraObjectsTrs.localEulerAngles = Player200_StomachPosObj.transform.localEulerAngles;

                //カメラリセット値変更してリセット
                CameraReset(Player200_StomachPosObj.transform.localEulerAngles
                    , DB.cameraSitAnchorDefLocalPos//座りに
                    , false
                    , Vector3.zero
                    , false
                    , true);
                #endregion

                #endregion

            }


            if (Input.GetKeyDown(KeyCode.V))
            { StartCoroutine(F3030KounaiEffect()); }
            if (Input.GetKeyDown(KeyCode.B))
            { isF3030KounaiEffect = false; }

            if (Input.GetKeyDown(KeyCode.N))
            {
                ChieriMotion("Kounai000口開けライト設定時", 0, 15);
            }
            yield return null;
        }


        yield break;
    }
    #region ┗■ポストプロセスやライト、TPS切り替えでONOFF用

    #region 変数
    bool
        isF3030KounaiEffect = false,
        isF3030KounaiEffectInitialize = false,
        //胃用
        isF3030StomachEffect = false,
        isF3030StomachEffectInitialize = false;

    #region
    //咥内ライト

    #endregion

    //カメラ位置同期用
    bool
        isF3030CameraObjectsGuideCubeDouki = false;
    Transform
        CameraObjectsGuideCubeTrs;
    GameObject //咥内用ポストプロセスフォルダ（ライトと唾液入り）
        PostProcessVolumeKounaiObj;

    #endregion
    IEnumerator F3030KounaiEffect()
    {
        if (isF3030KounaiEffect) { yield break; }
        isF3030KounaiEffect = true;


        #region まず特殊ポストエフェクトとライトを設置（子がライト）
        GameObject PostProcessVolumeKounaiObj =
            Instantiate(Resources.Load("PostProcessing/Prefab/PostProcessVolumeKounai02RoomOn") as GameObject
            , GirlHeadTrs, false);

        Light lightPoint01 = PostProcessVolumeKounaiObj.transform.Find("LightPoint01").GetComponent<Light>();
        Light lightPoint02 = PostProcessVolumeKounaiObj.transform.Find("LightPoint02").GetComponent<Light>();

        Light lightPoint03 = PostProcessVolumeKounaiObj.transform.Find("LightPoint03右頬").GetComponent<Light>();
        Light lightPoint04 = PostProcessVolumeKounaiObj.transform.Find("LightPoint04左頬").GetComponent<Light>();
        Light lightPoint05 = PostProcessVolumeKounaiObj.transform.Find("LightPoint05口").GetComponent<Light>();

        Light lightPoint06 = PostProcessVolumeKounaiObj.transform.Find("LightPoint06右頬_NotImportant").GetComponent<Light>();
        Light lightPoint07 = PostProcessVolumeKounaiObj.transform.Find("LightPoint07左頬_NotImportant").GetComponent<Light>();
        Light lightPoint08 = PostProcessVolumeKounaiObj.transform.Find("LightPoint08口_NotImportant").GetComponent<Light>();

        Light lightPoint03VR = PostProcessVolumeKounaiObj.transform.Find("LightPoint03右頬VR").GetComponent<Light>();
        Light lightPoint04VR = PostProcessVolumeKounaiObj.transform.Find("LightPoint04左頬VR").GetComponent<Light>();
        Light lightPoint05VR = PostProcessVolumeKounaiObj.transform.Find("LightPoint05口VR").GetComponent<Light>();

        #endregion

        #region 既存のポストプロセスとライトをオフ
        //既存のポストプロセスオフ
        PostProcessVolume00DirectDataObj.SetActive(false);

        ////既存のライトオフ（使う方向で）
        //var defLightObj = GameObject.Find("GameObjects/Light");
        //defLightObj.SetActive(false);

        //既存のライトからEventLightTargetレイヤーオフ
        var defLight = GameObject.Find("GameObjects/Light/Floor light_Realtime").GetComponent<Light>();
        defLight.cullingMask &= ~(1 << LayerMask.NameToLayer("EventLightTarget"));


        //既存のフェイスライトオフ
        var faceLightObj = GirlHeadTrs.Find("Face Light").gameObject;
        faceLightObj.SetActive(false);

        //環境色Def取得
        var defAmbientSkyColor = RenderSettings.ambientSkyColor;

        //環境色　VRだったら少し違う
        if (XRSettings.enabled)
        { RenderSettings.ambientSkyColor = new Color(0.004f, 0.0003f, 0); }
        else
        { RenderSettings.ambientSkyColor = new Color(0.04f, 0.003f, 0); }

        #endregion

        #region ■各メッシュのレンダラ設定（LightProbeやupdateOffScreen レイヤーなど）
        //■舌
        var tangSMR =
            GirlMeshTrs.Find("Tang_def").GetComponent<SkinnedMeshRenderer>();

        //LightProbe　RefrectionProbeオフ（それだけでも光が当たっているので）
        tangSMR.lightProbeUsage = UnityEngine.Rendering.LightProbeUsage.Off;
        tangSMR.reflectionProbeUsage = UnityEngine.Rendering.ReflectionProbeUsage.Off;

        //ちえりを置きなおさないと正常なBounds位置が取得できないので、Bounds手動調整してオフ
        tangSMR.updateWhenOffscreen = false;

        //マテリアルを置き換え
        tangSMR.material = tangSMR.GetComponent<MatChangeResources>().otherMat;

        //レイヤー変更
        tangSMR.gameObject.layer = LayerMask.NameToLayer("EventLightTarget");


        //■歯
        var toothSMR =
            GirlMeshTrs.Find("Tooth_def").GetComponent<SkinnedMeshRenderer>();

        toothSMR.lightProbeUsage = UnityEngine.Rendering.LightProbeUsage.Off;
        toothSMR.reflectionProbeUsage = UnityEngine.Rendering.ReflectionProbeUsage.Off;

        toothSMR.updateWhenOffscreen = false;

        toothSMR.material = toothSMR.GetComponent<MatChangeResources>().otherMat;

        toothSMR.gameObject.layer = LayerMask.NameToLayer("EventLightTarget");


        //■咥内
        var kounaiSMR =
            GirlMeshTrs.Find("Kounai_def").GetComponent<SkinnedMeshRenderer>();

        kounaiSMR.lightProbeUsage = UnityEngine.Rendering.LightProbeUsage.Off;
        kounaiSMR.reflectionProbeUsage = UnityEngine.Rendering.ReflectionProbeUsage.Off;

        kounaiSMR.updateWhenOffscreen = false;

        kounaiSMR.material = kounaiSMR.GetComponent<MatChangeResources>().otherMat;

        kounaiSMR.gameObject.layer = LayerMask.NameToLayer("EventLightTarget");


        //■TPSプレイヤーDummyマテリアル
        var playerDummyBodySMR =
            Player_DummyTrs.Find("mesh/Body").GetComponent<SkinnedMeshRenderer>();

        //forでの入れ替えは出来なかった　直接toArrayしたらできた（Instanceではなくなる）
        playerDummyBodySMR.materials = playerDummyBodySMR.GetComponent<MatChangeResources>().otherMatList.ToArray();
        //for (int i = 0; i < playerDummyBodySMR.materials.Length; i++)
        //{
        //    playerDummyBodySMR.materials[i] = playerDummyBodySMR.GetComponent<MatChangeResources>().otherMatList[i];
        //}

        #endregion

        ////唾液設置
        //GameObject DaekiObj = Instantiate(Resources.Load("Main/KomonoObj/Daeki/DaekiObj") as GameObject
        //    , GirlTooth00Trs, false);


        #region プレイヤーを舌アニメで操作するために、ガイドCubeを設置
        //マスクに直接書き込んだりしないとできない荒業

        CameraObjectsGuideCubeTrs
            = Instantiate(Resources.Load("_PosObj/0330Kounai/CameraObjectsGuideCube") as GameObject
            , GirlTang0003Trs
            , false).transform;
        CameraObjectsGuideCubeTrs.name = "CameraObjectsGuideCube";

        yield return null;
        #endregion

        #region GirlTrsをONOFFすることで、アニメーターONOFFによりアニメーターがライトなどを取得（スクリプトではアニメーターONOFFだとダメだった）
        yield return null;
        GirlTrs.gameObject.SetActive(false);
        yield return null;
        GirlTrs.gameObject.SetActive(true);
        yield return null;
        #endregion

        #region 口開けとライト同期よう変数（アニメーターでライトをやると、後で調整効かないのでやっぱりスクリプトで同期する）

        //ライトのデフォルト（最大値）取得
        float defLightPoint01Intensity = lightPoint01.intensity;
        float defLightPoint02Intensity = lightPoint02.intensity;

        //咥内
        float defLightPoint03Intensity = lightPoint03.intensity;
        float defLightPoint04Intensity = lightPoint04.intensity;
        float defLightPoint05Intensity = lightPoint05.intensity;

        //咥内
        float defLightPoint03VRIntensity = lightPoint03VR.intensity;
        float defLightPoint04VRIntensity = lightPoint04VR.intensity;
        float defLightPoint05VRIntensity = lightPoint05VR.intensity;

        //VRだったら
        if (XRSettings.enabled)
        {
            //02（口奥明るさ）下げる。
            defLightPoint02Intensity = defLightPoint02Intensity / 5;

            //345 678消し
            lightPoint03.gameObject.SetActive(false);
            lightPoint04.gameObject.SetActive(false);
            lightPoint05.gameObject.SetActive(false);
            lightPoint06.gameObject.SetActive(false);
            lightPoint07.gameObject.SetActive(false);
            lightPoint08.gameObject.SetActive(false);

            //345VR ON
            lightPoint03VR.gameObject.SetActive(true);
            lightPoint04VR.gameObject.SetActive(true);
            lightPoint05VR.gameObject.SetActive(true);

        }

        //口開き具合取得用
        float //ひとまず適当な値
            nowMouthWaWait = 0,
            prevMouthWaWait = 0;

        #endregion



        //初期化終了
        isF3030KounaiEffectInitialize = true;

        while (isF3030KounaiEffect)
        {
            #region CameraObjectsの位置をガイドcubeの位置と同期

            if (isF3030CameraObjectsGuideCubeDouki)
            {
                CameraObjectsTrs.position = CameraObjectsGuideCubeTrs.position;
                CameraObjectsTrs.eulerAngles = CameraObjectsGuideCubeTrs.eulerAngles;
            }

            #endregion

            #region 口あけとライト同期
            //now今フレ口あき値取得
            nowMouthWaWait = Kounai_def.GetBlendShapeWeight(5);

            //前フレと口あき具合ちがったら
            if (nowMouthWaWait != prevMouthWaWait)
            {
                //ライト調整（口全開100を1として デフォルト明るさ（最大値）と掛け算）
                lightPoint01.intensity = defLightPoint01Intensity * (nowMouthWaWait / 100);
                lightPoint02.intensity = defLightPoint02Intensity * (nowMouthWaWait / 100);


                //345はVRだったらVRのに
                if (XRSettings.enabled)
                {
                    //咥内ライト（口全開100を0とする、デフォ - (デフォ * (口あき/100)　(これで閉じるほどデフォ値に近づく)
                    lightPoint03VR.intensity = defLightPoint03VRIntensity - (defLightPoint03VRIntensity * (nowMouthWaWait / 100));
                    lightPoint04VR.intensity = defLightPoint04VRIntensity - (defLightPoint04VRIntensity * (nowMouthWaWait / 100));
                    lightPoint05VR.intensity = defLightPoint05VRIntensity - (defLightPoint05VRIntensity * (nowMouthWaWait / 100));
                }
                else
                {
                    //咥内ライト（口全開100を0とする、デフォ - (デフォ * (口あき/100)　(これで閉じるほどデフォ値に近づく)
                    lightPoint03.intensity = defLightPoint03Intensity - (defLightPoint03Intensity * (nowMouthWaWait / 100));
                    lightPoint04.intensity = defLightPoint04Intensity - (defLightPoint04Intensity * (nowMouthWaWait / 100));
                    lightPoint05.intensity = defLightPoint05Intensity - (defLightPoint05Intensity * (nowMouthWaWait / 100));
                }

            }

            //prev今フレ口あき値取得
            prevMouthWaWait = nowMouthWaWait;
            #endregion

            if (tPSModeInt >= 2)
            {
                #region オフ
                if (PostProcessVolumeKounaiObj.activeSelf)
                {
                    //■イベントポストプロセス ライトオフ
                    PostProcessVolumeKounaiObj.SetActive(false);
                    #region 既存のポストプロセスとライトをオン
                    //既存のポストプロセスオン
                    PostProcessVolume00DirectDataObj.SetActive(true);

                    //既存のライトからEventLightTargetレイヤーオン
                    defLight.cullingMask |= (1 << LayerMask.NameToLayer("EventLightTarget"));

                    //既存のフェイスライトオン
                    faceLightObj.SetActive(true);

                    //環境色戻し
                    RenderSettings.ambientSkyColor = defAmbientSkyColor;
                    #endregion
                    #region ■各メッシュのレンダラ設定（LightProbeやupdateOffScreen レイヤーなど）
                    //■舌
                    //LightProbe　RefrectionProbeオフ（それだけでも光が当たっているので）
                    tangSMR.lightProbeUsage = UnityEngine.Rendering.LightProbeUsage.BlendProbes;
                    tangSMR.reflectionProbeUsage = UnityEngine.Rendering.ReflectionProbeUsage.BlendProbes;

                    //Bounds手動調整オン
                    tangSMR.updateWhenOffscreen = true;

                    //マテリアルを置き換え
                    tangSMR.material = tangSMR.GetComponent<MatChangeResources>().defaultMat;

                    //レイヤー変更
                    tangSMR.gameObject.layer = LayerMask.NameToLayer("chieri");


                    //■歯
                    toothSMR.lightProbeUsage = UnityEngine.Rendering.LightProbeUsage.BlendProbes;
                    toothSMR.reflectionProbeUsage = UnityEngine.Rendering.ReflectionProbeUsage.BlendProbes;

                    toothSMR.updateWhenOffscreen = true;

                    toothSMR.material = toothSMR.GetComponent<MatChangeResources>().defaultMat;

                    toothSMR.gameObject.layer = LayerMask.NameToLayer("chieri");


                    //■咥内
                    kounaiSMR.lightProbeUsage = UnityEngine.Rendering.LightProbeUsage.BlendProbes;
                    kounaiSMR.reflectionProbeUsage = UnityEngine.Rendering.ReflectionProbeUsage.BlendProbes;

                    kounaiSMR.updateWhenOffscreen = true;

                    kounaiSMR.material = kounaiSMR.GetComponent<MatChangeResources>().defaultMat;

                    kounaiSMR.gameObject.layer = LayerMask.NameToLayer("chieri");


                    //■TPSプレイヤーDummyマテリアル
                    playerDummyBodySMR.materials = playerDummyBodySMR.GetComponent<MatChangeResources>().defaultMatList.ToArray();



                    #endregion

                    ////唾液OFF
                    //DaekiObj.SetActive(false);
                }
                #endregion
            }
            else
            {
                #region オン
                if (PostProcessVolumeKounaiObj.activeSelf == false)
                {
                    //イベントポストプロセス ライトオン
                    PostProcessVolumeKounaiObj.SetActive(true);
                    #region 既存のポストプロセスとライトをオフ
                    //既存のポストプロセスオフ
                    PostProcessVolume00DirectDataObj.SetActive(false);

                    //既存のライトからEventLightTargetレイヤーオフ
                    defLight.cullingMask &= ~(1 << LayerMask.NameToLayer("EventLightTarget"));

                    //既存のフェイスライトオフ
                    faceLightObj.SetActive(false);

                    //環境色　VRだったら少し違う
                    if (XRSettings.enabled)
                    { RenderSettings.ambientSkyColor = new Color(0.004f, 0.0003f, 0); }
                    else
                    { RenderSettings.ambientSkyColor = new Color(0.04f, 0.003f, 0); }

                    #endregion
                    #region ■各メッシュのレンダラ設定（LightProbeやupdateOffScreen レイヤーなど）
                    //■舌
                    //LightProbe　RefrectionProbeオフ（それだけでも光が当たっているので）
                    tangSMR.lightProbeUsage = UnityEngine.Rendering.LightProbeUsage.Off;
                    tangSMR.reflectionProbeUsage = UnityEngine.Rendering.ReflectionProbeUsage.Off;

                    //ちえりを置きなおさないと正常なBounds位置が取得できないので、Bounds手動調整してオフ
                    tangSMR.updateWhenOffscreen = false;

                    //マテリアルを置き換え
                    tangSMR.material = tangSMR.GetComponent<MatChangeResources>().otherMat;

                    //レイヤー変更
                    tangSMR.gameObject.layer = LayerMask.NameToLayer("EventLightTarget");


                    //■歯
                    toothSMR.lightProbeUsage = UnityEngine.Rendering.LightProbeUsage.Off;
                    toothSMR.reflectionProbeUsage = UnityEngine.Rendering.ReflectionProbeUsage.Off;

                    toothSMR.updateWhenOffscreen = false;

                    toothSMR.material = toothSMR.GetComponent<MatChangeResources>().otherMat;

                    toothSMR.gameObject.layer = LayerMask.NameToLayer("EventLightTarget");


                    //■咥内
                    kounaiSMR.lightProbeUsage = UnityEngine.Rendering.LightProbeUsage.Off;
                    kounaiSMR.reflectionProbeUsage = UnityEngine.Rendering.ReflectionProbeUsage.Off;

                    kounaiSMR.updateWhenOffscreen = false;

                    kounaiSMR.material = kounaiSMR.GetComponent<MatChangeResources>().otherMat;

                    kounaiSMR.gameObject.layer = LayerMask.NameToLayer("EventLightTarget");


                    //■TPSプレイヤーDummyマテリアル
                    playerDummyBodySMR.materials = playerDummyBodySMR.GetComponent<MatChangeResources>().otherMatList.ToArray();


                    #endregion

                    ////唾液ON
                    //DaekiObj.SetActive(true);
                }

                #endregion
            }

            yield return null;
        }

        //■終了処理
        //ポストプロセス削除（子ライトも削除される）
        Destroy(PostProcessVolumeKounaiObj);

        #region 既存のポストプロセスとライトをオン
        //既存のポストプロセスオン
        PostProcessVolume00DirectDataObj.SetActive(true);

        //既存のライトからEventLightTargetレイヤーオン
        defLight.cullingMask |= (1 << LayerMask.NameToLayer("EventLightTarget"));

        //既存のフェイスライトオン
        faceLightObj.SetActive(true);

        //環境色
        RenderSettings.ambientSkyColor = defAmbientSkyColor;
        #endregion

        #region ■各メッシュのレンダラ設定（LightProbeやupdateOffScreen レイヤーなど）
        //■舌
        //LightProbe　RefrectionProbeオフ（それだけでも光が当たっているので）
        tangSMR.lightProbeUsage = UnityEngine.Rendering.LightProbeUsage.BlendProbes;
        tangSMR.reflectionProbeUsage = UnityEngine.Rendering.ReflectionProbeUsage.BlendProbes;

        //Bounds手動調整オン
        tangSMR.updateWhenOffscreen = true;

        //マテリアルを置き換え
        tangSMR.material = tangSMR.GetComponent<MatChangeResources>().defaultMat;

        //レイヤー変更
        tangSMR.gameObject.layer = LayerMask.NameToLayer("chieri");


        //■歯
        toothSMR.lightProbeUsage = UnityEngine.Rendering.LightProbeUsage.BlendProbes;
        toothSMR.reflectionProbeUsage = UnityEngine.Rendering.ReflectionProbeUsage.BlendProbes;

        toothSMR.updateWhenOffscreen = true;

        toothSMR.material = toothSMR.GetComponent<MatChangeResources>().defaultMat;

        toothSMR.gameObject.layer = LayerMask.NameToLayer("chieri");


        //■咥内
        kounaiSMR.lightProbeUsage = UnityEngine.Rendering.LightProbeUsage.BlendProbes;
        kounaiSMR.reflectionProbeUsage = UnityEngine.Rendering.ReflectionProbeUsage.BlendProbes;

        kounaiSMR.updateWhenOffscreen = true;

        kounaiSMR.material = kounaiSMR.GetComponent<MatChangeResources>().defaultMat;

        kounaiSMR.gameObject.layer = LayerMask.NameToLayer("chieri");


        //■TPSプレイヤーDummyマテリアル
        playerDummyBodySMR.materials = playerDummyBodySMR.GetComponent<MatChangeResources>().defaultMatList.ToArray();
        #endregion

        ////唾液削除
        //Destroy(DaekiObj);

        isF3030KounaiEffectInitialize = false;//念のため初期化完了BoolをFalseに
    }
    IEnumerator F3030StomachEffect()
    {
        if (isF3030StomachEffect) { yield break; }
        isF3030StomachEffect = true;


        #region まず特殊ポストエフェクトとライトを設置（子がライト）
        GameObject PostProcessVolumeStomachObj =
            Instantiate(Resources.Load("PostProcessing/Prefab/PostProcessVolumeKounai03Stomach") as GameObject
            , GameObjectsTrs, false);


        #endregion

        #region 既存のポストプロセスとライトをオフ
        //既存のポストプロセスオフ
        PostProcessVolume00DirectDataObj.SetActive(false);

        //既存のライトオフ(サメで読み込むためにifチェック追加（サメシーンにはライトがない）)
        GameObject defLightObj = null;
        if (GameObject.Find("GameObjects/Light") != null)
        {
            defLightObj = GameObject.Find("GameObjects/Light");
            defLightObj.SetActive(false);
        }

        ////既存のライトからEventLightTargetレイヤーオフ
        //var defLight = GameObject.Find("GameObjects/Light/Floor light_Realtime").GetComponent<Light>();
        //defLight.cullingMask &= ~(1 << LayerMask.NameToLayer("EventLightTarget"));

        //既存のフェイスライトオフ
        var faceLightObj = GirlHeadTrs.Find("Face Light").gameObject;
        faceLightObj.SetActive(false);

        //環境色Def取得
        var defAmbientSkyColor = RenderSettings.ambientSkyColor;

        //環境色　VRだったら少し違う
        if (XRSettings.enabled)
        { RenderSettings.ambientSkyColor = new Color(0.004f, 0.0003f, 0); }
        else
        { RenderSettings.ambientSkyColor = new Color(0.04f, 0.003f, 0); }

        #endregion

        #region //■各メッシュのレンダラ設定（LightProbeやupdateOffScreen レイヤーなど）

        ////■TPSプレイヤーDummyマテリアル
        //var playerDummyBodySMR =
        //    Player_DummyTrs.Find("mesh/Body").GetComponent<SkinnedMeshRenderer>();

        ////forでの入れ替えは出来なかった　直接toArrayしたらできた（Instanceではなくなる）
        //playerDummyBodySMR.materials = playerDummyBodySMR.GetComponent<MatChangeResources>().otherMatList.ToArray();

        #endregion

        //初期化終了
        isF3030StomachEffectInitialize = true;

        while (isF3030StomachEffect)
        {
            yield return null;
        }

        //■終了処理
        //ポストプロセス削除（子ライトも削除される）
        Destroy(PostProcessVolumeStomachObj);

        #region 既存のポストプロセスとライトをオン
        //既存のポストプロセスオン
        PostProcessVolume00DirectDataObj.SetActive(true);

        //既存のライトオン
        defLightObj.SetActive(transform);
        //既存のフェイスライトオン
        faceLightObj.SetActive(true);

        //環境色
        RenderSettings.ambientSkyColor = defAmbientSkyColor;
        #endregion


        #region //■各メッシュのレンダラ設定（LightProbeやupdateOffScreen レイヤーなど）

        ////■TPSプレイヤーDummyマテリアル
        //playerDummyBodySMR.materials = playerDummyBodySMR.GetComponent<MatChangeResources>().defaultMatList.ToArray();

        #endregion

        isF3030StomachEffectInitialize = false;//念のため初期化完了BoolをFalseに
    }

    #endregion
    IEnumerator F3040()//食後
    {
        if (debugEventMoveFlag == true)
        {
        }
        EventReset();

        //暗幕
        FadeBlack(1, 0);
        yield return null;

        //こもり虫に変え
        KankyouBGMChanger(semiSE.audioSource, "musi2_loop_EQKomori");
        //環境音フェード
        KankyouBGMVolumer(0.5f, 5);

        HukidashiNovelDistanceChange(2f, 0);

        #region 設定

        //智恵理0位置ロック
        DB.isChieriPosLock = true;

        //アニメスピード
        girlAnim.speed = 1f;
        doorAnim.speed = 1f;
        chairAnim.speed = 1f;

        //椅子アニメオフ
        chairAnim.enabled = false;

        #region オブジェ群
        //スピーカー 位置に
        SpeakerTrs.gameObject.SetActive(true);
        GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
        SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        //宿題セット消し
        SharpenObj.SetActive(false);
        KeshigomuObj.SetActive(false);
        Drill_chieriTrs.gameObject.SetActive(false);

        //椅子位置
        GameObject Chair_01_SuwariPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chair_01_SuwariPosObj") as GameObject;
        ChairTrs.localPosition = Chair_01_SuwariPosObj.transform.localPosition;
        ChairTrs.localEulerAngles = Chair_01_SuwariPosObj.transform.localEulerAngles;

        #region 皿パン設定

        //皿生成
        GameObject
            SaraObj = Instantiate(Resources.Load("Main/KomonoObj/Sara/Sara") as GameObject, RoomTrs, false),
        //取得(GameObject変数連続で指定している)
        PanObj = SaraObj.transform.Find("Pan").gameObject,
        Pan_AObj = PanObj.transform.Find("Pan_A").gameObject,
        Pan_BObj = PanObj.transform.Find("Pan_B").gameObject,
        PankuzuObj = SaraObj.transform.Find("Pankuzu").gameObject,
        Pankuzu01Obj = PankuzuObj.transform.Find("Pankuzu01").gameObject,
        Pankuzu02Obj = PankuzuObj.transform.Find("Pankuzu02").gameObject;

        DB.evMoveDelObjList.Add(SaraObj);

        GameObject
            SaraHandObj = Instantiate(Resources.Load("Main/KomonoObj/Sara/SaraHand") as GameObject, GirlRHandTrs, false);
        DB.evMoveDelObjList.Add(SaraHandObj);

        saraAnim
            = SaraObj.GetComponent<Animator>();
        saraAnim.CrossFadeInFixedTime("デスク皿置かれてる", 0f, 0);
        yield return null;
        SaraObj.SetActive(false);


        //皿動かすためにアニメーター止め
        saraAnim.enabled = false;

        //皿 食事1位置に
        GameObject Sara_01_DeskSyokuzi01PosObj = Resources.Load("_PosObj/D_Henai_Day1/Sara_01_DeskSyokuzi01PosObj") as GameObject;
        SaraObj.transform.localPosition = Sara_01_DeskSyokuzi01PosObj.transform.localPosition;
        SaraObj.transform.localEulerAngles = Sara_01_DeskSyokuzi01PosObj.transform.localEulerAngles;

        //パンを片方消す
        Pan_AObj.SetActive(false);

        //手の皿消し
        SaraHandObj.SetActive(false);
        //机の皿ON
        SaraObj.SetActive(true);


        //パンくず02 オフ
        Pankuzu02Obj.SetActive(false);

        //皿 とりあえずの机位置に
        GameObject Sara010_DeskPosObj
            = Resources.Load("_PosObj/0320Taberareru/Sara010_DeskPosObj") as GameObject;
        SaraObj.transform.localPosition = Sara010_DeskPosObj.transform.localPosition;
        SaraObj.transform.localEulerAngles = Sara010_DeskPosObj.transform.localEulerAngles;

        #endregion //皿パン設定

        #endregion

        //口パク用のアニメをゆっくりに変更
        kutipakuString = "口パクゆっくり";

        //ちえり
        girlAnim.Play("デスク手のせパンくず持ち上げ", 0, 1);
        ChieriMotion("f_公ってえっちなものばかり", 0f, 2);
        //顔傾け用 事前
        ChieriMotion("h_noData", 0f, 7);


        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.2f, 0), 0f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);



        #region 手の平に寝る
        //■プレイヤー 手乗り位置に（ペアレント）
        CameraObjectsTrs.SetParent(GirlRHandTrs);
        GameObject Player010_PareRHand_SyokugoTaorePosObj
            = Resources.Load("_PosObj/0340Syokugo/Player010_PareRHand_SyokugoTaorePosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player010_PareRHand_SyokugoTaorePosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player010_PareRHand_SyokugoTaorePosObj.transform.localEulerAngles;

        //TPSプレイヤー倒れモーション
        isPlayerUniqueMotion = true;
        PlayerMotion("liedown_00_Re", 0f, 0);

        //カメラリセット値変更してリセット
        CameraReset(Player010_PareRHand_SyokugoTaorePosObj.transform.localEulerAngles
            , new Vector3(0.095f, -0.207f, -0.673f)//倒れアンカーPos
            , false
            , new Vector3(-45, 0, 0) //倒れアンカーRot
            , false
            , true);

        //■プレイヤーFBBIKtoHeadEffector（ダミー） 倒れ角度に
        GameObject PlayerFBBIKtoHeadEffector010_SyokugoTaorePosObj
            = Resources.Load("_PosObj/0340Syokugo/PlayerFBBIKtoHeadEffector010_SyokugoTaorePosObj") as GameObject;
        PlayerFBBIKtoHeadEffectorObj.transform.localPosition = PlayerFBBIKtoHeadEffector010_SyokugoTaorePosObj.transform.localPosition;
        PlayerFBBIKtoHeadEffectorObj.transform.localEulerAngles = PlayerFBBIKtoHeadEffector010_SyokugoTaorePosObj.transform.localEulerAngles;

        //ユーザーカメラ直接少し回転
        ChokusetsuNyuuryokuUserCameraControlEul = new Vector3(-68.1f, 46.4f, 0.0f);

        #endregion

        //プレイヤー大きさ
        nowPlayerLocalScale = DB.playerScale_Vore01;



        #region 右手にWindnoiseSoundObj付与

        GameObject RHandSoundObj
            = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRHandTrs);
        RHandSoundObj.name = nameof(RHandSoundObj);
        DB.evMoveDelObjList.Add(RHandSoundObj);

        //設定
        WindnoiseSound tmpRHandSound = RHandSoundObj.GetComponent<WindnoiseSound>();
        tmpRHandSound.aSource.maxDistance = 50;
        tmpRHandSound.pitchMax = 1f;
        tmpRHandSound.pitchUpRateAdjustFloat = 4;

        tmpRHandSound.aSource.volume = 0;

        //SoundObjのPos
        GameObject RHandSound010_MakotoIchiPosObj
            = Resources.Load("_PosObj/0320Taberareru/RHandSound010_MakotoIchiPosObj") as GameObject;
        RHandSoundObj.transform.localPosition = RHandSound010_MakotoIchiPosObj.transform.localPosition;

        #endregion

        #region HeadにWindnoiseSoundObj付与

        GameObject HeadSoundObj
            = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlHeadTrs);
        HeadSoundObj.name = nameof(HeadSoundObj);
        DB.evMoveDelObjList.Add(HeadSoundObj);

        //設定
        WindnoiseSound tmpHeadSound = HeadSoundObj.GetComponent<WindnoiseSound>();
        tmpHeadSound.aSource.maxDistance = 50;
        tmpHeadSound.pitchMax = 1f;
        tmpHeadSound.pitchUpRateAdjustFloat = 3;

        tmpHeadSound.aSource.volume = 0;

        //SoundObjのPos
        GameObject HeadSound010_MikenIchiPosObj
            = Resources.Load("_PosObj/0320Taberareru/HeadSound010_MikenIchiPosObj") as GameObject;
        HeadSoundObj.transform.localPosition
            = HeadSound010_MikenIchiPosObj.transform.localPosition;
        //= Vector3.zero;
        #endregion

        #region //鼻息設置
        //GameObject BreathSound_Taberareru
        //    = Instantiate(Resources.Load("Main/KomonoObj/Kounai/BreathSound_Taberareru") as GameObject
        //    , Bip001HeadTrs, false);

        //DB.evMoveDelObjList.Add(BreathSound_Taberareru);


        #endregion

        #endregion □設定


        //開幕
        FadeBlack(0, 2);
        yield return new WaitForSeconds(2);

        tmpRHandSound.aSource.DOFade(1, 1f);

        //ChieriMotion("_noData", 0f, 7);//解除　首の動きが固定されて、舐めシーン動かなくなるので
        //OriBreathController.enabled = false;
        //tmpRHandSound.aSource.DOFade(1, 1f);
        //tmpHeadSound.aSource.DOFade(1, 1f);



        FadeBlack(0, 3);
        yield return new WaitForSeconds(3);


        Hukidashi("F3030160a020");//怖かった？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        ChieriMotion("f_あはは・・2", 0.5f, 2);
        ChieriMotionDelay(1.5f, "f_あはは・・2目開き", 0.2f, 2);//時間差表情戻し
        Hukidashi("F3030160a030");//おいしくって
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);


        Hukidashi("F3030160a050");//悩んじゃった
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(2);

        ChieriMotion("f_リラックス01", 2f, 2);

        NovelSetVis("F3040010"); //「う、うう……」 だが未だ体中に纏わりつく唾液が、
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);

        ChieriMotion("f_うーん・・？", 1f, 2);
        Hukidashi("F3040010");//元気ない……？
        yield return new WaitForSeconds(1);
        ChieriMotion("デスク手のせ顔よせ", 0.3f, 0);

        yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        yield return new WaitForSeconds(1);

        Hukidashi("F3040020");//疲れちゃった？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(2);

        ChieriMotion("f_あはは・・2", 0.5f, 2);
        ChieriMotionDelay(1.5f, "f_あはは・・2目開き", 0.2f, 2);//時間差表情戻し
        Hukidashi("F3040030");//ふふ、ごめんね
        yield return new WaitForSeconds(1);

        ChieriMotion("デスク手のせパンくず持ち上げ", 4f, 0);
        yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        Hukidashi("F3040040");//ちょっとだけ戻してあげるからね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);


        ChieriMotion("笑顔01口眉", 0.2f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.2f, 2);//時間差表情戻し

        FadeBlack(1, 6);
        yield return new WaitForSeconds(1);
        NovelSetVis("F3040020"); //（……も、戻……す……？）　移動し始めた。
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);


        EventMove("ハンカチのマット", true, true);

        yield break;
    }
    IEnumerator F3050()//ハンカチのマット
    {
        if (debugEventMoveFlag == true)
        {
            //暗幕
            FadeBlack(1, 0);
        }
        EventReset();
        //goto デバッグスキップ;

        //こもり虫に変え
        KankyouBGMChanger(semiSE.audioSource, "musi2_loop_EQKomori");
        //環境音フェード
        KankyouBGMVolumer(0.5f, 5);
        HukidashiNovelDistanceChange(3f, 0);

        #region 設定
        #region 宿題ペン消しゴムなくし
        //宿題 位置に
        Drill_chieriTrs.gameObject.SetActive(false);

        ////プレイヤーの
        //HomeworkObjectsTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);

        //ペンなくし
        SharpenObj.SetActive(true);
        //消しゴム無くし
        KeshigomuObj.SetActive(true);
        #endregion //宿題置き

        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);
        //智恵理0位置ロック解除
        DB.isChieriPosLock = false;
        //アニメスピード
        girlAnim.speed = 0.5f;

        //WindnoiseSoundObj付与
        GameObject WindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , HeadSphereTrs);//（頭）
        DB.evMoveDelObjList.Add(WindnoiseSoundObj);

        //SoundObjのPos
        GameObject SoundObj_01_Ningyou_PareHeadPosObj = Resources.Load("_PosObj/D_Henai_Day1/SoundObj_01_Ningyou_PareHeadPosObj") as GameObject;
        WindnoiseSoundObj.transform.localPosition = SoundObj_01_Ningyou_PareHeadPosObj.transform.localPosition;


        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);



        //智恵理 ベッドに向かって立ち（変更予定）位置に
        GameObject Chieri_05_BedMaePosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_05_BedMaePosObj") as GameObject;
        GirlTrs.localPosition = Chieri_05_BedMaePosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri_05_BedMaePosObj.transform.localEulerAngles;
        //ポーズ表情
        //ChieriMotion("片膝立ち宿題促しループ", 0f, 0);
        ChieriMotion("立ち宿題促し後のループ", 0f, 0);
        ChieriMotion("_noData", 0f, 2);



        //スピーカー 位置に
        SpeakerTrs.gameObject.SetActive(true);
        GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
        SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;



        //■プレイヤー 宮棚ハンカチの上位置に
        GameObject Player010_HankachiUePosObj = Resources.Load("_PosObj/0350HankachiNoMat/Player010_HankachiUePosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player010_HankachiUePosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player010_HankachiUePosObj.transform.localEulerAngles;

        //倒れカメラ戻し
        isPlayerUniqueMotion = false;

        //カメラリセット値変更してリセット（+回転と座り設定）
        CameraReset(Player010_HankachiUePosObj.transform.localEulerAngles
            , DB.cameraSitAnchorDefLocalPos //座りに
            , false
            , DB.cameraAnchorResetLocalPos);//Anchorをゼロに

        //プレイヤー大きさ
        nowPlayerLocalScale = DB.playerScale_Vore01;

        //ハンカチ設置
        GameObject HandkerchiefObj =
            Instantiate(Resources.Load("_PosObj/0350HankachiNoMat/HandkerchiefObj") as GameObject
            , GameObjectsTrs, false);

        #endregion 設定

        #region 開幕　はい到着 ～ スマホ取り出し
        //開幕
        FadeBlack(0, 3);
        yield return new WaitForSeconds(3);

        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        Hukidashi("F3050010");//はい、到着
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        Hukidashi("F3050020");//一緒に寝ようね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);


        NovelSetVis("F3050010");//（そういえば・・・泊まるとか・・）
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(2);

        ChieriMotion("つまんなそう", 0.5f, 2);
        Hukidashi("F3050030");//喋れないくらい
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        #region ■左手スマホ取り出し　マスク IK版

        GirlPosToIKTargetPosRot();

        string //現在のベースアニメClipをレイヤー11に入れて、Clip名指定
            tmpBaseAnimStateName = "立ち宿題促し後のループ";

        #region スマホ片手いじりPosへ（スマホ本体の位置でIKTargetではない）
        GameObject ChieriSumaho_LHand_SekurabeKatatePosObj
            = Resources.Load("_PosObj/_ParentPoseObjs/ChieriSumaho_LHand_SekurabeKatatePosObj") as GameObject;
        ChieriSumahoObj.transform.localPosition = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localEulerAngles;
        #endregion

        StartCoroutine(GirlAnimReadSystem(11));

        //マスクのため、レイヤーのアニメを1フレでベースと同じモーション状態にする（ParameterでNormlizedTimeが指定できる（ただし指定し続けないと静止））
        ChieriMotion(tmpBaseAnimStateName, 0f, 11);//現在のベースアニメと同じアニメ指定
        girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeに

        yield return null;//↑適用に1フレ必要

        ChieriMotion("背比べ左手スマホ取り出し", 0.2f, 11);

        while (nowGirlAnimOtherLayerClipNameDict[11] != "背比べスマホ取り出し") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[11] <= 0.375f) { yield return null; }
        isGirlAnimReadSystem = false;
        //スマホObjオン（取り出し）
        ChieriSumahoObj.SetActive(true);
        //画面つける（画面更新も一緒に起動される）
        ChieriSumahoPower(true);

        #region スマホ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, new Vector3(0, -0.5f, 0), 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.8f, 1);
        #endregion

        #endregion

        #endregion

        #region じゃあひとまず戻してあげようかな ～ しゃがむまで

        yield return new WaitForSeconds(1);
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        Hukidashi("F3050040");//じゃあひとまず
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);


        NovelSetVis("F3050020");//（……え、……あ…………！）
        while (novelCurrentPageInt < 3) { yield return null; }
        CameraAnchorTrs.DOShakePosition(0.5f, 0.2f);

        ChieriMotion("つまんなそう", 0.5f, 2);
        #region IK目プレイヤー見る
        //IK目プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        #endregion

        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);

        //IK顔プレイヤー見る
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 1.5f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        Hukidashi("F3050050");//あはは大丈夫
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        #region スマホ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, new Vector3(0, -0.5f, 0), 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.8f, 1);
        #endregion
        yield return new WaitForSeconds(1);

        Hukidashi("F3050060");//元気出してね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        yield return new WaitForSeconds(1);

        #region スマホいじって元の大きさに
        ChieriMotion("背比べ左手スマホいじり", 0f, 11);

        #region ■目眩リトルとDOTWeenTOでプレイヤーサイズ変更(変更完了bool付き)マスク版
        bool isScaleChangeComplete = false;
        //段階別で目眩具合と縮小度変更して縮小
        PPv2MemaiLittle(1f);

        //少し戻し
        var tmpPlayerSizeChangeTweener =
        DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x
        , DB.playerScale_JougiDeHakariZero, 20f)
        .SetEase(Ease.InOutCubic)
        .OnComplete(() => { isScaleChangeComplete = true; });

        SEPlay("magic-attack-darkness_Reverse_long(-12)", 0.5f);

        #endregion

        #endregion

        yield return new WaitForSeconds(1);

        #region IK顔目プレイヤー見る
        //IK目プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;

        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 1.5f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        #endregion

        NovelSetVis("F3050030");//戻ってる・・？　パワーがみなぎる
        while (isNovelSetVisIng) { yield return null; }


        #region しゃがみながらスマホしまい
        ChieriMotion("背比べ左手スマホしまう", 0f, 11);

        ChieriMotion("片膝立ち宿題促し開始", 0.5f, 0);
        yield return new WaitForSeconds(1.5f);

        //スマホ消し
        ChieriSumahoObj.SetActive(false);
        //右腕マスク戻し
        ChieriMotion("_noData", 0.5f, 11);

        yield return new WaitForSeconds(0.8f);
        #endregion

        //頭こっち向け（LAIKSHeadDefWeightではなく1にする）
        DOTweenToLAIKSHead(LAIKHeadS, 1, 2);

        #endregion

        #region しゃがんでから立ち上がるまで

        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        Hukidashi("F3050070");//元気でた？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        yield return new WaitForSeconds(1);


        NovelSetVis("F3050040");//うお、え？　なんで戻れるんだ？
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);



        ChieriMotion("f_眉高い笑顔", 0.2f, 2);
        Hukidashi("F3050080");//メガネ？　あれはね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        Hukidashi("F3050090");//認識させただけだから
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
        Hukidashi("F3050100");//つけてなくてもいいんだよ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        NovelSetVis("F3050050");//ええ・・・・・・
        while (isNovelSetVisIng) { yield return null; }


        Hukidashi("F3050110");//エネルギーも運べる
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        Hukidashi("F3050120");//宿題も出来る
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        NovelSetVis("F3050060");//エネルギー？
        while (isNovelSetVisIng) { yield return null; }

        #region 若干うつむき
        ChieriMotion("f_うーん・・？", 0.5f, 2);

        //IK頭 1からデフォ値に
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 2, Ease.InOutQuad);

        GameObject IKLookAtEye_UtsumukiPosObj
            = Resources.Load("_PosObj/0350HankachiNoMat/IKLookAtEye_UtsumukiPosObj") as GameObject;

        //IK目 うつむき
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, IKLookAtEye_UtsumukiPosObj.transform.localPosition, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);

        #endregion

        yield return new WaitForSeconds(1);


        Hukidashi("F3050130");//詳しい話は明日にして
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        #region IK目プレイヤー見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        #endregion

        yield return new WaitForSeconds(1);

        //頭こっち向け（LAIKSHeadDefWeightではなく1にする）
        DOTweenToLAIKSHead(LAIKHeadS, 1, 2);


        ChieriMotion("f_笑顔口眉ジト目40～", 0.3f, 2);
        Hukidashi("F3050140");//元気出たみたいだし
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(2);

        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し

        ChieriMotion("片膝立ち宿題促し終了立ち上がり", 0.5f, 0);
        yield return new WaitForSeconds(1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);


        Hukidashi("F3050150");//お風呂入ろっか
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        #endregion


        //StartCoroutine(ToBeContinued());


        yield return new WaitForSeconds(1);

        NovelSetVis("F3050070");//風呂・・・？
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);

        Hukidashi("F3050160");//洗ってあげる
        FadeBlack(1, 2);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("F3050080");//いやごめんとか！
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("F3050170");//服も洗ってあげる
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("F3050090");//待て待て待て待て！
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);


        EventMove("就寝");


        yield break;
    }
    IEnumerator F3060()//就寝
    {
        if (debugEventMoveFlag == true)
        {
            //暗幕
            FadeBlack(1, 0);
        }
        EventReset();
        //MoveScene("TH_Yoru"); yield return new WaitForSeconds(1);

        //こもり虫に変え
        KankyouBGMChanger(semiSE.audioSource, "musi2_loop_EQKomori");
        //環境音フェード
        KankyouBGMVolumer(0.5f, 5);

        #region 設定

        #region 宿題ペン消しゴムなくし
        //宿題
        Drill_chieriTrs.gameObject.SetActive(false);

        ////プレイヤーの宿題
        //HomeworkObjectsTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);

        //ペンなくし
        SharpenObj.SetActive(false);
        //消しゴム無くし
        KeshigomuObj.SetActive(false);
        #endregion

        #region バッテリー設置
        GameObject BatteryObj;
        //既に編集用に置いてあったら取得
        if (GameObject.Find("Battery") != null)
        { BatteryObj = GameObject.Find("Battery"); }
        else //無ければリソースから
        {
            BatteryObj
                = Instantiate(Resources.Load("_PosObj/0360Syuusin/Battery_Makuramoto") as GameObject
              , GameObjectsTrs, false);
        }
        BatteryObj.name = "Battery";
        DB.sceneMoveDelObjList.Add(BatteryObj);
        #endregion

        //スクールバッグオフ
        SchoolBagTrs.gameObject.SetActive(false);

        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);
        //智恵理0位置ロック
        DB.isChieriPosLock = true;
        //アニメスピード
        girlAnim.speed = 0.5f;

        //智恵理 ベッドで寝
        //ポーズ表情
        ChieriMotion("ベッド横寝", 0f, 0);
        ChieriMotion("f_Sleep100Only", 0f, 2);

        //IKオフ
        DOTweenToLAIKSEyes(LAIKEyeS, 0, 0);
        DOTweenToLAIKSHead(LAIKHeadS, 0, 0);


        //プレイヤー位置 //仰向け
        GameObject Player010_StartPosObj
            = Resources.Load("_PosObj/0360Syuusin/Player010_StartPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player010_StartPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player010_StartPosObj.transform.localEulerAngles;
        CameraReset();

        CameraReset(
            Player010_StartPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos//立ち
            , true
            , null
            , false
            , true);


        //プレイヤー大きさ
        nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;


        //ハンカチ設置
        GameObject HandkerchiefObj =
            Instantiate(Resources.Load("_PosObj/0350HankachiNoMat/HandkerchiefObj") as GameObject
            , GameObjectsTrs, false);


        //スピーカー 位置に
        SpeakerTrs.gameObject.SetActive(true);
        GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
        SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        //智恵理スマホベッドの上に
        ChieriSumahoObj.transform.SetParent(GameObjectsTrs);
        GameObject ChieriSumaho_Bed01PosObj = Resources.Load("_PosObj/_ParentPoseObjs/ChieriSumaho_Bed01PosObj") as GameObject;
        ChieriSumahoObj.transform.localPosition = ChieriSumaho_Bed01PosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_Bed01PosObj.transform.localEulerAngles;
        ChieriSumahoObj.SetActive(true);
        //ケーブルOn
        ChieriSumahoUSBCableObj.SetActive(true);

        #endregion 設定

        #region ポストプロセス設置

        GameObject PostProcessVolumeShinyaSyuusinObj =
            Instantiate(Resources.Load("PostProcessing/Prefab/PostProcessVolumeShinyaSyuusin") as GameObject);

        //既存のポストプロセスオフ
        PostProcessVolume00DirectDataObj.SetActive(false);


        #endregion

        yield return new WaitForSeconds(2);

        NovelSetVis("F3060010");//気がつけば、マコトは布団の上で
        while (isNovelSetVisIng) { yield return null; };

        //倒れた姿勢で目覚め
        //開幕
        FadeBlack(0, 3);
        yield return new WaitForSeconds(3);


        NovelSetVis("F3060013");//ほんとに寝ちゃってたか……
        while (isNovelSetVisIng) { yield return null; }

        //暗転立ち上がり
        //暗幕
        FadeBlack(1, 1);
        yield return new WaitForSeconds(1);

        //■プレイヤー ベッドの上探索位置に
        GameObject Player020_OkiagariPosObj
            = Resources.Load("_PosObj/0360Syuusin/Player020_OkiagariPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player020_OkiagariPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player020_OkiagariPosObj.transform.localEulerAngles;

        CameraReset(
            Player020_OkiagariPosObj.transform.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos//立ち
            , true
            , null
            , false
            , true);

        NovelSetVis("F3060016");//体を起こした。
        while (isNovelSetVisIng) { yield return null; }


        //開幕
        FadeBlack(0, 1);
        yield return new WaitForSeconds(2);


        NovelSetVis("F3060020");//よし、寝てるよな　スマホをいじりながら寝てたよな
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);

        #region 探索 「ベッドのスマホ」 を移植

        //■探索システム コルーチン始動
        StartCoroutine(TansakuSystemLoad());

        //■隠れ鬼移動システムON
        KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
        //ローディング待ち
        while (isKOSystemLoading) { yield return null; }
        //移動場所05オン
        KO_KakurePosObjsList[5].SetActive(true);

        //デバッグ移動（スマホケーブル前に移動することで落ちるイベントすぐ再生）
        //CameraObjectsTrs.localPosition = KO_KakurePosObjsList[5].transform.Find("SumahoUeCableMae").gameObject.transform.localPosition;


        #region ■使用する探索オブジェ選別

        #region //以前のやり方（ちえりスマホがヒエラルキーに常駐してた頃のもの？）
        ////■該当の探索オブジェのコリダータグ書き換え
        //foreach (GameObject tmpObj in TansakuObjList)
        //{
        //    //■まずは全部オフ
        //    //（子の0番目にコリダーのフォルダがあること前提）
        //    foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
        //    { CollObjs.tag = "TansakuSeeCollOffObj"; }

        //    //該当していたら再度ONに戻し
        //    if (
        //        tmpObj.name == "ChieriSumaho"
        //        )
        //    {
        //        foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
        //        { CollObjs.tag = "TansakuSeeCollOnObj"; }
        //    }

        //}
        #endregion

        //20200202 直接書き換え
        foreach (Transform CollObjs in ChieriSumahoObj.transform.Find("Collider_ChieriSumaho"))
        { CollObjs.tag = "TansakuSeeCollOnObj"; }

        #endregion


        #region //移動ポイントフラグチェック
        ////椅子前
        //if (DB.isIsuMaeKOPosFlag)
        //{
        //    GameObject tmpObj = KO_KakurePosObjsList[1].transform.Find("IsuMae01Sphere").gameObject;
        //    tmpObj.GetComponent<Renderer>().enabled = true;
        //    tmpObj.GetComponent<Collider>().enabled = true;
        //}
        //else
        //{
        //    GameObject tmpObj = KO_KakurePosObjsList[1].transform.Find("IsuMae01Sphere").gameObject;
        //    tmpObj.GetComponent<Renderer>().enabled = false;
        //    tmpObj.GetComponent<Collider>().enabled = false;
        //}

        #endregion

        //フラグ立てておく（再プレイ時用）
        EnumChieriSumaho = enumChieriSumaho.探索2監禁範囲外_初回;
        EnumSumahoMae01 = enumSumahoMae01.初回到着;
        isF3060SumahoHakken = false;
        #endregion

        //スマホ発見までウェイト
        while (isF3060SumahoHakken == false) { yield return null; }

        isTansakuSystem = false;

        #region 布団へ飛び降りスマホ前へ移動ポイント

        #region 暗幕 設定 開幕

        //暗幕
        FadeBlack(1, 0.5f);
        yield return new WaitForSeconds(0.5f);

        isKOSystem = false;

        //■PosObjで読み込み
        //プレイヤー ベッド上探索位置に
        GameObject Player030_TobiorimaePosObj
            = Resources.Load("_PosObj/0360Syuusin/Player030_TobiorimaePosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player030_TobiorimaePosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player030_TobiorimaePosObj.transform.localEulerAngles;

        CameraAnchorTrs.localEulerAngles = Vector3.zero;

        //開幕
        FadeBlack(0, 0.5f);
        yield return new WaitForSeconds(0.5f);
        #endregion

        #region 布団へ飛び降り
        NovelSetVis("F3060040");//……まあ、そのためにはここを
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        //ANの重力設定のみロード
        AN_SetPlayerRigidbody();
        AN_GravitiDragBool = true;//FixedUpdateのやつON
                                  //rigid監視スタート
        StartCoroutine(RigidReadSystem());

        //ベッドマットコリダーにPhysicMaterialセット
        GameObject.Find("BedMatCollider").GetComponent<Collider>().material
            = Resources.Load("Main/PhysicMaterial/BedMatBound01") as PhysicMaterial;

        //DragAdjust調整(ベッドで跳ねるために)(ベッドにもPhisicsMaterial適用されている)
        float
            tmpDefDragAdjust = dragAdjust,
            tmpDefGravityAdjust = gravityAdjust;

        dragAdjust = 0.4f;
        gravityAdjust = 2;


        //ジャンプ
        AN_PlayerRigidbody.velocity
            += (new Vector3(0.1f, 0.2f, 0f))
            * nowPlayerLocalScale.x * AN_GrapJumpVelocity;

        isShockWait = true;
        while (isShockWait) { yield return null; }

        //ジャンプ(はねてつんのめる表現)
        AN_PlayerRigidbody.velocity
            += (new Vector3(0.1f, 0f, 0f))
            * nowPlayerLocalScale.x * AN_GrapJumpVelocity;

        yield return new WaitForSeconds(4);


        //元に戻す
        dragAdjust = tmpDefDragAdjust;
        gravityAdjust = tmpDefGravityAdjust;
        GameObject.Find("BedMatCollider").GetComponent<Collider>().material
            = null;
        //■重力設定消し
        AN_GravitiDragBool = false;
        isRigidReadSystem = false;
        Destroy(CameraObjectsTrs.GetComponent<Rigidbody>());

        #endregion

        NovelSetVis("F3060050");//とりあえず今は
        while (isNovelSetVisIng) { yield return null; }

        #endregion

        #region スマホ前へ移動

        #region シンプル移動point開始
        //移動ポイントObj本体
        GameObject tmpMovePointObj
            = Instantiate(ResourceFiles.KO_SimplePointObj
            , GameObjectsTrs);
        //システム終了時削除するようにリストに入れ
        KO_SimpleKakurePosObjsList.Add(tmpMovePointObj);

        //移動ポイントObjの位置大きさ
        GameObject SimpleMovePoint010_SumahoMaePosObj
            = Resources.Load("_PosObj/0360Syuusin/SimpleMovePoint010_SumahoMaePosObj") as GameObject;
        tmpMovePointObj.transform.localPosition = SimpleMovePoint010_SumahoMaePosObj.transform.localPosition;
        tmpMovePointObj.transform.localEulerAngles = SimpleMovePoint010_SumahoMaePosObj.transform.localEulerAngles;
        tmpMovePointObj.transform.localScale = SimpleMovePoint010_SumahoMaePosObj.transform.localScale;

        //シンプル移動システム開始
        StartCoroutine(KakureOniSimpleSystemLoad());
        //ポイント出現
        KO_NewPosPointObjVis(tmpMovePointObj);

        //歩きスピードにしてモーションも歩きに
        playerMoveSpeed = 1;
        KO_AsiotoTimeCountMaxFloat = 0.7f;
        isKO_PlayerWalk = true;

        #endregion
        //到着待ち
        while (isKO_SimplePointObj_Enter == false) { yield return null; }
        isKO_SimplePointObj_Enter = false;//移動ポイントEnterフラグ戻し
                                          //終了（ポイント削除命令も自動で行われる）
        isKOSystem = false;

        #endregion


        //スマホ到着
        KO_isMovePosLock = true;//移動止め
        NovelSetVis("F3060060");//引き出しのような
        while (isNovelSetVisIng) { yield return null; }


        #region ■画面に手をあ乗りあがる


        yield return new WaitForSeconds(0.5f);

        NovelSetVis("F3060070");//ぐっ・・！　うわっ　起きてないな・・・　このまま乗りあがろう
        while (novelCurrentPageInt < 8) { yield return null; }

        //カメラ揺れ
        CameraAnchorTrs.DOShakePosition(0.5f, 0.1f);
        yield return new WaitForSeconds(0.5f);

        ChieriSumahoPower();

        while (isNovelSetVisIng) { yield return null; }

        //プレイヤー 机の上探索位置に乗りあがりTween
        GameObject Player02SumahoNoriagariPosObj = Resources.Load("_PosObj/E_Kankin_Day1/SumahoDengen/Player02SumahoNoriagariPosObj") as GameObject;
        CameraObjectsTrs.DOLocalMoveY(Player02SumahoNoriagariPosObj.transform.localPosition.y, 1)
            .SetEase(Ease.InOutBack);
        CameraObjectsTrs.DOLocalMoveX(Player02SumahoNoriagariPosObj.transform.localPosition.x, 1)
            .SetEase(Ease.InBack);
        CameraObjectsTrs.DOLocalMoveZ(Player02SumahoNoriagariPosObj.transform.localPosition.z, 1)
            .SetEase(Ease.InBack);

        //ウェイト
        yield return new WaitForSeconds(3);

        isANSystem = false;
        NovelSetVis("F3060080");//ふう・・問題はどう操作したら……
        while (isNovelSetVisIng) { yield return null; }

        #endregion
        GirlPosToIKTargetPosRot();

        #region バッテリーLow出現

        GameObject tmpBatteryLowObj = Instantiate(Resources.Load("Main/KomonoObj/SmartPhone/Prefab/BatteryLow") as GameObject);
        DB.evMoveDelObjList.Add(tmpBatteryLowObj);
        tmpBatteryLowObj.transform.SetParent(ChieriSmartPhoneCanvasTrs, false);
        //バッテリーLow以外明るさ手動で下げる
        for (int i = 0; i < chieriSumahoFadeImageList.Count; i++)
        { chieriSumahoFadeImageList[i].DOColor(new Color(1, 1, 1, 0.5f), 0.2f); }

        for (int i = 0; i < chieriSumahoFadeTextList.Count; i++)
        { chieriSumahoFadeTextList[i].DOColor(new Color(1, 1, 1, 0.5f), 0.2f); }

        //SE
        GameObject tmpSpeakerPosObj = Instantiate(Resources.Load("_PosObj/E_Kankin_Day1/SumahoDengen/SumahoSpeakerPosObj") as GameObject);
        tmpSpeakerPosObj.transform.SetParent(ChieriSumahoObj.transform, false);
        SEPlay(UISEObj, "ui_notification_01_error", tmpSpeakerPosObj);
        #endregion

        #region 起きるかとおびえる

        NovelSetVis("F3060090");//うわ！　起きないでくれ……！！
        while (novelCurrentPageInt < 2) { yield return null; }

        Hukidashi("F3060010");//んん

        #region IKで右手接近
        GameObject IKRHand010_Okisou1PosObj
            = Resources.Load("_PosObj/0360Syuusin/IKRHand010_Okisou1PosObj") as GameObject;
        IKRHandTargetTrs.localPosition = IKRHand010_Okisou1PosObj.transform.localPosition;
        IKRHandTargetTrs.localEulerAngles = IKRHand010_Okisou1PosObj.transform.localEulerAngles;
        //SEPlay("swing41_12低い_長い", RHandSphereTrs.gameObject);

        //右手
        DOTweenToIKEfPos(IKRHandEf, 1, 6);
        DOTweenToIKEfRot(IKRHandEf, 1, 6);
        #endregion

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(3);

        #region IKで右手さらに Tweener
        GameObject IKRHand020_Okisou2PosObj
            = Resources.Load("_PosObj/0360Syuusin/IKRHand020_Okisou2PosObj") as GameObject;
        var tmpRHandPosTweener =
            IKRHandTargetTrs.DOLocalMove(IKRHand020_Okisou2PosObj.transform.localPosition
            , 5f)
            .SetEase(Ease.InOutQuad)
            .SetAutoKill(false);

        var tmpRHandRotTweener =
            IKRHandTargetTrs.DOLocalRotate(IKRHand020_Okisou2PosObj.transform.localEulerAngles
            , 5f)
            .SetEase(Ease.InOutQuad)
            .SetAutoKill(false);

        #endregion

        Hukidashi("・・・");//・・・
        yield return new WaitForSeconds(3);

        NovelSetVis("F3060100");//な、なんとか起きずに済んだ……か……？
        while (isNovelSetVisIng) { yield return null; }

        #endregion


        #region ケーブル前へシンプル移動point開始
        //移動ポイントObj本体
        GameObject tmpMovePointObjTwo
            = Instantiate(ResourceFiles.KO_SimplePointObj
            , GameObjectsTrs);
        //システム終了時削除するようにリストに入れ
        KO_SimpleKakurePosObjsList.Add(tmpMovePointObjTwo);

        //移動ポイントObjの位置大きさ
        GameObject SimpleMovePoint020_SumahoCableMaePosObj
            = Resources.Load("_PosObj/0360Syuusin/SimpleMovePoint020_SumahoCableMaePosObj") as GameObject;
        tmpMovePointObjTwo.transform.localPosition = SimpleMovePoint020_SumahoCableMaePosObj.transform.localPosition;
        tmpMovePointObjTwo.transform.localEulerAngles = SimpleMovePoint020_SumahoCableMaePosObj.transform.localEulerAngles;
        tmpMovePointObjTwo.transform.localScale = SimpleMovePoint020_SumahoCableMaePosObj.transform.localScale;

        //シンプル移動システム開始
        StartCoroutine(KakureOniSimpleSystemLoad());
        //ポイント出現
        KO_NewPosPointObjVis(tmpMovePointObjTwo);

        //歩きスピードにしてモーションも歩きに
        playerMoveSpeed = 1;
        KO_AsiotoTimeCountMaxFloat = 0.7f;
        isKO_PlayerWalk = true;

        #endregion

        //到着待ち
        while (isKO_SimplePointObj_Enter == false) { yield return null; }
        isKO_SimplePointObj_Enter = false;//移動ポイントEnterフラグ戻し
                                          //終了（ポイント削除命令も自動で行われる）
        isKOSystem = false;

        //プレイヤー　しゃがんでケーブルに向く //■※座りにすることでケーブルに手が届く
        //暗幕
        FadeBlack(1, 0.3f);
        yield return new WaitForSeconds(0.3f);

        //ケーブル前位置しゃがみ
        GameObject Player040_CablemaePosObj
            = Resources.Load("_PosObj/0360Syuusin/Player040_CablemaePosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player040_CablemaePosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player040_CablemaePosObj.transform.localEulerAngles;

        CameraReset(
            Player040_CablemaePosObj.transform.localEulerAngles,
            DB.cameraSitAnchorDefLocalPos,//Anchorを座りに
            true,
            null,
            false,
            true);


        //開幕
        FadeBlack(0, 0.3f);
        yield return new WaitForSeconds(1);


        #region ケーブル引っ張り落ち

        KO_isMovePosLock = true;//移動止め
        NovelSetVis("F3060110");//やっぱりきちんと刺さってる
        while (isNovelSetVisIng) { yield return null; }

        #region ゲームシステム設定
        isKOSystem = false;
        isTansakuSystem = false;
        KO_isMovePosLock = false;//移動止め解除

        //■■■脚のぼりシステム コルーチン始動
        StartCoroutine(AsinoboriSystem());
        //脚のぼりシステム設定
        AN_isGrapPowerMode = false;
        //rigid監視スタート
        StartCoroutine(RigidReadSystem());

        AN_PlayerHuseSphereCollider.enabled = true;
        AN_PlayerNormalCapsuleCollider.enabled = false;

        #endregion

        #region 両手ケーブル掴み待ち
        while (true)
        {
            if (AN_nowLSerchCollObj != null && AN_nowRSerchCollObj != null)
            {
                if (AN_nowLSerchCollObj.name == "Cable_Bone14" &&
                AN_nowRSerchCollObj.name == "Cable_Bone14" &&
                AN_isLGrap == true &&
                AN_isRGrap == true)
                {
                    AN_isInputLock = true;//離さないように
                    AN_isAutoPullLeaveMode = false;//落ちるときも離さないように
                    NovelSetVis("F3060120");//ぐにぐにと
                    while (isNovelSetVisIng) { yield return null; }
                    goto 両手ケーブル掴んだ;
                }
            }
            yield return null;
        }
        #endregion

        両手ケーブル掴んだ:
        #region ぐにぐに動かすシステム
        //VRカメラをゆっくり追いかけるObjとの距離が離れるほどメーターが上がる仕組み

        #region 設定

        //Objを生成
        GameObject tmpVRChaseObj = new GameObject();
        tmpVRChaseObj.name = "tmpVRChaseObj";
        tmpVRChaseObj.transform.SetParent(CameraAdjustTrackingTrs, false);
        tmpVRChaseObj.transform.localPosition = VRCameraTrs.localPosition;

        //スライダーをカメラにくっつける
        GameObject VRCamGoalSliderObj = Instantiate(Resources.Load("_PosObj/E_Kankin_Day1/SumahoDengen/VRCamGoalSliderObj") as GameObject);
        DB.evMoveDelObjList.Add(VRCamGoalSliderObj);
        VRCamGoalSliderObj.transform.SetParent(VRCameraTrs, false);

        //スライダー取得
        Slider VRCamGoalSlider = VRCamGoalSliderObj.GetComponent<Slider>();

        //ケーブル根元取得
        GameObject USBCable14Obj = ChieriSumahoUSBCableObj.transform.Find("Cable_Bone14").gameObject;

        float //VRカメラとObjとの距離
            tmpVRCamMag = (VRCameraTrs.localPosition - tmpVRChaseObj.transform.localPosition).magnitude;
        Tweener
            tmpVRCamChaseTweener = tmpVRChaseObj.transform.DOLocalMove(VRCameraTrs.localPosition, 0.4f)
            .SetEase(Ease.Linear)
            .SetAutoKill(false);

        //距離 最小値 最大値 設定
        VRCamGoalSlider.minValue = 0;
        VRCamGoalSlider.maxValue = 0.1f;
        #endregion
        goto デバッグ移動; //（ぐにぐにいじるイベントスキップ）

        //■三回引っ張ったらループ抜けてケーブル外れる
        //引っ張り回数カウンタ
        int tmpCount = 0;
        while (tmpCount <= 2)
        {
            //スライダー代入
            tmpVRCamMag = (VRCameraTrs.localPosition - tmpVRChaseObj.transform.localPosition).magnitude;
            VRCamGoalSlider.value = tmpVRCamMag;

            //Obj追従
            tmpVRCamChaseTweener.ChangeEndValue(VRCameraTrs.localPosition, true).Restart();

            //スライダーマックス時
            if (VRCamGoalSlider.maxValue == VRCamGoalSlider.value)
            {
                //少しケーブル抜ける
                USBCable14Obj.transform.DOLocalMove(USBCable14Obj.transform.localPosition
                    + new Vector3(0, 0.0002f, 0), 0.5f);

                //カメラのxがObjのxより多い = カメラより左にObjがある = 右に引っ張る
                if (VRCameraTrs.localPosition.x - tmpVRChaseObj.transform.localPosition.x >= 0)
                {
                    USBCable14Obj.transform.DOLocalRotate(USBCable14Obj.transform.localEulerAngles
                        + new Vector3(0, 0, -1f), 0.5f);
                }
                //その逆
                else if (VRCameraTrs.localPosition.x - tmpVRChaseObj.transform.localPosition.x <= 0)
                {
                    USBCable14Obj.transform.DOLocalRotate(USBCable14Obj.transform.localEulerAngles
                        + new Vector3(0, 0, 1f), 0.5f);
                }

                SEPlay(UISEObj, "UI_pek");
                tmpVRChaseObj.transform.localPosition = VRCameraTrs.localPosition;
                tmpCount++;
            }
            yield return null;
        }
        #endregion

        デバッグ移動:
        #region ケーブル外れる
        Destroy(tmpVRChaseObj);
        Destroy(VRCamGoalSliderObj);

        KankyouBGMVolumer(0, 1);
        NovelSetVis("F3060130");//しまっ……！？　抜けて……！？

        USBCable14Obj.transform.DOLocalMove(USBCable14Obj.transform.localPosition
            + new Vector3(0, 0.021f, 0), 0.5f);
        yield return new WaitForSeconds(1.5f);

        USBCable14Obj.transform.DOLocalMove(USBCable14Obj.transform.localPosition
            + new Vector3(0, 0.051f, 0), 0.5f);
        yield return new WaitForSeconds(1f);
        isNovelFadeTween = isNovelSetVisIng = false;

        #region //ペアレントしてカメラ回転するなら
        //isANSystem = false;
        //CameraObjectsTrs.SetParent(USBCable12Obj.transform);
        //USBCable12Obj.GetComponent<Rigidbody>().isKinematic = false;
        //while (true)
        //{
        //    if (Input.GetKeyDown(KeyCode.V))
        //    {
        //        CameraObjectsTrs.SetParent(GameObjectsTrs);
        //        goto 落下;
        //    }
        //    yield return null;
        //}
        #endregion

        USBCable14Obj.GetComponent<Rigidbody>().isKinematic = false;
        #endregion

        #region 地面に激突して、起き上がるまで
        while (CameraObjectsTrs.localPosition.y >= 0.01f)
        {
            if ((DB.isDebugMode && Input.GetKeyDown(KeyCode.V))) { goto 落下; }
            yield return null;
        }
        落下:
        FadeWhite(1, 0);

        SEPlay("cableFallShock01_cannon1", 0.6f);
        //PlayerHPAddSub(-800);
        isANSystem = false;

        GameObject Player03CableFallBoundPosObj = Resources.Load("_PosObj/E_Kankin_Day1/SumahoDengen/Player03CableFallBoundPosObj") as GameObject;
        CameraObjectsTrs.localEulerAngles = Player03CableFallBoundPosObj.transform.localEulerAngles;


        CameraObjectsTrs.DOLocalMoveX(Player03CableFallBoundPosObj.transform.localPosition.x, 2)
            .SetEase(Ease.OutSine);
        CameraObjectsTrs.DOLocalMoveZ(Player03CableFallBoundPosObj.transform.localPosition.z, 2)
            .SetEase(Ease.OutSine);
        CameraObjectsTrs.DOLocalMoveY(0.03f, 0.3f)
            .SetEase(Ease.OutCubic)
            .OnComplete(() =>
            {
                SEPlay("CableFallSlip01_fuse1", 0.8f);
                CameraObjectsTrs.DOLocalMoveY(Player03CableFallBoundPosObj.transform.localPosition.y, 0.3f)
                .SetEase(Ease.OutBounce);
                //PlayerHPAddSub(-400);
            });

        yield return new WaitForSeconds(0.05f);

        FadeWhite(0, 0);

        yield return new WaitForSeconds(3f);

        KankyouBGMVolumer(0.4f, 2);
        NovelSetVis("F3060140");//ぐ、が、なにやってんだおれ
        while (isNovelSetVisIng) { yield return null; }

        //暗幕
        FadeBlack(1, 0.5f);
        yield return new WaitForSeconds(0.5f);

        GameObject Player04CableFallBoundStandPosObj = Resources.Load("_PosObj/E_Kankin_Day1/SumahoDengen/Player04CableFallBoundStandPosObj") as GameObject;
        CameraObjectsTrs.localEulerAngles = Player04CableFallBoundStandPosObj.transform.localEulerAngles;
        CameraObjectsTrs.localPosition = Player04CableFallBoundStandPosObj.transform.localPosition;
        CameraAnchorTrs.localEulerAngles = Vector3.zero;


        #region USBケーブルとっかえ
        //既存のUSBケーブルオフ
        ChieriSumahoUSBCableObj.SetActive(false);

        //既に置かれてなければ設置
        if (GameObject.Find("USBCable_BedUnder") == null)
        {
            //探索用ケーブル設置
            GameObject USBCable_BedUnder
                = Instantiate(Resources.Load("_PosObj/0370YukaueKisyou/USBCable_BedUnder") as GameObject
                , GameObjectsTrs
                , false);
            USBCable_BedUnder.name = nameof(USBCable_BedUnder);
        }

        #endregion

        //開幕
        FadeBlack(0, 0.5f);
        yield return new WaitForSeconds(0.5f);

        yield return new WaitForSeconds(2f);

        #endregion


        KankyouBGMVolumer(0.3f, 2);
        NovelSetVis("F3060150");//（ひ、ひとまず、うっかり踏まれない場所を探そう）
        while (isNovelSetVisIng) { yield return null; }


        #endregion

        EventMove("寝床探し");

        yield break;
    }
    #region ┗■探索待ちのウェイト用Boolなど
    bool isF3060SumahoHakken;

    #endregion
    IEnumerator F3070()//寝床探し
    {
        if (debugEventMoveFlag == true)
        {
            #region 設定

            #region //ライト消し デバッグで一旦消さない
            //if (GameObject.Find("Floor light") != null)
            //{ NullJudgeFind("Floor light").GetComponent<Light>().enabled = false; }
            #endregion


            //プレイヤー大きさ
            //nowPlayerLocalScl = new Vector3(0.05f, 0.05f, 0.05f);
            nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;

            //■PosObjで読み込み
            //プレイヤー 床の上ケーブル落とされ位置に
            GameObject DebugPlayer04CableFallBoundStandPosObj = Resources.Load("_PosObj/E_Kankin_Day1/SumahoDengen/Player04CableFallBoundStandPosObj") as GameObject;
            CameraObjectsTrs.localPosition = DebugPlayer04CableFallBoundStandPosObj.transform.localPosition;
            CameraObjectsTrs.localEulerAngles = DebugPlayer04CableFallBoundStandPosObj.transform.localEulerAngles;

            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

            #region 宿題ペン消しゴムなくし
            //宿題
            Drill_chieriTrs.gameObject.SetActive(false);

            ////プレイヤーの宿題
            //HomeworkObjectsTrs.gameObject.SetActive(false);
            //DrillTrs.gameObject.SetActive(false);

            //ペンなくし
            SharpenObj.SetActive(false);
            //消しゴム無くし
            KeshigomuObj.SetActive(false);
            #endregion

            //■智恵理ON
            GirlMeshTrs.gameObject.SetActive(true);
            //智恵理0位置ロック
            DB.isChieriPosLock = true;
            //アニメスピード
            girlAnim.speed = 0.5f;

            //IKオフ
            DOTweenToLAIKSEyes(LAIKEyeS, 0, 0);
            DOTweenToLAIKSHead(LAIKHeadS, 0, 0);

            //智恵理 ベッドで寝
            //ポーズ表情
            ChieriMotion("ベッド横寝", 0f, 0);
            ChieriMotion("f_Sleep100Only", 0f, 2);

            //智恵理スマホベッドの上に
            ChieriSumahoObj.transform.SetParent(GameObjectsTrs);
            GameObject ChieriSumaho_Bed01PosObj = Resources.Load("_PosObj/_ParentPoseObjs/ChieriSumaho_Bed01PosObj") as GameObject;
            ChieriSumahoObj.transform.localPosition = ChieriSumaho_Bed01PosObj.transform.localPosition;
            ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_Bed01PosObj.transform.localEulerAngles;
            ChieriSumahoObj.SetActive(true);
            #endregion
        }
        EventReset();
        yield return null;

        //こもり虫に変え
        KankyouBGMChanger(semiSE.audioSource, "musi2_loop_EQKomori");
        //環境音フェード
        KankyouBGMVolumer(0.3f, 5);

        //走りスピードにしてモーションも走りに
        playerMoveSpeed = 4;
        isKO_PlayerWalk = false;

        #region バッテリー設置
        GameObject BatteryObj;
        //既に編集用に置いてあったら取得
        if (GameObject.Find("Battery") != null)
        { BatteryObj = GameObject.Find("Battery"); }
        else //無ければリソースから
        {
            BatteryObj
                = Instantiate(Resources.Load("_PosObj/0360Syuusin/Battery_Makuramoto") as GameObject
              , GameObjectsTrs, false);
        }
        BatteryObj.name = "Battery";
        DB.sceneMoveDelObjList.Add(BatteryObj);
        #endregion

        //スクールバッグオフ
        SchoolBagTrs.gameObject.SetActive(false);

        #region USBケーブル設置　探索対象に追加
        //既存のUSBケーブルオフ
        ChieriSumahoUSBCableObj.SetActive(false);

        //既に置かれてなければ設置
        if (GameObject.Find("USBCable_BedUnder") == null)
        {
            //探索用ケーブル設置
            GameObject USBCable_BedUnder
                = Instantiate(Resources.Load("_PosObj/0370YukaueKisyou/USBCable_BedUnder") as GameObject
                , GameObjectsTrs
                , false);
            USBCable_BedUnder.name = nameof(USBCable_BedUnder);
        }

        #region 探索対象に追加（Prefabで追加したObjなので、GamgeObject.Findでリストに追加）

        //入ってなければ
        if (TansakuObjList.Contains(GameObject.Find("USBCable_BedUnderObj")) == false)//中身のObj名なことに注意
        { TansakuObjList.Add(GameObject.Find("USBCable_BedUnderObj")); }
        //後は同じ処理
        foreach (GameObject tmpObj in TansakuObjList)
        {
            //該当していたらONに
            if (tmpObj.name == "USBCable_BedUnderObj")
            {
                foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
                { CollObjs.tag = "TansakuSeeCollOnObj"; }
            }
        }
        #endregion

        #endregion


        #region ベッド下、テーブル下移動PosObj設置■探索、移動システム コルーチン始動
        //■探索システム コルーチン始動
        StartCoroutine(TansakuSystemLoad());

        //■隠れ鬼移動システムON
        KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
        //ローディング待ち
        while (isKOSystemLoading) { yield return null; }
        //移動場所06オン
        int tmpListInt = 6;
        KO_KakurePosObjsList[tmpListInt].SetActive(true);
        //寝る場所移動ポイント出現 演出
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[tmpListInt].transform.Find("BedUnderSleepPos").gameObject);
        yield return new WaitForSeconds(0.5f);
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[tmpListInt].transform.Find("GrasstableUnderSleepPos").gameObject);

        //プレイヤー歩き始め判定用コリダー設置
        //プレイヤー位置にコリダーを置いて、そこから出たら発生する仕組み
        GameObject Player04CableFallBoundStandPosObj = Resources.Load("_PosObj/E_Kankin_Day1/SumahoDengen/Player04CableFallBoundStandPosObj") as GameObject;
        KO_KakurePosObjsList[tmpListInt].transform.Find("PlayerStartPosArea01").localPosition
            = Player04CableFallBoundStandPosObj.transform.localPosition;
        //発生するイベントはこれ(検索用メモ)
        //T_PlayerStartPosArea01Exit()



        #region ■使用する探索オブジェ選別



        #endregion




        #endregion


        //ここでコンティニューだったときの
        //yield return new WaitForSeconds(3);
        //EventMove("ToBeContinued");





        yield break;
    }
    IEnumerator F3080()//床上起床
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            nowPlayerLocalScale = DB.playerScale_JougiDeHakariZero;
            //暗幕
            FadeBlack(1, 0);
            #region 宿題ペン消しゴムなくし
            //宿題 位置に
            Drill_chieriTrs.gameObject.SetActive(false);

            //プレイヤーの
            //HomeworkObjectsTrs.gameObject.SetActive(false);
            DrillTrs.gameObject.SetActive(false);

            //ペンなくし
            SharpenObj.SetActive(false);
            //消しゴム無くし
            KeshigomuObj.SetActive(false);
            #endregion //宿題置き
            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        }
        EventReset();

        #region ■デバッグで来た場合は起床場所選択
        if (DB.isDebugMode)
        {
            GameObject KisyouPosSelectText = Instantiate(Resources.Load("EventSystem/GameSelect/KisyouPosSelectText") as GameObject, FadeCanvasObj.transform);
            DB.evMoveDelObjList.Add(KisyouPosSelectText);

            while (true)
            {
                if (DB.isDebugMode && Input.GetKeyDown(KeyCode.V))
                {
                    staticFlagDict["起床ガラステーブル下"] = true;
                    Destroy(KisyouPosSelectText);

                    goto デバッグ起床場所選択抜け;
                }
                else if (DB.isDebugMode && Input.GetKeyDown(KeyCode.B))
                {
                    staticFlagDict["起床ガラステーブル下"] = false;
                    Destroy(KisyouPosSelectText);

                    goto デバッグ起床場所選択抜け;
                }
                yield return null;
            }
        }
        デバッグ起床場所選択抜け:
        #endregion

        //朝環境音に変え
        KankyouBGMChanger(semiSE.audioSource, "residential-area-in-early-morning-1_loop");
        //環境音フェード　はそれぞれ↓のフラグ別の場所に

        #region 設定
        #region //ライト消し（デバッグで一旦なし）
        //if (GameObject.Find("Floor light") != null)
        //{ NullJudgeFind("Floor light").GetComponent<Light>().enabled = false; }
        #endregion

        #region バッテリーとケーブル設置
        GameObject BatteryObj;
        //既に編集用に置いてあったら取得
        if (GameObject.Find("Battery") != null)
        { BatteryObj = GameObject.Find("Battery"); }
        else //無ければリソースから
        {
            BatteryObj
                = Instantiate(Resources.Load("_PosObj/0370YukaueKisyou/BatteryAndCable_Miyadana") as GameObject
              , GameObjectsTrs, false);
        }
        BatteryObj.name = "Battery";
        DB.sceneMoveDelObjList.Add(BatteryObj);
        #endregion


        //スクールバッグオフ
        SchoolBagTrs.gameObject.SetActive(false);

        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);
        //智恵理0位置ロック
        DB.isChieriPosLock = true;
        //アニメスピード
        girlAnim.speed = 0.5f;

        //IKオフ
        DOTweenToLAIKSEyes(LAIKEyeS, 0, 0);
        DOTweenToLAIKSHead(LAIKHeadS, 0, 0);

        //智恵理 ベッド横起き
        //ポーズ表情
        ChieriMotion("ベッド座りポーズ", 0f, 0);

        #region ■左手スマホ取り出し　マスク IK版

        GirlPosToIKTargetPosRot();

        string
            tmpBaseAnimStateName = "片膝立ちミラー手伸ばしループ原点";
        #region スマホ片手いじりPosへ
        GameObject ChieriSumaho_LHand_SekurabeKatatePosObj
            = Resources.Load("_PosObj/_ParentPoseObjs/ChieriSumaho_LHand_SekurabeKatatePosObj") as GameObject;
        ChieriSumahoObj.transform.localPosition = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localEulerAngles;
        #endregion

        StartCoroutine(GirlAnimReadSystem(11));

        //マスクのため、レイヤーのアニメを1フレでベースと同じモーション状態にする（ParameterでNormlizedTimeが指定できる（ただし指定し続けないと静止））
        ChieriMotion(tmpBaseAnimStateName, 0f, 11);//現在のベースアニメと同じアニメ指定
        girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeに

        yield return null;//↑適用に1フレ必要

        ChieriMotion("背比べ左手スマホ取り出し", 0f, 11);

        while (nowGirlAnimOtherLayerClipNameDict[11] != "背比べスマホ取り出し") { yield return null; }
        while (girlAnimOtherLayerNomTimeDict[11] <= 0.375f) { yield return null; }
        isGirlAnimReadSystem = false;
        //スマホObjオン（取り出し）
        ChieriSumahoObj.SetActive(true);
        //画面つける（画面更新も一緒に起動される）
        ChieriSumahoPower(true);

        #region スマホ見
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, new Vector3(0, -0.5f, 0), 1f);
        DOTweenToLAIKSHead(LAIKHeadS, 0.8f, 1);
        #endregion


        #region 左手IKいじり位置へ（力技
        //まずターゲットTween移動
        GameObject IKLHand010_SumahoPosObj
            = Resources.Load("_PosObj/0370YukaueKisyou/IKLHand010_SumahoPosObj") as GameObject;
        IKLHandTargetTrs.DOLocalMove(IKLHand010_SumahoPosObj.transform.localPosition, 1f);
        IKLHandTargetTrs.DOLocalRotate(IKLHand010_SumahoPosObj.transform.localEulerAngles, 1f);

        //少しウェイト下げて
        DOTweenToIKEfPos(IKLHandEf, 0.6f, 0.5f);
        DOTweenToIKEfRot(IKLHandEf, 0.6f, 0.5f);

        yield return new WaitForSeconds(0.5f);
        //ウェイト戻す
        DOTweenToIKEfPos(IKLHandEf, 1, 0.5f);
        DOTweenToIKEfRot(IKLHandEf, 1, 0.5f);
        #endregion

        #endregion

        #region 足にサウンドオブジェ設置
        //WindnoiseSoundObj付与（左足）
        GameObject LFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlLFootTrs);
        DB.evMoveDelObjList.Add(LFootWindnoiseSoundObj);
        LFootWindnoiseSoundObj.GetComponent<AudioSource>().mute = true;//設置時に音鳴るので一時ミュート
                                                                       //SoundObjのPos
        GameObject SoundObj_02_DoorSurinuke_LFootParentPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_02_DoorSurinuke_LFootParentPosObj") as GameObject;
        LFootWindnoiseSoundObj.transform.localPosition = SoundObj_02_DoorSurinuke_LFootParentPosObj.transform.localPosition;

        //WindnoiseSoundObj付与（右足）
        GameObject RFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRFootTrs);
        DB.evMoveDelObjList.Add(RFootWindnoiseSoundObj);
        RFootWindnoiseSoundObj.GetComponent<AudioSource>().mute = true;//設置時に音鳴るので一時ミュート
                                                                       //SoundObjのPos
        GameObject SoundObj_03_DoorSurinuke_RFootParentPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_03_DoorSurinuke_RFootParentPosObj") as GameObject;
        RFootWindnoiseSoundObj.transform.localPosition = SoundObj_03_DoorSurinuke_RFootParentPosObj.transform.localPosition;

        #endregion

        //両方で使う変数事前取得
        GameObject Player05TableUnderKisyouStandRotObj
            = Resources.Load("_PosObj/D_Henai_Day2/YukaueKisyou01/Player05TableUnderKisyouStandRotObj") as GameObject;


        #region ■隠れ鬼移動システム事前ON（ロードかかるほど重くなったので）
        isSeePointTempOff = true;//ポインタ表示OFF
        KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
        //ローディング待ち
        while (isKOSystemLoading) { yield return null; }
        #endregion

        #endregion 設定


        if (staticFlagDict["起床ガラステーブル下"] == false)
        {
            //ベッド下起床の場合
            #region 起きて智恵理台詞と近づき移動
            //プレイヤー ベッドの下位置に
            ////ためしに隠れ鬼のデータを参照して配置
            //GameObject EV_C_KakureOni
            //    = Resources.Load("EventSystem/KakureOni/Prefab/EV_C_KakureOni") as GameObject;
            CameraObjectsTrs.localPosition
                = EV_C_KakureOni.transform.Find("KO_KakurePosObjs").Find("06_NightFloor").Find("BedUnderSleepPos").localPosition;

            //倒れ角度と高さは別
            GameObject Player01BedUnderKisyouPosObj = Resources.Load("_PosObj/D_Henai_Day2/YukaueKisyou01/Player01BedUnderKisyouPosObj") as GameObject;
            Vector3 tmpV3 = CameraObjectsTrs.localPosition;
            tmpV3.y = Player01BedUnderKisyouPosObj.transform.localPosition.y;

            CameraObjectsTrs.localPosition = tmpV3;
            //CameraObjectsTrs.localEulerAngles = Player01BedUnderKisyouPosObj.transform.localEulerAngles;

            //↑変な倒れ角度だったので、RMEのを使う
            StartCoroutine(PlayerFallDownSystemIEnum(0));

            //足のほう見るユーザーカメラ
            GameObject Plyer010UserCamera_BedUnderSleepPosObj
                = Resources.Load("_PosObj/0370YukaueKisyou/Plyer010UserCamera_BedUnderSleepPosObj") as GameObject;
            CameraUserControlTrs.localEulerAngles
                = userCameraControlEul
                = DB.cameraUserResetLocalEul
                = Plyer010UserCamera_BedUnderSleepPosObj.transform.localEulerAngles;


            NovelSetVis("F3080a010");//目が覚めたのは振動
            while (isNovelSetVisIng) { yield return null; }

            //環境音フェード
            KankyouBGMVolumer(1.4f, 2);
            isAnimTriggerRForcePlay = true;
            yield return new WaitForSeconds(2);

            NovelSetVis("F3080a020");//ん？　ああ……
            yield return new WaitForSeconds(1);

            isAnimTriggerRForcePlay = true;

            yield return new WaitForSeconds(1);

            //開幕
            FadeBlack(0, 2);
            yield return new WaitForSeconds(2);

            //足ミュート解除
            LFootWindnoiseSoundObj.GetComponent<AudioSource>().mute =
            RFootWindnoiseSoundObj.GetComponent<AudioSource>().mute = false;



            NovelSetVis("F3080a025");//ちえりがおきたのか！

            while (novelCurrentPageInt < 5) { yield return null; }

            //カメラ揺れ（RMEの）
            StartCoroutine(UTLDOShakePosition
                (0.5f
                , 0.05f
                , 10
                , 90 //Randomness
                , false //Snaping
                , true)
                );


            while (isNovelSetVisIng) { yield return null; }

            //立ち上がり暗幕
            FadeBlack(1, 1);
            yield return new WaitForSeconds(1);

            #region RMEプレイヤー立ち（倒れてたら　倒れから復帰するように立つ）
            if (isPlayerFallDownSystem)
            {
                playerFallDownDefCameraAnchorPos = DB.cameraStandAnchorDefLocalPos;
                playerFallDownDefCameraAnchorEul = Vector3.zero;
                isPlayerFallDownSystem = false;
            }
            else//倒れてないなら一瞬で
            {
                //立ちでカメラリセット（ユーザーカメラ動かさない）
                CameraReset(null,
                    DB.cameraStandAnchorDefLocalPos//Anchorを立ちに
                    , false, null, false, false);
            }
            #endregion

            GameObject Player02BedUnderKisyouStandPosObj = Resources.Load("_PosObj/D_Henai_Day2/YukaueKisyou01/Player02BedUnderKisyouStandPosObj") as GameObject;
            tmpV3.y = Player02BedUnderKisyouStandPosObj.transform.localPosition.y;
            CameraObjectsTrs.localPosition = tmpV3;
            CameraObjectsTrs.localEulerAngles = Player02BedUnderKisyouStandPosObj.transform.localEulerAngles;
            //カメラリセットの値
            DB.cameraUserResetLocalEul = Vector3.zero;

            yield return new WaitForSeconds(1);

            CameraReset();

            Hukidashi("F3080010");//そっか、そうだよね
            yield return new WaitForSeconds(1);


            //立ち上がり開幕
            FadeBlack(0, 1);
            yield return KeyOrWait(3);
            yield return new WaitForSeconds(1);

            Hukidashi("F3080020");//怖いに決まってるよね
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            Hukidashi("・・・");
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            yield return new WaitForSeconds(1);
            NovelSetVis("F3080a030");//何言ってるんだ？
            while (isNovelSetVisIng) { yield return null; }

            #region 探索とかくれおに移動設置
            //■隠れ鬼移動システムON
            KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
            //ローディング待ち
            while (isKOSystemLoading) { yield return null; }
            isSeePointTempOff = false;//ポインタ表示
            //移動場所07オン
            int tmpListInt = 7;
            KO_KakurePosObjsList[tmpListInt].SetActive(true);
            //寝る場所移動ポイント出現 演出
            KO_NewPosPointObjVis
                (KO_KakurePosObjsList[tmpListInt].transform.Find("BedAsiKage").gameObject);

            #endregion
            yield return new WaitForSeconds(1);

            Hukidashi("F3080030");//でもこんな風だと
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            Hukidashi("F3080040");//諦めきれないや
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            yield return new WaitForSeconds(1);
            Hukidashi("F3080050");//・・ごめんね
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            Hukidashi("・・・");
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);


            //IKで足固定準備（座りなおしに対応するために）
            FixedAction(() =>
            {

                IKRFootTargetTrs.position = GirlRFootTrs.position;
                IKRFootTargetTrs.rotation = GirlRFootTrs.rotation;
                DOTweenToIKEfPos(IKRFootEf, 1, 0);
                DOTweenToIKEfRot(IKRFootEf, 1, 0);

                IKLFootTargetTrs.position = GirlLFootTrs.position;
                IKLFootTargetTrs.rotation = GirlLFootTrs.rotation;
                DOTweenToIKEfPos(IKLFootEf, 1, 0);
                DOTweenToIKEfRot(IKLFootEf, 1, 0);

            });
            yield return new WaitForSeconds(3);

            #region 左手スマホいじり位置もどし　左腕マスク外し　左手指マスクON（スマホ持ち）

            ////スマホObjオフ（しまう）
            //ChieriSumahoObj.SetActive(false);

            //ウェイト戻す
            DOTweenToIKEfPos(IKLHandEf, 0, 2f);
            DOTweenToIKEfRot(IKLHandEf, 0, 2f);

            ChieriMotion("_noData", 0f, 11);
            ChieriMotion("背比べ左手スマホいじり", 1f, 18);

            #endregion

            #region スマホ見やめ
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            DOTweenToLAIKSEyes(LAIKEyeS, 0, 0f);
            DOTweenToLAIKSHead(LAIKHeadS, 0, 1);
            #endregion


            Hukidashi("F3080055");//ふぅよっし
            ChieriMotion("ベッドから立ち上がり", 0f, 0);
            yield return new WaitForSeconds(0.7f);
            ChieriMotion("ベッド座りポーズ", 0.6f, 0);

            yield return KeyOrWait(3);

            yield return new WaitForSeconds(0.6f);

            //IK切り
            DOTweenToIKEfPos(IKRFootEf, 0, 0f);
            DOTweenToIKEfRot(IKRFootEf, 0, 0f);
            DOTweenToIKEfPos(IKLFootEf, 0, 0f);
            DOTweenToIKEfRot(IKLFootEf, 0, 0f);


            Hukidashi("F3080060");//起きてる？
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            yield return new WaitForSeconds(0.5f);
            NovelSetVis("F3080a040");//え？
            while (isNovelSetVisIng) { yield return null; }

            Hukidashi("F3080070");//いるよね
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            Hukidashi("F3080080");//探さない
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            Hukidashi("F3080090");//好きにしてて
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            Hukidashi("F3080100");//虫として
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            Hukidashi("F3080110");//生きてていいよ
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            Hukidashi("F3080120");//一瞬だけど
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            #endregion
            #region ■左手スマホ取り出し　マスク IK版

            GirlPosToIKTargetPosRot();

            //string
            //    tmpBaseAnimStateName = "片膝立ちミラー手伸ばしループ原点";
            #region スマホ片手いじりPosへ
            //GameObject ChieriSumaho_LHand_SekurabeKatatePosObj
            //    = Resources.Load("_PosObj/_ParentPoseObjs/ChieriSumaho_LHand_SekurabeKatatePosObj") as GameObject;
            ChieriSumahoObj.transform.DOLocalMove(ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localPosition, 3f);
            ChieriSumahoObj.transform.DOLocalRotate(ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localEulerAngles, 3f);
            #endregion

            StartCoroutine(GirlAnimReadSystem(11));

            //マスクのため、レイヤーのアニメを1フレでベースと同じモーション状態にする（ParameterでNormlizedTimeが指定できる（ただし指定し続けないと静止））
            ChieriMotion(tmpBaseAnimStateName, 1f, 11);//現在のベースアニメと同じアニメ指定
            girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeに

            yield return null;//↑適用に1フレ必要

            ChieriMotion("背比べ左手スマホ取り出し", 0f, 11);

            while (nowGirlAnimOtherLayerClipNameDict[11] != "背比べスマホ取り出し") { yield return null; }
            while (girlAnimOtherLayerNomTimeDict[11] <= 0.375f) { yield return null; }
            isGirlAnimReadSystem = false;
            //スマホObjオン（取り出し）
            ChieriSumahoObj.SetActive(true);
            //画面つける（画面更新も一緒に起動される）
            ChieriSumahoPower(true);

            #region スマホ見
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
            FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, new Vector3(0, -0.5f, 0), 1f);
            DOTweenToLAIKSHead(LAIKHeadS, 0.8f, 1);
            #endregion


            #region 左手IKいじり位置へ（力技
            //まずターゲットTween移動
            //GameObject IKLHand010_SumahoPosObj
            //    = Resources.Load("_PosObj/0370YukaueKisyou/IKLHand010_SumahoPosObj") as GameObject;
            IKLHandTargetTrs.DOLocalMove(IKLHand010_SumahoPosObj.transform.localPosition, 1f);
            IKLHandTargetTrs.DOLocalRotate(IKLHand010_SumahoPosObj.transform.localEulerAngles, 1f);

            //少しウェイト下げて
            DOTweenToIKEfPos(IKLHandEf, 0.6f, 0.5f);
            DOTweenToIKEfRot(IKLHandEf, 0.6f, 0.5f);

            yield return new WaitForSeconds(0.5f);
            //ウェイト戻す
            DOTweenToIKEfPos(IKLHandEf, 1, 0.5f);
            DOTweenToIKEfRot(IKLHandEf, 1, 0.5f);
            #endregion

            #endregion

            yield return new WaitForSeconds(2);


            #region 時間補正切られ意識混濁

            //環境音フェード
            KankyouBGMVolumer(0f, 5);
            NovelSetVis("F3080a050");//探さない？自由？　！？
            while (novelCurrentPageInt < 2) { yield return null; }
            isKOSystem = false;
            isTansakuSystem = false;

            PPEffect_ZikanHosei();
            //心音ループ
            StartCoroutine(ActionLoopSystemCor(() =>
            { SEPlay(UISEObj, "心臓音101025_IEZ001", 0.3f); }
            , 0.7f, Mathf.Infinity));


            //体傾き
            Vector3 tmpKatamukiRotA = CameraObjectsTrs.localEulerAngles;
            CameraObjectsTrs.DOLocalRotate(new Vector3(tmpKatamukiRotA.x + 14, tmpKatamukiRotA.y, tmpKatamukiRotA.z + 14), 1)
                .OnComplete(() =>
                {
                    CameraObjectsTrs.DOLocalRotate(tmpKatamukiRotA
                        , 1);
                });

            isPlayerUniqueMotion = true;
            PlayerMotion("四つん這い両手_モブ", 1f, 0);


            Hukidashi("F3080130");//少しだけど
            ChieriMotion("背比べ左手スマホいじり", 0f, 11);
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            #region 左手スマホいじり位置もどし　左腕マスク外し　左手指マスクON（スマホ持ち）

            ////スマホObjオフ（しまう）
            //ChieriSumahoObj.SetActive(false);

            //ウェイト戻す
            DOTweenToIKEfPos(IKLHandEf, 0, 1f);
            DOTweenToIKEfRot(IKLHandEf, 0, 1f);

            ChieriMotion("_noData", 0f, 11);
            ChieriMotion("背比べ左手スマホいじり", 1f, 18);

            #endregion

            #region スマホ見やめ
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            DOTweenToLAIKSEyes(LAIKEyeS, 0, 0f);
            DOTweenToLAIKSHead(LAIKHeadS, 0, 1);
            #endregion

            //ゆっくりになりながら立ち上がり
            ChieriMotion("ベッドから立ち上がり", 0f, 0);
            //Tweener slowTweener = DOTween.To(() => testFloat01, (x) => testFloat01 = x, testFloat01, 0f);//ダミー
            //slowTweener.Kill();
            //slowTweener =
            DOTween.To(() => girlAnim.speed, (x) => girlAnim.speed = x, 0.042f, 12f);
            Hukidashi("F3080135");//待ってあげる
            yield return null;


            //立ち上がるまで待ち
            StartCoroutine(GirlAnimReadSystem());
            while (girlAnimNomTime <= 1f)
            { yield return null; }

            ChieriMotion("ベッドからテーブルへ", 0f, 0);
            yield return null;
            //歩きが終わる直前か、ノベルが指定段階に入ったら黒フェード
            while (true)
            {
                //歩き終わりになったら
                if (girlAnimNomTime >= 0.57f)
                {
                    goto 視界眩み;
                }
                //ノベルがおわったら
                else if (isNovelSetVisIng == false)
                {
                    goto 視界眩み;
                }
                yield return null;
            }
            視界眩み:
            NovelSetVis("F3080a055");//眩む

            isGirlAnimReadSystem = false;
            FadeBlack(1, 4, false, Ease.InOutBounce);

            while (isNovelSetVisIng) { yield return null; }

            isActionLoopSystem = false;

            //ボリューム下げ
            LFootWindnoiseSoundObj.GetComponent<AudioSource>().DOFade(0f, 4);
            RFootWindnoiseSoundObj.GetComponent<AudioSource>().DOFade(0f, 4);

            yield return new WaitForSeconds(2);
            NovelSetVis("F3080a060");//そういえば死ぬ前
            while (isNovelSetVisIng) { yield return null; }


            isPlayerUniqueMotion = false;

            yield return new WaitForSeconds(3);

            #endregion

        }
        else
        {
            //テーブル下起床の場合
            #region 起きて智恵理台詞と近づき移動
            //プレイヤー ベッドの下位置に
            ////ためしに隠れ鬼のデータを参照して配置
            //GameObject EV_C_KakureOni
            //    = Resources.Load("EventSystem/KakureOni/Prefab/EV_C_KakureOni") as GameObject;
            CameraObjectsTrs.localPosition
                = EV_C_KakureOni.transform.Find("KO_KakurePosObjs").Find("06_NightFloor").Find("GrasstableUnderSleepPos").localPosition;

            //RMEの倒れ
            StartCoroutine(PlayerFallDownSystemIEnum(0));

            //倒れ角度と高さは別
            GameObject Player01BedUnderKisyouPosObj = Resources.Load("_PosObj/D_Henai_Day2/YukaueKisyou01/Player01BedUnderKisyouPosObj") as GameObject;
            Vector3 tmpV3 = CameraObjectsTrs.localPosition;
            tmpV3.y = Player01BedUnderKisyouPosObj.transform.localPosition.y;

            CameraObjectsTrs.localPosition = tmpV3;
            //CameraObjectsTrs.localEulerAngles = Player01BedUnderKisyouPosObj.transform.localEulerAngles;

            #region 左手スマホいじり位置もどし　左腕マスク外し　左手指マスクON（スマホ持ち）

            ////スマホObjオフ（しまう）
            //ChieriSumahoObj.SetActive(false);

            //ウェイト戻す
            DOTweenToIKEfPos(IKLHandEf, 0, 2f);
            DOTweenToIKEfRot(IKLHandEf, 0, 2f);

            ChieriMotion("_noData", 0f, 11);
            ChieriMotion("背比べ左手スマホいじり", 1f, 18);

            #endregion

            #region スマホ見やめ
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            DOTweenToLAIKSEyes(LAIKEyeS, 0, 0f);
            DOTweenToLAIKSHead(LAIKHeadS, 0, 1);
            #endregion

            yield return new WaitForSeconds(2);

            Hukidashi("F3080060");//寝てるかな？
            yield return new WaitForSeconds(1);
            //環境音フェード
            KankyouBGMVolumer(1.4f, 5);
            NovelSetVis("■F3080b010");//目が覚めたのは声
            while (novelCurrentPageInt < 1) { yield return null; }

            //開幕
            FadeBlack(0, 2);
            yield return new WaitForSeconds(2);
            //足ミュート解除
            LFootWindnoiseSoundObj.GetComponent<AudioSource>().mute =
            RFootWindnoiseSoundObj.GetComponent<AudioSource>().mute = false;

            NovelSetVis("F3080b020");//ん？　ああ……
            while (isNovelSetVisIng) { yield return null; }

            //立ち上がり暗幕
            FadeBlack(1, 0.5f);
            yield return new WaitForSeconds(0.5f);

            #region RMEプレイヤー立ち（倒れてたら　倒れから復帰するように立つ）
            if (isPlayerFallDownSystem)
            {
                playerFallDownDefCameraAnchorPos = DB.cameraStandAnchorDefLocalPos;
                playerFallDownDefCameraAnchorEul = Vector3.zero;
                isPlayerFallDownSystem = false;
            }
            else//倒れてないなら一瞬で
            {
                //立ちでカメラリセット（ユーザーカメラ動かさない）
                CameraReset(null,
                    DB.cameraStandAnchorDefLocalPos//Anchorを立ちに
                    , false, null, false, false);
            }
            #endregion

            GameObject Plyer015_TableUnderWakePosObj
                = Resources.Load("_PosObj/0370YukaueKisyou/Plyer015_TableUnderWakePosObj") as GameObject;
            CameraObjectsTrs.localPosition = Plyer015_TableUnderWakePosObj.transform.localPosition;
            CameraObjectsTrs.localEulerAngles = Plyer015_TableUnderWakePosObj.transform.localEulerAngles;
            //カメラリセット値変更してリセット
            CameraReset(Plyer015_TableUnderWakePosObj.transform.localEulerAngles
                , DB.cameraStandAnchorDefLocalPos);//Anchorを立ちに

            yield return new WaitForSeconds(0.5f);

            //立ち上がり開幕
            FadeBlack(0, 0.5f);
            yield return new WaitForSeconds(1);
            NovelSetVis("F3080b030");//智恵理もおきてる
            while (isNovelSetVisIng) { yield return null; }

            #region 探索とかくれおに移動設置
            //■隠れ鬼移動システムON
            KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
            //ローディング待ち
            while (isKOSystemLoading) { yield return null; }
            isSeePointTempOff = false;//ポインタ表示
            //移動場所07オン
            int tmpListInt = 7;
            KO_KakurePosObjsList[tmpListInt].SetActive(true);
            //寝る場所移動ポイント出現 演出
            KO_NewPosPointObjVis
                (KO_KakurePosObjsList[tmpListInt].transform.Find("ChieriHumiPos").gameObject);

            //カーペット出るときに台詞用
            EnumCarpet_Area = enumCarpet_Area.起きぬけ脱出前;

            #endregion
            yield return new WaitForSeconds(4);

            Hukidashi("F3080070");//でも部屋にはいるよね
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            yield return new WaitForSeconds(4);

            Hukidashi("F3080080");//探さない
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            Hukidashi("F3080090");//好きにしてて
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            Hukidashi("F3080100");//虫として
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            Hukidashi("F3080110");//生きてていいよ
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            Hukidashi("F3080120");//少しだけだけど
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            #region ■左手スマホ取り出し　マスク IK版

            GirlPosToIKTargetPosRot();

            //string
            //    tmpBaseAnimStateName = "片膝立ちミラー手伸ばしループ原点";
            #region スマホ片手いじりPosへ
            //GameObject ChieriSumaho_LHand_SekurabeKatatePosObj
            //    = Resources.Load("_PosObj/_ParentPoseObjs/ChieriSumaho_LHand_SekurabeKatatePosObj") as GameObject;
            ChieriSumahoObj.transform.DOLocalMove(ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localPosition, 3f);
            ChieriSumahoObj.transform.DOLocalRotate(ChieriSumaho_LHand_SekurabeKatatePosObj.transform.localEulerAngles, 3f);
            #endregion

            StartCoroutine(GirlAnimReadSystem(11));

            //マスクのため、レイヤーのアニメを1フレでベースと同じモーション状態にする（ParameterでNormlizedTimeが指定できる（ただし指定し続けないと静止））
            ChieriMotion(tmpBaseAnimStateName, 1f, 11);//現在のベースアニメと同じアニメ指定
            girlAnim.SetFloat("現在ベースアニメのNormalizedTime", girlAnimNomTime);//同じNomTimeに

            yield return null;//↑適用に1フレ必要

            ChieriMotion("背比べ左手スマホ取り出し", 0f, 11);

            while (nowGirlAnimOtherLayerClipNameDict[11] != "背比べスマホ取り出し") { yield return null; }
            while (girlAnimOtherLayerNomTimeDict[11] <= 0.375f) { yield return null; }
            isGirlAnimReadSystem = false;
            //スマホObjオン（取り出し）
            ChieriSumahoObj.SetActive(true);
            //画面つける（画面更新も一緒に起動される）
            ChieriSumahoPower(true);

            #region スマホ見
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
            FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, new Vector3(0, -0.5f, 0), 1f);
            DOTweenToLAIKSHead(LAIKHeadS, 0.8f, 1);
            #endregion


            #region 左手IKいじり位置へ（力技
            //まずターゲットTween移動
            //GameObject IKLHand010_SumahoPosObj
            //    = Resources.Load("_PosObj/0370YukaueKisyou/IKLHand010_SumahoPosObj") as GameObject;
            IKLHandTargetTrs.DOLocalMove(IKLHand010_SumahoPosObj.transform.localPosition, 1f);
            IKLHandTargetTrs.DOLocalRotate(IKLHand010_SumahoPosObj.transform.localEulerAngles, 1f);

            //少しウェイト下げて
            DOTweenToIKEfPos(IKLHandEf, 0.6f, 0.5f);
            DOTweenToIKEfRot(IKLHandEf, 0.6f, 0.5f);

            yield return new WaitForSeconds(0.5f);
            //ウェイト戻す
            DOTweenToIKEfPos(IKLHandEf, 1, 0.5f);
            DOTweenToIKEfRot(IKLHandEf, 1, 0.5f);
            #endregion

            #endregion

            #endregion

            #region 時間補正切られ意識混濁 近づきすぎると踏まれるように

            //環境音フェード
            KankyouBGMVolumer(0f, 5);
            yield return new WaitForSeconds(2f);
            NovelSetVis("F3080a050");//何言ってんだ・・？　！？
            isKOSystem = false;
            isTansakuSystem = false;

            while (novelCurrentPageInt < 2) { yield return null; }


            PPEffect_ZikanHosei();
            //心音ループ
            StartCoroutine(ActionLoopSystemCor(() =>
            { SEPlay(UISEObj, "心臓音101025_IEZ001", 0.3f); }
            , 0.7f, Mathf.Infinity));

            ////体傾き以前の
            //Vector3 tmpKatamukiRotA = CameraObjectsTrs.localEulerAngles;
            //CameraObjectsTrs.DOLocalRotate(new Vector3(tmpKatamukiRotA.x + 14, tmpKatamukiRotA.y, tmpKatamukiRotA.z + 14), 3)
            //    .SetEase(Ease.InOutBack);
            //体傾き
            Vector3 tmpKatamukiRotB = CameraObjectsTrs.localEulerAngles;
            CameraObjectsTrs.DOLocalRotate(new Vector3(tmpKatamukiRotB.x + 14, tmpKatamukiRotB.y, tmpKatamukiRotB.z + 14), 1)
                .OnComplete(() =>
                {
                    CameraObjectsTrs.DOLocalRotate(tmpKatamukiRotB
                        , 1);
                });


            isPlayerUniqueMotion = true;
            PlayerMotion("四つん這い両手_モブ", 1f, 0);


            Hukidashi("F3080130");//少しだけど
            ChieriMotion("背比べ左手スマホいじり", 0f, 11);
            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

            #region 左手スマホいじり位置もどし　左腕マスク外し　左手指マスクON（スマホ持ち）

            ////スマホObjオフ（しまう）
            //ChieriSumahoObj.SetActive(false);

            //ウェイト戻す
            DOTweenToIKEfPos(IKLHandEf, 0, 2f);
            DOTweenToIKEfRot(IKLHandEf, 0, 2f);

            ChieriMotion("_noData", 0f, 11);
            ChieriMotion("背比べ左手スマホいじり", 1f, 18);

            #endregion

            #region スマホ見やめ
            ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
            DOTweenToLAIKSEyes(LAIKEyeS, 0, 0f);
            DOTweenToLAIKSHead(LAIKHeadS, 0, 1);
            #endregion

            //ゆっくりになりながら立ち上がり
            ChieriMotion("ベッドから立ち上がり", 0f, 0);

            DOTween.To(() => girlAnim.speed, (x) => girlAnim.speed = x, 0.042f, 12f);
            Hukidashi("F3080135");//待っててあげるね
            yield return null;


            //立ち上がるまで待ち
            StartCoroutine(GirlAnimReadSystem());
            while (girlAnimNomTime <= 1f)
            { yield return null; }


            ChieriMotion("ベッドからテーブルへ", 0f, 0);
            yield return null;

            #region ■if カーペットから出てなかったら何も起きずに眩み倒れへ
            if (EnumCarpet_Area == enumCarpet_Area.起きぬけ脱出前)
            {
                EnumCarpet_Area = enumCarpet_Area.終了;
                Debug.Log(EnumCarpet_Area);
                //歩きが終わる直前か、ノベルが指定段階に入ったら黒フェード
                while (true)
                {
                    //歩き終わりになったら
                    if (girlAnimNomTime >= 0.57f)
                    {
                        goto 視界眩み;
                    }
                    //ノベルが16ページになったら
                    else if (novelCurrentPageInt > 17)
                    {
                        NovelSetVis("F3080a055");//眩む
                        goto 視界眩み;
                    }
                    yield return null;
                }
            }
            Debug.Log(EnumCarpet_Area);
            #endregion

            #region ■カーペットから出ていたら 踏まれるかギリギリか

            //この場合のみ待ち
            yield return new WaitForSeconds(15);
            NovelSetVis("F3080b050a010");//それ以上に、途轍もない現実にやっと気づく。

            //足のコリダーオフ（VRBlock消し）
            GameObject.Find("Tsumasaki_R_coll_Convex").gameObject.SetActive(false);

            //踏み潰され判定用コリダー取得
            Collider Tsumasaki_R_coll =
                FixedMoveChieriColliderFollderObj.transform.Find("BoneBip001 R Foot/Tsumasaki_R_coll").GetComponent<Collider>();

            //※■↑だと貫通しちゃうので、当たり判定は専用の大きめコリダーを設置
            GameObject KisyouHumareColliderObj
                = Instantiate(Resources.Load("_PosObj/0370YukaueKisyou/KisyouHumareColliderObj") as GameObject);
            KisyouHumareColliderObj.transform.SetParent(GirlRFootTrs, false);

            Collider kisyouHumareCollider
                = KisyouHumareColliderObj.GetComponent<Collider>();





            //接近量計算用Float（通り過ぎ度計るために）
            float mostNearFloat = Vector3.Distance(PlayerTargetTrs.position, Tsumasaki_R_coll.transform.position);

            #region ■ループ 踏まれるか ニアミスか 離れたままか判定
            while (true)
            {
                //単純に当たったら踏み潰され判定
                if (nowVRBlockThroughCollList.Contains(kisyouHumareCollider))
                { goto 踏み潰され; }

                //通り過ぎたら
                if (girlAnimNomTime >= 0.29f)
                { goto 踏まれず通り過ぎ; }

                //歩き終わりまで無事なら
                if (girlAnimNomTime >= 0.59f)
                {
                    goto 視界眩み;
                }

                ////ノベルが16ページになったら
                //else if (novelCurrentPageInt > 16)
                //{
                //    goto 視界眩み;
                //}

                yield return null;
            }
            #endregion

            踏まれず通り過ぎ:
            #region
            NovelSetVis("F3080b050b010");//息を止め続けた。
            while (true)
            {
                //歩き終わりになったら
                if (girlAnimNomTime >= 0.57f)
                {
                    goto 視界眩み;
                }
                //ノベルが14ページになったら
                else if (novelCurrentPageInt > 14)
                {
                    goto 視界眩み;
                }
                yield return null;
            }
            #endregion

            踏み潰され:
            #region
            isActionLoopSystem = false;
            isPlayerUniqueMotion = false;

            //蹴られ判定コリダーObjオフ
            KisyouHumareColliderObj.SetActive(false);

            //足のコリダーオフ（VRBlock判定消し）
            Tsumasaki_R_coll.gameObject.SetActive(false);

            #region プレイヤーダメージとカメラ倒れ 直

            //フラッシュと音とダメージ
            FadeWhite(1, 0);
            FadeBlack(1, 0);
            SEPlay("soccer-ball1", 3);
            SEPlay("足音・べた足-08", 3);
            yield return new WaitForSeconds(0.05f);
            FadeWhite(0, 0);
            FadeBlack(0.5f, 3);

            //TPSプレイヤー倒れモーション
            isPlayerUniqueMotion = true;
            PlayerMotion("liedown_00_Re", 0.2f, 0);

            Vector3
                tmpDefCameraPosTwo = CameraAnchorTrs.localPosition,
                tmpDefCameraEulTwo = CameraAnchorTrs.localEulerAngles,
                tmpFlowCameraPosTwo = new Vector3(0, 1.2f, 0),
                tmpSlipCameraPosTwo = new Vector3(0, 0.2f, -0.7f),
                tmpSlipCameraEulTwo = new Vector3(-45, 0, 0);

            CameraAnchorTrs.DOLocalMove(tmpFlowCameraPosTwo, 0.05f);
            yield return new WaitForSeconds(0.05f);
            CameraAnchorTrs.DOLocalMove(tmpSlipCameraPosTwo, 0.5f).SetEase(Ease.OutBounce);
            yield return new WaitForSeconds(0.05f);
            CameraAnchorTrs.DOLocalMove(tmpDefCameraPosTwo, 0.05f);
            yield return new WaitForSeconds(0.05f);

            CameraAnchorTrs.DOLocalMove(tmpSlipCameraPosTwo, 0.5f).SetEase(Ease.OutBounce);
            CameraAnchorTrs.DOLocalRotate(tmpSlipCameraEulTwo, 0.2f).SetEase(Ease.InSine);



            #endregion

            //プレイヤー踏まれ位置にすべり移動
            GameObject Plyer020_KerareSuberiPosObj
                = Resources.Load("_PosObj/0370YukaueKisyou/Plyer020_KerareSuberiPosObj") as GameObject;
            CameraObjectsTrs.DOLocalMove(Plyer020_KerareSuberiPosObj.transform.localPosition, 2)
                .SetEase(Ease.OutQuint);
            CameraObjectsTrs.DOLocalRotate(Plyer020_KerareSuberiPosObj.transform.localEulerAngles, 2)
                .SetEase(Ease.OutQuint);

            SEPlay("dan01", 0.5f);
            SEPlay("soccer-ball1", 1);
            SEPlay("足音・べた足-08", 1);


            #region //以前の踏まれイベント
            //NovelSetVis("F3080b050a020");//ここで途絶えた。   

            ////FadeBlack(1, 1f, false, Ease.OutBounce);
            ////足ボリューム消し
            //LFootWindnoiseSoundObj.GetComponent<AudioSource>().volume =
            //RFootWindnoiseSoundObj.GetComponent<AudioSource>().volume = 0;

            ////足離れ判定のためにObj設置
            //GameObject tmpCrashCameraPosObj = new GameObject();
            //tmpCrashCameraPosObj.name = "tmpCrashCameraPosObj";
            //tmpCrashCameraPosObj.transform.position = PlayerTargetTrs.position;



            //////足にペアレントしてへばりつき演出
            ////MoreLateAction(() =>
            ////{
            ////    CameraObjectsTrs.SetParent(GirlRFootTrs);

            ////    CameraObjectsTrs.DOLocalMove(new Vector3(
            ////        CameraObjectsTrs.localPosition.x + 0.009f,//xが高さ （回転しているので近づく）
            ////        CameraObjectsTrs.localPosition.y,
            ////        CameraObjectsTrs.localPosition.z)
            ////        , 1f).SetEase(Ease.InBounce);

            ////    //回転は暗幕後にしても良いかも
            ////    CameraObjectsTrs.DOLocalRotate(new Vector3(0, 90, 0), 0.8f);

            ////});

            ////↑変な倒れ角度だったので、RMEのを使う
            //StartCoroutine(PlayerFallDownSystemIEnum(0));


            //SEPlay("pakipoki", 0.4f);
            ////赤フラッシュ
            //FadeColor(Color.red, 1, 0.05f, false); yield return new WaitForSeconds(0.05f); FadeColor(Color.red, 0, 0.05f, false);

            //#region //ダメージ関連削除
            //////コンティニューのためにHP取得
            ////float tmpPlayerHP = DB.playerHPFloat;

            //////ダメージ
            ////PlayerHPAddSub(-(DB.playerHPMaxFloat / 2));
            ////yield return new WaitForSeconds(0.2f);

            //////ダメージ
            ////PlayerHPAddSub(-(DB.playerHPMaxFloat / 2));
            //#endregion


            //FadeColor(Color.red, 1, 0.05f, false); yield return new WaitForSeconds(0.05f); FadeColor(Color.red, 0, 0.05f, false);
            //yield return new WaitForSeconds(0.5f);



            //////歩き去り早める（長いので）
            ////girlAnim.speed = 0.14f;

            ////テストで遅く
            //girlAnim.speed = 0.000001f;

            ////足はなれるまで待機
            //while (Vector3.Distance(tmpCrashCameraPosObj.transform.position, Tsumasaki_R_coll.transform.position) < 17)
            //{
            //    Debug.Log(Vector3.Distance(PlayerTargetTrs.position, Tsumasaki_R_coll.transform.position));

            //    if (Input.GetKey(KeyCode.V))
            //    {
            //        girlAnim.speed += 0.001f;
            //        Debug.Log(girlAnim.speed);
            //    }

            //    yield return null;


            //}

            #endregion

            //足かぶさるまで待機
            StartCoroutine(GirlAnimReadSystem());
            while (nowGirlAnimClipName != "ベッドからテーブルへ") { yield return null; }//クリップネーム自体は逆再生ではない
            while (girlAnimNomTime <= 0.29f) { yield return null; }
            {
                //デバッグ
                if (Input.GetKey(KeyCode.V))
                {
                    girlAnim.speed += 0.001f;
                    Debug.Log(girlAnim.speed);
                }
                yield return null;
            }

            //ちえりアニメ遅く
            DOTween.To(() => girlAnim.speed, (x) => girlAnim.speed = x
            , 0.000001f
            , 1f);

            //足ボリューム消し
            LFootWindnoiseSoundObj.GetComponent<AudioSource>().volume =
            RFootWindnoiseSoundObj.GetComponent<AudioSource>().volume = 0;

            NovelSetVis("F3080b050a020");//あ。　理解した
            while (isNovelSetVisIng) { yield return null; }

            //ちえりアニメ再開
            DOTween.To(() => girlAnim.speed, (x) => girlAnim.speed = x
            , 0.1f
            , 4f);

            //ボリューム少し上げ
            LFootWindnoiseSoundObj.GetComponent<AudioSource>().DOFade(0.5f, 1);
            RFootWindnoiseSoundObj.GetComponent<AudioSource>().DOFade(0.5f, 1);

            //暗幕
            FadeBlack(1, 1f);
            yield return new WaitForSeconds(1f);

            //足ボリューム消し
            LFootWindnoiseSoundObj.GetComponent<AudioSource>().volume =
            RFootWindnoiseSoundObj.GetComponent<AudioSource>().volume = 0;

            isAnimTriggerRForcePlay = true;

            SEPlay("pakipoki", 0.8f);
            //赤フラッシュ
            FadeColor(Color.red, 1, 0.05f, false); yield return new WaitForSeconds(0.05f); FadeColor(Color.red, 0, 0.05f, false);

            FadeColor(Color.red, 1, 0.05f, false); yield return new WaitForSeconds(0.05f); FadeColor(Color.red, 0, 0.05f, false);


            //へばりつき視界開きタイミングまで待機
            while (nowGirlAnimClipName != "ベッドからテーブルへ") { yield return null; }//クリップネーム自体は逆再生ではない
            while (girlAnimNomTime <= 0.42f) { yield return null; }

            //プレイヤー足裏へばりつき
            GameObject Plyer030_PareRFoot_HebaritukiPosObj
                = Resources.Load("_PosObj/0370YukaueKisyou/Plyer030_PareRFoot_HebaritukiPosObj") as GameObject;

            CameraObjectsTrs.SetParent(GirlRFootTrs);
            CameraObjectsTrs.localPosition = Plyer030_PareRFoot_HebaritukiPosObj.transform.localPosition;
            CameraObjectsTrs.localEulerAngles = Plyer030_PareRFoot_HebaritukiPosObj.transform.localEulerAngles;

            girlAnim.speed = 0.04f;

            FadeBlack(0, 4, false, Ease.OutBounce);
            //ボリューム少し上げ
            LFootWindnoiseSoundObj.GetComponent<AudioSource>().DOFade(0.5f, 3);
            RFootWindnoiseSoundObj.GetComponent<AudioSource>().DOFade(0.5f, 3);

            //朝環境音に変え
            KankyouBGMChanger(semiSE.audioSource, "residential-area-in-early-morning-1_loop");
            KankyouBGMVolumer(1f, 3);

            //へばり落ちタイミングまで待機
            while (nowGirlAnimClipName != "ベッドからテーブルへ") { yield return null; }//クリップネーム自体は逆再生ではない
            while (girlAnimNomTime <= 0.445f) { yield return null; }


            CameraObjectsTrs.SetParent(GameObjectsTrs, true);

            //プレイヤーへばり落ち移動
            GameObject Plyer040_HebariOtiPosobj
                = Resources.Load("_PosObj/0370YukaueKisyou/Plyer040_HebariOtiPosobj") as GameObject;
            CameraObjectsTrs.DOLocalMove(Plyer040_HebariOtiPosobj.transform.localPosition, 1)
                .SetEase(Ease.OutBounce);
            CameraObjectsTrs.DOLocalRotate(Plyer040_HebariOtiPosobj.transform.localEulerAngles, 1)
                .SetEase(Ease.OutBounce);

            yield return new WaitForSeconds(0.2f);
            SEPlay("dan01", 0.5f);
            SEPlay("soccer-ball1", 1);
            SEPlay("足音・べた足-08", 1);




            #region　//以前の足から離れ落ちる演出（重力利用）
            //yield return new WaitForSeconds(0.3f);
            //FixedAction(() =>
            //{
            //    CameraObjectsTrs.SetParent(GameObjectsTrs);
            //    //ANの重力設定のみロード
            //    AN_SetPlayerRigidbody();
            //    AN_GravitiDragBool = true;//FixedUpdateのやつON
            //    //rigid監視スタート
            //    StartCoroutine(RigidReadSystem());
            //    CameraObjectsTrs.DOLocalRotate(new Vector3(340, 90, 90), 1);

            //});

            #endregion

            PPEffect_FadeToDef(15);


            NovelSetVis("F3080b050a030");//虫の最後   

            while (isNovelSetVisIng &&
                   girlAnimNomTime <= 0.57f)
            { yield return null; }

            KankyouBGMVolumer(2f, 5);

            FadeColor(Color.red, 1, 3f);
            yield return new WaitForSeconds(4);
            FadeBlack(1, 0f);
            yield return null;
            FadeColor(Color.red, 0, 3f);

            KankyouBGMVolumer(0f, 5);
            yield return new WaitForSeconds(4);

            //メニュー強制開き
            StartCoroutine(MenuSystemIEnum(true, false, true));

            yield break;


            #region //以前の■コンティニューセレクト
            //GameObject ContinueSelectText = Instantiate(Resources.Load("EventSystem/GameSelect/ContinueSelectText") as GameObject, FadeCanvasObj.transform);
            //DB.evMoveDelObjList.Add(ContinueSelectText);

            ////DB.playerHPFloat = tmpPlayerHP;
            ////PPEffect_FadeToDef(0);
            //AN_GravitiDragBool = false;
            //isRigidReadSystem = false;
            //Destroy(CameraObjectsTrs.GetComponent<Rigidbody>());

            //while (true)
            //{
            //    if (Input.GetKeyDown(KeyCode.V))
            //    {
            //        Destroy(ContinueSelectText);

            //        EventMove("監禁1_床上起床");
            //        yield break;
            //    }
            //    else if (Input.GetKeyDown(KeyCode.B))
            //    {
            //        Destroy(ContinueSelectText);

            //        EventMove("タイトル");
            //        yield break;
            //    }
            //    yield return null;
            //}
            #endregion

            #endregion

            視界眩み:
            #region
            isGirlAnimReadSystem = false;
            FadeBlack(1, 4, false, Ease.InOutBounce);

            while (isNovelSetVisIng) { yield return null; }

            isActionLoopSystem = false;

            //足ボリューム下げ
            LFootWindnoiseSoundObj.GetComponent<AudioSource>().DOFade(0f, 4);
            RFootWindnoiseSoundObj.GetComponent<AudioSource>().DOFade(0f, 4);

            yield return new WaitForSeconds(2);
            NovelSetVis("F3080a060");//そういえば死ぬ前
            while (isNovelSetVisIng) { yield return null; }


            isPlayerUniqueMotion = false;

            yield return new WaitForSeconds(2);

            #endregion

            #endregion

            #endregion

        }

        #region 目覚めて歩き出し
        FadeBlack(1, 0);
        girlAnim.speed = 0.042f;

        ChieriMotion("寝そべり足パタループ", 0f, 0);
        ChieriMotion("f_リラックス01", 0f, 2);

        //左手指スマホ持ちマスクはずし
        ChieriMotion("_noData", 0f, 18);

        //カーペット出るときに台詞出さない用
        EnumCarpet_Area = enumCarpet_Area.終了;

        #region スマホ、床置き（元タブレット）

        //スマホObjペアレントはずし
        ChieriSumahoObj.transform.SetParent(GameObjectsTrs);

        GameObject ChieriSumaho_YukaokiPosObj
            = Resources.Load("_PosObj/0370YukaueKisyou/ChieriSumaho_YukaokiPosObj") as GameObject;
        ChieriSumahoObj.transform.localPosition = ChieriSumaho_YukaokiPosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_YukaokiPosObj.transform.localEulerAngles;

        ////タブレット設置
        //GameObject Tablet01ChieriNesoberiPosObj =
        //    Instantiate(Resources.Load("_PosObj/D_Henai_Day2/YukaueKisyou01/Tablet01ChieriNesoberiPosObj") as GameObject
        //    , GameObjectsTrs);
        //DB.evMoveDelObjList.Add(Tablet01ChieriNesoberiPosObj);


        //IKタブレット見る
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        #endregion

        //プレイヤー仰向け 場所そのまま、回転と高さのみ
        GameObject Player04AomukeRotObj
        = Resources.Load("_PosObj/D_Henai_Day2/YukaueKisyou01/Player04AomukeRotObj") as GameObject;
        CameraObjectsTrs.localEulerAngles = Player04AomukeRotObj.transform.localEulerAngles;

        Vector3 tmpAomukeV3 = new Vector3(CameraObjectsTrs.localPosition.x, Player04AomukeRotObj.transform.localPosition.y, CameraObjectsTrs.localPosition.z);
        CameraObjectsTrs.localPosition = tmpAomukeV3;

        //カメラリセット値変更してリセット
        CameraReset(Player04AomukeRotObj.transform.localEulerAngles
            , CameraAnchorTrs.localEulerAngles);//Anchorを立ちに

        yield return new WaitForSeconds(3);

        //目覚め
        FadeBlack(0, 4, false, Ease.InOutBounce);

        //ボリューム少し上げ
        LFootWindnoiseSoundObj.GetComponent<AudioSource>().DOFade(0.5f, 5);
        RFootWindnoiseSoundObj.GetComponent<AudioSource>().DOFade(0.5f, 5);

        NovelSetVis("F3080a070");//はぁーはぁー
        while (novelCurrentPageInt < 2) { yield return null; }

        //PPエフェクトフェードアウト
        PPEffect_FadeToDef(10);


        while (isNovelSetVisIng) { yield return null; }

        //立ち上がり黒フェード
        FadeBlack(1, 1f);
        yield return new WaitForSeconds(1);

        //智恵理腰方向へ向く
        CameraObjectsTrs.LookAt(Bip001PelvisTrs);
        CameraObjectsTrs.localEulerAngles = new Vector3(0, CameraObjectsTrs.localEulerAngles.y, 0);
        Vector3 tmpAomukeStandV3 = new Vector3(CameraObjectsTrs.localPosition.x, Player05TableUnderKisyouStandRotObj.transform.localPosition.y, CameraObjectsTrs.localPosition.z);
        CameraObjectsTrs.localPosition = tmpAomukeStandV3;

        //カメラリセット値変更してリセット
        CameraReset(CameraObjectsTrs.localEulerAngles
            , DB.cameraStandAnchorDefLocalPos);//Anchorを立ちに

        FadeBlack(0, 1f);
        yield return new WaitForSeconds(2);


        NovelSetVis("F3080a080");//なにやってんだ・・？
        while (isNovelSetVisIng) { yield return null; }


        yield return new WaitForSeconds(2);
        NovelSetVis("F3080a082");//とりあえず近づくしかなさそうだ
        while (isNovelSetVisIng) { yield return null; }

        #region 探索とかくれおに移動設置
        //■隠れ鬼移動システムON
        KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
        //ローディング待ち
        while (isKOSystemLoading) { yield return null; }
        isSeePointTempOff = false;//ポインタ表示
        //移動場所07オン
        int tmpInt = 7;
        KO_KakurePosObjsList[tmpInt].SetActive(true);
        //寝る場所移動ポイント出現 演出
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[tmpInt].transform.Find("TableAsiKage").gameObject);

        #endregion

        #endregion

        //テーブル・智恵理横に来るまで待機
        while (isTableAsiKage_Enter == false) { yield return null; }
        #region 近づいて呼びかけ
        KO_isMovePosLock = true;

        NovelSetVis("F3080a085");//おーい起きたぞー！
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(2);
        NovelSetVis("F3080a090");//聴こえないのか
        while (isNovelSetVisIng) { yield return null; }
        NovelSetVis("F3080a100");//仕方ない近づいて…………いいのか？
        while (isNovelSetVisIng) { yield return null; }
        //タブレット前 移動ポイント出現 演出
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[tmpInt].transform.Find("TabletYoko").gameObject);
        KO_isMovePosLock = false;


        //テーブル・智恵理横から少し動くまで待機
        while (isTableAsiKage_Exit == false) { yield return null; }

        KankyouBGMVolumer(0f, 0.5f);

        SEPlay("心臓音101025_IEZ001", 0.5f);

        KO_isMovePosLock = true;
        NovelSetVis("F3080a110");//足がピタリと止まる。
        while (isNovelSetVisIng) { yield return null; }

        NovelSetVis("F3080a115");//しっかりしろ俺
        SEPlay("shoulder-touch1");
        FadeWhite(0.5f, 0.05f); yield return new WaitForSeconds(0.05f); FadeWhite(0, 0.05f);
        while (isNovelSetVisIng) { yield return null; }


        KO_isMovePosLock = false;

        #endregion

        //スマホ横に来るまで待機
        while (isTabletYoko_Enter == false) { yield return null; }

        #region スマホ横で話しかけ
        //探索終了
        isKOSystem = false;
        isTansakuSystem = false;

        #region プレイヤー見てタブレット見る
        NovelSetVis("F3080a200");//おーい

        while (isNovelSetVisIng) { yield return null; }
        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 5);
        yield return new WaitForSeconds(2);

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0), 10);
        ChieriMotion("f_気づき（明）", 5f, 2);
        ChieriMotion("寝そべりポーズ", 5f, 0);
        yield return new WaitForSeconds(5);

        NovelSetVis("F3080a210");//気づいたのか・・？
        while (isNovelSetVisIng) { yield return null; }

        //タブレットに視線戻す
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 5);
        yield return new WaitForSeconds(2);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, 10);
        ChieriMotion("f_気づき（明）", 5f, 2);
        ChieriMotion("寝そべり足パタループ", 5f, 0);
        yield return new WaitForSeconds(5);


        NovelSetVis("F3080a220");//あれ 勘違いか？ 
        #endregion

        while (novelCurrentPageInt < 2) { yield return null; }

        PPEffect_ZikanHosei();
        //心音ループ
        StartCoroutine(ActionLoopSystemCor(() =>
        { SEPlay(UISEObj, "心臓音101025_IEZ001", 0.3f); }
        , 0.7f, Mathf.Infinity));


        ////体傾き以前の
        //Vector3 tmpKatamukiRot = CameraObjectsTrs.localEulerAngles;
        //CameraObjectsTrs.DOLocalRotate(new Vector3(tmpKatamukiRot.x + 14, tmpKatamukiRot.y, tmpKatamukiRot.z + 14), 3)
        //    .SetEase(Ease.InOutBack);
        //体傾き
        Vector3 tmpKatamukiRotC = CameraObjectsTrs.localEulerAngles;
        CameraObjectsTrs.DOLocalRotate(new Vector3(tmpKatamukiRotC.x + 14, tmpKatamukiRotC.y, tmpKatamukiRotC.z + 14), 1)
            .OnComplete(() =>
            {
                CameraObjectsTrs.DOLocalRotate(tmpKatamukiRotC
                    , 1);
            });

        isPlayerUniqueMotion = true;
        PlayerMotion("四つん這い両手_モブ", 1f, 0);


        while (novelCurrentPageInt < 5) { yield return null; }

        DOTween.To(() => girlAnim.speed, (x) => girlAnim.speed = x, 0.5f, 12f);

        yield return new WaitForSeconds(6);
        Hukidashi("F3080200");//おつかれさまー

        //朝環境音に変え
        KankyouBGMChanger(semiSE.audioSource, "residential-area-in-early-morning-1_loop");
        KankyouBGMVolumer(3f, 5f);

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0.5f);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("寝そべりポーズ", 5f, 0);
        yield return new WaitForSeconds(1);

        ChieriMotion("f_気づき（明）目閉じ笑顔", 0.05f, 2);
        ChieriMotionDelay(1, "f_気づき（明）", 0.1f, 2);
        Hukidashi("F3080205");//来てくれたんだ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        ChieriMotion("f_リラックス01", 1f, 2);
        Hukidashi("F3080210");//大変でしょ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        isActionLoopSystem = false;
        yield return new WaitForSeconds(2);
        NovelSetVis("F3080a230");//はぁー・・・！　慣れはあるのか
        while (novelCurrentPageInt < 1) { yield return null; }

        PPEffect_FadeToDef(20);

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        Hukidashi("F3080220");//ちいさいままでいられるのって
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //まばたき
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        //目タブレット
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);

        Hukidashi("F3080230");//色々補整されてるんだよ
        yield return new WaitForSeconds(1);

        //まばたき
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        //目プレイヤー
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        yield return KeyOrWait(3);

        yield return new WaitForSeconds(2);
        NovelSetVis("F3080a240");//言葉が出なかった。
        while (novelCurrentPageInt < 4) { yield return null; }

        //まばたき
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        //目顔タブレット 
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform, 1f);
        ChieriMotion("寝そべり足パタループ", 1f, 0);

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(2);
        NovelSetVis("F3080a250");//補整って・・。
        while (novelCurrentPageInt < 4) { yield return null; }

        ChieriMotionDelay(1, "f_気づき（明）", 1f, 2);
        Hukidashi("F3080240");//おなかペコペコかな？
        yield return new WaitForSeconds(1);
        yield return KeyOrWait(3);

        Hukidashi("F3080250");//今ごはんあげるね
        //まばたき
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        //目プレイヤー
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        yield return new WaitForSeconds(1);
        ChieriMotion("f_気づき（明）目閉じ笑顔", 0.05f, 2);
        ChieriMotionDelay(1, "f_リラックス01", 0.1f, 2);
        ChieriMotion("寝そべりポーズ", 1f, 0);

        yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        //まばたき
        ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
        //目タブレット
        FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform, 0f);
        ChieriMotion("寝そべり足パタループ", 1f, 0);
        FadeBlack(1, 7f);
        KankyouBGMVolumer(0, 7f);

        yield return new WaitForSeconds(2);


        ////ToBeコンティニュー
        //EventMove("ToBeContinued");


        NovelSetVis("F3080a260");//全てがおかしくなっていることを
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);
        FadeBlack(1, 0f);
        yield return new WaitForSeconds(1);
        NovelSetVis("F3080a270");//運ばれた

        #endregion

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(3);

        isPlayerUniqueMotion = false;

        EventMove("終わりへと近づく日々",false,true);

        //EventMove("監禁2_ペットボトル");
        yield break;
    }

    IEnumerator KomaDataEvent()//※コマデータ追加でのタイムラインイベント
    {
        if (debugEventMoveFlag == true)
        {
        }

        EventReset();

        if (isKDEventFogSceneLoad)
        {
            #region Fogシーン設置（設置済みならなにもしない）
            //既にCity読み込み済みなら
            if (GameObjects_City != null)
            {
                //何もしない
            }
            else //ないならシーン読み込み
            {
                //■■■シーンロード用暗幕かかってること前提
                //とりあえずデバッグのため普通の暗幕かけ
                FadeBlack(1, 0);

                ////白幕
                //FadeWhite(1, 1, true);
                //yield return new WaitForSeconds(1);
                //暗幕はずし（白幕になってるはず）
                FadeBlack(0, 0);

                #region City用Fogシーンを読み込み

                Debug.Log("□Cityx100Fogシーンをロード開始");
                yield return null;

                #region シーン読み込み

                UnityEngine.SceneManagement.SceneManager.LoadSceneAsync("Cityx100Fog", UnityEngine.SceneManagement.LoadSceneMode.Additive);

                //FogVolume出てくるまで待機
                while (GameObject.Find("CitySKy/Fog Volume Data") == null)
                {
                    Debug.Log("Cityx100Fogシーンロード中");
                    yield return null;
                }


                //カメラ削除
                if (GameObject.Find("CameraAll_Cityx100") != null) { Destroy(GameObject.Find("CameraAll_Cityx100")); }

                //FogVolumeに割り当て
                GameObject.Find("CitySKy/Fog Volume Data").GetComponent<FogVolumeData>()
                    .GameCamera = VRCamera;

                #endregion

                //■GameObjects_Cityを取得（CityのPrefabを入れる入れ物）
                if (GameObject.Find("GameObjects_City"))
                { GameObjects_City = GameObject.Find("GameObjects_City"); }
                else
                { Debug.Log("■GameObjects_Cityがオフまたはない？"); }


                ////テストのため一時的
                ////City_Expansionあれば削除
                //if (GameObjects_City.transform.Find("City_Expansion") != null)
                //{ Destroy(GameObjects_City.transform.Find("City_Expansion").gameObject); }

                ////ライトあればオフ
                //if (GameObjects_City.transform.Find("City_Light") != null)
                //{ GameObjects_City.transform.Find("City_Light").gameObject.SetActive(false); }

                //ホコリオフ
                Particle_DustTrs.gameObject.SetActive(false);

                Debug.Log("■Cityx100Fogシーンロード終了");

                #endregion

            }
            //白幕はずし
            FadeWhite(0, 1, true);
            //暗幕はずし
            FadeBlack(0, 0);
            #endregion
        }
        if (isKDEventBathSceneLoad)
        {
            #region Bathシーン設置（設置済みならなにもしない）

            //シーン名変わるといけないので、シーン名で判定はやめ
            ////現在読み込まれているシーン数だけループ
            //for (int i = 0; i < UnityEngine.SceneManagement.SceneManager.sceneCount; i++)
            //{
            //    //読み込まれているシーン名を取得し、Bathだったら抜ける
            //    if ("Bath" == UnityEngine.SceneManagement.SceneManager.GetSceneAt(i).name)
            //    {
            //        goto 風呂シーン読み込み抜け;
            //    }
            //}

            //既にBath読み込み済みなら
            if (GameObject.Find("Bath") != null)
            {
                //何もしない
            }
            else //ないならシーン読み込み
            {
                //■■■シーンロード用暗幕かかってること前提
                //とりあえずデバッグのため普通の暗幕かけ
                FadeBlack(1, 0);

                ////白幕
                //FadeWhite(1, 1, true);
                //yield return new WaitForSeconds(1);
                //暗幕はずし（白幕になってるはず）
                FadeBlack(0, 0);

                #region シーンを読み込み

                Debug.Log("□Bathシーンをロード開始");
                yield return null;

                #region シーン読み込み

                UnityEngine.SceneManagement.SceneManager.LoadSceneAsync("Bath", UnityEngine.SceneManagement.LoadSceneMode.Additive);

                //Bath出てくるまで待機
                while (GameObject.Find("Bath") == null)
                {
                    Debug.Log("Bathシーンロード中（BathのObjを検索中）");
                    yield return null;
                }

                #endregion

                RoomTrs.gameObject.SetActive(false);
                LightFolder.SetActive(false);

                //ホコリオフ
                Particle_DustTrs.gameObject.SetActive(false);

                Debug.Log("■Bathシーンロード終了　RoomとLightをオフに");

                #endregion

                #region ビキニに着替え（ユーザーの着替え設定を読み込まない場合）
                if (DB.isUserFixityOutfit == false)
                {
                    //DB.isUserClothsBarefoot = DB.isUserClothsTankTop = false;
                    //DB.isUserClothsBikini = true;

                    DB.intCurrentShoes = DB.intCurrentCloth = 0;
                    DB.intCurrentALL = 1;

                    //ClothsApply();
                    ClothsApply_ydload();
                }

                #endregion

            }
            //白幕はずし
            FadeWhite(0, 1, true);
            //暗幕はずし
            FadeBlack(0, 0);

            風呂シーン読み込み抜け:;

            #endregion
        }

        #region PD再生

        //PlayableDirectorObjを生成
        GameObject KDEventTLObj
            = Instantiate(Resources.Load("Main/Timeline/UTLTest/KDEventTLObj") as GameObject);
        KDEventTLObj.name = nameof(KDEventTLObj);

        //取得
        PlayableDirector KDEventTL
            = KDEventTLObj.GetComponent<PlayableDirector>();

        //当てはめ
        KDEventTL.playableAsset = KDEventPlayable;

        #endregion

        KDEventTL.Play();

        //コードでやるならここ 　↑↓コメントアウト 

        while (isPDStopped == false) { yield return null; }

        ////暗幕
        //FadeBlack(1, 1);
        //yield return new WaitForSeconds(3);

        //isFlowChartEventMove = true;
        //EventMove("タイトル", true, true);


        yield break;
    }
    #region ┗■専用変数（タイムラインデータ取得用 都市 風呂シーン読み込みifなど）
    public TimelineAsset KDEventPlayable;
    public bool isKDEventFogSceneLoad = false;
    public bool isKDEventBathSceneLoad = false;

    //タイムラインで使うスクリプト用に、現在再生しているTimelineAssetを登録しておく用
    public PlayableDirector nowPlayPD;

    #endregion





    IEnumerator D3000()//会話1
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            //nowPlayerLocalScl = new Vector3(0.1f, 0.1f, 0.1f);
            nowPlayerLocalScale = new Vector3(0.03f, 0.03f, 0.03f);
        }
        EventReset();

        //暗幕
        FadeBlack(1, 1);
        yield return new WaitForSeconds(1f);

        #region 設定
        //智恵理オフ
        GirlMeshTrs.gameObject.SetActive(false);
        //智恵理0位置ロック
        DB.isChieriPosLock = true;

        //アニメスピード
        girlAnim.speed = 0.7f;
        doorAnim.speed = 0.7f;
        chairAnim.speed = 0.7f;

        //■PosObjで読み込み
        //プレイヤー 机の上智恵理待ち位置に
        GameObject Player_01a_DeskUeChieriMachiPosObj = Resources.Load("_PosObj/D_Henai_Day1/Player_01a_DeskUeChieriMachiPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_01a_DeskUeChieriMachiPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_01a_DeskUeChieriMachiPosObj.transform.localEulerAngles;

        //スピーカー 位置に
        SpeakerTrs.gameObject.SetActive(true);
        GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
        SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        #endregion 設定


        //開幕
        FadeBlack(0, 3);
        yield return new WaitForSeconds(2);

        #region 智恵理ドアから椅子に座るまで
        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);

        ChieriMotion("ドア入室", 0f, 0);
        doorAnim.CrossFadeInFixedTime("ドア開き閉じ", 0f, 0);

        yield return new WaitForSeconds(2.2f / girlAnim.speed);

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        Hukidashi("D3010");//お待たせ
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し



        //■ポーズ状態まで待ち
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 0.9f) { yield return null; }
        isGirlAnimReadSystem = false;

        ChieriMotion("ドアからデスク横へ歩く", 0.1f, 0);
        yield return new WaitForSeconds(3.5f / girlAnim.speed);

        Hukidashi("D3020");//ごめんね私だけ
        ChieriMotion("あはは・・・", 0.2f, 2);
        ChieriMotionDelay(3, "f_笑顔01口眉下がり_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1.5f / girlAnim.speed);

        chairAnim.enabled = true;


        //■ポーズ状態まで待ち
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 1f) { yield return null; }
        isGirlAnimReadSystem = false;
        ChieriMotion("ドアからデスク横ポーズから椅子に座る", 0.1f, 0);
        chairAnim.CrossFadeInFixedTime("智恵理座り", 0f, 0);

        //IK 椅子へ
        FollowDOMove(IKLookAtEyeTargetTrs, ChairTrs);
        FollowDOMove(IKLookAtHeadTargetTrs, ChairTrs, new Vector3(0, 0.8f, 0));
        yield return new WaitForSeconds(3f / girlAnim.speed);

        //頭だけIK弱めに（首埋まり対策）
        DOTweenToLAIKSHead(LAIKHeadS, 0.4f, 1);
        yield return new WaitForSeconds(1f / girlAnim.speed);
        Hukidashi("D3030");//あとで持ってくるからね

        //IK プレイヤーへ
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
        yield return new WaitForSeconds(1f / girlAnim.speed);

        //頭IK 戻し（ON）
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        yield return new WaitForSeconds(1f / girlAnim.speed);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し




        //■ポーズ状態まで待ち
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 1f) { yield return null; }
        isGirlAnimReadSystem = false;
        #endregion

        chairAnim.enabled = false;

        //暗幕
        FadeBlack(1, 2);
        yield return new WaitForSeconds(2f);

        //アニメスピード
        girlAnim.speed = 0.5f;
        doorAnim.speed = 0.5f;
        chairAnim.speed = 0.5f;

        //智恵理0位置ロック解除
        DB.isChieriPosLock = false;

        //プレイヤー 会話1位置に
        GameObject Player_01_DeskUeKaiwa1PosObj = Resources.Load("_PosObj/D_Henai_Day1/Player_01_DeskUeKaiwa1PosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_01_DeskUeKaiwa1PosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_01_DeskUeKaiwa1PosObj.transform.localEulerAngles;

        //智恵理 椅子すわり位置に
        GameObject Chieri_02_DeskChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02_DeskChairPosObj") as GameObject;
        GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;

        ChieriMotion("デスク肘つきポーズ", 0f, 0);

        yield return new WaitForSeconds(1f);
        //開幕
        FadeBlack(0, 3);
        yield return new WaitForSeconds(2);



        #region ノベル 顔接近

        yield return new WaitForSeconds(2);
        NovelSetVis("D3010");
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);

        ChieriMotion("デスク肘つき→起き上がり", 0f, 0);
        ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);

        yield return new WaitForSeconds(0.6f);
        ChieriMotion("デスク少しうつ伏せポーズ", 0.7f, 0);

        yield return new WaitForSeconds(2);

        NovelSetVis("D3020");
        while (isNovelSetVisIng) { yield return null; }
        #endregion

        yield return new WaitForSeconds(2);

        #region 選択肢 えーと おいしかった？
        sentakuListNum = 99;//初期化
        NovelSetVis("■D3030");
        while (isNovelSentakushiWait) { yield return null; }
        //■選択肢切り候補 ひとつだけ（えーとをなくす）
        Sentakushi("■D3030a", Mathf.Infinity);
        Sentakushi("■D3030b", Mathf.Infinity);

        while (sentakuListNum == 99) { yield return null; }
        yield return null;
        switch (sentakuListNum)
        {
            case 0://選択肢a
                NovelSetVis("D3030a");
                while (novelCurrentPageInt < 1) { yield return null; }
                yield return new WaitForSeconds(1);
                Hukidashi("D3030a1");//うん？
                ChieriMotion("ん？", 0.2f, 2);
                while (isNovelSetVisIng) { yield return null; }

                break;
            case 1://選択肢b
                NovelSetVis("D3030b");
                yield return new WaitForSeconds(1);
                Hukidashi("D3030b1");//おいしかったよ
                ChieriMotion("笑顔01口眉", 0.1f, 2);
                ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                while (isNovelSetVisIng) { yield return null; }
                //Hukidashi("D3030b2");//公にも食べさせなきゃ
                //yield return KeyOrWait(5);

                while (isNovelSetVisIng) { yield return null; }
                break;
        }
        #endregion

        yield return new WaitForSeconds(2);

        #region 再接近 選択肢どうしたの 食べられる
        ChieriMotion("デスクうつ伏せポーズ", 1f, 0);
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "f_これからも一緒の学校", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(0.5f);
        Hukidashi("D3040");
        yield return new WaitForSeconds(1.5f);


        sentakuListNum = 99;//初期化
        NovelSetVis("■D3040");//更に降下してきた
        while (isNovelSentakushiWait) { yield return null; }
        Sentakushi("■D3040a", Mathf.Infinity);
        Sentakushi("■D3040b", Mathf.Infinity);
        while (sentakuListNum == 99) { yield return null; }
        yield return null;
        bool isTmpOkiagari = false;
        switch (sentakuListNum)
        {
            case 0://選択肢a
                yield return new WaitForSeconds(1);
                Hukidashi("D3040a");//かわいいなって
                yield return new WaitForSeconds(3);

                sentakuListNum = 99;//初期化
                NovelSetVis("■D3040a");//かわいいって・・・
                while (isNovelSentakushiWait) { yield return null; }

                //■選択肢切り候補 （混ぜ合わせたような感情に）



                Sentakushi("■D3040aa", Mathf.Infinity);
                Sentakushi("■D3040ab", Mathf.Infinity);
                while (sentakuListNum == 99) { yield return null; }
                yield return null;
                switch (sentakuListNum)
                {
                    case 0://選択肢a 満更でも
                        sentakuListNum = 99;//初期化
                        NovelSetVis("■D3040aa");//しっかりしろ俺
                        while (isNovelSentakushiWait) { yield return null; }

                        break;

                    case 1://選択肢b 屈辱
                        sentakuListNum = 99;//初期化
                        NovelSetVis("■D3040ab");//本題に戻そう
                        while (isNovelSentakushiWait) { yield return null; }

                        break;
                }
                break;

            case 1://選択肢b 食べられる！
                yield return new WaitForSeconds(1);
                ChieriMotion("デスクうつ伏せ→起き上がり", 0f, 0);
                ChieriMotion("あはは・・・", 0.1f, 2);
                AseTare();
                Hukidashi("D3040b");//たべるわけないでしょ
                isTmpOkiagari = true;

                yield return new WaitForSeconds(3);
                ChieriMotion("f_笑顔01口眉下がり_目閉じない", 0.1f, 2);
                sentakuListNum = 99;//初期化
                NovelSetVis("■D3040b");//冗談半分だったが口にしてみると
                while (isNovelSentakushiWait) { yield return null; }

                break;
        }

        #endregion


        #region 選択肢 宿題を　大きさを

        //■選択肢切り候補 ひとつだけ　お願いポーズのある「大きさを」のみに

        Sentakushi("■D3050a", Mathf.Infinity);
        Sentakushi("■D3050b", Mathf.Infinity);
        while (sentakuListNum == 99) { yield return null; }
        yield return null;
        switch (sentakuListNum)
        {
            case 0://選択肢a 宿題を
                yield return new WaitForSeconds(1);
                isNovelFadeTween = isNovelSetVisIng = false;

                Hukidashi("D3050a1");//そう、宿題！
                if (isTmpOkiagari == false) { ChieriMotion("デスクうつ伏せ→起き上がり", 0f, 0); }
                ChieriMotion("笑顔01口眉", 0.1f, 2);
                ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                yield return new WaitForSeconds(3f);

                ChieriMotion("デスク少しうつ伏せポーズ", 0.7f, 0);
                yield return new WaitForSeconds(0.5f);

                Hukidashi("D3050a2");//宿題やってあげるね

                yield return new WaitForSeconds(2f);

                NovelSetVis("D3050a");//え、　言うまもなく　　でも悪くない話か
                while (novelCurrentPageInt < 1) { yield return null; }

                break;

            case 1://選択肢b 大きさを
                yield return new WaitForSeconds(1);
                isNovelFadeTween = isNovelSetVisIng = false;//ノベル消し

                Hukidashi("D3050b1");//え～せっかくかわいいのに
                if (isTmpOkiagari == false) { ChieriMotion("デスクうつ伏せ→起き上がり", 0f, 0); }
                ChieriMotion("f_あ！ほら！口普通キョトン", 0.1f, 2);
                yield return new WaitForSeconds(4f);

                //顔悩み上見
                Hukidashi("D3050b2");//ん～
                ChieriMotion("デスク起き上がり→肘つき", 0f, 0);
                ChieriMotion("f_あ！ほら！口普通キョトン眉下がり", 0.1f, 2);
                //IK
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, new Vector3(0, 1f, 0), 3f);
                //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
                DOTweenToLAIKSHead(LAIKHeadS, 0, 3);
                yield return new WaitForSeconds(1);
                yield return KeyOrWait(3);


                //お願いポーズ
                Hukidashi("D3050b3");//お願い！
                ChieriMotion("デスク肘つき→起き上がり", 0f, 0);
                ChieriMotion("f_あはは目開き", 0.1f, 2);
                //IKプレイヤー目だけ見る
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
                DOTweenToLAIKSHead(LAIKHeadS, 1, 1);

                yield return KeyOrWait(4);

                yield return new WaitForSeconds(1);
                //IKプレイヤー目だけに（お願いポーズで手埋まらないように）
                DOTweenToLAIKSHead(LAIKHeadS, 0, 1);
                ChieriMotion("デスク起き上がり→お願い", 0f, 0);

                Hukidashi("D3050b4");//宿題やるからね
                yield return new WaitForSeconds(3);

                NovelSetVis("D3050b");//うーん　お願いされると　　でも悪くない話か
                while (novelCurrentPageInt < 2) { yield return null; }

                break;
        }
        #endregion

        //暗幕
        FadeBlack(1, 1);
        yield return new WaitForSeconds(1f);

        while (isNovelSetVisIng) { yield return null; }

        EventMove();
    }
    IEnumerator E3000_old()//会話1_監禁
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            nowPlayerLocalScale = new Vector3(0.03f, 0.03f, 0.03f);
        }
        EventReset();

        ////暗幕
        //FadeBlack(1, 1);
        //yield return new WaitForSeconds(1f);

        #region 設定       

        //アニメスピード
        girlAnim.speed = 0.5f;
        doorAnim.speed = 0.5f;
        chairAnim.speed = 0.5f;

        //智恵理0位置ロック解除
        DB.isChieriPosLock = false;

        //スピーカー 位置に
        SpeakerTrs.gameObject.SetActive(true);
        GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
        SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        //プレイヤー 会話1位置に
        GameObject Player_01_DeskUeKaiwa1PosObj = Resources.Load("_PosObj/E_Kankin_Day1/Player_01_DeskUeKaiwa1PosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_01_DeskUeKaiwa1PosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_01_DeskUeKaiwa1PosObj.transform.localEulerAngles;

        ////智恵理 椅子すわり位置に
        //GameObject Chieri_02_DeskChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02_DeskChairPosObj") as GameObject;
        //GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
        //GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;

        //智恵理 以前の椅子すわり位置に
        GameObject Chieri_02Old_DeskChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02Old_DeskChairPosObj") as GameObject;
        GirlTrs.localPosition = Chieri_02Old_DeskChairPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri_02Old_DeskChairPosObj.transform.localEulerAngles;


        ChieriMotion("デスク肘つきポーズ", 0f, 0);
        ChieriMotion("つまんなそう", 0f, 2);

        //IKプレイヤー見る(一瞬)
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 0f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);

        //余韻設定のため1フレーム後再設定
        yield return null;
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        #endregion 設定


        //開幕
        FadeBlack(0, 3);
        yield return new WaitForSeconds(2);



        #region 危ないのに

        //yield return new WaitForSeconds(2);
        //NovelSetVis("D3200");
        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);

        Hukidashi("E3010");//帰ろうとしてた？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        ChieriMotion("f_怒ってる・・？", 0.5f, 2);

        Hukidashi("E3020");//危ないのに
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        選択肢1:

        NovelSetVis("■E3020");//さてどうしよう


        #endregion
        #region ■選択肢 不安で　遊んでた
        while (isNovelSentakushiWait) { yield return null; }
        yield return new WaitForSeconds(1f);
        Sentakushi("■E3020a", Mathf.Infinity);
        Sentakushi("■E3020b", Mathf.Infinity);
        while (sentakuListNum == 99) { yield return null; }
        yield return null;
        switch (sentakuListNum)
        {
            case 0://選択肢a 不安で
                sentakuListNum = 99;
                yield return new WaitForSeconds(1);

                #region そうだ不安になってしまったんだ - 私といても
                NovelSetVis("E3020a010");//そうだ不安になってしまったんだ

                while (novelCurrentPageInt < 1) { yield return null; }

                //IK少し伏目
                GameObject Chieri_01_Look_EyeHusimePosObj = Resources.Load("_PosObj/E_Kankin_Day1/Chieri_01_Look_EyeHusimePosObj") as GameObject;
                GameObject Chieri_02_Look_HeadHusimePosObj = Resources.Load("_PosObj/E_Kankin_Day1/Chieri_02_Look_HeadHusimePosObj") as GameObject;
                FollowDOMove(IKLookAtEyeTargetTrs, Chieri_01_Look_EyeHusimePosObj.transform.localPosition, 0.5f);
                FollowDOMove(IKLookAtHeadTargetTrs, Chieri_02_Look_HeadHusimePosObj.transform.localPosition, 2f);

                while (novelCurrentPageInt < 3) { yield return null; }

                Hukidashi("E3020a010");//不安、そっか・・
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                while (novelCurrentPageInt < 12) { yield return null; }

                ChieriMotion("つまんなそう", 0f, 2);
                //目プレイヤーへ
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);

                while (isNovelSetVisIng) { yield return null; }

                Hukidashi("E3020a020");//え？　別のところに体？
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2f);
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                Hukidashi("E3020a030");//あ、えっとー・・
                ChieriMotion("f_あ、えっとー・・", 0.2f, 2);
                girlAnim.speed = 0.3f;
                ChieriMotion("デスク肘つき→起き上がり", 0f, 0);
                AseTare(8f);
                FollowDOMove(IKLookAtEyeTargetTrs, Chieri_01_Look_EyeHusimePosObj.transform.localPosition, 0.5f);
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                Hukidashi("E3020a040");//その眼鏡は宿題ができるだけで
                FollowDOMove(IKLookAtHeadTargetTrs, Chieri_02_Look_HeadHusimePosObj.transform.localPosition, 2f);
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                Hukidashi("E3020a050");//体は実際に縮んでいるというか・・
                ChieriMotion("f_えっと、その・・", 0.8f, 2);
                ChieriMotion("デスク少しうつ伏せポーズ", 0.7f, 0);

                yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                yield return new WaitForSeconds(0.5f);

                NovelSetVis("E3020a020");//え、実際に縮んでるってどういうこと？！
                while (isNovelSetVisIng) { yield return null; }

                yield return new WaitForSeconds(1);

                Hukidashi("E3020a060");//詳しく説明するのは・・
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //IK更に伏目横目
                GameObject Chieri_03_Look_EyeHusimePosObj = Resources.Load("_PosObj/E_Kankin_Day1/Chieri_03_Look_EyeHusimePosObj") as GameObject;
                GameObject Chieri_04_Look_HeadHusimePosObj = Resources.Load("_PosObj/E_Kankin_Day1/Chieri_04_Look_HeadHusimePosObj") as GameObject;
                FollowDOMove(IKLookAtEyeTargetTrs, Chieri_03_Look_EyeHusimePosObj.transform.localPosition, 0.5f);
                FollowDOMove(IKLookAtHeadTargetTrs, Chieri_04_Look_HeadHusimePosObj.transform.localPosition, 1f);

                Hukidashi("E3020a070");//ちょっと難しくて
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                yield return new WaitForSeconds(2);

                NovelSetVis("E3020a030");//……嘘を言って驚かそうとしてる様ではなさそうだ。
                while (isNovelSetVisIng) { yield return null; }
                yield return new WaitForSeconds(1);

                Hukidashi("E3020a080");//ご、ごめんね、黙ってて・・
                ChieriMotion("f_怒ってる・・？", 0.8f, 2);

                yield return new WaitForSeconds(0.5f);
                //IKプレイヤー見る
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2f);
                DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

                yield return new WaitForSeconds(0.5f); yield return KeyOrWait(3);

                Hukidashi("E3020a090");//まさかいなくなるとは
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                NovelSetVis("E3020a040");//「ああ、いや……」
                while (isNovelSetVisIng) { yield return null; }
                yield return new WaitForSeconds(1);

                //伏目
                FollowDOMove(IKLookAtEyeTargetTrs, Chieri_03_Look_EyeHusimePosObj.transform.localPosition, 0.5f);
                FollowDOMove(IKLookAtHeadTargetTrs, Chieri_04_Look_HeadHusimePosObj.transform.localPosition, 1.5f);
                Hukidashi("E3020a100");//その・・
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                Hukidashi("E3020a105");//言い難いんだけど
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                yield return new WaitForSeconds(1);
                Hukidashi("E3020a110");//私といても、やっぱり
                TereHohoAlphaChange(0.4f);
                TereHoho(3f);
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //girlAnim.speed = 0.4f;

                ChieriMotion("デスクうつ伏せポーズ", 1f, 0);
                //IKプレイヤー見る
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2f);
                DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

                Hukidashi("E3020a120");//小さいのって怖くて いや・・かな・・？
                ChieriMotion("f_いやかな・・？", 1.5f, 2);
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                yield return new WaitForSeconds(2);
                #endregion

                #region ■選択肢 「まあ智恵理となら・・」「無理無理！」
                選択肢2:
                NovelSetVis("■E3020a050");//……う、ううう……む……。

                while (isNovelSentakushiWait) { yield return null; }
                yield return new WaitForSeconds(1f);
                Sentakushi("■E3020a120a", Mathf.Infinity);
                Sentakushi("■E3020a120b", Mathf.Infinity);
                while (sentakuListNum == 99) { yield return null; }
                yield return null;
                switch (sentakuListNum)
                {
                    case 0://選択肢a 「まあ智恵理となら・・」
                        yield return new WaitForSeconds(1f);
                        NovelSetVis("E3020a120a010");//まあ智恵理となら・・
                        TereHohoAlphaChange(1f);
                        TereHoho(1f);
                        ChieriMotionDelay(0.5f, "f_照れ驚き", 0.1f / girlAnim.speed, 2);//時間差表情戻し

                        while (novelCurrentPageInt < 1) { yield return null; }

                        Hukidashi("E3020a120a010");//・・・・・・。

                        yield return new WaitForSeconds(0.8f / girlAnim.speed);

                        //顔目逸らし
                        GameObject Chieri_05_Look_EyeHusimePosObj = Resources.Load("_PosObj/E_Kankin_Day1/Chieri_05_Look_EyeHusimePosObj") as GameObject;
                        GameObject Chieri_06_Look_HeadHusimePosObj = Resources.Load("_PosObj/E_Kankin_Day1/Chieri_06_Look_HeadHusimePosObj") as GameObject;
                        FollowDOMove(IKLookAtEyeTargetTrs, Chieri_05_Look_EyeHusimePosObj.transform.localPosition, 0.5f);
                        FollowDOMove(IKLookAtHeadTargetTrs, Chieri_06_Look_HeadHusimePosObj.transform.localPosition, 1.5f);

                        Hukidashi("E3020a120a020");//あ、ありがとう
                        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                        //顔IKオフ
                        DOTweenToLAIKSHead(LAIKHeadS, 0, 1 / girlAnim.speed);

                        Hukidashi("E3020a120a030");//うん・・
                        ChieriMotion("f_ありがとう泣き顔", 0.2f / girlAnim.speed, 2);
                        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                        //IK顔右うつ伏せ位置事前取得
                        GameObject Chieri_07_Look_HeadUtsubuseRPosObj = Resources.Load("_PosObj/E_Kankin_Day1/Chieri_07_Look_HeadUtsubuseRPosObj") as GameObject;
                        IKLookAtHeadTargetTrs.localPosition = Chieri_07_Look_HeadUtsubuseRPosObj.transform.localPosition;

                        Hukidashi("E3020a120a040");//本当に、ありがとう・・
                        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


                        //顔IK ON
                        DOTweenToLAIKSHead(LAIKHeadS, 1, 1f / girlAnim.speed);
                        ChieriMotion("f_嬉しい・・・", 0.2f / girlAnim.speed, 2);

                        yield return new WaitForSeconds(4);

                        NovelSetVis("E3020a120a020");//あ、えっと・・！
                        while (isNovelSetVisIng) { yield return null; }

                        yield return new WaitForSeconds(3);

                        Hukidashi("E3020a120a030");//うん・・
                        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                        Hukidashi("E3020a120a050");//私、やっぱり公がいないと駄目みたい
                        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                        yield return new WaitForSeconds(2);
                        NovelSetVis("E3020a120a030");//やっぱり重いぞ・・！
                        while (isNovelSetVisIng) { yield return null; }

                        yield return new WaitForSeconds(1);
                        isNovelFadeTween = isNovelSetVisIng = false;

                        yield return new WaitForSeconds(1);


                        //IKプレイヤー見る
                        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 2);
                        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 3f);
                        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 2);


                        girlAnim.speed = 0.2f;

                        Hukidashi("E3020a120a060");//そ、そうだね、宿題！
                        ChieriMotion("デスクうつ伏せ→起き上がり", 0f, 0);
                        ChieriMotion("笑顔01口眉", 0.1f, 2);
                        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                        yield return new WaitForSeconds(3f); yield return KeyOrWait(3);

                        TereHoho(false, 5f);
                        girlAnim.speed = 0.4f;

                        ChieriMotion("デスク少しうつ伏せポーズ", 0.7f, 0);
                        yield return new WaitForSeconds(0.5f);

                        Hukidashi("E3020a120a070");//お詫びに私がやってあげるね
                        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                        yield return new WaitForSeconds(1);

                        NovelSetVis("E3020a120a040");//え、　ああ、それは有難いなあ！
                        while (novelCurrentPageInt < 1) { yield return null; }

                        //暗幕
                        FadeBlack(1, 1);
                        yield return new WaitForSeconds(1f);

                        while (isNovelSetVisIng) { yield return null; }

                        break;
                    case 1:

                        sentakuListNum = 99;

                        NovelSetVis("tmpまだなし");
                        while (isNovelSetVisIng) { yield return null; }
                        goto 選択肢2;
                        break;
                }
                #endregion

                break;
            case 1://選択肢b 遊んでただけだよ
                sentakuListNum = 99;

                NovelSetVis("tmpまだなし");
                while (isNovelSetVisIng) { yield return null; }
                goto 選択肢1;
                break;
        }
        #endregion

        DB.isKankinFlag = true;

        EventMove("会話1_宿題");
    }
    IEnumerator D3100()//会話1_宿題
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            //nowPlayerLocalScl = new Vector3(0.1f, 0.1f, 0.1f);
            nowPlayerLocalScale = new Vector3(0.03f, 0.03f, 0.03f);
            //アニメスピード
            girlAnim.speed = 0.5f;

            //暗幕
            FadeBlack(1, 1);
        }
        EventReset();
        #region 暗幕中設定
        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);

        //智恵理0位置ロック
        DB.isChieriPosLock = true;

        //宿題見る
        FollowDOMove(IKLookAtEyeTargetTrs, Drill_chieriTrs, 2);
        FollowDOMove(IKLookAtHeadTargetTrs, Drill_chieriTrs, 2);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        ChieriMotion("デスク宿題待機", 0, 0);
        ChieriMotion("_noData", 0.1f, 2);

        //■PosObjで読み込み
        if (DB.isKankinFlag)
        {
            //プレイヤー 監禁会話1の位置に
            GameObject Player_01_DeskUeKaiwa1PosObj = Resources.Load("_PosObj/E_Kankin_Day1/Player_01_DeskUeKaiwa1PosObj") as GameObject;
            CameraObjectsTrs.localPosition = Player_01_DeskUeKaiwa1PosObj.transform.localPosition;
            CameraObjectsTrs.localEulerAngles = Player_01_DeskUeKaiwa1PosObj.transform.localEulerAngles;
        }
        else
        {
            //プレイヤー 宿題1位置に
            GameObject Player_02_DeskUeSyukudai1PosObj = Resources.Load("_PosObj/D_Henai_Day1/Player_02_DeskUeSyukudai1PosObj") as GameObject;
            CameraObjectsTrs.localPosition = Player_02_DeskUeSyukudai1PosObj.transform.localPosition;
            CameraObjectsTrs.localEulerAngles = Player_02_DeskUeSyukudai1PosObj.transform.localEulerAngles;
        }

        ////智恵理 以前の椅子すわり位置に（2の位置）
        //GameObject Chieri_02Old_DeskChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02Old_DeskChairPosObj") as GameObject;
        //GirlTrs.localPosition = Chieri_02Old_DeskChairPosObj.transform.localPosition;
        //GirlTrs.localEulerAngles = Chieri_02Old_DeskChairPosObj.transform.localEulerAngles;

        //椅子位置
        GameObject Chair_01_SuwariPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chair_01_SuwariPosObj") as GameObject;
        ChairTrs.localPosition = Chair_01_SuwariPosObj.transform.localPosition;
        ChairTrs.localEulerAngles = Chair_01_SuwariPosObj.transform.localEulerAngles;

        //スピーカー 位置に
        SpeakerTrs.gameObject.SetActive(true);
        GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
        SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        //宿題 位置に
        Drill_chieriTrs.gameObject.SetActive(true);
        GameObject Drill_chieri_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/Drill_chieri_DeskPosObj") as GameObject;
        Drill_chieriTrs.localPosition = Drill_chieri_DeskPosObj.transform.localPosition;
        Drill_chieriTrs.localEulerAngles = Drill_chieri_DeskPosObj.transform.localEulerAngles;
        ////一応主人公の宿題も
        //HomeworkObjectsTrs.SetParent(DrillTrs);
        DrillTrs.localPosition = Drill_chieri_DeskPosObj.transform.localPosition;
        DrillTrs.localEulerAngles = Drill_chieri_DeskPosObj.transform.localEulerAngles;
        DrillTrs.gameObject.SetActive(false);

        //ペン持つ
        SharpenObj.transform.SetParent(GirlRhitosashi02Trs, true);
        SharpenObj.transform.localPosition = Sharpen_syukudai_GirlRhitosashi02_ParameterTrs.localPosition;
        SharpenObj.transform.localEulerAngles = Sharpen_syukudai_GirlRhitosashi02_ParameterTrs.localEulerAngles;
        //消しゴム置く
        KeshigomuObj.transform.SetParent(RoomTrs);
        KeshigomuObj.SetActive(true);
        GameObject tmpObj = (GameObject)Resources.Load("_PosObj/D_Henai_Day1/Keshigomu_DeskOkuPosObj");
        KeshigomuObj.transform.localPosition = tmpObj.transform.localPosition;
        KeshigomuObj.transform.localEulerAngles = tmpObj.transform.localEulerAngles;

        isDeskSyukudaiKeshigomMotion = true;

        #endregion
        yield return new WaitForSeconds(2f);

        //開幕
        FadeBlack(0, 2);

        //goto テストスキップ;
        yield return new WaitForSeconds(5);

        NovelSetVis("■D3100");//昔の思い出
                              //デバッグスキップ:

        #region ■選択肢 「昔を思い出すなぁ」 自分が情けない 丸太
        sentakuListNum = 99;//初期化
        while (isNovelSentakushiWait) { yield return null; }

        //■選択肢切り候補 （自分が情けない　はなし）
        //丸太みたいだね、で、「もー」という感じでペン先で突く（あたりはしないで見せるだけ）


        Sentakushi("■D3100a", Mathf.Infinity);
        Sentakushi("■D3100b", Mathf.Infinity);
        Sentakushi("■D3100c", Mathf.Infinity);
        while (sentakuListNum == 99) { yield return null; }
        yield return null;
        switch (sentakuListNum)
        {
            case 0://選択肢a 「昔を思い出すなぁ」
                NovelSetVis("D3100a");
                yield return new WaitForSeconds(2);

                #region こっち見て「よく宿題やったよね」

                Hukidashi("D3100a1");//あはは、よく宿題やったよね
                ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);

                yield return new WaitForSeconds(0.5f);

                //IKプレイヤー見る 目が先
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.5f);
                DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);

                ChieriMotion("まばたき", 0f, 4);
                blinkTime = 0;

                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2f);
                DOTweenToLAIKSHead(LAIKHeadS, 1, 1);

                //■宿題モーションだけフェードでポーズ（animatorのParametersでスピード変更（ステート毎に設定できるので、表情が遅くならない））
                float tmpSpeed = 1;
                //DOTWeenTO
                DOTween.To(() => tmpSpeed, (x) => tmpSpeed = x, 0, 2f);
                while (tmpSpeed != 0) //スピード0になるまで代入し続ける
                { girlAnim.SetFloat("デスク宿題スピード", tmpSpeed); yield return null; }

                yield return KeyOrWait(4);


                //IK宿題へ
                FollowDOMove(IKLookAtEyeTargetTrs, Drill_chieriTrs, 0.5f);
                FollowDOMove(IKLookAtHeadTargetTrs, Drill_chieriTrs, 2f);
                DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

                yield return new WaitForSeconds(0.5f);

                //animパラメータ戻し
                tmpSpeed = 0;
                //DOTWeenTO
                DOTween.To(() => tmpSpeed, (x) => tmpSpeed = x, 1, 0.5f);
                while (tmpSpeed != 1) //スピード0になるまで代入し続ける
                { girlAnim.SetFloat("デスク宿題スピード", tmpSpeed); yield return null; }
                #endregion

                goto 図書館とか懐かしい;

            case 1://選択肢b　自分が情けない
                yield return new WaitForSeconds(1);

                #region 悩んで次選択肢 「自分でやる」「手伝う」「昔はよかった」
                NovelSetVis("■D3100b");
                sentakuListNum = 99;//初期化
                while (isNovelSentakushiWait) { yield return null; }
                Sentakushi("■D3110a", Mathf.Infinity);
                Sentakushi("■D3110b", Mathf.Infinity);
                Sentakushi("■D3110c", Mathf.Infinity);
                while (sentakuListNum == 99) { yield return null; }
                yield return null;
                switch (sentakuListNum)
                {
                    case 0:
                        NovelSetVis("tmp宿題手伝いなし");
                        while (isNovelSetVisIng) { yield return null; }
                        break;
                    case 1:
                        NovelSetVis("tmp宿題手伝いなし");
                        while (isNovelSetVisIng) { yield return null; }
                        break;
                }
                #endregion

                break;

            case 2://選択肢c　丸太みたいなシャーペン
                NovelSetVis("■D3100c");//
                yield return new WaitForSeconds(1);

                #region こっち見て「そういう風にいう？」
                ChieriMotion("f_あはは目開き", 0.1f, 2);
                AseTare();
                yield return new WaitForSeconds(0.5f);

                //IKプレイヤー見る 目が先
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.5f);
                DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);

                ChieriMotion("まばたき", 0f, 4);
                blinkTime = 0;

                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2f);
                DOTweenToLAIKSHead(LAIKHeadS, 1, 1);

                Hukidashi("D3100c");//女の子の物をそういう風に言う？


                //■宿題モーションだけフェードでポーズ（animatorのParametersでスピード変更（ステート毎に設定できるので、表情が遅くならない））
                float tmpSpeedc = 1;
                //DOTWeenTO
                DOTween.To(() => tmpSpeedc, (x) => tmpSpeedc = x, 0, 2f);
                while (tmpSpeedc != 0) //スピード0になるまで代入し続ける
                { girlAnim.SetFloat("デスク宿題スピード", tmpSpeedc); yield return null; }


                yield return KeyOrWait(4);


                //IK宿題へ
                FollowDOMove(IKLookAtEyeTargetTrs, Drill_chieriTrs, 0.5f);
                FollowDOMove(IKLookAtHeadTargetTrs, Drill_chieriTrs, 2f);
                DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

                yield return new WaitForSeconds(0.5f);

                //animパラメータ戻し
                tmpSpeed = 0;
                //DOTWeenTO
                DOTween.To(() => tmpSpeed, (x) => tmpSpeed = x, 1, 0.5f);
                while (tmpSpeed != 1) //スピード0になるまで代入し続ける
                { girlAnim.SetFloat("デスク宿題スピード", tmpSpeed); yield return null; }
                ChieriMotion("_noData", 0.2f, 2);

                #endregion

                #region 選択肢 「自分でやる」「手伝う」「昔はよかった」

                sentakuListNum = 99;//初期化
                while (isNovelSentakushiWait) { yield return null; }
                Sentakushi("■D3110a", Mathf.Infinity);
                Sentakushi("■D3110b", Mathf.Infinity);
                Sentakushi("■D3110c", Mathf.Infinity);
                while (sentakuListNum == 99) { yield return null; }
                yield return null;
                switch (sentakuListNum)
                {
                    case 0:
                        break;
                    case 1:
                        break;
                    case 2:
                        break;
                }
                #endregion

                break;
        }
        #endregion

        yield return new WaitForSeconds(1);
        isNovelFadeTween = isNovelSetVisIng = false;

        #region こっち見て「え、あの頃？」～「図書館とか懐かしい」

        Hukidashi("D3100a");//え？ あの頃？
        ChieriMotion("ん？", 0.1f, 2);

        yield return new WaitForSeconds(0.5f);

        #region IKプレイヤー見る 目が先
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.5f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);

        ChieriMotion("まばたき", 0f, 4);
        blinkTime = 0;

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
        #endregion

        //■宿題モーションだけフェードでポーズ（animatorのParametersでスピード変更（ステート毎に設定できるので、表情が遅くならない））
        float tmpAnimSpeed = 1;
        //DOTWeenTO
        DOTween.To(() => tmpAnimSpeed, (x) => tmpAnimSpeed = x, 0, 2f);
        while (tmpAnimSpeed != 0) //スピード0になるまで代入し続ける
        { girlAnim.SetFloat("デスク宿題スピード", tmpAnimSpeed); yield return null; }

        yield return KeyOrWait(4);


        #region IK宿題へ
        FollowDOMove(IKLookAtEyeTargetTrs, Drill_chieriTrs, 0.5f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, Drill_chieriTrs, 2f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        #endregion

        yield return new WaitForSeconds(0.5f);

        //animパラメータ戻し
        tmpAnimSpeed = 0;
        //DOTWeenTO
        DOTween.To(() => tmpAnimSpeed, (x) => tmpAnimSpeed = x, 1, 0.5f);
        while (tmpAnimSpeed != 1) //スピード0になるまで代入し続ける
        { girlAnim.SetFloat("デスク宿題スピード", tmpAnimSpeed); yield return null; }

        Hukidashi("D3100a1");//そういえば一緒に宿題
        ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);
        yield return KeyOrWait(4);

        図書館とか懐かしい:
        Hukidashi("D3100a2");//図書館とか、懐かしい
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(2f);
        yield return KeyOrWait(2);
        while (isNovelSetVisIng) { yield return null; }

        #endregion

        #region 昔思い出し会話後 選択肢 「あの頃は楽しかった」 「私立に行かなかった理由」 「聞くのは野暮かな」
        NovelSetVis("■D3120");//■「お互い昔を思い出しているようだ」

        while (novelCurrentPageInt < 3) { yield return null; }
        yield return new WaitForSeconds(1);
        Hukidashi("D3100a3");//算数おしえてくれたよね
        ChieriMotion("あはは・・・", 0.1f, 2);
        ChieriMotionDelay(4, "笑顔01口眉_目閉じない", 0.3f, 2);//時間差表情戻し

        //消しゴムモーション自動発動 終了
        isDeskSyukudaiKeshigomMotion = false;

        sentakuListNum = 99;//初期化
        while (isNovelSentakushiWait) { yield return null; }

        //■選択肢切り候補 聞くのは野暮かな を消す

        Sentakushi("■D3115a", Mathf.Infinity);
        Sentakushi("■D3115b", Mathf.Infinity);
        Sentakushi("■D3115c", Mathf.Infinity);
        while (sentakuListNum == 99) { yield return null; }
        yield return null;
        switch (sentakuListNum)
        {
            case 0://選択肢 「あの頃は楽しかった」
                yield return new WaitForSeconds(2);

                //もしも消しゴム中なら終わるまで待機
                while (girlAnim.GetCurrentAnimatorClipInfo(0)[0].clip.name == "デスク消しゴム") { yield return null; }

                //■監禁フラグ立ってなければ告白あり
                if (DB.isKankinFlag == false)
                {
                    #region あの頃は楽しかった 告白シーン
                    Hukidashi("D3120");//あの頃ねー
                    yield return new WaitForSeconds(1);
                    //顔悩み上見
                    ChieriMotion("デスク起き上がり→肘つき", 1f, 0);
                    ChieriMotion("f_あ！ほら！口普通キョトン眉下がり", 0.1f, 2);
                    //IK
                    FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, new Vector3(0, 1f, 0), 3f);
                    DOTweenToLAIKSHead(LAIKHeadS, 0, 3);
                    yield return KeyOrWait(3);


                    Hukidashi("D3130");//・・・
                    yield return KeyOrWait(3);


                    NovelSetVis("D3115a");//■・・・あれ？
                    while (isNovelSetVisIng) { yield return null; }

                    yield return new WaitForSeconds(1);

                    Hukidashi("D3140");//実はね、今日誘ったのは
                    ChieriMotion("笑顔01口眉", 0.05f, 2);
                    //目IK宿題
                    FollowDOMove(IKLookAtEyeTargetTrs, Drill_chieriTrs, 0.5f);
                    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                    yield return new WaitForSeconds(0.5f);
                    ChieriMotion("笑顔01口眉_目閉じない", 0.05f, 2);
                    yield return KeyOrWait(4);


                    Hukidashi("D3150");//私も楽しくて
                    yield return KeyOrWait(4);

                    ChieriMotion("f_あはは目開き", 0.3f, 2);
                    Hukidashi("D3160");//・・・
                    yield return KeyOrWait(3);


                    Hukidashi("D3170");//えっとね
                    ChieriMotion("デスク肘つき→起き上がり", 1f, 0);
                    ChieriMotion("笑顔01口眉", 0.1f, 2);
                    ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                    yield return new WaitForSeconds(0.8f);
                    #region IKプレイヤー見る 目が先
                    FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.5f);
                    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);

                    ChieriMotion("まばたき", 0f, 4);
                    blinkTime = 0;

                    FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2f);
                    DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
                    #endregion
                    yield return KeyOrWait(4);

                    TereHoho();
                    #region IK宿題へ
                    FollowDOMove(IKLookAtEyeTargetTrs, Drill_chieriTrs, 0.5f);
                    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                    FollowDOMove(IKLookAtHeadTargetTrs, Drill_chieriTrs, 2f);
                    DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
                    #endregion
                    Hukidashi("D3180");//だから誘うとき緊張して
                    yield return KeyOrWait(5);
                    //ChieriMotion("f_あ！ほら！口閉じ", 0.3f, 2);
                    ChieriMotion("f_あはは目開き", 0.3f, 2);
                    ChieriMotion("デスク少しうつ伏せポーズ", 1f, 0);
                    Hukidashi("D3190");//来てくれたから
                    yield return KeyOrWait(4);

                    #region IKうつ伏せ時の左向き
                    GameObject ChieriLookTargetPos_00_utsubuseHidariObj = Resources.Load("_PosObj/D_Henai_Day1/ChieriLookTargetPos_00_utsubuseHidariObj") as GameObject;
                    FollowDOMove(IKLookAtEyeTargetTrs, ChieriLookTargetPos_00_utsubuseHidariObj.transform.localPosition, 0.5f);
                    FollowDOMove(IKLookAtHeadTargetTrs, ChieriLookTargetPos_00_utsubuseHidariObj.transform.localPosition, 3f);
                    #endregion
                    ChieriMotion("f_きゃう", 1.5f, 2);
                    Hukidashi("D3200");//今も楽しくて
                    yield return KeyOrWait(5);
                    yield return new WaitForSeconds(2);


                    #endregion

                    #region 選択肢 「もちろん」「元の大きさなら」
                    SHukidashi("D3210");//公はどう？
                    yield return new WaitForSeconds(3.5f);
                    Sentakushi("■D3210a", Mathf.Infinity);
                    Sentakushi("■D3210b", Mathf.Infinity);
                    sentakuListNum = 99;//初期化
                                        //選択肢選ばれるまでループ
                    while (sentakuListNum == 99) { yield return null; }
                    yield return null;
                    switch (sentakuListNum)
                    {
                        case 0://選択肢a
                            #region 「楽しいよ」　「ほんとに？」　「うれしい」
                            yield return new WaitForSeconds(1);
                            ChieriMotion("f_けど・・・", 0.5f, 2);
                            yield return new WaitForSeconds(1f);
                            #region IKプレイヤー見る 目が先
                            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.5f);
                            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);

                            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2f);
                            DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
                            #endregion

                            ChieriMotion("やっぱり・・・？", 1.5f, 2);
                            yield return new WaitForSeconds(1f);

                            Hukidashi("D3210a1");//ほんと？
                            yield return KeyOrWait(4);

                            yield return new WaitForSeconds(1f);

                            ChieriMotion("f_嬉しい・・・", 1f, 2);

                            ChieriMotion("デスクうつ伏せポーズ", 1f, 0);
                            #region IKうつ伏せ時の左向き
                            FollowDOMove(IKLookAtEyeTargetTrs, ChieriLookTargetPos_00_utsubuseHidariObj.transform.localPosition, 0.5f);
                            FollowDOMove(IKLookAtHeadTargetTrs, ChieriLookTargetPos_00_utsubuseHidariObj.transform.localPosition, 3f);
                            #endregion
                            yield return new WaitForSeconds(3f);


                            Hukidashi("D3210a2");//良かったうれしい
                            yield return KeyOrWait(4);

                            yield return new WaitForSeconds(3f);

                            NovelSetVis("D3130");//■喜びと驚きを整理していると
                            while (isNovelSetVisIng) { yield return null; }
                            yield return new WaitForSeconds(1);

                            #endregion
                            break;

                        case 1://選択肢b
                            #region 「元の大きさなら」　「そうだよね」　「戻すね」
                            yield return new WaitForSeconds(1);
                            ChieriMotion("f_下がり眉目瞑り", 0.8f, 2);
                            yield return new WaitForSeconds(2f);

                            ChieriMotion("デスクうつ伏せ→起き上がり", 1f, 0);
                            ChieriMotion("あはは・・・", 0.3f, 2);
                            ChieriMotionDelay(2, "f_あはは目開き", 0.1f, 2);//時間差表情戻し

                            #region IKプレイヤー見る 目が先
                            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.5f);
                            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);

                            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2f);
                            DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
                            #endregion

                            Hukidashi("D3210b2");//そうだよね！

                            yield return new WaitForSeconds(1f);

                            yield return KeyOrWait(4);

                            #region IK宿題へ
                            FollowDOMove(IKLookAtEyeTargetTrs, Drill_chieriTrs, 0.5f);
                            FollowDOMove(IKLookAtHeadTargetTrs, Drill_chieriTrs, 2f);
                            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                            DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
                            #endregion
                            yield return new WaitForSeconds(1f);

                            Hukidashi("D3210b3");//
                            ChieriMotion("笑顔01口眉_目閉じない", 0.3f, 2);
                            yield return KeyOrWait(4);

                            #region IKプレイヤー見る 目が先
                            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.5f);
                            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);

                            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2f);
                            DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
                            #endregion

                            Hukidashi("D3210b4");//変な話してごめんね
                            ChieriMotion("あはは・・・", 0.3f, 2);
                            ChieriMotionDelay(1, "f_あはは目開き", 0.1f, 2);//時間差表情戻し
                            yield return KeyOrWait(4);
                            yield return new WaitForSeconds(1);

                            Hukidashi("D3210b5");//戻すね
                            ChieriMotion("笑顔01口眉_目閉じない", 0.3f, 2);
                            yield return KeyOrWait(4);


                            #endregion

                            yield return new WaitForSeconds(3f);
                            //暗幕
                            FadeBlack(1, 2f);
                            yield return new WaitForSeconds(2f);

                            EventMove("BAD010 埋め合わせできない");
                            yield return null;

                            break;
                    }

                    #endregion
                }
                else
                {
                    NovelSetVis("tmp告白無し");
                    while (isNovelSetVisIng) { yield return null; }
                    EventMove("会話2_食事");
                    yield break;
                }



                break;

            case 1://選択肢 「私立に行かなかったのは？」

                //■監禁フラグ立ってなければ告白あり
                if (DB.isKankinFlag == false)
                {
                    isDeskSyukudaiKeshigomMotion = false;//消しゴム発動止め
                    #region 私立に行かなかったのは？ 告白シーン
                    yield return new WaitForSeconds(1);
                    isNovelFadeTween = isNovelSetVisIng = false;
                    Hukidashi("D3115b1");//え？
                    ChieriMotion("f_え？？", 0.1f, 2);
                    AseTare();
                    yield return new WaitForSeconds(0.5f);

                    #region IKプレイヤー見る 目が先
                    FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.5f);
                    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);

                    ChieriMotion("まばたき", 0f, 4);
                    blinkTime = 0;

                    FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2f);
                    DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
                    #endregion

                    //■宿題モーションだけフェードでポーズ（animatorのParametersでスピード変更（ステート毎に設定できるので、表情が遅くならない））
                    float tmpPenSpeed = 1;
                    //DOTWeenTO
                    DOTween.To(() => tmpPenSpeed, (x) => tmpPenSpeed = x, 0, 2f);
                    while (tmpPenSpeed != 0) //スピード0になるまで代入し続ける
                    { girlAnim.SetFloat("デスク宿題スピード", tmpPenSpeed); yield return null; }

                    yield return KeyOrWait(4);


                    #region IK宿題へ
                    FollowDOMove(IKLookAtEyeTargetTrs, Drill_chieriTrs, 0.5f);
                    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                    FollowDOMove(IKLookAtHeadTargetTrs, Drill_chieriTrs, 2f);
                    DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
                    #endregion

                    yield return new WaitForSeconds(0.5f);

                    //animパラメータ戻し
                    tmpAnimSpeed = 0;
                    //DOTWeenTO
                    DOTween.To(() => tmpAnimSpeed, (x) => tmpAnimSpeed = x, 1.5f, 0.5f);
                    while (tmpAnimSpeed != 1.5f) //スピード1.5になるまで代入し続ける
                    { girlAnim.SetFloat("デスク宿題スピード", tmpAnimSpeed); yield return null; }

                    Hukidashi("D3115b2");//聞いちゃう？
                    TereHoho();


                    yield return KeyOrWait(4);

                    NovelSetVis("D3115b1");//しまった
                    while (isNovelSetVisIng) { yield return null; }
                    yield return new WaitForSeconds(1);

                    Hukidashi("D3115b3");//やっぱり公立近いし？
                    yield return new WaitForSeconds(1);
                    //顔悩み上見
                    ChieriMotion("デスク起き上がり→肘つき", 1f, 0);
                    ChieriMotion("f_あ！ほら！口普通キョトン眉下がり", 0.1f, 2);
                    //IK上見
                    FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, new Vector3(0, 1f, 0), 3f);
                    DOTweenToLAIKSHead(LAIKHeadS, 0, 3);
                    yield return KeyOrWait(3);

                    yield return new WaitForSeconds(2);



                    Hukidashi("D3115b4");//・・・
                    ChieriMotion("あはは・・・", 0.05f, 2);
                    //目IK宿題
                    FollowDOMove(IKLookAtEyeTargetTrs, Drill_chieriTrs, 0.5f);
                    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                    yield return new WaitForSeconds(0.5f);
                    ChieriMotion("f_あはは目開き", 0.3f, 2);
                    yield return KeyOrWait(3);

                    NovelSetVis("D3115b2");//そっか
                    while (isNovelSetVisIng) { yield return null; }

                    Hukidashi("D3115b5");//その
                    yield return KeyOrWait(5);
                    yield return new WaitForSeconds(1);

                    Hukidashi("D3115b6");//ごめんうそついた
                    ChieriMotion("f_きゃう", 1.5f, 2);
                    ChieriMotion("デスク肘つき→起き上がり", 1f, 0);
                    #region IKうつ伏せ時の左向き
                    GameObject tmpIKObj = Resources.Load("_PosObj/D_Henai_Day1/ChieriLookTargetPos_00_utsubuseHidariObj") as GameObject;
                    FollowDOMove(IKLookAtEyeTargetTrs, tmpIKObj.transform.localPosition, 0.5f);
                    FollowDOMove(IKLookAtHeadTargetTrs, tmpIKObj.transform.localPosition, 3f);
                    DOTweenToLAIKSHead(LAIKHeadS, 1, 3);
                    #endregion
                    yield return KeyOrWait(4);

                    Hukidashi("D3115b7");//ちゃんというね
                    ChieriMotion("デスク少しうつ伏せポーズ", 1f, 0);
                    yield return KeyOrWait(4);

                    NovelSetVis("D3115b3");//まさか

                    yield return new WaitForSeconds(2);
                    ChieriMotion("f_下がり眉目瞑り", 0.1f, 2);
                    yield return new WaitForSeconds(1);
                    ChieriMotion("_noData", 0.3f, 2);
                    yield return new WaitForSeconds(1);

                    ChieriMotion("デスクうつ伏せポーズ", 1f, 0);
                    #region IKプレイヤー見る 目が先
                    FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.5f);
                    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);

                    ChieriMotion("まばたき", 0f, 4);
                    blinkTime = 0;

                    FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2f);
                    DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
                    #endregion
                    ChieriMotion("笑顔01口眉_目閉じない", 1f, 2);
                    yield return new WaitForSeconds(1.5f);
                    Hukidashi("D3115b8");//一緒の学校でいたかったから
                    #endregion

                    #region ■選択肢 「俺も」「ごめん」「オレオマエスキ」
                    yield return new WaitForSeconds(4);

                    NovelSetVis("■D3115b4");//返事
                    sentakuListNum = 99;//初期化
                    while (isNovelSentakushiWait) { yield return null; }

                    Sentakushi("■D3118a");
                    Sentakushi("■D3118b");
                    //Sentakushi("■D3118c");
                    sentakuListNum = 99;//初期化
                                        //選択肢選ばれるまでループ
                    while (sentakuListNum == 99) { yield return null; }
                    yield return null;
                    switch (sentakuListNum)
                    {
                        case 0://選択肢 「俺も」　「よかった・・」
                            #region 俺も
                            NovelSetVis("D3118a1");//俺も！

                            yield return new WaitForSeconds(1);
                            ChieriMotion("f_安堵", 1f, 2);
                            yield return new WaitForSeconds(1);
                            ChieriMotion("f_嬉しい・・・", 1f, 2);

                            ChieriMotion("デスクうつ伏せポーズ", 1f, 0);
                            #region IKうつ伏せ時の左向き
                            FollowDOMove(IKLookAtEyeTargetTrs, tmpIKObj.transform.localPosition, 0.5f);
                            FollowDOMove(IKLookAtHeadTargetTrs, tmpIKObj.transform.localPosition, 3f);
                            #endregion
                            yield return new WaitForSeconds(3f);


                            Hukidashi("D3210a2");//良かったうれしい
                            yield return KeyOrWait(4);

                            yield return new WaitForSeconds(3f);
                            NovelSetVis("D3118a2");//これで晴れて俺も彼女持ちに
                            while (novelCurrentPageInt < 2) { yield return null; }
                            #endregion
                            break;

                        case 1://選択肢 「ごめん」　「いいの」
                            #region 選択肢a 「ごめん」　「いいの」
                            isNovelFadeTween = isNovelSetVisIng = false;
                            yield return new WaitForSeconds(2);
                            ChieriMotion("f_笑顔眉下がり", 0.3f, 2);

                            yield return new WaitForSeconds(1);
                            ChieriMotion("デスクうつ伏せ→起き上がり", 1f, 0);
                            ChieriMotion("あはは・・・", 0.3f, 2);
                            ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

                            #region IKプレイヤー見る 目が先
                            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.5f);
                            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);

                            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2f);
                            DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
                            #endregion

                            Hukidashi("D3118b1");//ううんいいの
                            yield return KeyOrWait(4);
                            goto これが伝えたかった;

                            #endregion

                            break;

                        case 2://選択肢 「オレオマエスキ」　「あはは・・」
                            #region オレオマエスキ ブレないね
                            isNovelFadeTween = isNovelSetVisIng = false;
                            yield return new WaitForSeconds(1);
                            ChieriMotion("あはは・・・", 0.3f, 2);
                            AseTare();
                            Hukidashi("D3118c1");//あはは・・ブレないね
                            yield return KeyOrWait(4);
                            yield return new WaitForSeconds(1);

                            yield return new WaitForSeconds(1);
                            ChieriMotion("f_あはは目開き", 0.2f, 2);
                            yield return new WaitForSeconds(1);
                            ChieriMotion("f_嬉しい・・・", 1f, 2);

                            ChieriMotion("デスクうつ伏せポーズ", 1f, 0);
                            #region IKうつ伏せ時の左向き
                            FollowDOMove(IKLookAtEyeTargetTrs, tmpIKObj.transform.localPosition, 0.5f);
                            FollowDOMove(IKLookAtHeadTargetTrs, tmpIKObj.transform.localPosition, 3f);
                            #endregion
                            yield return new WaitForSeconds(3f);


                            Hukidashi("D3118c2");//うんでもうれしい
                            yield return KeyOrWait(4);
                            yield return new WaitForSeconds(1);
                            Hukidashi("D3118c3");//ありがとう
                            yield return KeyOrWait(4);

                            yield return new WaitForSeconds(3);
                            #endregion
                            break;

                        case -1://無言
                            #region 選択肢 無言　「言えて良かったー」（断りとほぼ同じ）
                            isNovelFadeTween = isNovelSetVisIng = false;
                            yield return new WaitForSeconds(2);
                            ChieriMotion("f_笑顔眉下がり", 0.3f, 2);

                            yield return new WaitForSeconds(1);
                            ChieriMotion("デスクうつ伏せ→起き上がり", 1f, 0);
                            ChieriMotion("あはは・・・", 0.3f, 2);
                            ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

                            #region IK上見
                            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, new Vector3(0, 1f, 0), 3f);
                            DOTweenToLAIKSHead(LAIKHeadS, 0, 3);
                            #endregion

                            Hukidashi("D3118c");//言えて良かったー
                            yield return KeyOrWait(4);
                            yield return new WaitForSeconds(1);

                            これが伝えたかった:
                            #region IKプレイヤー見る 目が先
                            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.5f);
                            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);

                            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2f);
                            DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
                            #endregion
                            ChieriMotion("笑顔01口眉_目閉じない", 0.3f, 2);
                            Hukidashi("D3118b2");//これが伝えたかった
                            yield return KeyOrWait(4);

                            ChieriMotion("あはは・・・", 0.3f, 2);
                            Hukidashi("D3118b3");//あはは　小さいから
                            yield return KeyOrWait(4);

                            #region IK宿題へ
                            FollowDOMove(IKLookAtEyeTargetTrs, Drill_chieriTrs, 0.5f);
                            FollowDOMove(IKLookAtHeadTargetTrs, Drill_chieriTrs, 2f);
                            DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                            DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
                            #endregion
                            ChieriMotion("笑顔01口眉_目閉じない", 0.3f, 2);
                            ChieriMotion("デスク宿題待機", 1f, 0);
                            Hukidashi("D3118b4");//宿題やるからそしたら戻すね
                            yield return KeyOrWait(4);

                            #endregion

                            FadeBlack(1, 4);
                            yield return new WaitForSeconds(3);

                            EventMove("BAD010 埋め合わせできない");
                            yield break;

                    }
                    #endregion
                }
                else
                {
                    NovelSetVis("tmp告白無し");
                    while (isNovelSetVisIng) { yield return null; }
                    EventMove("会話2_食事");
                    yield break;
                }

                break;

            case 2://選択肢 聞くのは野暮かな
                NovelSetVis("D3115c");//私立に落ちたのかもしれないし。
                while (isNovelSetVisIng) { yield return null; }

                //監禁フラグ立っている場合告白無しでの食事シーンへ
                if (DB.isKankinFlag)
                {
                    NovelSetVis("tmp告白無し");
                    while (isNovelSetVisIng) { yield return null; }
                    EventMove("会話2_食事");
                    yield break;
                }
                else//立ってない場合BAD
                {
                    FadeBlack(1, 4);
                    yield return new WaitForSeconds(3);

                    EventMove("BAD010 埋め合わせできない");
                    yield break;
                }

        }

        #endregion

        #region もし変になっても

        Hukidashi("D3210a3");//あのね
        yield return KeyOrWait(4);

        Hukidashi("D3210a4");//・・
        yield return KeyOrWait(4);

        Hukidashi("D3210a5");//変なことに
        yield return KeyOrWait(4);

        Hukidashi("D3210a6");//信じてくれる？
        yield return KeyOrWait(4);

        Hukidashi("D3210a7");//・・・
        yield return KeyOrWait(4);

        yield return new WaitForSeconds(2);
        sentakuListNum = 99;
        Sentakushi("■D3220a", 5f);
        Sentakushi("■D3220b", 5f);
        while (sentakuListNum == 99) { yield return null; }

        //テストスキップ:
        //    TereHoho();

        yield return new WaitForSeconds(1);
        #region IK宿題へ
        FollowDOMove(IKLookAtEyeTargetTrs, Drill_chieriTrs, 0.5f);
        FollowDOMove(IKLookAtHeadTargetTrs, Drill_chieriTrs, 2f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        #endregion
        ChieriMotion("デスクうつ伏せ→起き上がり", 1f, 0);
        ChieriMotion("あはは・・・", 0.3f, 2);

        Hukidashi("D3230");//ううんなんでもない
        yield return KeyOrWait(4);


        #region IKプレイヤー見る 目が先
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.5f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
        #endregion
        ChieriMotion("f_あはは目開き", 0.3f, 2);
        Hukidashi("D3240");//気にしないで
        yield return KeyOrWait(4);

        #region IK宿題へ
        FollowDOMove(IKLookAtEyeTargetTrs, Drill_chieriTrs, 0.5f);
        FollowDOMove(IKLookAtHeadTargetTrs, Drill_chieriTrs, 2f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        #endregion
        ChieriMotion("あはは・・・", 0.3f, 1);
        ChieriMotionDelay(1, "f_あはは目開き", 0.1f, 1);//時間差表情戻し
        Hukidashi("D3250");//なにいってるんだろ
        AseTare();
        yield return KeyOrWait(4);

        yield return new WaitForSeconds(2);

        #region IK切り
        DOTweenToLAIKSEyes(LAIKEyeS, 0, 2);
        DOTweenToLAIKSHead(LAIKHeadS, 0, 2);
        #endregion

        ChieriMotion("f_あ！ほら！口普通キョトン", 0.3f, 1);
        Hukidashi("D3255");//えっとー・・
        AseTare();

        yield return KeyOrWait(4);
        yield return new WaitForSeconds(2f);

        #region IKプレイヤー見る 目が先
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.5f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 2f);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
        #endregion
        ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);
        Hukidashi("D3260");//そうだ、パン
        yield return KeyOrWait(3);
        yield return new WaitForSeconds(1f);

        Hukidashi("D3270");//限界だよね
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        yield return KeyOrWait(4);
        yield return new WaitForSeconds(1f);

        Hukidashi("D3280");//ちょっとまっててね

        #endregion

        //暗幕
        FadeBlack(1, 1);
        yield return new WaitForSeconds(1f);

        #region 照れオフ ペン置き
        TereHoho(false);
        //ペン置く
        SharpenObj.transform.SetParent(RoomTrs);
        GameObject tmpPenPosObj = (GameObject)Resources.Load("_PosObj/D_Henai_Day1/Sharpen_DeskOkuTrsPosObj");
        SharpenObj.transform.localPosition = tmpPenPosObj.transform.localPosition;
        SharpenObj.transform.localEulerAngles = tmpPenPosObj.transform.localEulerAngles;
        #endregion

        SEPlay(ChairSEObj, "ChairMove01", ChairTrs.gameObject);
        NovelSetVis("D3140");//最後の言葉はどういう意味だったんだろう

        while (novelCurrentPageInt < 1) { yield return null; }
        yield return new WaitForSeconds(2f);
        SEPlay(DoorSEObj, "door-open1", DoorRootTrs.gameObject);
        yield return new WaitForSeconds(2f);
        SEPlay(DoorSEObj, "door-close2", DoorRootTrs.gameObject);

        while (isNovelSetVisIng) { yield return null; }

        Debug.Log("会話1_宿題メインコルーチン終了");

        EventMove("会話2_食事");

        yield break;
    }//排除
    IEnumerator D3300()//会話2_食事
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            //nowPlayerLocalScl = new Vector3(0.1f, 0.1f, 0.1f);
            nowPlayerLocalScale = new Vector3(0.03f, 0.03f, 0.03f);

            #region 宿題置き


            //宿題 位置に
            Drill_chieriTrs.gameObject.SetActive(true);
            GameObject Drill_chieri_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/Drill_chieri_DeskPosObj") as GameObject;
            Drill_chieriTrs.localPosition = Drill_chieri_DeskPosObj.transform.localPosition;
            Drill_chieriTrs.localEulerAngles = Drill_chieri_DeskPosObj.transform.localEulerAngles;
            ////一応主人公の宿題も
            //HomeworkObjectsTrs.SetParent(DrillTrs);
            //DrillTrs.localPosition = Drill_chieri_DeskPosObj.transform.localPosition;
            //DrillTrs.localEulerAngles = Drill_chieri_DeskPosObj.transform.localEulerAngles;
            //DrillTrs.gameObject.SetActive(false);

            //ペン置く
            SharpenObj.transform.SetParent(RoomTrs);
            GameObject tmpPenPosObj = (GameObject)Resources.Load("_PosObj/D_Henai_Day1/Sharpen_DeskOkuTrsPosObj");
            SharpenObj.transform.localPosition = tmpPenPosObj.transform.localPosition;
            SharpenObj.transform.localEulerAngles = tmpPenPosObj.transform.localEulerAngles;
            //消しゴム置く
            KeshigomuObj.transform.SetParent(RoomTrs);
            KeshigomuObj.SetActive(true);
            GameObject tmpKeshigomuPosObj = (GameObject)Resources.Load("_PosObj/D_Henai_Day1/Keshigomu_DeskOkuPosObj");
            KeshigomuObj.transform.localPosition = tmpKeshigomuPosObj.transform.localPosition;
            KeshigomuObj.transform.localEulerAngles = tmpKeshigomuPosObj.transform.localEulerAngles;
            #endregion //宿題置き

        }
        EventReset();

        //暗幕
        FadeBlack(1, 1);
        yield return new WaitForSeconds(1f);

        #region 設定
        //智恵理オフ
        GirlMeshTrs.gameObject.SetActive(false);
        //智恵理0位置ロック
        DB.isChieriPosLock = true;

        //アニメスピード
        girlAnim.speed = 0.7f;
        doorAnim.speed = 0.7f;
        chairAnim.speed = 0.7f;

        //■PosObjで読み込み
        //プレイヤー 机の上探索位置に
        GameObject Player_00_DeskUeTansaku1PosObj = Resources.Load("_PosObj/D_Henai_Day1/Player_00_DeskUeTansaku1PosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_00_DeskUeTansaku1PosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_00_DeskUeTansaku1PosObj.transform.localEulerAngles;

        //スピーカー 位置に
        SpeakerTrs.gameObject.SetActive(true);
        GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
        SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        #region 皿パン設定
        GameObject
            SaraObj = Instantiate(Resources.Load("Main/KomonoObj/Sara/Sara") as GameObject, RoomTrs, false),
        PanObj = SaraObj.transform.Find("Pan").gameObject,
        Pan_AObj = PanObj.transform.Find("Pan_A").gameObject,
        Pan_BObj = PanObj.transform.Find("Pan_B").gameObject,
        PankuzuObj = SaraObj.transform.Find("Pankuzu").gameObject,
        Pankuzu01Obj = PankuzuObj.transform.Find("Pankuzu01").gameObject,
        Pankuzu02Obj = PankuzuObj.transform.Find("Pankuzu02").gameObject;

        DB.evMoveDelObjList.Add(SaraObj);

        GameObject
            SaraHandObj = Instantiate(Resources.Load("Main/KomonoObj/Sara/SaraHand") as GameObject, GirlRHandTrs, false);
        DB.evMoveDelObjList.Add(SaraHandObj);

        saraAnim
            = SaraObj.GetComponent<Animator>();
        saraAnim.CrossFadeInFixedTime("デスク皿置かれてる", 0f, 0);
        yield return null;
        SaraObj.SetActive(false);

        #endregion //皿パン設定

        #endregion 設定

        //開幕
        FadeBlack(0, 3);
        yield return new WaitForSeconds(2);

        #region 智恵理ドアから椅子に座るまで～暗幕

        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);
        ChieriMotion("ドア入室小皿持ち", 0f, 0);
        doorAnim.CrossFadeInFixedTime("ドア開き閉じ", 0f, 0);

        yield return new WaitForSeconds(2.2f / girlAnim.speed);

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        Hukidashi("D3010");//お待たせ
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し



        //■ポーズ状態まで待ち
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 0.9f) { yield return null; }
        isGirlAnimReadSystem = false;
        Hukidashi("D33000");//おやつ用の

        ChieriMotion("ドアからデスク横へ歩く小皿持ち", 0.1f, 0);
        yield return new WaitForSeconds(3.5f / girlAnim.speed);

        ChieriMotion("あはは・・・", 0.2f, 2);
        ChieriMotionDelay(3, "f_笑顔01口眉下がり_目閉じない", 0.1f, 2);//時間差表情戻し
        Hukidashi("D33010");//すぐ持ってこれるの

        yield return new WaitForSeconds(1.5f / girlAnim.speed);



        //■ポーズ状態まで待ち
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 1f) { yield return null; }

        ChieriMotion("ドアからデスク横小皿置き", 0.1f, 0);


        bool isSaraPut = true;
        while (isSaraPut == true)
        {
            //小皿置く 0.362f（フレーム177）で
            if (girlAnim.GetCurrentAnimatorClipInfo(0)[0].clip.name == "ドアからデスク横小皿置き" &&
                girlAnimNomPrevTime < 0.362f && girlAnimNomTime >= 0.362f)
            {
                SaraHandObj.SetActive(false);
                SaraObj.SetActive(true);
                saraAnim.CrossFadeInFixedTime("デスク皿置き", 0f, 0);
                isSaraPut = false;
            }
            yield return null;
        }
        isGirlAnimReadSystem = false;
        yield return new WaitForSeconds(1.5f / girlAnim.speed);

        ChieriMotion("f_あ！ほら！口普通キョトン", 0.2f, 2);
        AseTare();
        Hukidashi("D33020");//って、これでも大きすぎ？

        yield return new WaitForSeconds(1.5f / girlAnim.speed);
        yield return KeyOrWait(2.8f / girlAnim.speed);

        ////■ポーズ状態まで待ち
        //yield return null;
        //while (animNomTimer <= 1f) { yield return null; }
        //Debug.Log("ポーズまで待機 抜け");

        chairAnim.enabled = true;
        yield return null;

        ChieriMotion("ドアからデスク横ポーズから椅子に座る", 0.1f, 0);
        chairAnim.CrossFadeInFixedTime("智恵理座り", 0f, 0);

        ChieriMotion("あはは・・・", 0.2f, 2);
        ChieriMotionDelay(3, "f_笑顔01口眉下がり_目閉じない", 0.1f, 2);//時間差表情戻し
        AseTare();
        Hukidashi("D33030");//ちぎってあげるね

        //IK 椅子へ
        FollowDOMove(IKLookAtEyeTargetTrs, ChairTrs);
        FollowDOMove(IKLookAtHeadTargetTrs, ChairTrs, new Vector3(0, 0.8f, 0));
        yield return new WaitForSeconds(3f / girlAnim.speed);

        //頭だけIK弱めに（首埋まり対策）
        DOTweenToLAIKSHead(LAIKHeadS, 0.4f, 1);
        yield return new WaitForSeconds(1f / girlAnim.speed);

        //暗幕
        FadeBlack(1, 4);


        //IK プレイヤーへ
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
        yield return new WaitForSeconds(1f / girlAnim.speed);

        //頭IK 戻し（ON）
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        yield return new WaitForSeconds(1f / girlAnim.speed);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し




        //■ポーズ状態まで待ち
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 1f) { yield return null; }
        isGirlAnimReadSystem = false;

        #endregion
        chairAnim.enabled = false;

        #region 設定

        ////アニメスピード
        //girlAnim.speed = 0.5f;
        //doorAnim.speed = 0.5f;
        //chairAnim.speed = 0.5f;

        //智恵理0位置ロック
        DB.isChieriPosLock = true;

        //宿題セット消し
        SharpenObj.SetActive(false);
        KeshigomuObj.SetActive(false);
        Drill_chieriTrs.gameObject.SetActive(false);

        //皿動かすためにアニメーター止め
        saraAnim.enabled = false;

        //皿 食事1位置に
        GameObject Sara_01_DeskSyokuzi01PosObj = Resources.Load("_PosObj/D_Henai_Day1/Sara_01_DeskSyokuzi01PosObj") as GameObject;
        SaraObj.transform.localPosition = Sara_01_DeskSyokuzi01PosObj.transform.localPosition;
        SaraObj.transform.localEulerAngles = Sara_01_DeskSyokuzi01PosObj.transform.localEulerAngles;

        //パンを片方消す
        Pan_AObj.SetActive(false);
        //パンくずを消す
        PankuzuObj.SetActive(false);

        //プレイヤー 食事1位置に
        GameObject Player_04_DeskSyokuzi01PosObj = Resources.Load("_PosObj/D_Henai_Day1/Player_04_DeskSyokuzi01PosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_04_DeskSyokuzi01PosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_04_DeskSyokuzi01PosObj.transform.localEulerAngles;

        ////智恵理 椅子すわり位置に
        //GameObject Chieri_02_DeskChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02_DeskChairPosObj") as GameObject;
        //GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
        //GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;

        //椅子位置
        GameObject Chair_01_SuwariPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chair_01_SuwariPosObj") as GameObject;
        ChairTrs.localPosition = Chair_01_SuwariPosObj.transform.localPosition;
        ChairTrs.localEulerAngles = Chair_01_SuwariPosObj.transform.localEulerAngles;

        ChieriMotion("デスク肘つきポーズ", 0f, 0);


        #endregion //設定

        yield return new WaitForSeconds(1f);
        //開幕
        FadeBlack(0, 3);
        yield return new WaitForSeconds(2);



        #region 半分でも大きかったかな たしかにこんなパンは～
        yield return new WaitForSeconds(2);

        ChieriMotion("あはは・・・", 0.2f, 2);
        AseTare(10);
        Hukidashi("D33040");//半分でも大きかったかな


        yield return new WaitForSeconds(2);

        #endregion

        #region ■選択肢　食べて見せるぞ！　無理かな・・
        選択肢:
        NovelSetVis("■D33040");

        //■選択肢切り候補 食べて見せるぞのみする

        sentakuListNum = 99;//初期化
        while (isNovelSentakushiWait) { yield return null; }
        Sentakushi("■D33040a", Mathf.Infinity);
        Sentakushi("■D33040b", Mathf.Infinity);

        while (sentakuListNum == 99) { yield return null; }
        yield return null;

        switch (sentakuListNum)
        {
            case 0://選択肢a 「食べて見せるぞ！」
                #region え、ほんとに？ パンと同じくらいに 任せとけ・・クラクラ
                yield return new WaitForSeconds(0.5f);
                NovelSetVis("D33040a1");//「食べて見せるぞ！」
                yield return new WaitForSeconds(1);

                ChieriMotion("f_けど・・・", 0.2f, 2);
                Hukidashi("D33040a01");//え、ほんとに？
                AseTare(10);
                yield return new WaitForSeconds(1);
                yield return KeyOrWait(3);

                Hukidashi("D33040a02");//パンと同じくらいに
                                       //パン見
                FollowDOMove(IKLookAtEyeTargetTrs, PanObj.transform, 3f);
                yield return new WaitForSeconds(1);
                yield return KeyOrWait(3);

                NovelSetVis("D33040a2");//任せとけって・・クラクラ
                while (isNovelSetVisIng) { yield return null; }
                yield return new WaitForSeconds(1);
                AseTare(false);
                #endregion

                #region 顔悩み上見「ん～じゃあ」
                ChieriMotion("ん？", 0.1f, 2);
                //IK上見
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, new Vector3(0, 1f, 0), 0.2f);
                //DOTweenToLAIKSHead(LAIKHeadS, 0, 3);
                Hukidashi("D33040a03");//ん～じゃあ
                yield return new WaitForSeconds(1);
                yield return KeyOrWait(3);
                #endregion

                #region IKプレイヤー戻し 笑顔 「残したら罰ゲームね」「えっ！」
                //IKプレイヤー見る
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.2f);
                DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
                DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);


                ChieriMotion("デスク肘つき→起き上がり", 0f, 0);
                ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);
                yield return new WaitForSeconds(0.6f / girlAnim.speed);
                ChieriMotion("デスク少しうつ伏せポーズ", 0.6f / girlAnim.speed, 0);

                Hukidashi("D33040a04");//残したら罰ゲームね
                yield return new WaitForSeconds(1);
                yield return KeyOrWait(3);

                NovelSetVis("D33040a4");//えっ！　食べるまで
                while (isNovelSetVisIng) { yield return null; }
                #endregion

                #region フェードアウトして食事描写
                //暗幕
                FadeBlack(1, 1);
                yield return new WaitForSeconds(1f);

                NovelSetVis("D33040a5");//……皿の上で食事なんてのも

                #region プレイヤー位置とパン位置移動と智恵理ポーズ
                //プレイヤー 皿の上位置に
                GameObject Player_05_DeskSyokuzi02PosObj = Resources.Load("_PosObj/D_Henai_Day1/Player_05_DeskSyokuzi02PosObj") as GameObject;
                CameraObjectsTrs.localPosition = Player_05_DeskSyokuzi02PosObj.transform.localPosition;
                CameraObjectsTrs.localEulerAngles = Player_05_DeskSyokuzi02PosObj.transform.localEulerAngles;

                //パン 皿のはじ位置に
                GameObject Pan_01_DeskSyokuzi02PosObj = Resources.Load("_PosObj/D_Henai_Day1/Pan_01_DeskSyokuzi02PosObj") as GameObject;
                PanObj.transform.localPosition = Pan_01_DeskSyokuzi02PosObj.transform.localPosition;
                PanObj.transform.localEulerAngles = Pan_01_DeskSyokuzi02PosObj.transform.localEulerAngles;

                ChieriMotion("デスクうつ伏せ→起き上がり", 0.5f, 0);
                #endregion


                while (novelCurrentPageInt < 7) { yield return null; }
                PlayerHPAddSub(100);
                Hukidashi("D33040a05");//がんばれ♪


                while (isNovelSetVisIng) { yield return null; }

                //開幕
                FadeBlack(0, 3);
                yield return new WaitForSeconds(2);
                #endregion

                #region 「あれ、もう終わり？」IKパン見る デスク少しうつぶせ 「一口も食べてないように」 「実際自分にも」
                ChieriMotion("つまんなそう", 0.1f, 2);
                Hukidashi("D33040a06");//あれ？　もう終わり？
                yield return new WaitForSeconds(1);
                yield return KeyOrWait(3);

                NovelSetVis("D33040a6");//パンの隙間を増やしただけ
                while (isNovelSetVisIng) { yield return null; }

                //IKパン見
                FollowDOMove(IKLookAtEyeTargetTrs, PanObj.transform, 0.2f);
                FollowDOMove(IKLookAtHeadTargetTrs, PanObj.transform, 3f);

                yield return new WaitForSeconds(0.6f / girlAnim.speed);
                ChieriMotion("デスク少しうつ伏せポーズ", 0.6f / girlAnim.speed, 0);

                yield return new WaitForSeconds(1);
                ChieriMotion("ｆ_けど・・", 0.1f, 2);
                Hukidashi("D33040a07");//一口も食べてないように見えるけど
                yield return new WaitForSeconds(1);
                yield return KeyOrWait(3);

                NovelSetVis("D33040a8");//実際自分にもわからない
                while (isNovelSetVisIng) { yield return null; }
                #endregion

                #region まあしょうがないっか罰ゲームね スマホ操作 「え、まさか」
                Hukidashi("D33040a08");//まあしょうがないっか
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //IKプレイヤー見る
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.2f);
                DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
                DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);


                ChieriMotion("デスク起き上がりポーズ", 0.6f / girlAnim.speed, 0);
                ChieriMotion("笑顔01口眉", 0.1f, 2);
                ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                Hukidashi("D33040a09");//罰ゲームね
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                NovelSetVis("D33040a9");//一体何を
                while (novelCurrentPageInt < 1) { yield return null; }


                #endregion

                #region 縮小
                yield return new WaitForSeconds(2);

                //縮小(2分の1)
                FadeBlack(0.5f, 1f, false, Ease.InOutElastic, false);
                DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x,
                    nowPlayerLocalScale / 2,
                    5f)
                    .SetEase(Ease.InBounce);
                SEPlay("magic-attack-darkness1", 0.3f);
                yield return new WaitForSeconds(1);

                Hukidashi("D33040a10");//えへへ、半分くらいかな～
                ChieriMotion("笑顔01口眉", 0.1f, 2);
                ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

                FadeBlack(0f, 2f, false, Ease.OutQuad, false);
                yield return new WaitForSeconds(1f);

                SEPlay("magic-gravity2", 0.3f);

                #endregion

                #region 「ちょっとまっ・・」接近「パンよりちっちゃくなっちゃった」「このパンだけで」
                NovelSetVis("D33040a10");//ちょっとまっ・・
                while (isNovelSetVisIng) { yield return null; }

                yield return new WaitForSeconds(1f);

                ChieriMotion("笑顔01口眉", 0.1f, 2);
                ChieriMotionDelay(2, "f_こうするとー・・", 0.1f, 2);//時間差表情戻し
                Hukidashi("D33040a11");//パンよりちっちゃくなっちゃった
                yield return new WaitForSeconds(1);
                ChieriMotion("デスク少しうつ伏せポーズ", 1.5f / girlAnim.speed, 0);
                yield return new WaitForSeconds(1);
                yield return KeyOrWait(2);

                //IKパン見
                FollowDOMove(IKLookAtEyeTargetTrs, PanObj.transform, 0.2f);
                FollowDOMove(IKLookAtHeadTargetTrs, PanObj.transform, 3f);
                Hukidashi("D33040a12");//このパンだけで何日も
                yield return new WaitForSeconds(2);

                #endregion

                #region IKでパンの方に右手

                //パンの上あたり右手IKTargetPos
                GameObject Chieri_04_IKRHandTarget_PanGrabPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_04_IKRHandTarget_PanGrabPosObj") as GameObject;
                IKRHandTargetTrs.localPosition = Chieri_04_IKRHandTarget_PanGrabPosObj.transform.localPosition;
                IKRHandTargetTrs.localEulerAngles = Chieri_04_IKRHandTarget_PanGrabPosObj.transform.localEulerAngles;

                //右手
                DOTweenToIKEfPos(IKRHandEf, 1, 3);
                DOTweenToIKEfRot(IKRHandEf, 1, 3);//偶然。この回転で肘つきすると口元を手の甲で隠してるようになるので、場合によってはありかも
                SEPlay("swing41_12低い_長い", RHandSphereTrs.gameObject);
                #endregion

                #region 「う、うわ！」暗転 設定 開幕
                NovelSetVis("D33040a11");//う、うわ！

                while (novelCurrentPageInt < 1) { yield return null; }
                //暗幕
                FadeBlack(1, 1);
                yield return new WaitForSeconds(1f);

                while (novelCurrentPageInt < 3) { yield return null; }
                Hukidashi("D33040a13");//あ～んむ

                //■右手IKOFF 智恵理ポーズ表情 パン消し
                DOTweenToIKEfPos(IKRHandEf, 0, 0);
                DOTweenToIKEfRot(IKRHandEf, 0, 0);

                ChieriMotion("デスク起き上がりポーズ", 0, 0);
                ChieriMotion("笑顔01口眉", 0f, 2);
                PanObj.SetActive(false);
                //IKプレイヤー見る
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
                DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);

                while (isNovelSetVisIng) { yield return null; }


                //右手IK戻し予備（キャンセル式になっていればいらない）
                DOTweenToIKEfPos(IKRHandEf, 0, 0);

                //開幕
                FadeBlack(0, 3);
                yield return new WaitForSeconds(2);
                #endregion

                #region たべちゃった　あれを一口？ 車みたいなおおきさだったかもだけど・・

                //■"デスク起き上がり→肘つき"モーションだけ速度変更（animatorのParametersでスピード変更（ステート毎に設定できるので、表情が遅くならない））
                girlAnim.SetFloat("デスク起き上がり→肘つきSpeed", 0.4f); yield return null;
                ChieriMotion("デスク起き上がり→肘つき", 0, 0);

                Hukidashi("D33040a14");//あはは、私がほとんど食べちゃった
                ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

                yield return new WaitForSeconds(2);

                NovelSetVis("D33040a12");//あれを一口で？！
                while (novelCurrentPageInt < 1) { yield return null; }
                yield return new WaitForSeconds(2);

                TereHohoAlphaChange(0.3f);
                TereHoho();
                ChieriMotion("ん？", 0.3f, 2);
                Hukidashi("D33040a15");//一口パンの半分だよ？
                yield return new WaitForSeconds(1);
                yield return KeyOrWait(6);

                //IK上見
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, new Vector3(0, 1f, 0), 0.2f);

                AseTare();
                ChieriMotion("やっぱり・・・？", 2f, 2);
                Hukidashi("D33040a16");//車ぐらいかもだけど
                yield return new WaitForSeconds(1);
                yield return KeyOrWait(3);

                while (isNovelSetVisIng) { yield return null; }
                yield return new WaitForSeconds(1);
                #endregion

                break;

            case 1://選択肢b　「ちょっと無理かな・・・」
                sentakuListNum = 99;

                NovelSetVis("tmpまだなし");
                while (isNovelSetVisIng) { yield return null; }
                goto 選択肢;

                break;
        }

        #endregion

        #region 肘つきから起き上がり　またおなかすいたら
        //■"デスク肘つき→起き上がり"モーションだけ速度変更（animatorのParametersでスピード変更（ステート毎に設定できるので、表情が遅くならない））
        girlAnim.SetFloat("デスク肘つき→起き上がりSpeed", 0.4f); yield return null;
        ChieriMotion("デスク肘つき→起き上がり", 0, 0);

        AseTare();
        Hukidashi("D33050");//また、おなかすいたら
        ChieriMotion("あはは・・・", 0.2f, 2);
        ChieriMotionDelay(2, "f_あはは目開き", 0.2f, 2);//時間差表情戻し

        yield return new WaitForSeconds(1);

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.2f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        yield return new WaitForSeconds(1);

        NovelSetVis("D33040a13");//食いしん坊めとでも
        while (isNovelSetVisIng) { yield return null; }
        #endregion

        #region ところで ～　泊まっていかない？

        ChieriMotion("ん？", 2f, 2);
        yield return new WaitForSeconds(1);

        //IKカレンダー見
        FollowDOMove(IKLookAtEyeTargetTrs, CalenderTrs, 0f);
        yield return new WaitForSeconds(1);


        TereHoho(false, 6);
        Hukidashi("D33060");//ところで
        yield return new WaitForSeconds(1);
        yield return KeyOrWait(3);

        Hukidashi("D33063");//明日休みだよね
        yield return new WaitForSeconds(1);
        yield return KeyOrWait(3);

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        Hukidashi("D33066");//ご飯の心配もないし
        yield return new WaitForSeconds(1);
        yield return KeyOrWait(3);

        #region 泊まっていかない？

        ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);
        yield return new WaitForSeconds(0.6f / girlAnim.speed);
        ChieriMotion("デスク少しうつ伏せポーズ", 0.6f / girlAnim.speed, 0);

        Hukidashi("D33070");//泊まっていかない？
        yield return new WaitForSeconds(1);
        yield return KeyOrWait(3);

        NovelSetVis("■D33080");//また突然の話
        while (novelCurrentPageInt < 2) { yield return null; }

        Hukidashi("D33080");//遅いし、ね？
        #endregion

        #endregion

        #region ■選択肢　じゃあ泊まろうかな　この大きさのまま？
        sentakuListNum = 99;//初期化
        while (isNovelSentakushiWait) { yield return null; }
        Sentakushi("■D33080a", Mathf.Infinity);
        //Sentakushi("■D33080b", Mathf.Infinity);

        while (sentakuListNum == 99) { yield return null; }
        yield return null;

        switch (sentakuListNum)
        {
            case 0://選択肢a 「じゃあ泊まろうかな！」

                #region 「じゃあ泊まろうかな」「やった」「寝返りあぶないか」「布団作ってあげる」
                yield return new WaitForSeconds(0.5f);
                NovelSetVis("D33080a01");//「じゃあ泊まろうかな」
                yield return new WaitForSeconds(1);

                Hukidashi("D33080a01");//やった！
                ChieriMotion("デスク起き上がりポーズ", 0.5f, 0);
                ChieriMotion("笑顔01口眉", 0.1f, 2);
                ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                yield return new WaitForSeconds(1);
                yield return KeyOrWait(2);


                NovelSetVis("D33080a02");//（残念）
                SEPlay("heart_def");
                while (isNovelSetVisIng) { yield return null; }

                yield return new WaitForSeconds(1);

                //IKカレンダー見
                FollowDOMove(IKLookAtEyeTargetTrs, CalenderTrs, 0f);
                TereHohoAlphaChange(0.2f); TereHoho();
                AseTare();
                Hukidashi("D33080a02");//あ、そっか　一緒に寝ると
                yield return new WaitForSeconds(1);
                ChieriMotion("f_あ！ほら！口閉じ", 0.2f, 2);
                yield return KeyOrWait(3);
                yield return new WaitForSeconds(1);

                TereHoho(false, 2);

                //ChieriMotion("ん？", 0.5f, 2);
                ChieriMotion("怒01もうちょっと下がって", 0.2f, 2);
                Hukidashi("D33080a03");//寝返りが危ないか
                yield return new WaitForSeconds(1);
                yield return KeyOrWait(2);
                NovelSetVis("D33080a03");//残念

                Hukidashi("D33080a04");//ん～・・
                                       //ChieriMotion("f_けど・・・", 1f, 2);
                yield return new WaitForSeconds(3);

                while (isNovelSetVisIng) { yield return null; }

                //そうだ！
                yield return new WaitForSeconds(1);
                ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);
                yield return new WaitForSeconds(1);


                //プレイヤー見
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                ChieriMotion("f_あ！ほら！口閉じ", 0.5f, 2);
                ChieriMotion("デスク少しうつ伏せポーズ", 1f, 0);
                Hukidashi("D33080a05");//そうだ！布団作ってあげる！
                yield return new WaitForSeconds(2);
                yield return KeyOrWait(3);
                yield return new WaitForSeconds(1);




                #endregion

                //暗幕
                FadeBlack(1, 2);
                yield return new WaitForSeconds(2f);

                DB.isBunki_Day1_SleepBedPos = true;

                break;

            case 1://選択肢b　「この大きさのまま？」
                yield return new WaitForSeconds(1);

                break;
        }
        #endregion

        EventMove("会話3_ハンカチベッド");

        yield break;
    }

    IEnumerator D3400()//会話3_ハンカチベッド
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            //nowPlayerLocalScl = new Vector3(0.05f, 0.05f, 0.05f);
            nowPlayerLocalScale = new Vector3(0.015f, 0.015f, 0.015f);
            //暗幕
            FadeBlack(1, 0);
        }
        EventReset();
        //goto デバッグスキップ;

        #region 設定
        #region 宿題ペン消しゴムなくし
        //宿題 位置に
        Drill_chieriTrs.gameObject.SetActive(false);

        ////プレイヤーの
        //HomeworkObjectsTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);

        //ペンなくし
        SharpenObj.SetActive(true);
        //消しゴム無くし
        KeshigomuObj.SetActive(true);
        #endregion //宿題置き

        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);
        //智恵理0位置ロック解除
        DB.isChieriPosLock = false;
        //アニメスピード
        girlAnim.speed = 0.4f;

        //WindnoiseSoundObj付与
        GameObject WindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , HeadSphereTrs);//（頭）
        DB.evMoveDelObjList.Add(WindnoiseSoundObj);

        //SoundObjのPos
        GameObject SoundObj_01_Ningyou_PareHeadPosObj = Resources.Load("_PosObj/D_Henai_Day1/SoundObj_01_Ningyou_PareHeadPosObj") as GameObject;
        WindnoiseSoundObj.transform.localPosition = SoundObj_01_Ningyou_PareHeadPosObj.transform.localPosition;


        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);


        //■分岐で智恵理とプレイヤーPosObj読み込み と智恵理ポーズ表情
        if (DB.isBunki_Day1_SleepBedPos)
        {
            //プレイヤー ベッドの上探索位置に
            GameObject Player_06_BedTansakuPosObj = Resources.Load("_PosObj/D_Henai_Day1/Player_06_BedTansakuPosObj") as GameObject;
            CameraObjectsTrs.localPosition = Player_06_BedTansakuPosObj.transform.localPosition;
            CameraObjectsTrs.localEulerAngles = Player_06_BedTansakuPosObj.transform.localEulerAngles;
            //智恵理 ベッドに向かって立ち（変更予定）位置に
            GameObject Chieri_05_BedMaePosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_05_BedMaePosObj") as GameObject;
            GirlTrs.localPosition = Chieri_05_BedMaePosObj.transform.localPosition;
            GirlTrs.localEulerAngles = Chieri_05_BedMaePosObj.transform.localEulerAngles;
            //ポーズ表情
            //ChieriMotion("片膝立ち宿題促しループ", 0f, 0);
            ChieriMotion("立ち宿題促し後のループ", 0f, 0);
            ChieriMotion("_noData", 0f, 2);
        }
        else
        {
            //プレイヤー 机の上探索位置に
            GameObject Player_00_DeskUeTansaku1PosObj = Resources.Load("_PosObj/D_Henai_Day1/Player_00_DeskUeTansaku1PosObj") as GameObject;
            CameraObjectsTrs.localPosition = Player_00_DeskUeTansaku1PosObj.transform.localPosition;
            CameraObjectsTrs.localEulerAngles = Player_00_DeskUeTansaku1PosObj.transform.localEulerAngles;
            //智恵理 探索位置に
            GameObject Chieri_00_TsukueMaePosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_00_TsukueMaePosObj") as GameObject;
            GirlTrs.localPosition = Chieri_00_TsukueMaePosObj.transform.localPosition;
            GirlTrs.localEulerAngles = Chieri_00_TsukueMaePosObj.transform.localEulerAngles;
            //ポーズ表情
            ChieriMotion("背比べ待機02", 0f, 0);
            ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);
        }

        //スピーカー 位置に
        SpeakerTrs.gameObject.SetActive(true);
        GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
        SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        #endregion 設定

        #region はい完成 よいしょ 開幕
        yield return new WaitForSeconds(1);
        Hukidashi("D34000");//はい、完成
        yield return new WaitForSeconds(1); yield return KeyOrWait(3); yield return new WaitForSeconds(1);

        Hukidashi("D34010");//よいしょ
        yield return new WaitForSeconds(1); yield return KeyOrWait(3); yield return new WaitForSeconds(1);

        //開幕
        FadeBlack(0, 3);
        yield return new WaitForSeconds(2);

        #endregion


        if (DB.isBunki_Day1_SleepBedPos)//ベッドの場合
        {
            #region ここなら大丈夫 たしかに それにしても 人形みたい おいおい よく寝れそう？

            yield return new WaitForSeconds(1);
            ChieriMotion("笑顔01口眉", 0.1f, 2);
            ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
            Hukidashi("D34020");//ここなら
            yield return new WaitForSeconds(1); yield return KeyOrWait(3); yield return new WaitForSeconds(1);

            NovelSetVis("D34020");//「たしかにここなら」
            while (isNovelSetVisIng) { yield return null; }

            yield return new WaitForSeconds(1);


            ChieriMotion("_noData", 0.1f, 2);
            Hukidashi("D34023");//それにしても・・
            yield return new WaitForSeconds(1); yield return KeyOrWait(3); yield return new WaitForSeconds(1);

            ChieriMotion("片膝立ち宿題促し開始", 0.5f, 0);
            yield return new WaitForSeconds(2.3f);

            Hukidashi("D34026");//こう見ると人形みたい
            yield return new WaitForSeconds(1); yield return KeyOrWait(3); yield return new WaitForSeconds(1);

            NovelSetVis("D34026");//「お、おいおい」
            while (isNovelSetVisIng) { yield return null; }

            ChieriMotion("笑顔01口眉", 0.05f, 2);
            ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し
            yield return new WaitForSeconds(0.25f);

            //智恵理顔IKpos読み込み
            GameObject Chieri_06_IKHead_MiyadanaNanamePosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_06_IKHead_MiyadanaNanamePosObj") as GameObject;
            FollowDOMove(IKLookAtHeadTargetTrs, Chieri_06_IKHead_MiyadanaNanamePosObj.transform.localPosition, 2f, Ease.OutBack);
            yield return new WaitForSeconds(1);

            Hukidashi("D34030");//どう？　よく寝れそう？
            yield return new WaitForSeconds(4);

            //■■選択肢
            sentakuListNum = 99;//初期化
            while (isNovelSentakushiWait) { yield return null; }

            //■選択肢切り候補 （一緒に寝るが今はないので）

            Sentakushi("■D34030a", Mathf.Infinity);
            //Sentakushi("■D34030b", Mathf.Infinity);



            while (sentakuListNum == 99) { yield return null; }
            yield return null;

            switch (sentakuListNum)
            {
                case 0://選択肢a 「うん、バッチリ」
                    #region 「うん、バッチリ」 よかった じゃあお風呂はいるから 寝ててもいいからね
                    yield return new WaitForSeconds(0.5f);
                    NovelSetVis("D34030a");//「うんバッチリ」
                    yield return new WaitForSeconds(1);

                    TereHohoAlphaChange(0.1f);
                    TereHoho();
                    ChieriMotion("笑顔01口眉", 0.05f, 2);
                    ChieriMotionDelay(1f, "笑顔01口眉_目閉じない", 0.05f, 2);//時間差表情戻し

                    Hukidashi("D34030a1");//よかった！

                    while (isNovelSetVisIng) { yield return null; }

                    TereHoho(false);
                    ChieriMotion("片膝立ち宿題促し終了立ち上がり", 0.5f, 0);
                    yield return new WaitForSeconds(1);
                    FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);

                    Hukidashi("D34040");//じゃあわたしお風呂入るから
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3); yield return new WaitForSeconds(1);

                    Hukidashi("D34050");//先に寝てていいからね
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3); yield return new WaitForSeconds(1);
                    #endregion

                    break;

                case 1://選択肢b　「やっぱり一緒に寝よう」
                    yield return new WaitForSeconds(1);

                    break;
            }
            #endregion
        }

        Destroy(WindnoiseSoundObj);

        #region 風呂行く暗幕 智恵理ドア位置にしてオフ 「智恵理は出て行った」探索か寝るか選択へ 開幕
        //■風呂行く暗幕
        FadeBlack(1, 1);
        yield return new WaitForSeconds(1f);

        //智恵理ドア位置へ
        GameObject Chieri_01_DoorPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_01_DoorPosObj") as GameObject;
        GirlTrs.localPosition = Chieri_01_DoorPosObj.transform.localPosition;
        //ドア開く音
        SEPlay(DoorSEObj, "door-open1", GirlTrs.gameObject);
        yield return new WaitForSeconds(2f);



        NovelSetVis("■D34050");//「智恵理は出て行った」探索か寝るか選択

        //ドア閉まる音
        SEPlay(DoorSEObj, "door-close2", GirlTrs.gameObject);
        yield return new WaitForSeconds(3f);
        GirlMeshTrs.gameObject.SetActive(false);

        while (novelCurrentPageInt < 1) { yield return null; }

        //開幕
        FadeBlack(0, 1);
        yield return new WaitForSeconds(2);
        #endregion


        #region ■選択肢 「興奮して寝れない」 「疲れた寝る」　■考えられない これはこれで　■なんだか楽しいな なんだか怖いな
        選択肢:
        sentakuListNum = 99;//初期化
                            //ノベル選択肢タイミング（終了直前）までループ
        while (isNovelSentakushiWait) { yield return null; }

        //風呂中探索はないので、寝るオンリー

        Sentakushi("■D34050b", Mathf.Infinity);
        //Sentakushi("■D34050a", Mathf.Infinity);

        //選択肢選ばれるまでループ
        while (sentakuListNum == 99) { yield return null; }
        yield return null;
        switch (sentakuListNum)
        {
            case 0://選択肢a 疲れた寝る
                sentakuListNum = 99;
                #region 疲れた寝る ハンカチ布団被り
                yield return new WaitForSeconds(0.5f);
                NovelSetVis("■D34050b1");//「疲れた寝よう」
                yield return new WaitForSeconds(1);

                while (novelCurrentPageInt < 2) { yield return null; }
                SEPlay("nuno_rustling-of-clothes1");
                //暗幕
                FadeBlack(1, 1);
                yield return new WaitForSeconds(2f);
                #endregion

                while (novelCurrentPageInt < 8) { yield return null; }
                //FadeColor(Color.blue, 1, 1, false);

                #region fadeImageセット ピンク
                //(モヤのルール画像はResoucesからなくしたため一旦コメントアウト（また使うならResouces_Movedから参照して使う）)
                //Texture moya2 = Resources.Load("Main/Camera/FadeImageRuleTexture/moya2") as Texture;
                //fadeImage.maskTexture = moya2;

                fadeImage.color = new Color(0.94f, 0.49f, 0.89f, 0.2f);//ピンク薄
                DOTween.To(() => fadeImage.Range, (x) => fadeImage.Range = x, 0.24f, 1f);
                #endregion

                SEPlay("heart_def");

                while (novelCurrentPageInt < 13) { yield return null; }
                DOTween.To(() => fadeImage.Range, (x) => fadeImage.Range = x, 0.3f, 3f);

                while (isNovelSentakushiWait) { yield return null; }
                Sentakushi("■D34050b1a", Mathf.Infinity);
                Sentakushi("■D34050b1b", Mathf.Infinity);
                //選択肢選ばれるまでループ
                sentakuListNum = 99;//初期化
                while (sentakuListNum == 99) { yield return null; }
                yield return null;
                switch (sentakuListNum)
                {
                    case 0://選択肢a 寝れない！お腹に巻こう 
                        #region //寝れない！お腹に巻こう ■選択肢 なんだか楽しいな なんだか怖いなへ
                        yield return new WaitForSeconds(0.5f);
                        NovelSetVis("D34050b1a");//「ぶはっ！」

                        SEPlay("nuno_washing-machine-laundry-put1");

                        //開幕（ハンカチから顔出し演出）
                        FadeWhite(1, 1);
                        FadeBlack(0, 1);
                        yield return new WaitForSeconds(1);
                        FadeWhite(0, 1);
                        FadeColor(new Color(0.3f, 0.3f, 0.3f), 1, 1, false);

                        DOTween.To(() => fadeImage.Range, (x) => fadeImage.Range = x, 0f, 5f);

                        while (isNovelSetVisIng) { yield return null; }
                        yield return new WaitForSeconds(1);

                        //後ろを黒にしてカラーを薄くすることで少しずつ暗く
                        FadeBlack(1, 0);
                        FadeColor(new Color(0.3f, 0.3f, 0.3f), 0.7f, 3, false);

                        yield return new WaitForSeconds(2);

                        選択肢2:
                        NovelSetVis("■D34050b1a");//しかしこの状況は

                        while (isNovelSentakushiWait) { yield return null; }
                        yield return new WaitForSeconds(1);

                        Sentakushi("■D34050b1aa", Mathf.Infinity);
                        Sentakushi("■D34050b1ab", Mathf.Infinity);
                        //選択肢選ばれるまでループ
                        sentakuListNum = 99;//初期化
                        while (sentakuListNum == 99) { yield return null; }
                        yield return null;
                        switch (sentakuListNum)
                        {
                            case 0://選択肢a なんだか楽しいな
                                yield return new WaitForSeconds(0.5f);
                                NovelSetVis("D34050b1aa");//なんだか楽しいな
                                while (isNovelSetVisIng) { yield return null; }
                                //暗幕（FadeColor消し）
                                FadeBlack(1, 1);
                                FadeColor(new Color(0.3f, 0.3f, 0.3f), 0f, 1, false);
                                yield return new WaitForSeconds(2f);

                                break;

                            case 1://選択肢b なんだか怖いな
                                yield return new WaitForSeconds(0.5f);
                                NovelSetVis("D34050b1ab");//なんだか怖いな
                                while (isNovelSetVisIng) { yield return null; }

                                SEPlay("nuno_washing-machine-laundry-put1");

                                //開幕
                                FadeBlack(0, 1);
                                FadeColor(new Color(0.3f, 0.3f, 0.3f), 0f, 1, false);
                                yield return new WaitForSeconds(1);

                                NovelSetVis("D34050b1aa1");//寝れるわけがない！
                                while (isNovelSetVisIng) { yield return null; }

                                NovelSetVis("tmpまだなし");
                                while (isNovelSetVisIng) { yield return null; }
                                goto 選択肢2;

                                EventMove("探索2_風呂中");

                                yield break;
                        }
                        #endregion

                        break;

                    case 1://選択肢b これはこれで・・
                        #region これはこれで・・ 少しずつピンク 暗幕
                        yield return new WaitForSeconds(0.5f);
                        NovelSetVis("D34050b1b");//これはこれで・・

                        while (novelCurrentPageInt < 1) { yield return null; }
                        DOTween.To(() => fadeImage.Range, (x) => fadeImage.Range = x, 0.4f, 3f);

                        while (novelCurrentPageInt < 4) { yield return null; }
                        DOTween.To(() => fadeImage.Range, (x) => fadeImage.Range = x, 0.6f, 3f);

                        while (isNovelSetVisIng) { yield return null; }
                        DOTween.To(() => fadeImage.Range, (x) => fadeImage.Range = x, 0f, 3f);
                        yield return new WaitForSeconds(3);
                        #endregion

                        break;
                }

                EventMove("会話4_就寝");

                break;

            case 1://選択肢b　興奮して寝れない
                sentakuListNum = 99;
                yield return new WaitForSeconds(0.5f);
                NovelSetVis("D34050a");//「興奮して寝れないな」
                yield return new WaitForSeconds(1);

                while (isNovelSetVisIng) { yield return null; }
                NovelSetVis("tmpまだなし");
                while (isNovelSetVisIng) { yield return null; }
                goto 選択肢;

                EventMove("探索2_風呂中");
                yield break;
        }
        #endregion


        //デバッグスキップ:
        SEPlay(UISEObj, "UI_pin");
        ChieriMotion("ベッド横寝", 0.5f, 0);
        //プレイヤー ベッドの上探索位置に
        GameObject debugPlayer_06_BedTansakuPosObj = Resources.Load("_PosObj/D_Henai_Day1/Player_06_BedTansakuPosObj") as GameObject;
        CameraObjectsTrs.localPosition = debugPlayer_06_BedTansakuPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = debugPlayer_06_BedTansakuPosObj.transform.localEulerAngles;
        //■デバッグ操作
        while (true)
        {
            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.V))
            { ChieriMotion("片膝立ち宿題促し終了立ち上がり", 0.5f, 0); }
            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.B))
            { ChieriMotion("片膝立ち宿題促し開始", 0.5f, 0); }
            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.N))
            { ChieriMotion("立ちループ", 0.5f, 0); }
            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.F))
            { ChieriMotion("ベッド横寝", 0.5f, 0); }
            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.G))
            { ChieriMotion("ベッド横起き目こすり", 0.5f, 0); }

            yield return null;
        }

        EventMove();

        yield break;
    }//排除
    IEnumerator D3500()//探索2_風呂中
    {
        if (debugEventMoveFlag == true)
        {
            #region 大きさや位置
            //プレイヤー大きさ
            //nowPlayerLocalScl = new Vector3(0.05f, 0.05f, 0.05f);
            nowPlayerLocalScale = new Vector3(0.03f, 0.03f, 0.03f);
            //智恵理0位置ロック解除
            DB.isChieriPosLock = false;
            GirlMeshTrs.gameObject.SetActive(false);

            //■PosObjで読み込み
            //プレイヤー 机の上探索位置に
            GameObject Player_00_DeskUeTansaku1PosObj = Resources.Load("_PosObj/D_Henai_Day1/Player_00_DeskUeTansaku1PosObj") as GameObject;
            CameraObjectsTrs.localPosition = Player_00_DeskUeTansaku1PosObj.transform.localPosition;
            CameraObjectsTrs.localEulerAngles = Player_00_DeskUeTansaku1PosObj.transform.localEulerAngles;

            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;
            #endregion
        }
        EventReset();

        //■探索システム コルーチン始動
        StartCoroutine(TansakuSystemLoad());

        //■隠れ鬼移動システムON
        KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
        //ローディング待ち
        while (isKOSystemLoading) { yield return null; }
        //移動場所01オン
        KO_KakurePosObjsList[1].SetActive(true);






        //デバッグ
        Debug.Log("探索1デバッグ開始");


        //智恵理0位置ロック解除
        DB.isChieriPosLock = true;
        GirlMeshTrs.gameObject.SetActive(true);

        Debug.Log("探索1メインコルーチン終了");
        yield break;
    }
    IEnumerator D3600()//会話4_就寝
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            //nowPlayerLocalScl = new Vector3(0.05f, 0.05f, 0.05f);
            nowPlayerLocalScale = new Vector3(0.015f, 0.015f, 0.015f);
            //暗幕
            FadeBlack(1, 0);
        }
        EventReset();
        //MoveScene("TH_Yoru"); yield return new WaitForSeconds(1);

        #region 設定
        #region //ライト消し デバッグで一旦消さない
        //if (GameObject.Find("Floor light") != null)
        //{ NullJudgeFind("Floor light").GetComponent<Light>().enabled = false; }
        #endregion

        #region 宿題ペン消しゴムなくし
        //宿題
        Drill_chieriTrs.gameObject.SetActive(false);

        ////プレイヤーの宿題
        //HomeworkObjectsTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);

        //ペンなくし
        SharpenObj.SetActive(false);
        //消しゴム無くし
        KeshigomuObj.SetActive(false);
        #endregion

        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);
        //智恵理0位置ロック
        DB.isChieriPosLock = true;
        //アニメスピード
        girlAnim.speed = 0.5f;

        //IKオフ
        DOTweenToLAIKSEyes(LAIKEyeS, 0, 0);
        DOTweenToLAIKSHead(LAIKHeadS, 0, 0);

        //■分岐でプレイヤーPosObj読み込み
        if (DB.isBunki_Day1_SleepBedPos)
        {
            //プレイヤー ベッドの上探索位置に
            GameObject Player_06_BedTansakuPosObj = Resources.Load("_PosObj/D_Henai_Day1/Player_06_BedTansakuPosObj") as GameObject;
            CameraObjectsTrs.localPosition = Player_06_BedTansakuPosObj.transform.localPosition;
            CameraObjectsTrs.localEulerAngles = Player_06_BedTansakuPosObj.transform.localEulerAngles;
        }
        else
        {
            //プレイヤー 机の上探索位置に
            GameObject Player_00_DeskUeTansaku1PosObj = Resources.Load("_PosObj/D_Henai_Day1/Player_00_DeskUeTansaku1PosObj") as GameObject;
            CameraObjectsTrs.localPosition = Player_00_DeskUeTansaku1PosObj.transform.localPosition;
            CameraObjectsTrs.localEulerAngles = Player_00_DeskUeTansaku1PosObj.transform.localEulerAngles;
        }


        //智恵理 ベッドで寝
        //ポーズ表情
        ChieriMotion("ベッド横寝", 0f, 0);
        ChieriMotion("_noData", 0f, 2);

        //スピーカー 位置に
        SpeakerTrs.gameObject.SetActive(true);
        GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
        SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        //智恵理スマホベッドの上に
        ChieriSumahoObj.transform.SetParent(GameObjectsTrs);
        GameObject ChieriSumaho_Bed01PosObj = Resources.Load("_PosObj/_ParentPoseObjs/ChieriSumaho_Bed01PosObj") as GameObject;
        ChieriSumahoObj.transform.localPosition = ChieriSumaho_Bed01PosObj.transform.localPosition;
        ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_Bed01PosObj.transform.localEulerAngles;
        ChieriSumahoObj.SetActive(true);
        //ケーブルOn
        ChieriSumahoUSBCableObj.SetActive(true);

        #endregion 設定

        NovelSetVis("D36000");//寝てたのか・・
        while (isNovelSetVisIng) { yield return null; };

        //開幕
        FadeBlack(0, 3);
        yield return new WaitForSeconds(2);

        #region ■選択肢 寝なおす 起きる
        NovelSetVis("■D36010");//寝なおす 起きる

        //■選択肢切り候補 
        //探索せず告白ルート → 寝る
        //探索していると　→　起きてスマホで落ちる

        sentakuListNum = 99;//初期化
                            //ノベル選択肢タイミング（終了直前）までループ
        while (isNovelSentakushiWait) { yield return null; }

        Sentakushi("■D36010a", Mathf.Infinity);
        Sentakushi("■D36010b", Mathf.Infinity);

        //選択肢選ばれるまでループ
        while (sentakuListNum == 99) { yield return null; }
        yield return null;

        switch (sentakuListNum)
        {
            case 0://選択肢a 寝なおす
                yield return new WaitForSeconds(0.5f);
                NovelSetVis("D36010a");//朝まで寝なおす
                yield return new WaitForSeconds(1);
                while (novelCurrentPageInt < 1) { yield return null; };

                //暗幕
                FadeBlack(1, 3);
                while (isNovelSetVisIng) { yield return null; };
                yield return new WaitForSeconds(5);

                EventMove("会話5_起床");
                yield return new WaitForSeconds(1);

                break;

            case 1://選択肢b　起きる

                yield return new WaitForSeconds(0.5f);
                NovelSetVis("D36010b");//元に戻る方法はないか
                while (isNovelSetVisIng) { yield return null; }

                yield return new WaitForSeconds(1);
                EventMove("探索2_ベッドのスマホ");
                yield return new WaitForSeconds(1);

                break;
        }
        #endregion


        yield break;
    }//排除
    IEnumerator E3700()//探索2_ベッドのスマホ
    {
        if (debugEventMoveFlag == true)
        {
            #region 設定

            #region //ライト消し デバッグで一旦消さない
            //if (GameObject.Find("Floor light") != null)
            //{ NullJudgeFind("Floor light").GetComponent<Light>().enabled = false; }
            #endregion

            //プレイヤー大きさ
            //nowPlayerLocalScl = new Vector3(0.05f, 0.05f, 0.05f);
            nowPlayerLocalScale = new Vector3(0.015f, 0.015f, 0.015f);

            //■PosObjで読み込み
            //プレイヤー ベッドの上探索位置に
            GameObject Player_06_BedTansakuPosObj = Resources.Load("_PosObj/D_Henai_Day1/Player_06_BedTansakuPosObj") as GameObject;
            CameraObjectsTrs.localPosition = Player_06_BedTansakuPosObj.transform.localPosition;
            CameraObjectsTrs.localEulerAngles = Player_06_BedTansakuPosObj.transform.localEulerAngles;

            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

            #region 宿題ペン消しゴムなくし
            ////宿題
            //Drill_chieriTrs.gameObject.SetActive(false);

            ////プレイヤーの宿題
            //HomeworkObjectsTrs.gameObject.SetActive(false);
            //DrillTrs.gameObject.SetActive(false);

            //ペンなくし
            SharpenObj.SetActive(false);
            //消しゴム無くし
            KeshigomuObj.SetActive(false);
            #endregion

            //■智恵理ON
            GirlMeshTrs.gameObject.SetActive(true);
            //智恵理0位置ロック
            DB.isChieriPosLock = true;
            //アニメスピード
            girlAnim.speed = 0.5f;

            //IKオフ
            DOTweenToLAIKSEyes(LAIKEyeS, 0, 0);
            DOTweenToLAIKSHead(LAIKHeadS, 0, 0);

            //智恵理 ベッドで寝
            //ポーズ表情
            ChieriMotion("ベッド横寝", 0f, 0);
            ChieriMotion("_noData", 0f, 2);

            //智恵理スマホベッドの上に
            ChieriSumahoObj.transform.SetParent(GameObjectsTrs);
            GameObject ChieriSumaho_Bed01PosObj = Resources.Load("_PosObj/_ParentPoseObjs/ChieriSumaho_Bed01PosObj") as GameObject;
            ChieriSumahoObj.transform.localPosition = ChieriSumaho_Bed01PosObj.transform.localPosition;
            ChieriSumahoObj.transform.localEulerAngles = ChieriSumaho_Bed01PosObj.transform.localEulerAngles;
            ChieriSumahoObj.SetActive(true);
            ChieriSumahoUSBCableObj.SetActive(true);
            #endregion
        }
        EventReset();
        yield return null;

        //■探索システム コルーチン始動
        StartCoroutine(TansakuSystemLoad());

        //■隠れ鬼移動システムON
        KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
        //ローディング待ち
        while (isKOSystemLoading) { yield return null; }
        //移動場所05オン
        KO_KakurePosObjsList[5].SetActive(true);

        //デバッグ移動（スマホケーブル前に移動することで落ちるイベントすぐ再生）
        //CameraObjectsTrs.localPosition = KO_KakurePosObjsList[5].transform.Find("SumahoUeCableMae").gameObject.transform.localPosition;


        #region ■使用する探索オブジェ選別

        #region //以前のやり方（ちえりスマホがヒエラルキーに常駐してた頃のもの？）
        ////■該当の探索オブジェのコリダータグ書き換え
        //foreach (GameObject tmpObj in TansakuObjList)
        //{
        //    //■まずは全部オフ
        //    //（子の0番目にコリダーのフォルダがあること前提）
        //    foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
        //    { CollObjs.tag = "TansakuSeeCollOffObj"; }

        //    //該当していたら再度ONに戻し
        //    if (
        //        tmpObj.name == "ChieriSumaho"
        //        )
        //    {
        //        foreach (Transform CollObjs in tmpObj.transform.GetChild(0).transform)
        //        { CollObjs.tag = "TansakuSeeCollOnObj"; }
        //    }

        //}
        #endregion

        //20200202 直接書き換え
        foreach (Transform CollObjs in ChieriSumahoObj.transform.Find("Collider_ChieriSumaho"))
        { CollObjs.tag = "TansakuSeeCollOnObj"; }

        #endregion


        #region //移動ポイントフラグチェック
        ////椅子前
        //if (DB.isIsuMaeKOPosFlag)
        //{
        //    GameObject tmpObj = KO_KakurePosObjsList[1].transform.Find("IsuMae01Sphere").gameObject;
        //    tmpObj.GetComponent<Renderer>().enabled = true;
        //    tmpObj.GetComponent<Collider>().enabled = true;
        //}
        //else
        //{
        //    GameObject tmpObj = KO_KakurePosObjsList[1].transform.Find("IsuMae01Sphere").gameObject;
        //    tmpObj.GetComponent<Renderer>().enabled = false;
        //    tmpObj.GetComponent<Collider>().enabled = false;
        //}

        #endregion

        //フラグ立てておく（再プレイ時用）
        EnumSumahoMae01 = enumSumahoMae01.初回到着;

        yield break;
    }

    IEnumerator D4000()//会話5_起床
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            //nowPlayerLocalScl = new Vector3(0.05f, 0.05f, 0.05f);
            nowPlayerLocalScale = new Vector3(0.015f, 0.015f, 0.015f);

            #region 宿題ペン消しゴムなくし
            //宿題 位置に
            Drill_chieriTrs.gameObject.SetActive(false);

            //プレイヤーの
            //HomeworkObjectsTrs.gameObject.SetActive(false);
            DrillTrs.gameObject.SetActive(false);

            //ペンなくし
            SharpenObj.SetActive(false);
            //消しゴム無くし
            KeshigomuObj.SetActive(false);
            #endregion //宿題置き

            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

            //暗幕
            FadeBlack(1, 0);
        }
        EventReset();
        //MoveScene("TH_Asa"); yield return new WaitForSeconds(1);

        #region 設定
        #region ライト消し
        if (GameObject.Find("Floor light") != null)
        { NullJudgeFind("Floor light").GetComponent<Light>().enabled = false; }
        #endregion


        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);
        //智恵理0位置ロック
        DB.isChieriPosLock = true;
        //アニメスピード
        girlAnim.speed = 0.5f;

        //IKオフ
        DOTweenToLAIKSEyes(LAIKEyeS, 0, 0);
        DOTweenToLAIKSHead(LAIKHeadS, 0, 0);

        //■分岐でプレイヤーPosObj読み込み
        if (DB.isBunki_Day1_SleepBedPos)
        {
            //プレイヤー ベッドの上探索位置に
            GameObject Player_06_BedTansakuPosObj = Resources.Load("_PosObj/D_Henai_Day1/Player_06_BedTansakuPosObj") as GameObject;
            CameraObjectsTrs.localPosition = Player_06_BedTansakuPosObj.transform.localPosition;
            CameraObjectsTrs.localEulerAngles = Player_06_BedTansakuPosObj.transform.localEulerAngles;
        }
        else
        {
            //プレイヤー 机の上探索位置に
            GameObject Player_00_DeskUeTansaku1PosObj = Resources.Load("_PosObj/D_Henai_Day1/Player_00_DeskUeTansaku1PosObj") as GameObject;
            CameraObjectsTrs.localPosition = Player_00_DeskUeTansaku1PosObj.transform.localPosition;
            CameraObjectsTrs.localEulerAngles = Player_00_DeskUeTansaku1PosObj.transform.localEulerAngles;
        }


        //智恵理 ベッド横起き
        //ポーズ表情
        ChieriMotion("ベッド横起き目こすり", 0f, 0);
        ChieriMotion("f_下がり眉目瞑り", 0f, 2);//眠り目来るまで一時

        #endregion 設定

        NovelSetVis("D40000");//「目が覚めたのはほぼ同時だった」
        while (isNovelSetVisIng) { yield return null; }

        //開幕
        FadeBlack(0, 8);
        yield return new WaitForSeconds(4);

        #region IKで右手ベッドの上におき、こっちみるの流れ

        Hukidashi("D40000");//ん～・・
        yield return new WaitForSeconds(2);

        //IKでプレイヤー位置見てるときの右手IKTargetPos
        GameObject Chieri_01_IK_RHand_BedPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_01_IK_RHand_BedPosObj") as GameObject;
        IKRHandTargetTrs.localPosition = Chieri_01_IK_RHand_BedPosObj.transform.localPosition;
        IKRHandTargetTrs.localEulerAngles = Chieri_01_IK_RHand_BedPosObj.transform.localEulerAngles;

        //右手
        DOTweenToIKEfPos(IKRHandEf, 1, 4);
        DOTweenToIKEfRot(IKRHandEf, 1, 4);

        ChieriMotion("f_ジト目のみ40", 0.8f, 2);//眠り目来るまで一時

        yield return new WaitForSeconds(2);

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0.5f);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 3);


        #endregion
        yield return new WaitForSeconds(2);
        Hukidashi("D40010");//あ、そっか・・

        yield return new WaitForSeconds(3);
        NovelSetVis("D40010");//「おはよう」
        yield return new WaitForSeconds(2);
        ChieriMotion("f_私だけなのかな・・？", 0.2f, 2);
        yield return new WaitForSeconds(2);

        ChieriMotion("f_余裕感笑顔", 0.5f, 2);
        yield return new WaitForSeconds(2);

        Hukidashi("D40020");//ふふ、おはよう


        yield return new WaitForSeconds(3);
        yield return KeyOrWait(2);

        //暗幕
        FadeBlack(1, 4);
        yield return new WaitForSeconds(1);

        NovelSetVis("D40020");//「なんとなく不思議な感じ」
        while (isNovelSetVisIng) { yield return null; }

        if (DB.isBunki_Day1_SleepBedPos)//ベッドの場合 机に運んでくれたテキスト
        {
            yield return new WaitForSeconds(1);
            NovelSetVis("D40030");
            yield return new WaitForSeconds(1);
        }

        //目頭IKオフ
        DOTweenToLAIKSEyes(LAIKEyeS, 0, 0);
        DOTweenToLAIKSHead(LAIKHeadS, 0, 0);
        //右手IKオフ
        DOTweenToIKEfPos(IKRHandEf, 0, 0);
        DOTweenToIKEfRot(IKRHandEf, 0, 0);

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);


        yield return new WaitForSeconds(1);
        SEPlay(UISEObj, "UI_pin");

        EventMove("練習1_朝");

        yield break;
    }
    IEnumerator E4100()//監禁2_ペットボトル
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            nowPlayerLocalScale = new Vector3(0.015f, 0.015f, 0.015f);
            //暗幕
            FadeBlack(1, 0);
            #region 宿題ペン消しゴムなくし
            //宿題 位置に
            Drill_chieriTrs.gameObject.SetActive(false);

            //プレイヤーの
            DrillTrs.gameObject.SetActive(false);

            //ペンなくし
            SharpenObj.SetActive(false);
            //消しゴム無くし
            KeshigomuObj.SetActive(false);
            #endregion //宿題置き

            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        }
        EventReset();
        //MoveScene("TH_Asa"); yield return new WaitForSeconds(1);

        #region 設定
        girlAnim.speed = 0.7f;

        //■プレイヤー 机の上位置に
        GameObject Player_000_DeskUeStartPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_000_DeskUeStartPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_000_DeskUeStartPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_000_DeskUeStartPosObj.transform.localEulerAngles;

        #region ■智恵理
        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);
        DB.isChieriPosLock = true;
        ChieriMotion("デスク肘つきポーズ", 0f, 0);
        ChieriMotion("f_リラックス02", 0f, 2);

        //智恵理 椅子すわり位置に
        GameObject Chieri_02_DeskChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02_DeskChairPosObj") as GameObject;
        GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;

        //頭にWindnoiseSoundObj付与
        GameObject HeadSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , HeadSphereTrs);//（頭）
        DB.evMoveDelObjList.Add(HeadSoundObj);

        AudioSource tmpHeadAS = HeadSoundObj.GetComponent<AudioSource>();
        //ミュート
        tmpHeadAS.mute = true;

        //SoundObjのPos
        GameObject SoundObj_01_Ningyou_PareHeadPosObj = Resources.Load("_PosObj/D_Henai_Day1/SoundObj_01_Ningyou_PareHeadPosObj") as GameObject;
        HeadSoundObj.transform.localPosition = SoundObj_01_Ningyou_PareHeadPosObj.transform.localPosition;


        //右人差し指にWindnoiseSoundObj付与
        GameObject RHitosasiSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRhitosashi02Trs);
        DB.evMoveDelObjList.Add(RHitosasiSoundObj);

        AudioSource tmpRhitosasiAS = RHitosasiSoundObj.GetComponent<AudioSource>();
        //ミュート
        tmpRhitosasiAS.mute = true;
        //SoundObjのPos
        GameObject SoundObj_04_TsumamiYubi_RHitosasiPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_04_TsumamiYubi_RHitosasiPosObj") as GameObject;
        RHitosasiSoundObj.transform.localPosition = SoundObj_04_TsumamiYubi_RHitosasiPosObj.transform.localPosition;

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        #endregion

        #region ペットボトル取得

        //ペットボトル既に取得されていればなにもせず、なければシーンから、それでもなければリソースからクローン
        ObjSceneOrResouceLoad(ref PetBottleObj, "PetBottle", "Main/KomonoObj/PetBottle/PetBottle");
        DB.evMoveDelObjList.Add(PetBottleObj);

        //ペットボトル智恵理左手にペア
        PetBottleObj.transform.SetParent(Bip001_L_HandTrs);
        //位置
        GameObject PetBottle_ChieriLHandPosObj = Resources.Load("_PosObj/_ParentPoseObjs/PetBottle_ChieriLHandPosObj") as GameObject;
        PetBottleObj.transform.localPosition = PetBottle_ChieriLHandPosObj.transform.localPosition;
        PetBottleObj.transform.localEulerAngles = PetBottle_ChieriLHandPosObj.transform.localEulerAngles;
        PetBottleObj.transform.localScale = PetBottle_ChieriLHandPosObj.transform.localScale;

        //キャップ既に取得されていればなにもしない
        if (CapObj != null) { }
        else
        {
            //キャップ、クローンで取得(ペアレント変えるので、プレファブ上書きで消さないようにクローン)
            CapObj = Instantiate(PetBottleObj.transform.Find("Cap").gameObject);
            DB.evMoveDelObjList.Add(CapObj);

            //クローンON
            CapObj.transform.gameObject.SetActive(true);
            //ペアレント
            CapObj.transform.SetParent(GameObjectsTrs);
            //オリジナルをオフ
            PetBottleObj.transform.Find("Cap").gameObject.SetActive(false);
            //クローンキャップ机の上へ
            GameObject Cap_DeskUePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Cap_DeskUePosObj") as GameObject;
            CapObj.transform.localPosition = Cap_DeskUePosObj.transform.localPosition;
            CapObj.transform.localEulerAngles = Cap_DeskUePosObj.transform.localEulerAngles;
            CapObj.transform.localScale = Cap_DeskUePosObj.transform.localScale;
        }

        //一旦両方ともOFF
        PetBottleObj.SetActive(false);
        CapObj.SetActive(false);

        #endregion


        //椅子の位置
        GameObject Chair_01_SuwariPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chair_01_SuwariPosObj") as GameObject;
        ChairTrs.localPosition = Chair_01_SuwariPosObj.transform.localPosition;
        ChairTrs.localEulerAngles = Chair_01_SuwariPosObj.transform.localEulerAngles;

        //事前読み込み
        GameObject Player_010_DeskUeChieriTsumamiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_010_DeskUeChieriTsumamiPosObj") as GameObject;


        //ペットボトルシェイクテスト用
        Vector3 tmpShakePrevPos = new Vector3();
        Quaternion tmpShakePrevQua = new Quaternion();
        float tmpShakeTime = 1;


        #endregion 設定
        yield return new WaitForSeconds(2);
        FadeBlack(0, 2);
        yield return new WaitForSeconds(2);

        #region ペットボトル取り出すまで
        //ミュート解除
        tmpHeadAS.mute = false;
        tmpRhitosasiAS.mute = false;

        NovelSetVis("E4100010");//見つめられている-やんわりと伝えよう・・
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        //同時発声でノベル消し
        NovelSetVis("E4100020");//あのさ
        yield return new WaitForSeconds(0.2f);
        ChieriMotion("f_あはは・・2", 0.2f, 2);
        ChieriMotionDelay(3, "f_あはは・・2目開き", 0.2f, 2);
        Hukidashi("E4100010");//お腹すいたね
        yield return new WaitForSeconds(0.5f);
        isNovelFadeTween = isNovelSetVisIng = false;
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        NovelSetVis("E4100030");//ほぼ同時だった。
        while (isNovelSetVisIng) { yield return null; }

        //まばたき
        ChieriMotion("b_まばたきSlow用", 0f, 4);
        blinkTime = 0;
        //上向き
        ChieriMotion("f_本当に小さいね～", 0.3f, 2);
        //IKカレンダー見
        FollowDOMove(IKLookAtEyeTargetTrs, CalenderTrs, 0f);
        yield return new WaitForSeconds(1);
        Hukidashi("E4100020");//朝ごはんも食べたいけど
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        //■"デスク肘つき→起き上がり"モーションだけ速度変更（animatorのParametersでスピード変更（ステート毎に設定できるので、表情が遅くならない））
        girlAnim.SetFloat("デスク肘つき→起き上がりSpeed", 0.4f); yield return null;
        ChieriMotion("デスク肘つき→起き上がり", 0, 0);

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        //まばたき
        ChieriMotion("b_まばたきSlow用", 0f, 4);
        blinkTime = 0;

        yield return new WaitForSeconds(1);

        Hukidashi("E4100030");//のど渇いてるんじゃない？

        ChieriMotion("f_眉高い笑顔少しジト目", 0.3f, 2);

        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1f);

        NovelSetVis("E4100040");//あ、うん
        while (novelCurrentPageInt < 2) { yield return null; }

        //ミュート
        tmpHeadAS.mute = true;
        tmpRhitosasiAS.mute = true;

        //ノベル中暗幕でペットボトル取り出しポーズに
        FadeBlack(1, 0.5f);
        yield return new WaitForSeconds(0.5f);

        DB.isChieriPosLock = true;
        ChieriMotion("デスクペットボトル取り出し前ポーズ", 0f, 0);

        while (novelCurrentPageInt < 6) { yield return null; }

        //開幕
        FadeBlack(0, 0.5f);
        yield return new WaitForSeconds(0.5f);
        while (isNovelSetVisIng) { yield return null; }
        //ミュート解除
        tmpHeadAS.mute = false;
        tmpRhitosasiAS.mute = false;


        yield return new WaitForSeconds(1);
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        Hukidashi("E4100040");//いいものがあるから
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);


        //■ペットボトル取り出し開始
        ChieriMotion("デスクペットボトル取り出し", 0f, 0);
        NovelSetVis("E4100050");//あ、うん

        //鞄へ手を伸ばすあたりまで待ち
        StartCoroutine(GirlAnimReadSystem());
        yield return null;
        while (girlAnimNomTime <= 0.5f)
        { yield return null; }


        //IK鞄に
        GameObject tmpSchoolBagObj = GameObject.Find("SchoolBag");
        FollowDOMove(IKLookAtEyeTargetTrs, tmpSchoolBagObj.transform, 0.1f);
        //顔はオフ
        DOTweenToLAIKSHead(LAIKHeadS, 0, 1.5f);

        //まばたき
        ChieriMotion("b_まばたきSlow用", 0f, 4);
        blinkTime = 0;

        while (novelCurrentPageInt < 3) { yield return null; }
        //暗幕
        FadeBlack(1, 1f);
        yield return new WaitForSeconds(1f);

        //プレイヤー 机の上位置に
        CameraObjectsTrs.localPosition = Player_010_DeskUeChieriTsumamiPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_010_DeskUeChieriTsumamiPosObj.transform.localEulerAngles;

        //まさぐり音仮
        SEPlay("laundry-spread1", tmpSchoolBagObj);
        yield return new WaitForSeconds(2);

        //風切り音出す用に逆再生
        ChieriMotion("デスクペットボトル取り出し逆再生", 0f, 0);
        yield return null;
        while (girlAnimNomTime <= 0.8f)
        { yield return null; }
        isGirlAnimReadSystem = false;
        NovelSetVis("E4100060");//そして出てきたのは

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        //ミュート
        tmpHeadAS.mute = true;
        tmpRhitosasiAS.mute = true;
        #endregion

        #region 飲む？　の流れ
        //ペットボトル準備
        PetBottleObj.SetActive(true);
        CapObj.SetActive(true);
        ChieriMotion("デスクペットボトル持ち", 0f, 0);

        //マスクで左手ペットボトル持ち（「取り出し」では中指、「落とす」では親指が少し埋まる）（指の大きさ変わった？　デスクペットボトルへ落とすのclipをコピーしてきて左手だけにして少し親指開いた）
        ChieriMotion("LH_デスクペットボトルへ落とす", 0f, 6);


        while (isNovelSetVisIng) { yield return null; }
        //開幕
        FadeBlack(0, 0.5f);
        yield return new WaitForSeconds(0.5f);
        yield return new WaitForSeconds(1);

        //ミュート解除
        tmpHeadAS.mute = false;
        tmpRhitosasiAS.mute = false;

        NovelSetVis("E4100070");//お、おお……
        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        ChieriMotion("f_あはは・・2", 0.2f, 2);
        ChieriMotionDelay(1, "f_あはは・・2目開き", 0.2f, 2);
        Hukidashi("E4100050");//えへへ、部活で飲んじゃった
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);

        //まばたき
        ChieriMotion("b_まばたきSlow用", 0f, 4);
        blinkTime = 0;

        ChieriMotion("f_本当に小さいね～", 0.3f, 2);
        //IKペットボトル見
        FollowDOMove(IKLookAtEyeTargetTrs, PetBottleObj.transform, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, PetBottleObj.transform, new Vector3(0, -0.045f, 0), 1);

        Hukidashi("E4100060");//だからもう捨てようと
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //口パク止め
        kutipakuTimerFloat = 0;
        ChieriMotion("_noData", 0.1f, 3);
        //■■※ マスクの動作は0フレで_noDataにしないと止まった事にならず、クチ開き表情ができなくなるのでディレイでクチ閉じ
        ChieriMotionDelay(0.1f, "_noData", 0f, 3);//時間差表情戻し

        yield return new WaitForSeconds(1);

        //目IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        ChieriMotion("笑顔01口眉_目閉じない", 0.2f, 2);
        //まばたき
        ChieriMotion("b_まばたきSlow用", 0f, 4);
        blinkTime = 0;

        yield return new WaitForSeconds(1);

        ChieriMotion("h_右少し傾け", 0.5f, 7);
        Hukidashi("E4100070");//飲みたい？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(0.5f);
        #endregion

        #region ■選択肢 飲む飲まない（会話のみ）
        NovelSetVis("■E4100080");//え？　いや！　え？

        //■■選択肢
        sentakuListNum = 99;//初期化
        while (isNovelSentakushiWait) { yield return null; }
        yield return new WaitForSeconds(1f);

        Sentakushi("■E4100080a", Mathf.Infinity);
        Sentakushi("■E4100080b", Mathf.Infinity);

        while (sentakuListNum == 99) { yield return null; }
        yield return null;

        switch (sentakuListNum)
        {
            case 0://選択肢a 「いや遠慮しとくよ」
                sentakuListNum = 99;
                //isNovelFadeTween = isNovelSetVisIng = false;
                yield return new WaitForSeconds(0.5f);
                NovelSetVis("E4100080a010");//遠慮
                while (novelCurrentPageInt < 1) { yield return null; }

                while (isNovelSetVisIng) { yield return null; }
                //IKペットボトル見
                ChieriMotion("h_noData", 2f, 7);
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0, -0.1f, 0), 3);

                //ChieriMotion("f_本当に小さいね～", 0.7f, 2);

                Hukidashi("E4100080a010");//ふぅん
                yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

                Hukidashi("E4100080a020");//まあ飲まなくても
                ChieriMotion("f_リラックス02", 1f, 2);

                FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0, -0.11f, 0), 0.5f);
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, new Vector3(0, 0f, -0.15f));//より目しすぎないよう

                break;
            case 1://選択肢b 「貰おうかな」
                sentakuListNum = 99;
                //isNovelFadeTween = isNovelSetVisIng = false;
                yield return new WaitForSeconds(0.5f);
                NovelSetVis("E4100080b010");//遠慮

                while (isNovelSetVisIng) { yield return null; }

                FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0, -0.1f, 0), 3);
                Hukidashi("E4100080b010");//無理してない？
                ChieriMotion("f_あはは・・2", 0.2f, 2);
                ChieriMotionDelay(1, "f_あはは・・2目開き", 0.2f, 2);
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                yield return new WaitForSeconds(1);
                NovelSetVis("E4100080b020");//え？　なんだ冗談
                while (isNovelSetVisIng) { yield return null; }

                ChieriMotion("f_リラックス02", 1f, 2);
                ChieriMotion("h_noData", 3f, 7);

                Hukidashi("E4100080b030");//じゃあ、飲んでもらおうかなー

                FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0, -0.14f, 0), 0.5f);
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, new Vector3(0, 0f, -0.15f));//より目しすぎないよう


                break;
        }
        #endregion

        #region 摘み上げ

        yield return new WaitForSeconds(2);

        ChieriMotion("デスクペットボトル摘み上げ", 0f, 0);
        yield return null;

        //■手構えるまで待機
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 0.215f)
        { yield return null; }

        //ミュート解除
        tmpRhitosasiAS.mute = false;

        //■つまみ直前まで待機
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 0.324f)
        { yield return null; }
        ChieriMotion("f_眉高い笑顔少しジト目", 3f, 2);

        NovelSetVis("E4100090");//え？な？え？

        isPlayerUniqueMotion = true;
        PlayerMotion("_noData", 0f, 0);
        yield return null;
        GameObject PlayerDummy010_TsumamarePosObj
            = Resources.Load("_PosObj/0505YokokuPetbottle/PlayerDummy010_TsumamarePosObj") as GameObject;

        Player_DummyTrs.localPosition = PlayerDummy010_TsumamarePosObj.transform.localPosition;
        Player_DummyTrs.localEulerAngles = PlayerDummy010_TsumamarePosObj.transform.localEulerAngles;


        FixedAction(() =>
        {
            //指にペアレントし、Tweenで所定位置に
            CameraObjectsTrs.SetParent(GirlRhitosashi02Trs);
            GameObject Player_020_RHito2PareTsumamiLocalPosObj
            = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_020_RHito2PareTsumamiLocalPosObj") as GameObject;
            CameraObjectsTrs.DOLocalMove(Player_020_RHito2PareTsumamiLocalPosObj.transform.localPosition, 0.5f)
            .OnComplete(() =>
            {
                CameraReset(Player_020_RHito2PareTsumamiLocalPosObj.transform.localEulerAngles
                    , null
                    , false
                    , null
                    , false
                    , false
                    );
            });
        });

        //■つまみ持ち上げまで待機
        StartCoroutine(GirlAnimReadSystem());

        while (girlAnimNomTime <= 0.624f)
        { yield return null; }


        //表情
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

        isGirlAnimReadSystem = false;

        while (isNovelSetVisIng) { yield return null; }

        NovelSetVis("E4100100");//まって、待ってくれ…！

        while (isNovelSetVisIng) { yield return null; }
        ChieriMotion("f_眉高い笑顔少しジト目", 1f, 2);

        //■落とす直前まで待機
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 1f)
        { yield return null; }

        #endregion

        #region 指離して落ちる
        ChieriMotion("デスクペットボトルへ落とす", 0f, 0);
        yield return null;

        //■指離すまで待機
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 0.05f)
        { yield return null; }
        isGirlAnimReadSystem = false;

        FixedAction(() =>
        {
            CameraObjectsTrs.SetParent(GameObjectsTrs);
        });
        yield return null; yield return null;

        //ANの重力設定のみロード
        AN_SetPlayerRigidbody();
        AN_GravitiDragBool = true;//FixedUpdateのやつON
                                  //rigid監視スタート
        StartCoroutine(RigidReadSystem());

        //ペアレントで傾いたカメラ戻し
        CameraObjectsTrs.DOLocalRotateQuaternion(new Quaternion(0, CameraObjectsTrs.rotation.y, 0, CameraObjectsTrs.rotation.z), 1f);

        //飲み口に落ちるように移動
        FixedAction(() =>
        {
            CameraObjectsTrs.DOMoveX(PetBottleObj.transform.position.x, 1f);
            CameraObjectsTrs.DOMoveZ(PetBottleObj.transform.position.z, 1f);
        });
        #endregion

        #region 落ちて立ち上がるまで
        //大体おちた高さになるまで待機
        while (CameraObjectsTrs.localPosition.y >= 0.71f) { yield return null; }

        //ペットボトルだいたいセンター位置（落ちた場所）
        GameObject Player_030_PetBottleCenterPosObj
            = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_030_PetBottleCenterPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_030_PetBottleCenterPosObj.transform.localPosition;
        CameraObjectsTrs.localRotation = Player_030_PetBottleCenterPosObj.transform.localRotation;

        //摘まれポーズやめ
        isPlayerUniqueMotion = false;


        //フラッシュと音とダメージ
        FadeWhite(1, 0);
        SEPlay("dan01");

        CameraObjectsTrs.DOLocalRotate(
            new Vector3(270, CameraObjectsTrs.localEulerAngles.y, CameraObjectsTrs.localEulerAngles.z)
            , 0.3f)
            .SetEase(Ease.OutBounce);
        yield return new WaitForSeconds(0.05f);
        FadeWhite(0, 0);



        yield return new WaitForSeconds(1f);

        NovelSetVis("E4100110");//あいっづつ……！　うう
        while (novelCurrentPageInt < 2) { yield return null; }

        //立ち上がり暗幕
        FadeBlack(1, 0.5f);
        yield return new WaitForSeconds(0.5f);


        //■重力設定消し
        AN_GravitiDragBool = false;
        isRigidReadSystem = false;
        Destroy(CameraObjectsTrs.GetComponent<Rigidbody>());

        yield return null;

        isSeePointTempOff = true;//ポインターオフ

        //■隠れ鬼移動システムON
        KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
        //ローディング待ち
        while (isKOSystemLoading) { yield return null; }

        //ペットボトルコリダーをFixed追従動かし（智恵理のFixedColliderと同じ理屈）
        SetFixedMoveColliders(PetBottleObj.transform.Find("Bottle/Bottle_MeshCollider").gameObject);
        yield return null;


        //ペットボトル出して移動用位置（だいたい落ちた場所）
        GameObject Player_033_PetBottleCenterIdouPosObj
            = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_033_PetBottleCenterIdouPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_033_PetBottleCenterIdouPosObj.transform.localPosition;
        CameraObjectsTrs.localRotation = Player_033_PetBottleCenterIdouPosObj.transform.localRotation;

        FadeBlack(0, 0.5f);


        while (isNovelSetVisIng) { yield return null; }
        #endregion

        #region 移動Pos出し、移動でノベル、智恵理覗きこみとご飯食べてくるね

        Hukidashi("E4100100");//これでもう逃げられないし
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        Hukidashi("E4100110");//喉が渇いても大丈夫
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        yield return new WaitForSeconds(0.5f);

        NovelSetVis("E4100120");//う、嘘だろ……
        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("f_リラックス02", 3f, 2);

        #region 探索とかくれおに移動設置
        isSeePointTempOff = false;//ポインターオン

        int tmpInt = 8;

        //走りスピードにしてモーションも走りに
        playerMoveSpeed = 4;
        isKO_PlayerWalk = false;

        KO_KakurePosObjsList[tmpInt].SetActive(true);
        //寝る場所移動ポイント出現 演出
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleForwardPos").gameObject, 0.1f);
        yield return new WaitForSeconds(0.5f);
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleLeftPos").gameObject, 0.1f);
        yield return new WaitForSeconds(0.5f);
        KO_NewPosPointObjVis
             (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleRightPos").gameObject, 0.1f);
        yield return new WaitForSeconds(0.5f);
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleBackPos").gameObject, 0.1f);
        #endregion


        #region //ペットボトルシェイクテスト
        //FixedAction(() =>
        //{
        //    IKLHandTargetTrs.position = GirlLHandTrs.position;
        //    IKLHandTargetTrs.rotation = GirlLHandTrs.rotation;
        //    DOTweenToIKEfPos(IKLHandEf, 1, 0);
        //    DOTweenToIKEfRot(IKLHandEf, 1, 0);

        //    tmpShakePrevPos = IKLHandTargetTrs.localPosition;
        //    tmpShakePrevQua = IKLHandTargetTrs.localRotation;
        //});

        //while (true)
        //{
        //    if (Input.GetKeyDown(KeyCode.B))
        //    {
        //        GameObject IKLHand_010_MotiageNozokiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/IKLHand_010_MotiageNozokiPosObj") as GameObject;
        //        IKLHandTargetTrs.DOLocalMove(IKLHand_010_MotiageNozokiPosObj.transform.localPosition
        //            , tmpShakeTime);
        //        IKLHandTargetTrs.DOLocalRotateQuaternion(IKLHand_010_MotiageNozokiPosObj.transform.localRotation
        //            , tmpShakeTime);

        //        //ChieriMotion("デスクペットボトル傾け覗き込み原点", 0f, 0);
        //    }
        //    if (Input.GetKeyDown(KeyCode.N))
        //    {
        //        IKLHandTargetTrs.DOLocalMove(tmpShakePrevPos
        //            , tmpShakeTime);
        //        IKLHandTargetTrs.DOLocalRotateQuaternion(tmpShakePrevQua
        //            , tmpShakeTime);

        //        //ChieriMotion("デスクペットボトル傾け覗き込み原点", 0f, 0);
        //    }

        //    yield return null;
        //}

        #endregion

        yield return new WaitForSeconds(3f);


        Hukidashi("E4100120");//中に入ったのって
        yield return new WaitForSeconds(4f);

        DelAll_Hukidashi();
        Hukidashi("E4100130");//マコトが初めてじゃない？

        //IKプレイヤー見る 頭はIK切る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        DOTweenToLAIKSHead(LAIKHeadS, 0, 4);

        ChieriMotion("デスクペットボトル傾け覗き込み", 0f, 0);
        //左手マスク同期（元の動きそのまま持ってきて、親指だけ少し開く）
        ChieriMotion("デスクペットボトル傾け覗き込み", 0f, 6);

        ChieriMotion("f_本当に小さいね～", 1f, 2);

        yield return null;

        //顔近づくまで待機
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 1f)
        { yield return null; }
        isGirlAnimReadSystem = false;
        yield return new WaitForSeconds(2f);

        ChieriMotion("f_リラックス02", 1f, 2);

        yield return new WaitForSeconds(2f);

        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        Hukidashi("E4100140");//着替えてくるね
        yield return new WaitForSeconds(1f);

        ChieriMotion("デスクペットボトル傾け覗き込み逆再生", 0f, 0);
        //頭IKON
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        yield return new WaitForSeconds(1f);
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(2f);

        ChieriMotion("LH_デスクペットボトルへ落とす", 2f, 6);

        //移動で「出してくれ」台詞オフ
        isBottleCenterPosArea_Exit = true;

        NovelSetVis("E4100130", true);//ま、待ってくれ！

        ChieriMotion("f_リラックス02", 3f, 2);

        while (novelCurrentPageInt < 2) { yield return null; }
        //移動オフ
        isKOSystem = false;

        FadeBlack(1, 2);

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(2);

        NovelSetVis("E4100135");//出て行ってしまった

        #endregion

        #region 暗幕時の智恵理出て行く演出
        //ドア開く音
        SEPlay(DoorSEObj, "door-open1", DoorRootTrs.gameObject);
        yield return new WaitForSeconds(2f);

        FixedAction(() =>
        {
            PetBottleObj.transform.SetParent(GameObjectsTrs);
        });

        //ドア閉まる音
        SEPlay(DoorSEObj, "door-close2", DoorRootTrs.gameObject);
        yield return new WaitForSeconds(3f);

        GirlMeshTrs.gameObject.SetActive(false);

        #endregion

        FadeBlack(1, 0);

        FadeBlack(0, 2);

        #region ペットボトル内散策するかしないかでノベル増える

        //置くためにペアレントはずし
        PetBottleObj.transform.SetParent(GameObjectsTrs);
        //位置
        GameObject PetBottle_010_DeskFirstPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_010_DeskFirstPosObj") as GameObject;
        PetBottleObj.transform.localPosition = PetBottle_010_DeskFirstPosObj.transform.localPosition;
        PetBottleObj.transform.localEulerAngles = PetBottle_010_DeskFirstPosObj.transform.localEulerAngles;

        //4方エリアON
        KO_KakurePosObjsList[tmpInt].transform.Find("BottleLeftPosArea_").GetComponent<Collider>().enabled = true;
        KO_KakurePosObjsList[tmpInt].transform.Find("BottleRightPosArea_").GetComponent<Collider>().enabled = true;
        KO_KakurePosObjsList[tmpInt].transform.Find("BottleForwardPosArea_").GetComponent<Collider>().enabled = true;
        KO_KakurePosObjsList[tmpInt].transform.Find("BottleBackPosArea_").GetComponent<Collider>().enabled = true;

        yield return new WaitForSeconds(7);

        NovelSetVis("E4100140");//智恵理がいなくなったことで

        while (isNovelSetVisIng) { yield return null; }

        //4方探索していたら（エリアに入っていたら）
        if (
            isBottleLeftPosArea_Enter &&
            isBottleRightPosArea_Enter &&
            isBottleForwardPosArea_Enter &&
            isBottleBackPosArea_Enter
            )
        {
            NovelSetVis("E4100150");//「なにか、なにか出る方法は……！」
            while (novelCurrentPageInt < 7) { yield return null; }
        }

        isKOSystem = false;
        isTansakuSystem = false;

        FadeBlack(1, 3);
        yield return new WaitForSeconds(3);

        while (isNovelSetVisIng) { yield return null; }
        NovelSetVis("E4100160");//仰向けに倒れこんだ
        while (novelCurrentPageInt < 1) { yield return null; }

        //仰向け
        GameObject Player_040_PetBottleCenterAomukePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_040_PetBottleCenterAomukePosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_040_PetBottleCenterAomukePosObj.transform.localPosition;
        CameraObjectsTrs.localRotation = Player_040_PetBottleCenterAomukePosObj.transform.localRotation;

        FadeBlack(0, 3);

        while (isNovelSetVisIng) { yield return null; }
        FadeBlack(1, 3);
        yield return new WaitForSeconds(5);
        #endregion


        EventMove("監禁3_ペットボトル朝食");

        yield break;
    }
    IEnumerator E4200()//監禁3_ペットボトル朝食
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            nowPlayerLocalScale = new Vector3(0.015f, 0.015f, 0.015f);
            //暗幕
            FadeBlack(1, 0);
            #region 宿題ペン消しゴムなくし
            //宿題 位置に
            Drill_chieriTrs.gameObject.SetActive(false);

            //プレイヤーの
            //HomeworkObjectsTrs.gameObject.SetActive(false);
            DrillTrs.gameObject.SetActive(false);

            //ペンなくし
            SharpenObj.SetActive(false);
            //消しゴム無くし
            KeshigomuObj.SetActive(false);
            #endregion //宿題置き

            //スピーカー 位置に
            SpeakerTrs.gameObject.SetActive(true);
            GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
            SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
            SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

            #region ペットボトル取得
            //ペットボトル既に取得されていればなにもせず、なければリソースからクローン
            ObjSceneOrResouceLoad(ref PetBottleObj, "PetBottle", "Main/KomonoObj/PetBottle/PetBottle");

            //キャップ既に取得されていればなにもしない
            if (CapObj != null) { }
            else
            {
                //キャップ、クローンで取得(ペアレント変えるので、プレファブ上書きで消さないようにクローン)
                CapObj = Instantiate(PetBottleObj.transform.Find("Cap").gameObject);
                DB.evMoveDelObjList.Add(CapObj);
                //クローンON
                CapObj.transform.gameObject.SetActive(true);
                //ペアレント
                CapObj.transform.SetParent(GameObjectsTrs);
                //オリジナルをオフ
                PetBottleObj.transform.Find("Cap").gameObject.SetActive(false);
                //クローンキャップ机の上へ
                GameObject Cap_DeskUePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Cap_DeskUePosObj") as GameObject;
                CapObj.transform.localPosition = Cap_DeskUePosObj.transform.localPosition;
                CapObj.transform.localEulerAngles = Cap_DeskUePosObj.transform.localEulerAngles;
                CapObj.transform.localScale = Cap_DeskUePosObj.transform.localScale;
            }

            #endregion
            //ペットボトルコリダーをFixed追従動かし（智恵理のFixedColliderと同じ理屈）
            SetFixedMoveColliders(PetBottleObj.transform.Find("Bottle/Bottle_MeshCollider").gameObject);
        }
        EventReset();

        FadeBlack(0, 0);


        #region ペットボトル
        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        DB.isChieriPosLock = false;
        girlAnim.speed = 0.5f;
        //■PosObjで読み込み
        //プレイヤー 机の上位置に
        GameObject Player_000_DeskUeStartPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_000_DeskUeStartPosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_000_DeskUeStartPosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_000_DeskUeStartPosObj.transform.localEulerAngles;

        #region ペットボトル取得

        //ペットボトル既に取得されていればなにもせず、なければシーンから、それでもなければリソースからクローン
        ObjSceneOrResouceLoad(ref PetBottleObj, "PetBottle", "Main/KomonoObj/PetBottle/PetBottle");

        //ペットボトル智恵理左手にペア
        PetBottleObj.transform.SetParent(Bip001_L_HandTrs);
        //位置
        GameObject PetBottle_ChieriLHandPosObj = Resources.Load("_PosObj/_ParentPoseObjs/PetBottle_ChieriLHandPosObj") as GameObject;
        PetBottleObj.transform.localPosition = PetBottle_ChieriLHandPosObj.transform.localPosition;
        PetBottleObj.transform.localEulerAngles = PetBottle_ChieriLHandPosObj.transform.localEulerAngles;
        PetBottleObj.transform.localScale = PetBottle_ChieriLHandPosObj.transform.localScale;

        //キャップ既に取得されていればなにもしない
        if (CapObj != null) { }
        else
        {
            //キャップ、クローンで取得(ペアレント変えるので、プレファブ上書きで消さないようにクローン)
            CapObj = Instantiate(PetBottleObj.transform.Find("Cap").gameObject);
            DB.evMoveDelObjList.Add(CapObj);
            //クローンON
            CapObj.transform.gameObject.SetActive(true);
            //ペアレント
            CapObj.transform.SetParent(GameObjectsTrs);
            //オリジナルをオフ
            PetBottleObj.transform.Find("Cap").gameObject.SetActive(false);
            //クローンキャップ机の上へ
            GameObject Cap_DeskUePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Cap_DeskUePosObj") as GameObject;
            CapObj.transform.localPosition = Cap_DeskUePosObj.transform.localPosition;
            CapObj.transform.localEulerAngles = Cap_DeskUePosObj.transform.localEulerAngles;
            CapObj.transform.localScale = Cap_DeskUePosObj.transform.localScale;
        }

        //一旦両方ともOFF
        PetBottleObj.SetActive(false);
        CapObj.SetActive(false);

        #endregion

        //椅子位置
        GameObject Chair_01_SuwariPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chair_01_SuwariPosObj") as GameObject;
        ChairTrs.localPosition = Chair_01_SuwariPosObj.transform.localPosition;
        ChairTrs.localEulerAngles = Chair_01_SuwariPosObj.transform.localEulerAngles;

        //智恵理 椅子すわり位置に
        GameObject Chieri_02_DeskChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02_DeskChairPosObj") as GameObject;
        GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;

        ChieriMotion("デスク肘つきポーズ", 0f, 0);
        ChieriMotion("f_リラックス02", 0f, 2);

        //頭にWindnoiseSoundObj付与
        GameObject HeadSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , HeadSphereTrs);//（頭）
        DB.evMoveDelObjList.Add(HeadSoundObj);
        AudioSource tmpHeadAS = HeadSoundObj.GetComponent<AudioSource>();
        //ミュート
        tmpHeadAS.mute = true;

        //SoundObjのPos
        GameObject SoundObj_01_Ningyou_PareHeadPosObj = Resources.Load("_PosObj/D_Henai_Day1/SoundObj_01_Ningyou_PareHeadPosObj") as GameObject;
        HeadSoundObj.transform.localPosition = SoundObj_01_Ningyou_PareHeadPosObj.transform.localPosition;


        //右人差し指にWindnoiseSoundObj付与
        GameObject RHitosasiSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRhitosashi02Trs);
        DB.evMoveDelObjList.Add(RHitosasiSoundObj);
        AudioSource tmpRhitosasiAS = RHitosasiSoundObj.GetComponent<AudioSource>();
        //ミュート
        tmpRhitosasiAS.mute = true;
        //SoundObjのPos
        GameObject SoundObj_04_TsumamiYubi_RHitosasiPosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1-2/SoundObj_04_TsumamiYubi_RHitosasiPosObj") as GameObject;
        RHitosasiSoundObj.transform.localPosition = SoundObj_04_TsumamiYubi_RHitosasiPosObj.transform.localPosition;




        //事前読み込み
        GameObject Player_010_DeskUeChieriTsumamiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_010_DeskUeChieriTsumamiPosObj") as GameObject;

        ////ペットボトルシェイクテスト用
        //Vector3 tmpShakePrevPos = new Vector3();
        //Quaternion tmpShakePrevQua = new Quaternion();
        //float tmpShakeTime = 1;

        #endregion

        FadeBlack(1, 0);
        NovelSetVis("E4200010");//姿勢を変えたころ

        #region ■元モーションテストでのデバッグ設定
        //ペットボトル準備
        PetBottleObj.SetActive(true);
        CapObj.SetActive(true);

        PetBottleObj.transform.SetParent(GameObjectsTrs);
        //位置
        GameObject PetBottle_010_DeskFirstPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_010_DeskFirstPosObj") as GameObject;
        PetBottleObj.transform.localPosition = PetBottle_010_DeskFirstPosObj.transform.localPosition;
        PetBottleObj.transform.localEulerAngles = PetBottle_010_DeskFirstPosObj.transform.localEulerAngles;

        //プレイヤーペットボトルだいたいセンター位置（落ちた場所）（ドア方向）
        GameObject Player_035_PetBottleCenterDoorAnglePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_035_PetBottleCenterDoorAnglePosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_035_PetBottleCenterDoorAnglePosObj.transform.localPosition;
        CameraObjectsTrs.localRotation = Player_035_PetBottleCenterDoorAnglePosObj.transform.localRotation;

        GirlMeshTrs.gameObject.SetActive(false);

        //智恵理0位置ロック
        DB.isChieriPosLock = true;

        //椅子デフォルト位置
        GameObject Chair_010_IsuDivePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1/Chair_010_IsuDivePosObj") as GameObject;
        ChairTrs.localPosition = Chair_010_IsuDivePosObj.transform.localPosition;
        ChairTrs.localEulerAngles = Chair_010_IsuDivePosObj.transform.localEulerAngles;
        #endregion

        while (isNovelSetVisIng) { yield return null; }

        FadeBlack(0, 3);
        yield return new WaitForSeconds(3);

        #region 智恵理ドアから椅子に座るまで

        //アニメスピード
        girlAnim.speed = 0.6f;
        doorAnim.speed = 0.6f;
        chairAnim.speed = 0.6f;

        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);

        ChieriMotion("ドア入室", 0f, 0);
        doorAnim.CrossFadeInFixedTime("ドア開き閉じ", 0f, 0);

        yield return new WaitForSeconds(2.2f / girlAnim.speed);

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

        Hukidashi("D3010");//お待たせ
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(2, "f_リラックス02", 0.1f, 2);//時間差表情戻し



        //■ポーズ状態まで待ち
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 1f) { yield return null; }
        isGirlAnimReadSystem = false;

        ChieriMotion("ドアからデスク横へ歩く", 0f, 0);
        yield return new WaitForSeconds(3.5f / girlAnim.speed);

        Hukidashi("E4200010");//よかったちゃんといるね
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1.5f / girlAnim.speed);

        chairAnim.enabled = true;


        //■ポーズ状態まで待ち
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 1f) { yield return null; }
        isGirlAnimReadSystem = false;
        ChieriMotion("ドアからデスク横ポーズから椅子に座る", 0f, 0);
        chairAnim.CrossFadeInFixedTime("智恵理座り", 0f, 0);

        //IK 椅子へ
        FollowDOMove(IKLookAtEyeTargetTrs, ChairTrs);
        FollowDOMove(IKLookAtHeadTargetTrs, ChairTrs, new Vector3(0, 0.8f, 0));
        yield return new WaitForSeconds(3f / girlAnim.speed);

        //頭だけIK弱めに（首埋まり対策）
        DOTweenToLAIKSHead(LAIKHeadS, 0.4f, 1);
        yield return new WaitForSeconds(1f / girlAnim.speed);
        Hukidashi("E4200020");//ご褒美にご飯

        //IK プレイヤーへ
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
        yield return new WaitForSeconds(1f / girlAnim.speed);

        //頭IK 戻し（ON）
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
        yield return new WaitForSeconds(1f / girlAnim.speed);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "f_リラックス02", 0.1f, 2);//時間差表情戻し


        //■ポーズ状態まで待ち
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 0.9f) { yield return null; }
        isGirlAnimReadSystem = false;

        FadeBlack(1, 1f);
        yield return new WaitForSeconds(1f);

        NovelSetVis("■E4200020");//ご、ご飯……

        chairAnim.enabled = false;

        //アニメスピード
        girlAnim.speed = 0.5f;
        doorAnim.speed = 0.5f;
        chairAnim.speed = 0.5f;

        #endregion


        #region パンくず落とし～好きかどうか
        //FadeBlack(1, 0);

        #region 暗幕中設定 //■モーションテストでのデバッグ設定
        DB.isChieriPosLock = true;

        //ペットボトル準備
        PetBottleObj.SetActive(true);
        CapObj.SetActive(true);
        ChieriMotion("デスクペットボトルへ落とす前ポーズ", 0f, 0);

        FixedAction(() =>
        {
            //プレイヤーを、ペットボトル手前はじへ。（PetBottleObjのローカル位置 をワールド座標に変換して置く）（ペットボトルの場所が変わっても大丈夫なように）
            GameObject PlayerPetBottlePare_010_PanOtosarePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PlayerPetBottlePare_010_PanOtosarePosObj") as GameObject;
            CameraObjectsTrs.position
                = PetBottleObj.transform.TransformPoint(PlayerPetBottlePare_010_PanOtosarePosObj.transform.localPosition);
        });

        isBottleCenterPosArea_Exit = true;

        #endregion

        #region 智恵理パンくず落とし

        ChieriMotion("デスクペットボトルへ落とす前ポーズ", 0f, 0);

        //アニメスピード
        girlAnim.speed = 0.5f;
        doorAnim.speed = 0.5f;
        chairAnim.speed = 0.5f;

        //ペットボトル智恵理左手にペア
        PetBottleObj.transform.SetParent(Bip001_L_HandTrs);
        //位置
        PetBottleObj.transform.localPosition = PetBottle_ChieriLHandPosObj.transform.localPosition;
        PetBottleObj.transform.localEulerAngles = PetBottle_ChieriLHandPosObj.transform.localEulerAngles;
        PetBottleObj.transform.localScale = PetBottle_ChieriLHandPosObj.transform.localScale;

        FixedAction(() =>
        {
            //IKRHandを、飲み口の上へ。（PetBottleObjのローカル位置 をワールド座標に変換して置く）（ペットボトルの場所が変わっても大丈夫なように）
            GameObject IKRHandParePetBottleObj_010_OtosiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/IKRHandParePetBottleObj_010_OtosiPosObj") as GameObject;
            IKRHandTargetTrs.position
                = PetBottleObj.transform.TransformPoint(IKRHandParePetBottleObj_010_OtosiPosObj.transform.localPosition);

            DOTweenToIKEfPos(IKRHandEf, 1, 0);
        });




        //パンくず取得
        GameObject
            Pankuzu01RHitosasiPare_PetBottleOtosi01 = Instantiate(Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Pankuzu01RHitosasiPare_PetBottleOtosi01") as GameObject
            , GirlRhitosashi02Trs),
            Pankuzu02RHitosasiPare_PetBottleOtosi01 = Instantiate(Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Pankuzu02RHitosasiPare_PetBottleOtosi01") as GameObject
            , GirlRhitosashi02Trs);
        DB.evMoveDelObjList.Add(Pankuzu01RHitosasiPare_PetBottleOtosi01);
        DB.evMoveDelObjList.Add(Pankuzu02RHitosasiPare_PetBottleOtosi01);

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);


        //ANの重力設定のみロード
        AN_SetPlayerRigidbody();
        AN_GravitiDragBool = true;//FixedUpdateのやつON
                                  //rigid監視スタート
        StartCoroutine(RigidReadSystem());


        while (isNovelSentakushiWait) { yield return null; }
        FadeBlack(0, 1f);
        yield return new WaitForSeconds(1);

        NovelSetVis("E4200030");//指先になにか見えた。

        while (isNovelSetVisIng) { yield return null; }
        yield return new WaitForSeconds(1);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "f_リラックス02", 0.1f, 2);//時間差表情戻し
        Hukidashi("E4200030");//これ公の分ね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        ChieriMotion("デスクペットボトルへ落とす", 0f, 0);


        FixedAction(() =>
        {
            //物理ONと同時にペットボトルへペアレント（中で滑らないように）
            Pankuzu01RHitosasiPare_PetBottleOtosi01.GetComponent<Rigidbody>().isKinematic = false;
            Pankuzu01RHitosasiPare_PetBottleOtosi01.transform.SetParent(PetBottleObj.transform.Find("Bottle"));
        });
        yield return new WaitForSeconds(0.2f);

        FixedAction(() =>
        {
            Pankuzu02RHitosasiPare_PetBottleOtosi01.GetComponent<Rigidbody>().isKinematic = false;
            Pankuzu02RHitosasiPare_PetBottleOtosi01.transform.SetParent(PetBottleObj.transform.Find("Bottle"));
        });
        yield return new WaitForSeconds(0.2f);

        //手IK切る
        DOTweenToIKEfPos(IKRHandEf, 0, 2f);

        yield return new WaitForSeconds(1);
        NovelSetVis("E4200040");//う、うわ！
        while (isNovelSetVisIng) { yield return null; }


        Hukidashi("E4200040");//パンくず
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        Hukidashi("E4200050");//潰れちゃった
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "f_リラックス02", 0.1f, 2);//時間差表情戻し
        Hukidashi("E4200060");//食べていいからね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        #endregion

        #region ■選択肢 食べる食べない
        yield return new WaitForSeconds(1);
        NovelSetVis("■E4200050");//言ってみれば食べ残し

        //■■選択肢
        sentakuListNum = 99;//初期化
        while (isNovelSentakushiWait) { yield return null; }
        yield return new WaitForSeconds(1f);

        Sentakushi("■E4200060a", Mathf.Infinity);
        Sentakushi("■E4200060b", Mathf.Infinity);

        while (sentakuListNum == 99) { yield return null; }
        yield return null;

        //事前読み込み
        GameObject PetBottle_020_DeskTate_PosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_020_DeskTate_PosObj") as GameObject;

        bool isTabenai = false;
        switch (sentakuListNum)
        {
            case 0://選択肢a 「食べる」
                #region 食べる場合 
                sentakuListNum = 99;
                //isNovelFadeTween = isNovelSetVisIng = false;
                yield return new WaitForSeconds(1f);

                NovelSetVis("E4200050a010");//言ってみれば食べ残し
                while (novelCurrentPageInt < 3) { yield return null; }
                FadeBlack(1, 1);
                yield return new WaitForSeconds(2);

                #region ■暗幕中の設定

                //重力設定消し
                AN_GravitiDragBool = false;
                isRigidReadSystem = false;
                Destroy(CameraObjectsTrs.GetComponent<Rigidbody>());

                //ペットボトル、左手からペアレント外し 立て位置に
                PetBottleObj.transform.SetParent(GameObjectsTrs);
                //位置
                PetBottleObj.transform.localPosition = PetBottle_020_DeskTate_PosObj.transform.localPosition;
                PetBottleObj.transform.localEulerAngles = PetBottle_020_DeskTate_PosObj.transform.localEulerAngles;


                //ペットボトル内へのプレイヤー配置
                FixedAction(() =>
                {
                    //プレイヤーを、ペットボトル手前はじへ。（PetBottleObjのローカル位置 をワールド座標に変換して置く）（ペットボトルの場所が変わっても大丈夫なように）
                    GameObject PlayerPetBottlePare_010_PanOtosarePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PlayerPetBottlePare_010_PanOtosarePosObj") as GameObject;
                    CameraObjectsTrs.position
                        = PetBottleObj.transform.TransformPoint(PlayerPetBottlePare_010_PanOtosarePosObj.transform.localPosition);
                });
                //ミュート
                tmpRhitosasiAS.mute = true;
                tmpHeadAS.mute = true;

                DB.isChieriPosLock = false;
                //椅子位置に
                GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
                GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;

                //ポーズ
                ChieriMotion("デスク肘つきポーズ", 0f, 0);
                ChieriMotion("f_リラックス02", 0f, 2);
                #endregion

                while (isNovelSetVisIng) { yield return null; }

                PlayerHPAddSub(300);
                NovelSetVis("E4200050a020");//パンの欠片に直接齧り付いた
                while (novelCurrentPageInt < 4) { yield return null; }

                Hukidashi("E4200060a010");//食べてる食べてる

                while (isNovelSetVisIng) { yield return null; }
                PlayerHPAddSub(300);

                yield return new WaitForSeconds(1);
                Hukidashi("E4200060a020");//おいしい？
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                NovelSetVis("E4200050a030");//返事する余裕はなかった。
                while (isNovelSetVisIng) { yield return null; }

                yield return new WaitForSeconds(1);
                Hukidashi("E4200060a030");//でもよかったー
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                Hukidashi("E4200060a040");//しばらく大丈夫
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                NovelSetVis("E4200050a040");//血の気が引いた。
                while (novelCurrentPageInt < 1) { yield return null; }

                //ミュート解除
                tmpRhitosasiAS.mute =
                tmpHeadAS.mute = false;

                FadeBlack(0, 1);
                while (novelCurrentPageInt < 3) { yield return null; }
                yield return new WaitForSeconds(1);

                Hukidashi("E4200060a045");//ん？
                ChieriMotion("f_気づき（明）", 0.2f, 2);
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                NovelSetVis("E4200050a050");//頼むよ！　許してくれ！
                while (isNovelSetVisIng) { yield return null; }
                yield return new WaitForSeconds(1);

                Hukidashi("E4200060a050");//どうして謝るの？
                ChieriMotion("f_どうして謝るの？", 0.2f, 2);
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                NovelSetVis("E4200050a055");//不安を煽る。どうしてって…！
                while (isNovelSetVisIng) { yield return null; }



                //IKカレンダー見
                FollowDOMove(IKLookAtEyeTargetTrs, CalenderTrs, 0f);
                //まばたき
                ChieriMotion("b_まばたきSlow用", 0f, 4);
                blinkTime = 0;
                yield return new WaitForSeconds(1);

                Hukidashi("E4200060a060");//うーん、"逃げたから"は合ってるけど
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //■"デスク肘つき→起き上がり"モーションだけ速度変更（animatorのParametersでスピード変更（ステート毎に設定できるので、表情が遅くならない））
                girlAnim.SetFloat("デスク肘つき→起き上がりSpeed", 0.4f); yield return null;
                ChieriMotion("デスク肘つき→起き上がり", 0, 0);

                //目IKプレイヤー見る
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                //まばたき
                ChieriMotion("b_まばたきSlow用", 0f, 4);
                blinkTime = 0;

                Hukidashi("E4200060a070");//怒ってないよ
                ChieriMotion("f_あはは・・2目開き", 0.2f, 2);
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);


                NovelSetVis("E4200050a060");//じゃあ、なんでこんなことを…
                while (isNovelSetVisIng) { yield return null; }


                ChieriMotion("f_え？(軽驚)", 0.2f, 2);

                //IKカレンダー見
                FollowDOMove(IKLookAtEyeTargetTrs, CalenderTrs, 0f);
                //まばたき
                ChieriMotion("b_まばたきSlow用", 0f, 4);
                blinkTime = 0;


                yield return new WaitForSeconds(1);
                Hukidashi("E4200060a080");//好きだからかな
                yield return new WaitForSeconds(1);

                ChieriMotion("f_あはは・・2", 0.1f, 2);
                ChieriMotionDelay(1, "f_あはは・・2目開き", 0.1f, 2);//時間差表情戻し
                yield return new WaitForSeconds(1);
                //目IKプレイヤー見る
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                yield return KeyOrWait(3);

                yield return new WaitForSeconds(1);

                #endregion
                break;

            case 1://選択肢b 「食べない」
                #region 食べない場合
                sentakuListNum = 99;
                //isNovelFadeTween = isNovelSetVisIng = false;
                yield return new WaitForSeconds(0.5f);

                NovelSetVis("E4200050b010");//それに手をつけず時間が流れた。
                FadeBlack(1, 2);
                while (isNovelSetVisIng) { yield return null; }
                yield return new WaitForSeconds(2);

                #region ■暗幕中の設定
                //ミュート
                tmpRhitosasiAS.mute =
                tmpHeadAS.mute = true;

                //重力設定消し
                AN_GravitiDragBool = false;
                isRigidReadSystem = false;
                Destroy(CameraObjectsTrs.GetComponent<Rigidbody>());

                //ペットボトル、左手からペアレント外し 立て位置に
                PetBottleObj.transform.SetParent(GameObjectsTrs);
                //位置
                PetBottleObj.transform.localPosition = PetBottle_020_DeskTate_PosObj.transform.localPosition;
                PetBottleObj.transform.localEulerAngles = PetBottle_020_DeskTate_PosObj.transform.localEulerAngles;

                //ペットボトル内へのプレイヤー配置
                FixedAction(() =>
                {
                    //プレイヤーを、ペットボトル手前はじへ。（PetBottleObjのローカル位置 をワールド座標に変換して置く）（ペットボトルの場所が変わっても大丈夫なように）
                    GameObject PlayerPetBottlePare_010_PanOtosarePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PlayerPetBottlePare_010_PanOtosarePosObj") as GameObject;
                    CameraObjectsTrs.position
                        = PetBottleObj.transform.TransformPoint(PlayerPetBottlePare_010_PanOtosarePosObj.transform.localPosition);
                });

                DB.isChieriPosLock = false;
                //椅子位置に
                GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
                GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;

                //ポーズ
                ChieriMotion("デスク肘つきポーズ", 0f, 0);
                ChieriMotion("f_リラックス01", 0f, 2);
                #endregion

                yield return null;

                Hukidashi("E4200060b010");//食べないの？
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                yield return new WaitForSeconds(0.5f);
                Hukidashi("E4200060b015");//この後も大変なのに
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                yield return new WaitForSeconds(0.5f);
                Hukidashi("E4200060b020");//体持たなくても知らないよ？
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                yield return new WaitForSeconds(1);
                NovelSetVis("E4200050b020");//昨日までと違う言葉を聞かせてくる
                while (novelCurrentPageInt < 2) { yield return null; }

                //ミュート解除
                tmpRhitosasiAS.mute =
                tmpHeadAS.mute = false;

                FadeBlack(0, 1);
                while (novelCurrentPageInt < 4) { yield return null; }

                yield return new WaitForSeconds(1f);

                ChieriMotion("f_気づき（明）", 0.3f, 2);
                Hukidashi("E4200060b030");//ん？
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                while (isNovelSetVisIng) { yield return null; }

                NovelSetVis("E4200050b030");//わからないんだ


                ChieriMotion("f_悲しい", 2f, 2);
                yield return new WaitForSeconds(1f);

                //まばたき
                ChieriMotion("b_まばたきSlow用", 0f, 4);
                blinkTime = 0;

                Hukidashi("・・・");//・・・
                FollowDOMove(IKLookAtEyeTargetTrs, GomibakoTrs);

                while (isNovelSetVisIng) { yield return null; }


                yield return new WaitForSeconds(1);

                ChieriMotion("f_悲しい目つむり強", 0.2f, 2);
                ChieriMotionDelay(1f, "f_気づき（明）", 0.1f, 2);//時間差表情戻し
                while (isNovelSetVisIng) { yield return null; }
                yield return new WaitForSeconds(1);

                //■"デスク肘つき→起き上がり"モーションだけ速度変更（animatorのParametersでスピード変更（ステート毎に設定できるので、表情が遅くならない））
                girlAnim.SetFloat("デスク肘つき→起き上がりSpeed", 0.4f); yield return null;
                ChieriMotion("デスク肘つき→起き上がり", 0, 0);

                Hukidashi("E4200060b040");//好きだよ？
                yield return new WaitForSeconds(1);


                //まばたき
                ChieriMotion("b_まばたきSlow用", 0f, 4);
                blinkTime = 0;
                //目IKプレイヤー見る
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                yield return KeyOrWait(3);

                yield return new WaitForSeconds(1);
                isTabenai = true;
                #endregion
                break;

        }
        #endregion

        #region ■は…え…？ じゃあどうして…　　だったらこんなことしないもん　■指突き
        NovelSetVis("E4200060");//は…え…？　じゃあどうして……。

        ChieriMotion("f_リラックス02", 0.3f, 2);
        yield return new WaitForSeconds(0.6f / girlAnim.speed);
        ChieriMotion("デスク少しうつ伏せポーズ", 0.6f / girlAnim.speed, 0);

        yield return new WaitForSeconds(1);

        if (isTabenai)
        {

            Hukidashi("E4200060b050");//だーい好き
        }

        yield return new WaitForSeconds(1);

        while (isNovelSetVisIng) { yield return null; }



        //■指つき開始
        //IKターゲット手の位置に
        FixedAction(() =>
        {
            IKRHandTargetTrs.position = GirlRHandTrs.position;
            IKRHandTargetTrs.rotation = GirlRHandTrs.rotation;
            DOTweenToIKEfPos(IKRHandEf, 1, 0);
            DOTweenToIKEfRot(IKRHandEf, 1, 0);
        });
        //適当にFixed待ち
        yield return new WaitForSeconds(0.1f);

        //突き構え終わった判定取るために
        bool isTsukikamae = false;

        //突き構えパスでTween（ペットボトルに当たらないように）
        GameObject IKRHand_010_TsutukiKamaeAPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/IKRHand_010_TsutukiKamaeAPosObj") as GameObject;
        GameObject IKRHand_015_TsutukiKamaeBPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/IKRHand_015_TsutukiKamaeBPosObj") as GameObject;
        Vector3[] tsutukiKamaePosPaths = new[]
        {
                            IKRHand_010_TsutukiKamaeAPosObj.transform.localPosition,
                            IKRHand_015_TsutukiKamaeBPosObj.transform.localPosition,
                        };

        IKRHandTargetTrs.DOLocalPath(tsutukiKamaePosPaths
            , 3, PathType.CatmullRom);
        //回転は最後のだけ
        IKRHandTargetTrs.DOLocalRotate(IKRHand_015_TsutukiKamaeBPosObj.transform.localEulerAngles
            , 3)
            //終わったら判定true
            .OnComplete(() => { isTsukikamae = true; });

        //マスクひとさし指
        ChieriMotion("ひとさし指差し", 0.2f, 5);

        if (isTabenai)
        {
            Hukidashi("E4200060b060");//嫌いだったら
        }
        else
        {
            Hukidashi("E4200060a090");//もし怒ってたり嫌いだったら
        }
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //突き構えるまで待ち
        while (isTsukikamae == false) { yield return null; }

        //■指突き開始
        //終わり判定取り用
        bool isTsuki = false;

        //指つつき動き （InoutBackで押して戻す動き）
        GameObject IKRHand_020_TsutukiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/IKRHand_020_TsutukiPosObj") as GameObject;
        IKRHandTargetTrs.DOLocalMove(IKRHand_020_TsutukiPosObj.transform.localPosition
            , 2).SetEase(Ease.InOutBack);
        IKRHandTargetTrs.DOLocalRotate(IKRHand_020_TsutukiPosObj.transform.localEulerAngles
            , 2).SetEase(Ease.InOutBack);

        //■同時にBottle傾き
        //Bottle取得
        Transform BottleTrs = PetBottleObj.transform.Find("Bottle");
        //現在値取得
        Vector3 defBottolePos = BottleTrs.localPosition;
        Vector3 defBottoleRot = BottleTrs.localEulerAngles;

        //カメラペアレント
        CameraObjectsTrs.SetParent(BottleTrs);

        //傾き取得してDO
        GameObject Bottle_010_TsutukareKatamuki_PosRotObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Bottle_010_TsutukareKatamuki_PosRotObj") as GameObject;
        BottleTrs.DOLocalMove(Bottle_010_TsutukareKatamuki_PosRotObj.transform.localPosition
            , 0.7f);
        BottleTrs.DOLocalRotate(Bottle_010_TsutukareKatamuki_PosRotObj.transform.localEulerAngles
            , 0.7f)
            //傾いたら
            .OnComplete(() =>
            {
                //初期値に戻し バウンス
                BottleTrs.DOLocalMove(defBottolePos
    , 1.5f).SetEase(Ease.OutBounce);
                BottleTrs.DOLocalRotate(defBottoleRot
                    , 1.5f).SetEase(Ease.OutBounce)
                    //戻ったらペアレント戻し 終わり判定true
                    .OnComplete(() =>
                    {
                        CameraObjectsTrs.SetParent(GameObjectsTrs);
                        isTsuki = true;
                    });
            });



        ChieriMotion("f_あはは・・2", 0.1f, 2);
        ChieriMotionDelay(1, "f_あはは・・2目開き", 0.1f, 2);//時間差表情戻し
        Hukidashi("E4200060a100");//こんなことするわけないもん
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);


        NovelSetVis("E4200070");//わ、わからない……頭がどうにかなりそうだった


        //ボトル戻るまで待機
        while (isTsuki == false) { yield return null; }

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "f_リラックス02", 0.1f, 2);//時間差表情戻し
        ChieriMotion("デスク起き上がりポーズ", 1, 0);


        //IK戻すとき 指ボトルに触れないよう手前に動かしながら切る
        GameObject IKRHand_030_ModosiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/IKRHand_030_ModosiPosObj") as GameObject;
        IKRHandTargetTrs.DOLocalMove(IKRHand_030_ModosiPosObj.transform.localPosition
            , 2);
        IKRHandTargetTrs.DOLocalRotate(IKRHand_030_ModosiPosObj.transform.localEulerAngles
            , 2);
        DOTweenToIKEfPos(IKRHandEf, 0, 2);
        DOTweenToIKEfRot(IKRHandEf, 0, 2);

        //手戻し
        ChieriMotion("_noData", 1f, 5);


        while (isNovelSetVisIng) { yield return null; }

        #endregion

        #region //デバッグ設定
        //GameObject PetBottle_020_DeskTate_PosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_020_DeskTate_PosObj") as GameObject;

        ////重力設定消し
        //AN_GravitiDragBool = false;
        //isRigidReadSystem = false;
        //Destroy(CameraObjectsTrs.GetComponent<Rigidbody>());

        ////ペットボトル、左手からペアレント外し 立て位置に
        //PetBottleObj.transform.SetParent(GameObjectsTrs);
        ////位置
        //PetBottleObj.transform.localPosition = PetBottle_020_DeskTate_PosObj.transform.localPosition;
        //PetBottleObj.transform.localEulerAngles = PetBottle_020_DeskTate_PosObj.transform.localEulerAngles;


        ////ペットボトル内へのプレイヤー配置
        //FixedAction(() =>
        //{
        //    //プレイヤーを、ペットボトル手前はじへ。（PetBottleObjのローカル位置 をワールド座標に変換して置く）（ペットボトルの場所が変わっても大丈夫なように）
        //    GameObject PlayerPetBottlePare_010_PanOtosarePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PlayerPetBottlePare_010_PanOtosarePosObj") as GameObject;
        //    CameraObjectsTrs.position
        //        = PetBottleObj.transform.TransformPoint(PlayerPetBottlePare_010_PanOtosarePosObj.transform.localPosition);
        //});

        //ChieriMotion("デスク起き上がりポーズ", 0, 0);
        #endregion

        #region ■選択肢 好き？
        yield return new WaitForSeconds(2);
        SHukidashi("■E4200070");//じゃあ公は好き？
        ChieriMotion("デスク少しうつ伏せポーズ", 0.6f / girlAnim.speed, 0);


        //IK顔 肘つき用角度
        DOTweenToLAIKSHead(LAIKHeadS, 0.6f, 1);


        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "f_気づき（明）", 0.1f, 2);//時間差表情戻し
        yield return new WaitForSeconds(1);
        //ChieriMotion("h_右少し傾け", 0.2f, 7);

        yield return new WaitForSeconds(3);

        Sentakushi("■E4200070a");
        Sentakushi("■E4200070b");
        Sentakushi("■E4200070c");

        //選択肢選ばれるまでループ
        while (sentakuListNum == 99) { yield return null; }
        yield return new WaitForSeconds(0.5f);

        switch (sentakuListNum)
        {
            case 0://選択肢a 好きだ
                {
                    #region 駄目だ見透かされている
                    ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);

                    Hukidashi("E4200070a010");//ほんとに？
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);


                    ChieriMotion("笑顔01口眉", 0.1f, 2);
                    ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                    Hukidashi("E4200070a020");//両思いなんだ
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                    yield return new WaitForSeconds(1);

                    ChieriMotion("デスク起き上がりポーズ", 0.6f / girlAnim.speed, 0);
                    FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 0.6f / girlAnim.speed);
                    DOTweenToLAIKSHead(LAIKHeadS, 1, 1);

                    Hukidashi("E4200070a030");//ずっと一緒にいられるね
                    ChieriMotion("笑顔01口眉", 0.1f, 2);
                    ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                    yield return KeyOrWait(3);

                    ChieriMotion("f_眉高い笑顔少しジト目", 1f, 2);
                    yield return new WaitForSeconds(1);

                    NovelSetVis("E4200070a010");//まともに受け取られてない気がする・・
                    while (isNovelSetVisIng) { yield return null; }
                    #endregion
                }
                break;

            case 1://選択肢b 嫌い
                {
                    #region まあそうだよね
                    NovelSetVis("E4200070b010");//嫌いに決まってるだろ！
                    while (isNovelSetVisIng) { yield return null; }
                    yield return new WaitForSeconds(1);

                    ChieriMotion("f_あはは・・2", 0.1f, 2);
                    ChieriMotionDelay(1, "f_あはは・・2目開き", 0.1f, 2);//時間差表情戻し
                    Hukidashi("E4200070b010");//そうだよね
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    ChieriMotion("デスク起き上がりポーズ", 0.6f / girlAnim.speed, 0);
                    FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 0.6f / girlAnim.speed);
                    DOTweenToLAIKSHead(LAIKHeadS, 1, 1);

                    Hukidashi("E4200070b020");//こんなことされて
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    ChieriMotion("笑顔01口眉", 0.2f, 2);
                    ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                    Hukidashi("E4200070b030");//でもいいんだ
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);


                    ChieriMotion("f_眉高い笑顔少しジト目", 1f, 2);
                    Hukidashi("E4200070b040");//こうしないと一緒にいられないもん
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                    #endregion
                }
                break;

            case 2://選択肢c
                {
                    #region そうなんだ・・（小声）
                    yield return new WaitForSeconds(1);
                    ChieriMotion("f_どうして謝るの？", 0.2f, 2);

                    yield return new WaitForSeconds(1);

                    Hukidashi("E4200070c010");//そっか・・
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    ChieriMotion("デスク起き上がりポーズ", 0.6f / girlAnim.speed, 0);
                    FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 0.6f / girlAnim.speed);
                    DOTweenToLAIKSHead(LAIKHeadS, 1, 1);

                    ChieriMotion("f_悲しい", 8f, 2);
                    yield return new WaitForSeconds(1f);

                    //まばたき
                    ChieriMotion("b_まばたきSlow用", 0f, 4);
                    blinkTime = 0;

                    //目逸らし
                    FollowDOMove(IKLookAtEyeTargetTrs, GomibakoTrs);

                    yield return new WaitForSeconds(1);

                    Hukidashi("E4200070c020");//そうなんだ
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    yield return new WaitForSeconds(2f);

                    Hukidashi("E4200070c030");//勇気出せばよかったのかな
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    yield return new WaitForSeconds(1f);
                    NovelSetVis("E4200070c010");//聴き取れたような気がした
                    while (isNovelSetVisIng) { yield return null; }
                    yield return new WaitForSeconds(1f);

                    //まばたき
                    ChieriMotion("b_まばたきSlow用", 0f, 4);
                    blinkTime = 0;

                    //IKプレイヤー見る
                    FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);

                    ChieriMotion("f_あはは・・2目開き", 0.1f, 2);//時間差表情戻し

                    Hukidashi("E4200070c040");//すっきりしたかも
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    ChieriMotion("笑顔01口眉", 0.2f, 2);
                    ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

                    Hukidashi("E4200070c050");//一緒によろしくね
                    yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                    ChieriMotion("f_眉高い笑顔少しジト目", 1f, 2);
                    #endregion
                }
                break;

        }

        yield return new WaitForSeconds(1);

        NovelSetVis("E4200080");//どういう意味なんだよ・・
        FadeBlack(1, 2);
        yield return new WaitForSeconds(1);

        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1);



        #endregion

        //Destroy(Pankuzu01RHitosasiPare_PetBottleOtosi01);
        //Destroy(Pankuzu02RHitosasiPare_PetBottleOtosi01);

        #endregion

        #region ペットボトル倒し起こし
        #region ■元モーションテストでのデバッグ設定
        //ミュート
        tmpRhitosasiAS.mute =
        tmpHeadAS.mute = true;

        //DB.isChieriPosLock = true;
        //////椅子位置に
        ////GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
        ////GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;

        //ペットボトル準備
        PetBottleObj.SetActive(true);
        CapObj.SetActive(true);

        //智恵理
        ChieriMotion("デスクペットボトル手伸ばし立てるためポーズ原点", 0f, 0);
        ChieriMotion("f_眉高い笑顔少しジト目", 1f, 2);

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 0.6f / girlAnim.speed);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 1);

        PetBottleObj.transform.SetParent(GameObjectsTrs);
        //立て位置
        PetBottleObj.transform.localPosition = PetBottle_020_DeskTate_PosObj.transform.localPosition;
        PetBottleObj.transform.localEulerAngles = PetBottle_020_DeskTate_PosObj.transform.localEulerAngles;


        //ペットボトル内へのプレイヤー配置
        FixedAction(() =>
        {
            //プレイヤーを、ペットボトル手前はじへ。（PetBottleObjのローカル位置 をワールド座標に変換して置く）（ペットボトルの場所が変わっても大丈夫なように）
            GameObject PlayerPetBottlePare_010_PanOtosarePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PlayerPetBottlePare_010_PanOtosarePosObj") as GameObject;
            CameraObjectsTrs.position
                = PetBottleObj.transform.TransformPoint(PlayerPetBottlePare_010_PanOtosarePosObj.transform.localPosition);
        });

        //ペットボトルコリダーをFixed追従動かし（智恵理のFixedColliderと同じ理屈）
        SetFixedMoveColliders(PetBottleObj.transform.Find("Bottle/Bottle_MeshCollider").gameObject);

        FadeBlack(1, 0);
        yield return null;

        #endregion

        //アニメスピード
        girlAnim.speed = 0.6f;


        FadeBlack(0, 2);

        #region 手伸ばす前まで
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "f_気づき（明）", 0.1f, 2);//時間差表情戻し
        Hukidashi("D41000a08");//今日は大事な日
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //IK余所見
        FollowDOMove(IKLookAtEyeTargetTrs, GomibakoTrs, 0f);
        //まばたき
        ChieriMotion("b_まばたきSlow用", 0f, 4);
        blinkTime = 0;


        Hukidashi("D41000a09");//小さい体に慣れて
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        //IKプレイヤー
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        //まばたき
        ChieriMotion("b_まばたきSlow用", 0f, 4);
        blinkTime = 0;

        Hukidashi("D41000a10");//大きい私に慣れて
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "f_気づき（明）", 0.1f, 2);//時間差表情戻し

        NovelSetVis("E4200090");//智恵理から返事はなく
        while (novelCurrentPageInt < 1) { yield return null; }

        //ANの重力設定のみロード
        AN_SetPlayerRigidbody();
        AN_GravitiDragBool = true;//FixedUpdateのやつON
                                  //rigid監視スタート
        StartCoroutine(RigidReadSystem());

        #endregion

        #region 智恵理ペットボトル倒し起こし 一連
        //ミュート解除
        tmpRhitosasiAS.mute =
        tmpHeadAS.mute = false;

        ChieriMotion("デスクペットボトル手伸ばし倒すため原点", 0f, 0);

        //■手伸ばすまで待機
        yield return null;
        StartCoroutine(GirlAnimReadSystem());
        while (girlAnimNomTime <= 0.8f)
        { yield return null; }
        isGirlAnimReadSystem = false;

        FixedAction(() =>
        {
            PetBottleObj.transform.SetParent(GirlRHandTrs);

            //ペットボトル智恵理右手 倒し起こし位置
            GameObject PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj") as GameObject;
            PetBottleObj.transform.DOLocalMove(PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj.transform.localPosition
                , 1f).SetEase(Ease.Linear);
            PetBottleObj.transform.DOLocalRotate(PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj.transform.localEulerAngles
                , 1f).SetEase(Ease.Linear);
        });

        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("デスクペットボトル倒す原点", 0f, 0);

        //■倒すまで待機
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "デスクペットボトル倒す原点") { yield return null; }
        while (girlAnimNomTime <= 1f) { yield return null; }
        isGirlAnimReadSystem = false;

        //■重力設定消し
        AN_GravitiDragBool = false;
        isRigidReadSystem = false;
        Destroy(CameraObjectsTrs.GetComponent<Rigidbody>());


        Hukidashi("E4200080");//はい、でてもいいよ
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1, "f_気づき（明）", 0.1f, 2);//時間差表情戻し

        //手戻し
        FixedAction(() =>
        {
            ChieriMotion("デスクペットボトル倒した後手戻す原点", 0f, 0);

            PetBottleObj.transform.SetParent(GameObjectsTrs);
            //ペットボトル倒れ位置
            GameObject PetBottle_040_DeskTaore_PosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_040_DeskTaore_PosObj") as GameObject;
            PetBottleObj.transform.DOLocalMove(PetBottle_040_DeskTaore_PosObj.transform.localPosition
                , 0.5f).SetEase(Ease.Linear);
            PetBottleObj.transform.DOLocalRotate(PetBottle_040_DeskTaore_PosObj.transform.localEulerAngles
                , 0.5f).SetEase(Ease.Linear);
        });

        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        yield return new WaitForSeconds(1);


        NovelSetVis("E4200100");//あれだけ渇望した
        while (isNovelSetVisIng) { yield return null; }

        #region 探索とかくれおに移動設置
        //■隠れ鬼移動システムON
        KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
        //ローディング待ち
        while (isKOSystemLoading) { yield return null; }
        //移動場所08オン
        int tmpInt = 8;
        KO_KakurePosObjsList[tmpInt].SetActive(true);
        //寝る場所移動ポイント出現 演出
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleExitPos").gameObject, 0.5f);
        #endregion

        //ペットボトル出るまで待機
        while (isPetBottleExitPos_Enter == false) { yield return null; }

        //着地分1秒待機
        KO_isMovePosLock = true;
        yield return new WaitForSeconds(1);

        KO_isMovePosLock = false;
        isKOSystem = false;
        isTansakuSystem = false;

        NovelSetVis("E4200110");

        ChieriMotion("デスクペットボトル手伸ばし立てるため原点", 0f, 0);

        //IKペットボトル見
        FollowDOMove(IKLookAtEyeTargetTrs, PetBottleObj.transform, 0f);
        FollowDOMove(IKLookAtHeadTargetTrs, PetBottleObj.transform, new Vector3(0, -0.045f, 0), 1);
        //まばたき
        ChieriMotion("b_まばたきSlow用", 0f, 4);
        blinkTime = 0;

        //■手伸ばすまで待機
        yield return null;
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "デスクペットボトル手伸ばし立てるため原点") { yield return null; }
        while (girlAnimNomTime <= 1f) { yield return null; }
        isGirlAnimReadSystem = false;

        //プレイヤー見
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 0.6f / girlAnim.speed);
        DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
        //IKプレイヤー
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        //まばたき
        ChieriMotion("b_まばたきSlow用", 0f, 4);
        blinkTime = 0;

        FixedAction(() =>
        {
            PetBottleObj.transform.SetParent(GirlRHandTrs);

            //ペットボトル智恵理右手 倒し起こし位置
            GameObject PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj") as GameObject;
            PetBottleObj.transform.DOLocalMove(PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj.transform.localPosition
                , 0.5f).SetEase(Ease.Linear);
            PetBottleObj.transform.DOLocalRotate(PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj.transform.localEulerAngles
                , 0.5f).SetEase(Ease.Linear);

            ChieriMotion("デスクペットボトル立てる原点", 0f, 0);
        });

        //■立てるまで待機
        yield return null;
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "デスクペットボトル立てる原点") { yield return null; }
        while (girlAnimNomTime <= 1f) { yield return null; }
        isGirlAnimReadSystem = false;

        FixedAction(() =>
        {
            ChieriMotion("デスクペットボトル立てた後手戻す原点", 0f, 0);

            PetBottleObj.transform.SetParent(GameObjectsTrs);
            //ペットボトル立ち位置
            PetBottleObj.transform.DOLocalMove(PetBottle_020_DeskTate_PosObj.transform.localPosition
            , 0.5f).SetEase(Ease.Linear);
            PetBottleObj.transform.DOLocalRotate(PetBottle_020_DeskTate_PosObj.transform.localEulerAngles
                , 0.5f).SetEase(Ease.Linear);
        });

        //■手戻すまで待機
        yield return null;
        StartCoroutine(GirlAnimReadSystem());
        while (nowGirlAnimClipName != "デスクペットボトル立てた後手戻す原点") { yield return null; }
        while (girlAnimNomTime <= 1f) { yield return null; }
        isGirlAnimReadSystem = false;

        while (isNovelSetVisIng) { yield return null; }


        ChieriMotion("デスク起き上がり→肘つき", 0f, 0);

        yield return KeyOrWait(3);


        FadeBlack(1, 1);
        yield return new WaitForSeconds(1);

        EventMove("練習1_朝");
        #endregion

        #endregion



        #region //デバッグでキー毎にイベント確認していたときのもの（後で消す）
        while (true)
        {

            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.F))
            {
                #region //ペットボトル取り出す～摘み上げ
                //#region ペットボトル取り出す
                ////ミュート解除
                //tmpHeadAS.mute = false;
                //tmpRhitosasiAS.mute = false;

                //NovelSetVis("E4100010");//見つめられている-やんわりと伝えよう・・
                //while (isNovelSetVisIng) { yield return null; }
                //yield return new WaitForSeconds(1);

                ////同時発声でノベル消し
                //NovelSetVis("E4100020");//あのさ
                //yield return new WaitForSeconds(0.2f);
                //ChieriMotion("f_あはは・・2", 0.2f, 2);
                //ChieriMotionDelay(3, "f_あはは・・2目開き", 0.2f, 2);
                //Hukidashi("E4100010");//お腹すいたね
                //yield return new WaitForSeconds(0.5f);
                //isNovelFadeTween = isNovelSetVisIng = false;
                //yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

                //NovelSetVis("E4100030");//ほぼ同時だった。
                //while (isNovelSetVisIng) { yield return null; }

                ////まばたき
                //ChieriMotion("b_まばたきSlow用", 0f, 4);
                //blinkTime = 0;
                ////上向き
                //ChieriMotion("f_本当に小さいね～", 0.3f, 2);
                ////IKカレンダー見
                //FollowDOMove(IKLookAtEyeTargetTrs, CalenderTrs, 0f);
                //yield return new WaitForSeconds(1);
                //Hukidashi("E4100020");//朝ごはんも食べたいけど
                //yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

                ////■"デスク肘つき→起き上がり"モーションだけ速度変更（animatorのParametersでスピード変更（ステート毎に設定できるので、表情が遅くならない））
                //girlAnim.SetFloat("デスク肘つき→起き上がりSpeed", 0.4f); yield return null;
                //ChieriMotion("デスク肘つき→起き上がり", 0, 0);

                ////IKプレイヤー見る
                //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                ////まばたき
                //ChieriMotion("b_まばたきSlow用", 0f, 4);
                //blinkTime = 0;

                //yield return new WaitForSeconds(1);

                //Hukidashi("E4100030");//のど渇いてるんじゃない？

                //ChieriMotion("f_眉高い笑顔少しジト目", 0.3f, 2);

                //yield return new WaitForSeconds(1f); yield return KeyOrWait(3);
                //yield return new WaitForSeconds(1f);
                //NovelSetVis("E4100040");//あ、うん
                //while (novelCurrentPageInt < 2) { yield return null; }

                ////ミュート
                //tmpHeadAS.mute = true;
                //tmpRhitosasiAS.mute = true;

                ////ノベル中暗幕でペットボトル取り出しポーズに
                //FadeBlack(1, 0.5f);
                //yield return new WaitForSeconds(0.5f);

                //ChieriMotion("デスクペットボトル取り出し前ポーズ原点", 0f, 0);

                //while (novelCurrentPageInt < 6) { yield return null; }

                ////開幕
                //FadeBlack(0, 0.5f);
                //yield return new WaitForSeconds(0.5f);
                //while (isNovelSetVisIng) { yield return null; }
                ////ミュート解除
                //tmpHeadAS.mute = false;
                //tmpRhitosasiAS.mute = false;


                //yield return new WaitForSeconds(1);
                //ChieriMotion("笑顔01口眉", 0.05f, 2);
                //ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                //Hukidashi("E4100040");//いいものがあるから
                //yield return new WaitForSeconds(1f); yield return KeyOrWait(3);


                ////■ペットボトル取り出し開始
                //ChieriMotion("デスクペットボトル取り出し原点", 0f, 0);
                //NovelSetVis("E4100050");//あ、うん

                ////鞄へ手を伸ばすあたりまで待ち
                //StartCoroutine(GirlAnimReadSystem());
                //yield return null;
                //while (girlAnimNomTime <= 0.5f)
                //{ yield return null; }


                ////IK鞄に
                //GameObject tmpSchoolBagObj = GameObject.Find("SchoolBag");
                //FollowDOMove(IKLookAtEyeTargetTrs, tmpSchoolBagObj.transform, 0.1f);
                ////顔はオフ
                //DOTweenToLAIKSHead(LAIKHeadS, 0, 1.5f);

                ////まばたき
                //ChieriMotion("b_まばたきSlow用", 0f, 4);
                //blinkTime = 0;

                //while (novelCurrentPageInt < 3) { yield return null; }
                ////暗幕
                //FadeBlack(1, 1f);
                //yield return new WaitForSeconds(1f);

                ////プレイヤー 机の上位置に
                //CameraObjectsTrs.localPosition = Player_010_DeskUeChieriTsumamiPosObj.transform.localPosition;
                //CameraObjectsTrs.localEulerAngles = Player_010_DeskUeChieriTsumamiPosObj.transform.localEulerAngles;

                ////まさぐり音仮
                //SEPlay(tmpSchoolBagObj, "laundry-spread1");
                //yield return new WaitForSeconds(2);

                ////風切り音出す用に逆再生
                //ChieriMotion("デスクペットボトル取り出し原点逆再生", 0f, 0);
                //yield return null;
                //while (girlAnimNomTime <= 0.8f)
                //{ yield return null; }
                //isGirlAnimReadSystem = false;
                //NovelSetVis("E4100060");//そして出てきたのは

                ////IKプレイヤー見る
                //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0));
                //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

                ////ミュート
                //tmpHeadAS.mute = true;
                //tmpRhitosasiAS.mute = true;
                //#endregion

                //#region 飲む？　の流れ
                ////ペットボトル準備
                //PetBottleObj.SetActive(true);
                //CapObj.SetActive(true);
                //ChieriMotion("デスクペットボトル持ち原点", 0f, 0);

                //while (isNovelSetVisIng) { yield return null; }
                ////開幕
                //FadeBlack(0, 0.5f);
                //yield return new WaitForSeconds(0.5f);
                //yield return new WaitForSeconds(1);

                ////ミュート解除
                //tmpHeadAS.mute = false;
                //tmpRhitosasiAS.mute = false;

                //NovelSetVis("E4100070");//お、おお……
                //while (isNovelSetVisIng) { yield return null; }
                //yield return new WaitForSeconds(1);

                //ChieriMotion("f_あはは・・2", 0.2f, 2);
                //ChieriMotionDelay(1, "f_あはは・・2目開き", 0.2f, 2);
                //Hukidashi("E4100050");//えへへ、部活で飲んじゃった
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                //yield return new WaitForSeconds(1);

                ////まばたき
                //ChieriMotion("b_まばたきSlow用", 0f, 4);
                //blinkTime = 0;

                //ChieriMotion("f_本当に小さいね～", 0.3f, 2);
                ////IKペットボトル見
                //FollowDOMove(IKLookAtEyeTargetTrs, PetBottleObj.transform, 0f);
                //FollowDOMove(IKLookAtHeadTargetTrs, PetBottleObj.transform, new Vector3(0, -0.045f, 0), 1);

                //Hukidashi("E4100060");//だからもう捨てようと
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                ////口パク止め
                //kutipakuTimerFloat = 0;
                //ChieriMotion("_noData", 0.1f, 3);
                ////■■※ マスクの動作は0フレで_noDataにしないと止まった事にならず、クチ開き表情ができなくなるのでディレイでクチ閉じ
                //ChieriMotionDelay(0.1f, "_noData", 0f, 3);//時間差表情戻し

                //yield return new WaitForSeconds(1);

                ////目IKプレイヤー見る
                //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                //ChieriMotion("笑顔01口眉_目閉じない", 0.2f, 2);
                ////まばたき
                //ChieriMotion("b_まばたきSlow用", 0f, 4);
                //blinkTime = 0;

                //yield return new WaitForSeconds(1);

                //ChieriMotion("h_右少し傾け", 0.5f, 7);
                //Hukidashi("E4100070");//飲みたい？
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                //yield return new WaitForSeconds(0.5f);
                //#endregion

                //#region ■選択肢 飲む飲まない（会話のみ）
                //NovelSetVis("■E4100080");//え？　いや！　え？

                ////■■選択肢
                //sentakuListNum = 99;//初期化
                //while (isNovelSentakushiWait) { yield return null; }
                //yield return new WaitForSeconds(1f);

                //Sentakushi("■E4100080a", Mathf.Infinity);
                //Sentakushi("■E4100080b", Mathf.Infinity);

                //while (sentakuListNum == 99) { yield return null; }
                //yield return null;

                //switch (sentakuListNum)
                //{
                //    case 0://選択肢a 「いや遠慮しとくよ」
                //        sentakuListNum = 99;
                //        //isNovelFadeTween = isNovelSetVisIng = false;
                //        yield return new WaitForSeconds(0.5f);
                //        NovelSetVis("E4100080a010");//遠慮
                //        while (novelCurrentPageInt < 1) { yield return null; }

                //        while (isNovelSetVisIng) { yield return null; }
                //        //IKペットボトル見
                //        ChieriMotion("h_noData", 2f, 7);
                //        FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0, -0.1f, 0), 3);

                //        //ChieriMotion("f_本当に小さいね～", 0.7f, 2);

                //        Hukidashi("E4100080a010");//ふぅん
                //        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

                //        Hukidashi("E4100080a020");//まあ飲まなくても
                //        ChieriMotion("f_リラックス02", 1f, 2);

                //        FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0, -0.11f, 0), 0.5f);
                //        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, new Vector3(0, 0f, -0.15f));//より目しすぎないよう

                //        break;
                //    case 1://選択肢b 「貰おうかな」
                //        sentakuListNum = 99;
                //        //isNovelFadeTween = isNovelSetVisIng = false;
                //        yield return new WaitForSeconds(0.5f);
                //        NovelSetVis("E4100080b010");//遠慮

                //        while (isNovelSetVisIng) { yield return null; }

                //        FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0, -0.1f, 0), 3);
                //        Hukidashi("E4100080b010");//無理してない？
                //        ChieriMotion("f_あはは・・2", 0.2f, 2);
                //        ChieriMotionDelay(1, "f_あはは・・2目開き", 0.2f, 2);
                //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                //        yield return new WaitForSeconds(1);
                //        NovelSetVis("E4100080b020");//え？　なんだ冗談
                //        while (isNovelSetVisIng) { yield return null; }

                //        ChieriMotion("f_リラックス02", 1f, 2);
                //        ChieriMotion("h_noData", 3f, 7);

                //        Hukidashi("E4100080b030");//じゃあ、飲んでもらおうかなー

                //        FollowDOMove(IKLookAtHeadTargetTrs, PlayerTargetTrs, new Vector3(0, -0.14f, 0), 0.5f);
                //        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, new Vector3(0, 0f, -0.15f));//より目しすぎないよう


                //        break;
                //}
                //#endregion

                //yield return new WaitForSeconds(2);

                //#region 摘み上げ
                //ChieriMotion("デスクペットボトル摘み上げ原点", 0f, 0);
                //yield return null;

                ////■手構えるまで待機
                //StartCoroutine(GirlAnimReadSystem());
                //while (girlAnimNomTime <= 0.215f)
                //{ yield return null; }

                ////■つまみ直前まで待機
                //StartCoroutine(GirlAnimReadSystem());
                //while (girlAnimNomTime <= 0.324f)
                //{ yield return null; }

                //NovelSetVis("E4100090");//え？な？え？


                //FixedAction(() =>
                //{
                //    //指にペアレントし、Tweenで所定位置に
                //    CameraObjectsTrs.SetParent(GirlRhitosashi02Trs);
                //    GameObject Player_020_RHito2PareTsumamiLocalPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_020_RHito2PareTsumamiLocalPosObj") as GameObject;
                //    CameraObjectsTrs.DOLocalMove(Player_020_RHito2PareTsumamiLocalPosObj.transform.localPosition, 0.5f);
                //});

                ////■つまみ持ち上げまで待機
                //StartCoroutine(GirlAnimReadSystem());
                //while (girlAnimNomTime <= 0.624f)
                //{ yield return null; }


                ////表情
                //ChieriMotion("笑顔01口眉", 0.05f, 2);
                //ChieriMotionDelay(1, "f_リラックス02", 0.1f, 2);//時間差表情戻し

                //isGirlAnimReadSystem = false;

                //while (isNovelSetVisIng) { yield return null; }

                //NovelSetVis("E4100100");//まって、待ってくれ…！



                //#endregion
                #endregion
            }

            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.G))
            {
                #region //指離して落ちる～暗幕（智恵理出て行く）
                //#region ■デバッグ設定
                //CameraObjectsTrs.SetParent(GirlRhitosashi02Trs);
                //GameObject Player_020_RHito2PareTsumamiLocalPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_020_RHito2PareTsumamiLocalPosObj") as GameObject;
                //CameraObjectsTrs.DOLocalMove(Player_020_RHito2PareTsumamiLocalPosObj.transform.localPosition, 0f);
                //CameraObjectsTrs.localEulerAngles = Player_020_RHito2PareTsumamiLocalPosObj.transform.localEulerAngles;
                ////ペットボトル準備
                //PetBottleObj.SetActive(true);
                //CapObj.SetActive(true);
                ////ミュート解除
                //tmpHeadAS.mute = false;
                //tmpRhitosasiAS.mute = false;
                ////スピード
                //girlAnim.speed = 0.4f;
                //#endregion

                //#region 指離して落ちる
                //ChieriMotion("デスクペットボトルへ落とす原点", 0f, 0);
                //yield return null;

                ////■指離すまで待機
                //StartCoroutine(GirlAnimReadSystem());
                //while (girlAnimNomTime <= 0.05f)
                //{ yield return null; }
                //isGirlAnimReadSystem = false;

                //FixedAction(() =>
                //{
                //    CameraObjectsTrs.SetParent(GameObjectsTrs);
                //});
                //yield return null; yield return null;

                ////ANの重力設定のみロード
                //AN_SetPlayerRigidbody();
                //AN_GravitiDragBool = true;//FixedUpdateのやつON
                ////rigid監視スタート
                //StartCoroutine(RigidReadSystem());

                ////ペアレントで傾いたカメラ戻し
                //CameraObjectsTrs.DOLocalRotateQuaternion(new Quaternion(0, CameraObjectsTrs.rotation.y, 0, CameraObjectsTrs.rotation.z), 1f);

                ////飲み口に落ちるように移動
                //FixedAction(() =>
                //{
                //    CameraObjectsTrs.DOMoveX(PetBottleObj.transform.position.x, 1f);
                //    CameraObjectsTrs.DOMoveZ(PetBottleObj.transform.position.z, 1f);
                //});
                //#endregion

                //#region 落ちて立ち上がるまで
                ////大体おちた高さになるまで待機
                //while (CameraObjectsTrs.localPosition.y >= 0.71f) { yield return null; }

                ////フラッシュと音とダメージ
                //FadeWhite(1, 0);
                //SEPlay("dan01");
                //PlayerHPAddSub(-400);

                //CameraObjectsTrs.DOLocalRotate(
                //    new Vector3(270, CameraObjectsTrs.localEulerAngles.y, CameraObjectsTrs.localEulerAngles.z)
                //    , 0.3f)
                //    .SetEase(Ease.OutBounce);
                //yield return new WaitForSeconds(0.05f);
                //FadeWhite(0, 0);



                //yield return new WaitForSeconds(1f);

                //NovelSetVis("E4100110");//あいっづつ……！　うう
                //while (novelCurrentPageInt < 2) { yield return null; }

                ////立ち上がり暗幕
                //FadeBlack(1, 0.5f);
                //yield return new WaitForSeconds(0.5f);

                ////ペットボトルだいたいセンター位置（落ちた場所）
                //GameObject Player_030_PetBottleCenterPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_030_PetBottleCenterPosObj") as GameObject;
                //CameraObjectsTrs.localPosition = Player_030_PetBottleCenterPosObj.transform.localPosition;
                //CameraObjectsTrs.localRotation = Player_030_PetBottleCenterPosObj.transform.localRotation;

                ////■重力設定消し
                //AN_GravitiDragBool = false;
                //isRigidReadSystem = false;
                //Destroy(CameraObjectsTrs.GetComponent<Rigidbody>());

                //FadeBlack(0, 0.5f);


                //while (isNovelSetVisIng) { yield return null; }
                //#endregion

                //#region 移動Pos出し、移動でノベル、智恵理覗きこみとご飯食べてくるね

                //Hukidashi("E4100100");//これでもう逃げられないし
                //yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

                //Hukidashi("E4100110");//喉が渇いても大丈夫
                //yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

                //yield return new WaitForSeconds(0.5f);

                //NovelSetVis("E4100120");//う、嘘だろ……
                //while (isNovelSetVisIng) { yield return null; }

                //#region 探索とかくれおに移動設置
                ////■隠れ鬼移動システムON
                //KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
                ////移動場所07オン
                //int tmpInt = 8;
                //KO_KakurePosObjsList[tmpInt].SetActive(true);
                ////寝る場所移動ポイント出現 演出
                //KO_NewPosPointObjVis
                //    (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleForwardPos").gameObject, 0.1f);
                //yield return new WaitForSeconds(0.5f);
                //KO_NewPosPointObjVis
                //    (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleLeftPos").gameObject, 0.1f);
                //yield return new WaitForSeconds(0.5f);
                //KO_NewPosPointObjVis
                //     (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleRightPos").gameObject, 0.1f);
                //yield return new WaitForSeconds(0.5f);
                //KO_NewPosPointObjVis
                //    (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleBackPos").gameObject, 0.1f);
                //#endregion

                ////ペットボトルコリダーをFixed追従動かし（智恵理のFixedColliderと同じ理屈）
                //SetFixedMoveColliders(PetBottleObj.transform.Find("Bottle/Bottle_MeshCollider").gameObject);


                //#region //ペットボトルシェイクテスト
                ////FixedAction(() =>
                ////{
                ////    IKLHandTargetTrs.position = GirlLHandTrs.position;
                ////    IKLHandTargetTrs.rotation = GirlLHandTrs.rotation;
                ////    DOTweenToIKEfPos(IKLHandEf, 1, 0);
                ////    DOTweenToIKEfRot(IKLHandEf, 1, 0);

                ////    tmpShakePrevPos = IKLHandTargetTrs.localPosition;
                ////    tmpShakePrevQua = IKLHandTargetTrs.localRotation;
                ////});

                ////while (true)
                ////{
                ////    if (Input.GetKeyDown(KeyCode.B))
                ////    {
                ////        GameObject IKLHand_010_MotiageNozokiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/IKLHand_010_MotiageNozokiPosObj") as GameObject;
                ////        IKLHandTargetTrs.DOLocalMove(IKLHand_010_MotiageNozokiPosObj.transform.localPosition
                ////            , tmpShakeTime);
                ////        IKLHandTargetTrs.DOLocalRotateQuaternion(IKLHand_010_MotiageNozokiPosObj.transform.localRotation
                ////            , tmpShakeTime);

                ////        //ChieriMotion("デスクペットボトル傾け覗き込み原点", 0f, 0);
                ////    }
                ////    if (Input.GetKeyDown(KeyCode.N))
                ////    {
                ////        IKLHandTargetTrs.DOLocalMove(tmpShakePrevPos
                ////            , tmpShakeTime);
                ////        IKLHandTargetTrs.DOLocalRotateQuaternion(tmpShakePrevQua
                ////            , tmpShakeTime);

                ////        //ChieriMotion("デスクペットボトル傾け覗き込み原点", 0f, 0);
                ////    }

                ////    yield return null;
                ////}

                //#endregion

                //yield return new WaitForSeconds(3f);


                //Hukidashi("E4100120");//中に入ったのって
                //yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

                //Hukidashi("E4100130");//公が初めてじゃない？
                //yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

                //yield return new WaitForSeconds(1f);
                ////IKプレイヤー見る 頭はIK切る
                //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                //DOTweenToLAIKSHead(LAIKHeadS, 0, 4);

                //ChieriMotion("デスクペットボトル傾け覗き込み原点", 0f, 0);
                //ChieriMotion("f_本当に小さいね～", 1f, 2);
                //yield return null;

                ////顔近づくまで待機
                //StartCoroutine(GirlAnimReadSystem());
                //while (girlAnimNomTime <= 1f)
                //{ yield return null; }
                //isGirlAnimReadSystem = false;
                //yield return new WaitForSeconds(2f);

                //ChieriMotion("f_リラックス02", 0.5f, 2);

                //yield return new WaitForSeconds(2f);

                //ChieriMotion("笑顔01口眉", 0.05f, 2);
                //ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                //Hukidashi("E4100140");//ご飯食べてくるね
                //yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

                //ChieriMotion("デスクペットボトル傾け覗き込み原点逆再生", 0f, 0);
                ////頭IKON
                //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0));
                //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

                //yield return new WaitForSeconds(1f);
                //ChieriMotion("笑顔01口眉", 0.05f, 2);
                //ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                //yield return new WaitForSeconds(2f);

                ////移動で「出してくれ」台詞オフ
                //isBottleCenterPosArea_Exit = true;

                //NovelSetVis("E4100130");//ま、待ってくれ！

                //ChieriMotion("f_リラックス02", 1f, 2);//時間差表情戻し

                //while (novelCurrentPageInt < 2) { yield return null; }
                //FadeBlack(1, 2);

                //while (isNovelSetVisIng) { yield return null; }
                //#endregion

                //#region 暗幕時の智恵理出て行く演出
                ////ドア開く音
                //SEPlay(DoorRootTrs.gameObject, "door-open1");
                //yield return new WaitForSeconds(2f);

                //FixedAction(() =>
                //{
                //    PetBottleObj.transform.SetParent(GameObjectsTrs);
                //});

                ////ドア閉まる音
                //SEPlay(DoorRootTrs.gameObject, "door-close2");
                //yield return new WaitForSeconds(3f);

                //MeshTrs.gameObject.SetActive(false);

                //#endregion
                #endregion
            }

            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.H))
            {
                #region //いない間に動けるノベル
                //FadeBlack(1, 0);

                //#region ■デバッグ設定
                ////ペットボトル準備
                //PetBottleObj.SetActive(true);
                //CapObj.SetActive(true);

                ////プレイヤーペットボトルだいたいセンター位置（落ちた場所）（ドア方向）
                //GameObject Player_035_PetBottleCenterDoorAnglePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_035_PetBottleCenterDoorAnglePosObj") as GameObject;
                //CameraObjectsTrs.localPosition = Player_035_PetBottleCenterDoorAnglePosObj.transform.localPosition;
                //CameraObjectsTrs.localRotation = Player_035_PetBottleCenterDoorAnglePosObj.transform.localRotation;

                ////スピード
                //girlAnim.speed = 0.4f;

                //yield return null; yield return null;
                //yield return null;

                //MeshTrs.gameObject.SetActive(false);
                //#region 探索とかくれおに移動設置
                ////■隠れ鬼移動システムON
                //KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
                ////移動場所07オン
                //int tmpInt = 8;
                //KO_KakurePosObjsList[tmpInt].SetActive(true);
                ////寝る場所移動ポイント出現 演出
                //KO_NewPosPointObjVis
                //    (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleForwardPos").gameObject, 0f);
                //KO_NewPosPointObjVis
                //    (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleLeftPos").gameObject, 0f);
                //KO_NewPosPointObjVis
                //     (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleRightPos").gameObject, 0f);
                //KO_NewPosPointObjVis
                //    (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleBackPos").gameObject, 0f);
                //#endregion

                //isBottleCenterPosArea_Exit = true;
                //yield return null;
                //#endregion

                //FadeBlack(0, 2);

                //#region ペットボトル内散策するかしないかでノベル増える

                ////置くためにペアレントはずし
                //PetBottleObj.transform.SetParent(GameObjectsTrs);
                ////位置
                //GameObject PetBottle_010_DeskFirstPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_010_DeskFirstPosObj") as GameObject;
                //PetBottleObj.transform.localPosition = PetBottle_010_DeskFirstPosObj.transform.localPosition;
                //PetBottleObj.transform.localEulerAngles = PetBottle_010_DeskFirstPosObj.transform.localEulerAngles;

                ////4方エリアON
                //KO_KakurePosObjsList[tmpInt].transform.Find("BottleLeftPosArea_").GetComponent<Collider>().enabled = true;
                //KO_KakurePosObjsList[tmpInt].transform.Find("BottleRightPosArea_").GetComponent<Collider>().enabled = true;
                //KO_KakurePosObjsList[tmpInt].transform.Find("BottleForwardPosArea_").GetComponent<Collider>().enabled = true;
                //KO_KakurePosObjsList[tmpInt].transform.Find("BottleBackPosArea_").GetComponent<Collider>().enabled = true;

                //yield return new WaitForSeconds(7);

                //NovelSetVis("E4100140");//智恵理がいなくなったことで

                //while (isNovelSetVisIng) { yield return null; }

                ////4方探索していたら（エリアに入っていたら）
                //if (
                //    isBottleLeftPosArea_Enter &&
                //    isBottleRightPosArea_Enter &&
                //    isBottleForwardPosArea_Enter &&
                //    isBottleBackPosArea_Enter
                //    )
                //{
                //    NovelSetVis("E4100150");//「なにか、なにか出る方法は……！」
                //    while (novelCurrentPageInt < 7) { yield return null; }
                //}

                //isKOSystem = false;
                //isTansakuSystem = false;

                //FadeBlack(1, 3);
                //yield return new WaitForSeconds(3);

                //while (isNovelSetVisIng) { yield return null; }
                //NovelSetVis("E4100160");//仰向けに倒れこんだ
                //while (novelCurrentPageInt < 1) { yield return null; }

                ////仰向け
                //GameObject Player_040_PetBottleCenterAomukePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_040_PetBottleCenterAomukePosObj") as GameObject;
                //CameraObjectsTrs.localPosition = Player_040_PetBottleCenterAomukePosObj.transform.localPosition;
                //CameraObjectsTrs.localRotation = Player_040_PetBottleCenterAomukePosObj.transform.localRotation;

                //FadeBlack(0, 3);

                //while (isNovelSetVisIng) { yield return null; }
                //FadeBlack(1, 3);
                //yield return new WaitForSeconds(5);
                //#endregion
                #endregion
            }

            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.V))
            {
                #region //智恵理入室
                //FadeBlack(1, 0);
                //NovelSetVis("E4200010");//姿勢を変えたころ

                //#region ■モーションテストでのデバッグ設定
                ////ペットボトル準備
                //PetBottleObj.SetActive(true);
                //CapObj.SetActive(true);

                //PetBottleObj.transform.SetParent(GameObjectsTrs);
                ////位置
                //GameObject PetBottle_010_DeskFirstPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_010_DeskFirstPosObj") as GameObject;
                //PetBottleObj.transform.localPosition = PetBottle_010_DeskFirstPosObj.transform.localPosition;
                //PetBottleObj.transform.localEulerAngles = PetBottle_010_DeskFirstPosObj.transform.localEulerAngles;

                ////プレイヤーペットボトルだいたいセンター位置（落ちた場所）（ドア方向）
                //GameObject Player_035_PetBottleCenterDoorAnglePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_035_PetBottleCenterDoorAnglePosObj") as GameObject;
                //CameraObjectsTrs.localPosition = Player_035_PetBottleCenterDoorAnglePosObj.transform.localPosition;
                //CameraObjectsTrs.localRotation = Player_035_PetBottleCenterDoorAnglePosObj.transform.localRotation;

                //MeshTrs.gameObject.SetActive(false);

                ////智恵理0位置ロック
                //DB.isChieriPosLock = true;

                ////椅子デフォルト位置
                //GameObject Chair_010_IsuDivePosObj = Resources.Load("_PosObj/D_Henai_Day1_Tansaku1/Chair_010_IsuDivePosObj") as GameObject;
                //ChairTrs.localPosition = Chair_010_IsuDivePosObj.transform.localPosition;
                //ChairTrs.localEulerAngles = Chair_010_IsuDivePosObj.transform.localEulerAngles;
                //#endregion

                //while (isNovelSetVisIng) { yield return null; }

                //FadeBlack(0, 3);
                //yield return new WaitForSeconds(3);

                //#region 智恵理ドアから椅子に座るまで

                ////アニメスピード
                //girlAnim.speed = 0.6f;
                //doorAnim.speed = 0.6f;
                //chairAnim.speed = 0.6f;

                ////智恵理ON
                //MeshTrs.gameObject.SetActive(true);

                //ChieriMotion("ドア入室", 0f, 0);
                //doorAnim.CrossFadeInFixedTime("ドア開き閉じ", 0f, 0);

                //yield return new WaitForSeconds(2.2f / girlAnim.speed);

                ////IKプレイヤー見る
                //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
                //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

                //Hukidashi("D3010");//お待たせ
                //ChieriMotion("笑顔01口眉", 0.1f, 2);
                //ChieriMotionDelay(2, "f_リラックス02", 0.1f, 2);//時間差表情戻し



                ////■ポーズ状態まで待ち
                //StartCoroutine(GirlAnimReadSystem());
                //while (girlAnimNomTime <= 1f) { yield return null; }
                //isGirlAnimReadSystem = false;

                //ChieriMotion("ドアからデスク横へ歩く", 0f, 0);
                //yield return new WaitForSeconds(3.5f / girlAnim.speed);

                //Hukidashi("E4200010");//よかったちゃんといるね
                //ChieriMotion("笑顔01口眉", 0.1f, 2);
                //ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                //yield return new WaitForSeconds(1.5f / girlAnim.speed);

                //chairAnim.enabled = true;


                ////■ポーズ状態まで待ち
                //StartCoroutine(GirlAnimReadSystem());
                //while (girlAnimNomTime <= 1f) { yield return null; }
                //isGirlAnimReadSystem = false;
                //ChieriMotion("ドアからデスク横ポーズから椅子に座る", 0f, 0);
                //chairAnim.CrossFadeInFixedTime("智恵理座り", 0f, 0);

                ////IK 椅子へ
                //FollowDOMove(IKLookAtEyeTargetTrs, ChairTrs);
                //FollowDOMove(IKLookAtHeadTargetTrs, ChairTrs, new Vector3(0, 0.8f, 0));
                //yield return new WaitForSeconds(3f / girlAnim.speed);

                ////頭だけIK弱めに（首埋まり対策）
                //DOTweenToLAIKSHead(LAIKHeadS, 0.4f, 1);
                //yield return new WaitForSeconds(1f / girlAnim.speed);
                //Hukidashi("E4200020");//ご褒美にご飯

                ////IK プレイヤーへ
                //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
                //yield return new WaitForSeconds(1f / girlAnim.speed);

                ////頭IK 戻し（ON）
                //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
                //yield return new WaitForSeconds(1f / girlAnim.speed);

                //ChieriMotion("笑顔01口眉", 0.1f, 2);
                //ChieriMotionDelay(1, "f_リラックス02", 0.1f, 2);//時間差表情戻し


                ////■ポーズ状態まで待ち
                //StartCoroutine(GirlAnimReadSystem());
                //while (girlAnimNomTime <= 0.9f) { yield return null; }
                //isGirlAnimReadSystem = false;

                //FadeBlack(1, 1f);
                //yield return new WaitForSeconds(0.5f);

                //NovelSetVis("■E4200020");//ご、ご飯……

                //chairAnim.enabled = false;

                ////アニメスピード
                //girlAnim.speed = 0.5f;
                //doorAnim.speed = 0.5f;
                //chairAnim.speed = 0.5f;

                //#endregion
                #endregion
            }

            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.B))
            {
                #region //パンくず落とし～好きかどうか
                ////FadeBlack(1, 0);

                //#region ■モーションテストでのデバッグ設定
                //DB.isChieriPosLock = false;
                ////椅子位置に
                //GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
                //GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;

                ////ペットボトル準備
                //PetBottleObj.SetActive(true);
                //CapObj.SetActive(true);
                //ChieriMotion("デスクペットボトルへ落とす前ポーズ原点", 0f, 0);

                //FixedAction(() =>
                //{
                //    //プレイヤーを、ペットボトル手前はじへ。（PetBottleObjのローカル位置 をワールド座標に変換して置く）（ペットボトルの場所が変わっても大丈夫なように）
                //    GameObject PlayerPetBottlePare_010_PanOtosarePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PlayerPetBottlePare_010_PanOtosarePosObj") as GameObject;
                //    CameraObjectsTrs.position
                //        = PetBottleObj.transform.TransformPoint(PlayerPetBottlePare_010_PanOtosarePosObj.transform.localPosition);
                //});

                //////プレイヤーペットボトルだいたいセンター位置（落ちた場所）（ドア方向）
                ////GameObject Player_035_PetBottleCenterDoorAnglePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Player_035_PetBottleCenterDoorAnglePosObj") as GameObject;
                ////CameraObjectsTrs.localPosition = Player_035_PetBottleCenterDoorAnglePosObj.transform.localPosition;
                ////CameraObjectsTrs.localRotation = Player_035_PetBottleCenterDoorAnglePosObj.transform.localRotation;

                ////ペットボトルコリダーをFixed追従動かし（智恵理のFixedColliderと同じ理屈）
                //SetFixedMoveColliders(PetBottleObj.transform.Find("Bottle/Bottle_MeshCollider").gameObject);



                //isBottleCenterPosArea_Exit = true;

                //#endregion

                //#region 智恵理パンくず落とし

                //ChieriMotion("デスクペットボトルへ落とす前ポーズ原点", 0f, 0);

                ////アニメスピード
                //girlAnim.speed = 0.5f;
                //doorAnim.speed = 0.5f;
                //chairAnim.speed = 0.5f;

                ////ペットボトル智恵理左手にペア
                //PetBottleObj.transform.SetParent(Bip001_L_HandTrs);
                ////位置
                //PetBottleObj.transform.localPosition = PetBottle_ChieriLHandPosObj.transform.localPosition;
                //PetBottleObj.transform.localEulerAngles = PetBottle_ChieriLHandPosObj.transform.localEulerAngles;
                //PetBottleObj.transform.localScale = PetBottle_ChieriLHandPosObj.transform.localScale;

                //FixedAction(() =>
                //{
                //    //IKRHandを、飲み口の上へ。（PetBottleObjのローカル位置 をワールド座標に変換して置く）（ペットボトルの場所が変わっても大丈夫なように）
                //    GameObject IKRHandParePetBottleObj_010_OtosiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/IKRHandParePetBottleObj_010_OtosiPosObj") as GameObject;
                //    IKRHandTargetTrs.position
                //        = PetBottleObj.transform.TransformPoint(IKRHandParePetBottleObj_010_OtosiPosObj.transform.localPosition);

                //    DOTweenToIKEfPos(IKRHandEf, 1, 0);
                //});




                ////パンくず取得
                //GameObject
                //    Pankuzu01RHitosasiPare_PetBottleOtosi01 = Instantiate(Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Pankuzu01RHitosasiPare_PetBottleOtosi01") as GameObject
                //    , GirlRhitosashi02Trs),
                //    Pankuzu02RHitosasiPare_PetBottleOtosi01 = Instantiate(Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Pankuzu02RHitosasiPare_PetBottleOtosi01") as GameObject
                //    , GirlRhitosashi02Trs);

                ////IKプレイヤー見る
                //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
                //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);


                ////ANの重力設定のみロード
                //AN_SetPlayerRigidbody();
                //AN_GravitiDragBool = true;//FixedUpdateのやつON
                ////rigid監視スタート
                //StartCoroutine(RigidReadSystem());


                //while (isNovelSentakushiWait) { yield return null; }
                //FadeBlack(0, 1f);
                //yield return new WaitForSeconds(1);

                //NovelSetVis("E4200030");//指先になにか見えた。

                //while (isNovelSetVisIng) { yield return null; }
                //yield return new WaitForSeconds(1);

                //ChieriMotion("笑顔01口眉", 0.1f, 2);
                //ChieriMotionDelay(1, "f_リラックス02", 0.1f, 2);//時間差表情戻し
                //Hukidashi("E4200030");//これ公の分ね
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);


                //ChieriMotion("デスクペットボトルへ落とす原点", 0f, 0);


                //FixedAction(() =>
                //{
                //    //物理ONと同時にペットボトルへペアレント（中で滑らないように）
                //    Pankuzu01RHitosasiPare_PetBottleOtosi01.GetComponent<Rigidbody>().isKinematic = false;
                //    Pankuzu01RHitosasiPare_PetBottleOtosi01.transform.SetParent(PetBottleObj.transform.Find("Bottle"));
                //});
                //yield return new WaitForSeconds(0.2f);

                //FixedAction(() =>
                //{
                //    Pankuzu02RHitosasiPare_PetBottleOtosi01.GetComponent<Rigidbody>().isKinematic = false;
                //    Pankuzu02RHitosasiPare_PetBottleOtosi01.transform.SetParent(PetBottleObj.transform.Find("Bottle"));
                //});
                //yield return new WaitForSeconds(0.2f);

                ////手IK切る
                //DOTweenToIKEfPos(IKRHandEf, 0, 2f);

                //yield return new WaitForSeconds(1);
                //NovelSetVis("E4200040");//う、うわ！
                //while (isNovelSetVisIng) { yield return null; }


                //Hukidashi("E4200040");//パンくず
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //Hukidashi("E4200050");//潰れちゃった
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);


                //ChieriMotion("笑顔01口眉", 0.1f, 2);
                //ChieriMotionDelay(1, "f_リラックス02", 0.1f, 2);//時間差表情戻し
                //Hukidashi("E4200060");//食べていいからね
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                //#endregion
                //PlayerHPAddSub(-500);

                //#region ■選択肢 食べる食べない
                //yield return new WaitForSeconds(1);
                //NovelSetVis("■E4200050");//言ってみれば食べ残し

                ////■■選択肢
                //sentakuListNum = 99;//初期化
                //while (isNovelSentakushiWait) { yield return null; }
                //yield return new WaitForSeconds(1f);

                //Sentakushi("■E4200060a", Mathf.Infinity);
                //Sentakushi("■E4200060b", Mathf.Infinity);

                //while (sentakuListNum == 99) { yield return null; }
                //yield return null;

                ////事前読み込み
                //GameObject PetBottle_020_DeskTate_PosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_020_DeskTate_PosObj") as GameObject;

                //bool isTabenai = false;
                //switch (sentakuListNum)
                //{
                //    case 0://選択肢a 「食べる」
                //        #region 食べる場合 
                //        sentakuListNum = 99;
                //        //isNovelFadeTween = isNovelSetVisIng = false;
                //        yield return new WaitForSeconds(1f);

                //        NovelSetVis("E4200050a010");//言ってみれば食べ残し
                //        while (novelCurrentPageInt < 3) { yield return null; }
                //        FadeBlack(1, 1);
                //        yield return new WaitForSeconds(2);

                //        #region ■暗幕中の設定

                //        //重力設定消し
                //        AN_GravitiDragBool = false;
                //        isRigidReadSystem = false;
                //        Destroy(CameraObjectsTrs.GetComponent<Rigidbody>());

                //        //ペットボトル、左手からペアレント外し 立て位置に
                //        PetBottleObj.transform.SetParent(GameObjectsTrs);
                //        //位置
                //        PetBottleObj.transform.localPosition = PetBottle_020_DeskTate_PosObj.transform.localPosition;
                //        PetBottleObj.transform.localEulerAngles = PetBottle_020_DeskTate_PosObj.transform.localEulerAngles;


                //        //ペットボトル内へのプレイヤー配置
                //        FixedAction(() =>
                //        {
                //            //プレイヤーを、ペットボトル手前はじへ。（PetBottleObjのローカル位置 をワールド座標に変換して置く）（ペットボトルの場所が変わっても大丈夫なように）
                //            GameObject PlayerPetBottlePare_010_PanOtosarePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PlayerPetBottlePare_010_PanOtosarePosObj") as GameObject;
                //            CameraObjectsTrs.position
                //                = PetBottleObj.transform.TransformPoint(PlayerPetBottlePare_010_PanOtosarePosObj.transform.localPosition);
                //        });


                //        //ポーズ
                //        ChieriMotion("デスク肘つきポーズ", 0f, 0);
                //        ChieriMotion("f_リラックス02", 0f, 2);
                //        #endregion

                //        while (isNovelSetVisIng) { yield return null; }

                //        PlayerHPAddSub(300);
                //        NovelSetVis("E4200050a020");//パンの欠片に直接齧り付いた
                //        while (novelCurrentPageInt < 4) { yield return null; }

                //        Hukidashi("E4200060a010");//食べてる食べてる

                //        while (isNovelSetVisIng) { yield return null; }
                //        PlayerHPAddSub(300);

                //        yield return new WaitForSeconds(1);
                //        Hukidashi("E4200060a020");//おいしい？
                //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //        NovelSetVis("E4200050a030");//返事する余裕はなかった。
                //        while (isNovelSetVisIng) { yield return null; }

                //        yield return new WaitForSeconds(1);
                //        Hukidashi("E4200060a030");//でもよかったー
                //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                //        Hukidashi("E4200060a040");//しばらく大丈夫
                //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //        NovelSetVis("E4200050a040");//血の気が引いた。
                //        while (novelCurrentPageInt < 1) { yield return null; }

                //        FadeBlack(0, 1);
                //        while (novelCurrentPageInt < 3) { yield return null; }
                //        yield return new WaitForSeconds(1);

                //        Hukidashi("E4200060a045");//ん？
                //        ChieriMotion("f_気づき（明）", 0.2f, 2);
                //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //        NovelSetVis("E4200050a050");//頼むよ！　許してくれ！
                //        while (isNovelSetVisIng) { yield return null; }
                //        yield return new WaitForSeconds(1);

                //        Hukidashi("E4200060a050");//どうして謝るの？
                //        ChieriMotion("f_どうして謝るの？", 0.2f, 2);
                //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //        NovelSetVis("E4200050a055");//不安を煽る。どうしてって…！
                //        while (isNovelSetVisIng) { yield return null; }



                //        //IKカレンダー見
                //        FollowDOMove(IKLookAtEyeTargetTrs, CalenderTrs, 0f);
                //        //まばたき
                //        ChieriMotion("b_まばたきSlow用", 0f, 4);
                //        blinkTime = 0;
                //        yield return new WaitForSeconds(1);

                //        Hukidashi("E4200060a060");//うーん、"逃げたから"は合ってるけど
                //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //        //■"デスク肘つき→起き上がり"モーションだけ速度変更（animatorのParametersでスピード変更（ステート毎に設定できるので、表情が遅くならない））
                //        girlAnim.SetFloat("デスク肘つき→起き上がりSpeed", 0.4f); yield return null;
                //        ChieriMotion("デスク肘つき→起き上がり", 0, 0);

                //        //目IKプレイヤー見る
                //        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                //        //まばたき
                //        ChieriMotion("b_まばたきSlow用", 0f, 4);
                //        blinkTime = 0;

                //        Hukidashi("E4200060a070");//怒ってないよ
                //        ChieriMotion("f_あはは・・2目開き", 0.2f, 2);
                //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


                //        NovelSetVis("E4200050a060");//じゃあ、なんでこんなことを…
                //        while (isNovelSetVisIng) { yield return null; }


                //        ChieriMotion("f_え？(軽驚)", 0.2f, 2);

                //        //IKカレンダー見
                //        FollowDOMove(IKLookAtEyeTargetTrs, CalenderTrs, 0f);
                //        //まばたき
                //        ChieriMotion("b_まばたきSlow用", 0f, 4);
                //        blinkTime = 0;


                //        yield return new WaitForSeconds(1);
                //        Hukidashi("E4200060a080");//好きだからかな
                //        yield return new WaitForSeconds(1);

                //        ChieriMotion("f_あはは・・2", 0.1f, 2);
                //        ChieriMotionDelay(1, "f_あはは・・2目開き", 0.1f, 2);//時間差表情戻し
                //        yield return new WaitForSeconds(1);
                //        //目IKプレイヤー見る
                //        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                //        yield return KeyOrWait(3);

                //        yield return new WaitForSeconds(1);

                //        #endregion
                //        break;

                //    case 1://選択肢b 「食べない」
                //        #region 食べない場合
                //        sentakuListNum = 99;
                //        //isNovelFadeTween = isNovelSetVisIng = false;
                //        yield return new WaitForSeconds(0.5f);

                //        NovelSetVis("E4200050b010");//それに手をつけず時間が流れた。
                //        FadeBlack(1, 2);
                //        while (isNovelSetVisIng) { yield return null; }
                //        yield return new WaitForSeconds(2);

                //        #region ■暗幕中の設定

                //        //重力設定消し
                //        AN_GravitiDragBool = false;
                //        isRigidReadSystem = false;
                //        Destroy(CameraObjectsTrs.GetComponent<Rigidbody>());

                //        //ペットボトル、左手からペアレント外し 立て位置に
                //        PetBottleObj.transform.SetParent(GameObjectsTrs);
                //        //位置
                //        PetBottleObj.transform.localPosition = PetBottle_020_DeskTate_PosObj.transform.localPosition;
                //        PetBottleObj.transform.localEulerAngles = PetBottle_020_DeskTate_PosObj.transform.localEulerAngles;

                //        //ペットボトル内へのプレイヤー配置
                //        FixedAction(() =>
                //        {
                //            //プレイヤーを、ペットボトル手前はじへ。（PetBottleObjのローカル位置 をワールド座標に変換して置く）（ペットボトルの場所が変わっても大丈夫なように）
                //            GameObject PlayerPetBottlePare_010_PanOtosarePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PlayerPetBottlePare_010_PanOtosarePosObj") as GameObject;
                //            CameraObjectsTrs.position
                //                = PetBottleObj.transform.TransformPoint(PlayerPetBottlePare_010_PanOtosarePosObj.transform.localPosition);
                //        });

                //        //ポーズ
                //        ChieriMotion("デスク肘つきポーズ", 0f, 0);
                //        ChieriMotion("f_リラックス01", 0f, 2);
                //        #endregion

                //        yield return null;

                //        Hukidashi("E4200060b010");//食べないの？
                //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                //        yield return new WaitForSeconds(0.5f);
                //        Hukidashi("E4200060b015");//この後も大変なのに
                //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                //        yield return new WaitForSeconds(0.5f);
                //        Hukidashi("E4200060b020");//体持たなくても知らないよ？
                //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //        yield return new WaitForSeconds(1);
                //        NovelSetVis("E4200050b020");//昨日までと違う言葉を聞かせてくる
                //        while (novelCurrentPageInt < 2) { yield return null; }

                //        FadeBlack(0, 1);
                //        while (novelCurrentPageInt < 4) { yield return null; }

                //        yield return new WaitForSeconds(1f);

                //        ChieriMotion("f_気づき（明）", 0.3f, 2);
                //        Hukidashi("E4200060b030");//ん？
                //        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //        while (isNovelSetVisIng) { yield return null; }

                //        NovelSetVis("E4200050b030");//わからないんだ


                //        ChieriMotion("f_悲しい", 2f, 2);
                //        yield return new WaitForSeconds(1f);

                //        //まばたき
                //        ChieriMotion("b_まばたきSlow用", 0f, 4);
                //        blinkTime = 0;

                //        Hukidashi("・・・");//・・・
                //        FollowDOMove(IKLookAtEyeTargetTrs, GomibakoTrs);

                //        while (isNovelSetVisIng) { yield return null; }


                //        yield return new WaitForSeconds(1);

                //        ChieriMotion("f_悲しい目つむり強", 0.2f, 2);
                //        ChieriMotionDelay(1f, "f_気づき（明）", 0.1f, 2);//時間差表情戻し
                //        while (isNovelSetVisIng) { yield return null; }
                //        yield return new WaitForSeconds(1);

                //        //■"デスク肘つき→起き上がり"モーションだけ速度変更（animatorのParametersでスピード変更（ステート毎に設定できるので、表情が遅くならない））
                //        girlAnim.SetFloat("デスク肘つき→起き上がりSpeed", 0.4f); yield return null;
                //        ChieriMotion("デスク肘つき→起き上がり", 0, 0);

                //        Hukidashi("E4200060b040");//好きだよ？
                //        yield return new WaitForSeconds(1);


                //        //まばたき
                //        ChieriMotion("b_まばたきSlow用", 0f, 4);
                //        blinkTime = 0;
                //        //目IKプレイヤー見る
                //        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                //        yield return KeyOrWait(3);

                //        yield return new WaitForSeconds(1);
                //        isTabenai = true;
                //        #endregion
                //        break;

                //}
                //#endregion

                //#region ■は…え…？ じゃあどうして…　　だったらこんなことしないもん　■指突き
                //NovelSetVis("E4200060");//は…え…？　じゃあどうして……。

                //ChieriMotion("f_リラックス02", 0.3f, 2);
                //yield return new WaitForSeconds(0.6f / girlAnim.speed);
                //ChieriMotion("デスク少しうつ伏せポーズ", 0.6f / girlAnim.speed, 0);

                //yield return new WaitForSeconds(1);

                //if (isTabenai)
                //{

                //    Hukidashi("E4200060b050");//だーい好き
                //}

                //yield return new WaitForSeconds(1);

                //while (isNovelSetVisIng) { yield return null; }



                ////■指つき開始
                ////IKターゲット手の位置に
                //FixedAction(() =>
                //{
                //    IKRHandTargetTrs.position = GirlRHandTrs.position;
                //    IKRHandTargetTrs.rotation = GirlRHandTrs.rotation;
                //    DOTweenToIKEfPos(IKRHandEf, 1, 0);
                //    DOTweenToIKEfRot(IKRHandEf, 1, 0);
                //});
                ////適当にFixed待ち
                //yield return new WaitForSeconds(0.1f);

                ////突き構え終わった判定取るために
                //bool isTsukikamae = false;

                ////突き構えパスでTween（ペットボトルに当たらないように）
                //GameObject IKRHand_010_TsutukiKamaeAPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/IKRHand_010_TsutukiKamaeAPosObj") as GameObject;
                //GameObject IKRHand_015_TsutukiKamaeBPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/IKRHand_015_TsutukiKamaeBPosObj") as GameObject;
                //Vector3[] tsutukiKamaePosPaths = new[]
                //{
                //            IKRHand_010_TsutukiKamaeAPosObj.transform.localPosition,
                //            IKRHand_015_TsutukiKamaeBPosObj.transform.localPosition,
                //        };

                //IKRHandTargetTrs.DOLocalPath(tsutukiKamaePosPaths
                //    , 3, PathType.CatmullRom);
                ////回転は最後のだけ
                //IKRHandTargetTrs.DOLocalRotate(IKRHand_015_TsutukiKamaeBPosObj.transform.localEulerAngles
                //    , 3)
                //    //終わったら判定true
                //    .OnComplete(() => { isTsukikamae = true; });

                ////マスクひとさし指
                //ChieriMotion("ひとさし指差し", 0.2f, 5);

                //if (isTabenai)
                //{
                //    Hukidashi("E4200060b060");//嫌いだったら
                //}
                //else
                //{
                //    Hukidashi("E4200060a090");//もし怒ってたり嫌いだったら
                //}
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                ////突き構えるまで待ち
                //while (isTsukikamae == false) { yield return null; }

                ////■指突き開始
                ////終わり判定取り用
                //bool isTsuki = false;

                ////指つつき動き （InoutBackで押して戻す動き）
                //GameObject IKRHand_020_TsutukiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/IKRHand_020_TsutukiPosObj") as GameObject;
                //IKRHandTargetTrs.DOLocalMove(IKRHand_020_TsutukiPosObj.transform.localPosition
                //    , 2).SetEase(Ease.InOutBack);
                //IKRHandTargetTrs.DOLocalRotate(IKRHand_020_TsutukiPosObj.transform.localEulerAngles
                //    , 2).SetEase(Ease.InOutBack);

                ////■同時にBottle傾き
                ////Bottle取得
                //Transform BottleTrs = PetBottleObj.transform.Find("Bottle");
                ////現在値取得
                //Vector3 defBottolePos = BottleTrs.localPosition;
                //Vector3 defBottoleRot = BottleTrs.localEulerAngles;

                ////カメラペアレント
                //CameraObjectsTrs.SetParent(BottleTrs);

                ////傾き取得してDO
                //GameObject Bottle_010_TsutukareKatamuki_PosRotObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/Bottle_010_TsutukareKatamuki_PosRotObj") as GameObject;
                //BottleTrs.DOLocalMove(Bottle_010_TsutukareKatamuki_PosRotObj.transform.localPosition
                //    , 0.7f);
                //BottleTrs.DOLocalRotate(Bottle_010_TsutukareKatamuki_PosRotObj.transform.localEulerAngles
                //    , 0.7f)
                //    //傾いたら
                //    .OnComplete(() =>
                //    {
                //        //初期値に戻し バウンス
                //        BottleTrs.DOLocalMove(defBottolePos
                //    , 1.5f).SetEase(Ease.OutBounce);
                //        BottleTrs.DOLocalRotate(defBottoleRot
                //            , 1.5f).SetEase(Ease.OutBounce)
                //            //戻ったらペアレント戻し 終わり判定true
                //            .OnComplete(() =>
                //            {
                //                CameraObjectsTrs.SetParent(GameObjectsTrs);
                //                isTsuki = true;
                //            });
                //    });



                //ChieriMotion("f_あはは・・2", 0.1f, 2);
                //ChieriMotionDelay(1, "f_あはは・・2目開き", 0.1f, 2);//時間差表情戻し
                //Hukidashi("E4200060a100");//こんなことするわけないもん
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                //yield return new WaitForSeconds(1);


                //NovelSetVis("E4200070");//わ、わからない……頭がどうにかなりそうだった


                ////ボトル戻るまで待機
                //while (isTsuki == false) { yield return null; }

                //ChieriMotion("笑顔01口眉", 0.1f, 2);
                //ChieriMotionDelay(1, "f_リラックス02", 0.1f, 2);//時間差表情戻し
                //ChieriMotion("デスク起き上がりポーズ", 1, 0);


                ////IK戻すとき 指ボトルに触れないよう手前に動かしながら切る
                //GameObject IKRHand_030_ModosiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/IKRHand_030_ModosiPosObj") as GameObject;
                //IKRHandTargetTrs.DOLocalMove(IKRHand_030_ModosiPosObj.transform.localPosition
                //    , 2);
                //IKRHandTargetTrs.DOLocalRotate(IKRHand_030_ModosiPosObj.transform.localEulerAngles
                //    , 2);
                //DOTweenToIKEfPos(IKRHandEf, 0, 2);
                //DOTweenToIKEfRot(IKRHandEf, 0, 2);

                ////手戻し
                //ChieriMotion("_noData", 1f, 5);


                //while (isNovelSetVisIng) { yield return null; }

                //#endregion

                //#region //デバッグ設定
                ////GameObject PetBottle_020_DeskTate_PosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_020_DeskTate_PosObj") as GameObject;

                //////重力設定消し
                ////AN_GravitiDragBool = false;
                ////isRigidReadSystem = false;
                ////Destroy(CameraObjectsTrs.GetComponent<Rigidbody>());

                //////ペットボトル、左手からペアレント外し 立て位置に
                ////PetBottleObj.transform.SetParent(GameObjectsTrs);
                //////位置
                ////PetBottleObj.transform.localPosition = PetBottle_020_DeskTate_PosObj.transform.localPosition;
                ////PetBottleObj.transform.localEulerAngles = PetBottle_020_DeskTate_PosObj.transform.localEulerAngles;


                //////ペットボトル内へのプレイヤー配置
                ////FixedAction(() =>
                ////{
                ////    //プレイヤーを、ペットボトル手前はじへ。（PetBottleObjのローカル位置 をワールド座標に変換して置く）（ペットボトルの場所が変わっても大丈夫なように）
                ////    GameObject PlayerPetBottlePare_010_PanOtosarePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PlayerPetBottlePare_010_PanOtosarePosObj") as GameObject;
                ////    CameraObjectsTrs.position
                ////        = PetBottleObj.transform.TransformPoint(PlayerPetBottlePare_010_PanOtosarePosObj.transform.localPosition);
                ////});

                ////ChieriMotion("デスク起き上がりポーズ", 0, 0);
                //#endregion

                //#region ■選択肢 好き？
                //yield return new WaitForSeconds(2);
                //SHukidashi("■E4200070");//じゃあ公は好き？
                //ChieriMotion("デスク少しうつ伏せポーズ", 0.6f / girlAnim.speed, 0);


                ////IK顔 肘つき用角度
                //DOTweenToLAIKSHead(LAIKHeadS, 0.6f, 1);


                //ChieriMotion("笑顔01口眉", 0.1f, 2);
                //ChieriMotionDelay(1, "f_気づき（明）", 0.1f, 2);//時間差表情戻し
                //yield return new WaitForSeconds(1);
                ////ChieriMotion("h_右少し傾け", 0.2f, 7);

                //yield return new WaitForSeconds(3);

                //Sentakushi("■E4200070a");
                //Sentakushi("■E4200070b");
                //Sentakushi("■E4200070c");

                ////選択肢選ばれるまでループ
                //while (sentakuListNum == 99) { yield return null; }
                //yield return new WaitForSeconds(0.5f);

                //switch (sentakuListNum)
                //{
                //    case 0://選択肢a 好きだ
                //        {
                //            #region 駄目だ見透かされている
                //            ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);

                //            Hukidashi("E4200070a010");//ほんとに？
                //            yield return new WaitForSeconds(1); yield return KeyOrWait(3);


                //            ChieriMotion("笑顔01口眉", 0.1f, 2);
                //            ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                //            Hukidashi("E4200070a020");//両思いなんだ
                //            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                //            yield return new WaitForSeconds(1);

                //            ChieriMotion("デスク起き上がりポーズ", 0.6f / girlAnim.speed, 0);
                //            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 0.6f / girlAnim.speed);
                //            DOTweenToLAIKSHead(LAIKHeadS, 1, 1);

                //            Hukidashi("E4200070a030");//ずっと一緒にいられるね
                //            ChieriMotion("笑顔01口眉", 0.1f, 2);
                //            ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                //            yield return KeyOrWait(3);

                //            ChieriMotion("f_眉高い笑顔少しジト目", 1f, 2);
                //            yield return new WaitForSeconds(1);

                //            NovelSetVis("E4200070a010");//まともに受け取られてない気がする・・
                //            while (isNovelSetVisIng) { yield return null; }
                //            #endregion
                //        }
                //        break;

                //    case 1://選択肢b 嫌い
                //        {
                //            #region まあそうだよね
                //            NovelSetVis("E4200070b010");//嫌いに決まってるだろ！
                //            while (isNovelSetVisIng) { yield return null; }
                //            yield return new WaitForSeconds(1);

                //            ChieriMotion("f_あはは・・2", 0.1f, 2);
                //            ChieriMotionDelay(1, "f_あはは・・2目開き", 0.1f, 2);//時間差表情戻し
                //            Hukidashi("E4200070b010");//そうだよね
                //            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //            ChieriMotion("デスク起き上がりポーズ", 0.6f / girlAnim.speed, 0);
                //            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 0.6f / girlAnim.speed);
                //            DOTweenToLAIKSHead(LAIKHeadS, 1, 1);

                //            Hukidashi("E4200070b020");//こんなことされて
                //            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //            ChieriMotion("笑顔01口眉", 0.2f, 2);
                //            ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                //            Hukidashi("E4200070b030");//でもいいんだ
                //            yield return new WaitForSeconds(1); yield return KeyOrWait(3);


                //            ChieriMotion("f_眉高い笑顔少しジト目", 1f, 2);
                //            Hukidashi("E4200070b040");//こうしないと一緒にいられないもん
                //            yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                //            #endregion
                //        }
                //        break;

                //    case 2://選択肢c
                //        {
                //            #region そうなんだ・・（小声）
                //            yield return new WaitForSeconds(1);
                //            ChieriMotion("f_どうして謝るの？", 0.2f, 2);

                //            yield return new WaitForSeconds(1);

                //            Hukidashi("E4200070c010");//そっか・・
                //            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //            ChieriMotion("デスク起き上がりポーズ", 0.6f / girlAnim.speed, 0);
                //            FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 0.6f / girlAnim.speed);
                //            DOTweenToLAIKSHead(LAIKHeadS, 1, 1);

                //            ChieriMotion("f_悲しい", 8f, 2);
                //            yield return new WaitForSeconds(1f);

                //            //まばたき
                //            ChieriMotion("b_まばたきSlow用", 0f, 4);
                //            blinkTime = 0;

                //            //目逸らし
                //            FollowDOMove(IKLookAtEyeTargetTrs, GomibakoTrs);

                //            yield return new WaitForSeconds(1);

                //            Hukidashi("E4200070c020");//そうなんだ
                //            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //            yield return new WaitForSeconds(2f);

                //            Hukidashi("E4200070c030");//勇気出せばよかったのかな
                //            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //            yield return new WaitForSeconds(1f);
                //            NovelSetVis("E4200070c010");//聴き取れたような気がした
                //            while (isNovelSetVisIng) { yield return null; }
                //            yield return new WaitForSeconds(1f);

                //            //まばたき
                //            ChieriMotion("b_まばたきSlow用", 0f, 4);
                //            blinkTime = 0;

                //            //IKプレイヤー見る
                //            FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);

                //            ChieriMotion("f_あはは・・2目開き", 0.1f, 2);//時間差表情戻し

                //            Hukidashi("E4200070c040");//すっきりしたかも
                //            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //            ChieriMotion("笑顔01口眉", 0.2f, 2);
                //            ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

                //            Hukidashi("E4200070c050");//一緒によろしくね
                //            yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //            ChieriMotion("f_眉高い笑顔少しジト目", 1f, 2);
                //            #endregion
                //        }
                //        break;

                //}

                //yield return new WaitForSeconds(1);

                //NovelSetVis("E4200080");//どういう意味なんだよ・・
                //FadeBlack(1, 2);
                //yield return new WaitForSeconds(1);

                //while (isNovelSetVisIng) { yield return null; }

                //yield return new WaitForSeconds(1);



                //#endregion

                ////Destroy(Pankuzu01RHitosasiPare_PetBottleOtosi01);
                ////Destroy(Pankuzu02RHitosasiPare_PetBottleOtosi01);
                #endregion
            }

            if (DB.isDebugMode && Input.GetKeyDown(KeyCode.N))
            {
                #region //ペットボトル倒し起こし
                //#region ■モーションテストでのデバッグ設定
                //DB.isChieriPosLock = true;
                //////椅子位置に
                ////GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
                ////GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;

                ////ペットボトル準備
                //PetBottleObj.SetActive(true);
                //CapObj.SetActive(true);

                ////智恵理
                //ChieriMotion("デスクペットボトル手伸ばし立てるためポーズ", 0f, 0);
                //ChieriMotion("f_眉高い笑顔少しジト目", 1f, 2);

                //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 0.6f / girlAnim.speed);
                //DOTweenToLAIKSHead(LAIKHeadS, 1, 1);

                //PetBottleObj.transform.SetParent(GameObjectsTrs);
                ////立て位置
                //GameObject PetBottle_020_DeskTate_PosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_020_DeskTate_PosObj") as GameObject;
                //PetBottleObj.transform.localPosition = PetBottle_020_DeskTate_PosObj.transform.localPosition;
                //PetBottleObj.transform.localEulerAngles = PetBottle_020_DeskTate_PosObj.transform.localEulerAngles;


                ////ペットボトル内へのプレイヤー配置
                //FixedAction(() =>
                //{
                //    //プレイヤーを、ペットボトル手前はじへ。（PetBottleObjのローカル位置 をワールド座標に変換して置く）（ペットボトルの場所が変わっても大丈夫なように）
                //    GameObject PlayerPetBottlePare_010_PanOtosarePosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PlayerPetBottlePare_010_PanOtosarePosObj") as GameObject;
                //    CameraObjectsTrs.position
                //        = PetBottleObj.transform.TransformPoint(PlayerPetBottlePare_010_PanOtosarePosObj.transform.localPosition);
                //});

                ////ペットボトルコリダーをFixed追従動かし（智恵理のFixedColliderと同じ理屈）
                //SetFixedMoveColliders(PetBottleObj.transform.Find("Bottle/Bottle_MeshCollider").gameObject);

                //FadeBlack(1, 0);
                //yield return null;

                //#endregion

                ////アニメスピード
                //girlAnim.speed = 0.6f;

                //FadeBlack(0, 2);

                //#region 手伸ばす前まで
                //ChieriMotion("笑顔01口眉", 0.1f, 2);
                //ChieriMotionDelay(1, "f_気づき（明）", 0.1f, 2);//時間差表情戻し
                //Hukidashi("D41000a08");//今日は大事な日
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                ////IK余所見
                //FollowDOMove(IKLookAtEyeTargetTrs, GomibakoTrs, 0f);
                ////まばたき
                //ChieriMotion("b_まばたきSlow用", 0f, 4);
                //blinkTime = 0;


                //Hukidashi("D41000a09");//小さい体に慣れて
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                ////IKプレイヤー
                //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                ////まばたき
                //ChieriMotion("b_まばたきSlow用", 0f, 4);
                //blinkTime = 0;

                //Hukidashi("D41000a10");//大きい私に慣れて
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //ChieriMotion("笑顔01口眉", 0.1f, 2);
                //ChieriMotionDelay(1, "f_気づき（明）", 0.1f, 2);//時間差表情戻し

                //NovelSetVis("E4200090");//智恵理から返事はなく
                //while (novelCurrentPageInt < 1) { yield return null; }

                ////ANの重力設定のみロード
                //AN_SetPlayerRigidbody();
                //AN_GravitiDragBool = true;//FixedUpdateのやつON
                ////rigid監視スタート
                //StartCoroutine(RigidReadSystem());

                //#endregion

                //#region 智恵理ペットボトル倒し起こし 一連

                //ChieriMotion("デスクペットボトル手伸ばし倒すため", 0f, 0);

                ////■手伸ばすまで待機
                //yield return null;
                //StartCoroutine(GirlAnimReadSystem());
                //while (girlAnimNomTime <= 0.8f)
                //{ yield return null; }
                //isGirlAnimReadSystem = false;

                //FixedAction(() =>
                //{
                //    PetBottleObj.transform.SetParent(GirlRHandTrs);

                //    //ペットボトル智恵理右手 倒し起こし位置
                //    GameObject PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj") as GameObject;
                //    PetBottleObj.transform.DOLocalMove(PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj.transform.localPosition
                //        , 1f).SetEase(Ease.Linear);
                //    PetBottleObj.transform.DOLocalRotate(PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj.transform.localEulerAngles
                //        , 1f).SetEase(Ease.Linear);
                //});

                //while (isNovelSetVisIng) { yield return null; }

                //ChieriMotion("デスクペットボトル倒す", 0f, 0);

                ////■倒すまで待機
                //StartCoroutine(GirlAnimReadSystem());
                //while (nowAnimClipName != "デスクペットボトル倒す") { yield return null; }
                //while (girlAnimNomTime <= 1f) { yield return null; }
                //isGirlAnimReadSystem = false;

                ////■重力設定消し
                //AN_GravitiDragBool = false;
                //isRigidReadSystem = false;
                //Destroy(CameraObjectsTrs.GetComponent<Rigidbody>());


                //Hukidashi("E4200080");//はい、でてもいいよ
                //ChieriMotion("笑顔01口眉", 0.1f, 2);
                //ChieriMotionDelay(1, "f_気づき（明）", 0.1f, 2);//時間差表情戻し

                ////手戻し
                //FixedAction(() =>
                //{
                //    ChieriMotion("デスクペットボトル倒した後手戻す", 0f, 0);

                //    PetBottleObj.transform.SetParent(GameObjectsTrs);
                //    //ペットボトル倒れ位置
                //    GameObject PetBottle_040_DeskTaore_PosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_040_DeskTaore_PosObj") as GameObject;
                //    PetBottleObj.transform.DOLocalMove(PetBottle_040_DeskTaore_PosObj.transform.localPosition
                //        , 0.5f).SetEase(Ease.Linear);
                //    PetBottleObj.transform.DOLocalRotate(PetBottle_040_DeskTaore_PosObj.transform.localEulerAngles
                //        , 0.5f).SetEase(Ease.Linear);
                //});

                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                //yield return new WaitForSeconds(1);


                //NovelSetVis("E4200100");//あれだけ渇望した
                //while (isNovelSetVisIng) { yield return null; }

                //#region 探索とかくれおに移動設置
                ////■隠れ鬼移動システムON
                //KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
                ////移動場所08オン
                //int tmpInt = 8;
                //KO_KakurePosObjsList[tmpInt].SetActive(true);
                ////寝る場所移動ポイント出現 演出
                //KO_NewPosPointObjVis
                //    (KO_KakurePosObjsList[tmpInt].transform.Find("PetBottleExitPos").gameObject, 0.5f);
                //#endregion

                //while (isPetBottleExitPos_Enter == false) { yield return null; }

                //NovelSetVis("E4200110");

                //ChieriMotion("デスクペットボトル手伸ばし立てるため", 0f, 0);

                ////IKペットボトル見
                //FollowDOMove(IKLookAtEyeTargetTrs, PetBottleObj.transform, 0f);
                //FollowDOMove(IKLookAtHeadTargetTrs, PetBottleObj.transform, new Vector3(0, -0.045f, 0), 1);
                ////まばたき
                //ChieriMotion("b_まばたきSlow用", 0f, 4);
                //blinkTime = 0;

                ////■手伸ばすまで待機
                //yield return null;
                //StartCoroutine(GirlAnimReadSystem());
                //while (nowAnimClipName != "デスクペットボトル手伸ばし立てるため") { yield return null; }
                //while (girlAnimNomTime <= 1f) { yield return null; }
                //isGirlAnimReadSystem = false;

                ////プレイヤー見
                //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0), 0.6f / girlAnim.speed);
                //DOTweenToLAIKSHead(LAIKHeadS, 1, 1);
                ////IKプレイヤー
                //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                ////まばたき
                //ChieriMotion("b_まばたきSlow用", 0f, 4);
                //blinkTime = 0;

                //FixedAction(() =>
                //{
                //    PetBottleObj.transform.SetParent(GirlRHandTrs);

                //    //ペットボトル智恵理右手 倒し起こし位置
                //    GameObject PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj = Resources.Load("_PosObj/D_Henai_Day2/PetBottleKankin01/PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj") as GameObject;
                //    PetBottleObj.transform.DOLocalMove(PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj.transform.localPosition
                //        , 0.5f).SetEase(Ease.Linear);
                //    PetBottleObj.transform.DOLocalRotate(PetBottle_030_ChieriRHandPare_TaosiOkosiPosObj.transform.localEulerAngles
                //        , 0.5f).SetEase(Ease.Linear);

                //    ChieriMotion("デスクペットボトル立てる", 0f, 0);
                //});

                ////■立てるまで待機
                //yield return null;
                //StartCoroutine(GirlAnimReadSystem());
                //while (nowAnimClipName != "デスクペットボトル立てる") { yield return null; }
                //while (girlAnimNomTime <= 1f) { yield return null; }
                //isGirlAnimReadSystem = false;

                //FixedAction(() =>
                //{
                //    ChieriMotion("デスクペットボトル立てた後手戻す", 0f, 0);

                //    PetBottleObj.transform.SetParent(GameObjectsTrs);
                //    //ペットボトル立ち位置
                //    PetBottleObj.transform.DOLocalMove(PetBottle_020_DeskTate_PosObj.transform.localPosition
                //        , 0.5f).SetEase(Ease.Linear);
                //    PetBottleObj.transform.DOLocalRotate(PetBottle_020_DeskTate_PosObj.transform.localEulerAngles
                //        , 0.5f).SetEase(Ease.Linear);
                //});


                //while (isNovelSetVisIng) { yield return null; }

                //FadeBlack(1, 1);
                //yield return new WaitForSeconds(1);

                //EventMove("練習1_朝");
                //#endregion
                #endregion
            }

            #region //モーション原点確認用

            //if (Input.GetKeyDown(KeyCode.T))
            //{
            //    DB.isChieriPosLock = false;
            //    //椅子位置に
            //    GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
            //    GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;
            //    //智恵理
            //    ChieriMotion("デスクペットボトル手伸ばし立てるためポーズ原点", 0f, 0);
            //}
            //if (Input.GetKeyDown(KeyCode.Y))
            //{
            //    DB.isChieriPosLock = true;
            //    //智恵理
            //    ChieriMotion("デスクペットボトル手伸ばし立てるためポーズ", 0f, 0);
            //}
            //if (Input.GetKeyDown(KeyCode.J))
            //{
            //    DB.isChieriPosLock = false;
            //    //椅子位置に
            //    GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
            //    GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;
            //    //智恵理
            //    ChieriMotion("デスク起き上がりポーズ原点", 0f, 0);

            //}
            //if (Input.GetKeyDown(KeyCode.K))
            //{
            //    DB.isChieriPosLock = true;
            //    //智恵理
            //    ChieriMotion("デスク起き上がりポーズ", 0f, 0);
            //}
            #endregion




            yield return null;
        }
        #endregion


        yield break;
    }
    IEnumerator D4100()//練習1_朝
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            //nowPlayerLocalScl = new Vector3(0.05f, 0.05f, 0.05f);
            nowPlayerLocalScale = new Vector3(0.03f, 0.03f, 0.03f);
            //アニメスピード
            girlAnim.speed = 0.5f;

            //暗幕
            FadeBlack(1, 0f);
        }
        EventReset();
        //MoveScene("TH_Yugata"); yield return new WaitForSeconds(1);

        #region 暗幕中設定
        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);

        //智恵理0位置ロック
        DB.isChieriPosLock = true;

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);

        ChieriMotion("デスク肘つきポーズ", 0, 0);
        ChieriMotion("笑顔01口眉", 0.1f, 2);

        //■PosObjで読み込み
        //プレイヤー 練習1位置に
        GameObject Player_01_DeskUeRensyuu1PosObj = Resources.Load("_PosObj/D_Henai_Day2/Player_01_DeskUeRensyuu1PosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_01_DeskUeRensyuu1PosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_01_DeskUeRensyuu1PosObj.transform.localEulerAngles;

        ////智恵理 椅子すわり位置に
        //GameObject Chieri_02_DeskChairPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chieri_02_DeskChairPosObj") as GameObject;
        //GirlTrs.localPosition = Chieri_02_DeskChairPosObj.transform.localPosition;
        //GirlTrs.localEulerAngles = Chieri_02_DeskChairPosObj.transform.localEulerAngles;

        //椅子位置
        GameObject Chair_01_SuwariPosObj = Resources.Load("_PosObj/D_Henai_Day1/Chair_01_SuwariPosObj") as GameObject;
        ChairTrs.localPosition = Chair_01_SuwariPosObj.transform.localPosition;
        ChairTrs.localEulerAngles = Chair_01_SuwariPosObj.transform.localEulerAngles;


        //スピーカー 位置に
        SpeakerTrs.gameObject.SetActive(true);
        GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
        SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        #region 宿題ペン消しゴムなくし
        //宿題 位置に
        Drill_chieriTrs.gameObject.SetActive(false);

        ////プレイヤーの
        //HomeworkObjectsTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);

        //ペンなくし
        SharpenObj.SetActive(false);
        //消しゴム無くし
        KeshigomuObj.SetActive(false);
        #endregion //宿題置き

        //一時的に0.03
        nowPlayerLocalScale = new Vector3(0.03f, 0.03f, 0.03f);


        #endregion

        //goto デバッグ移動;


        yield return new WaitForSeconds(2f);

        //開幕
        FadeBlack(0, 4);

        yield return new WaitForSeconds(2);

        ChieriMotion("f_笑顔口眉ジト目40", 0.2f, 2);
        yield return new WaitForSeconds(2);

        #region ■選択肢 「よく眠れた」 「智恵理が気になってあんまり・・」
        選択肢:
        SHukidashi("D41000");//よく眠れた？
        yield return new WaitForSeconds(2);

        sentakuListNum = 99;//初期化

        Sentakushi("■D41000a", Mathf.Infinity);
        Sentakushi("■D41000b", Mathf.Infinity);
        //選択肢選ばれるまでループ
        while (sentakuListNum == 99) { yield return null; }
        yield return null;
        switch (sentakuListNum)
        {
            case 0://選択肢a よく眠れた


                #region ねれたよ 私のハンカチで？ (早めにノベル終わり時KeyOrWaitに)
                yield return new WaitForSeconds(0.5f);
                NovelSetVis("D41000a1");//「ぐっすり寝れたよ」

                while (novelCurrentPageInt < 1) { yield return null; }
                ChieriMotion("f_ジト目40ん？私のハンカチで？", 0.1f, 2);
                Hukidashi("D41000a01");//へぇ～私のハンカチで？

                while (isNovelSetVisIng) { yield return null; }
                yield return new WaitForSeconds(0.5f);
                if (hukidasis[0] != null) { yield return KeyOrWait(1); }

                #endregion

                #region 昔飼ってたハムスターみたい　おいおい　少しうつぶせ 「もうペットと変わらないね」「昨日まで幼馴染だったのになぁ・・」
                ChieriMotion("あはは・・・", 0.1f, 2);
                Hukidashi("D41000a02");//あはは、昔飼ってたハムスターみたい
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                NovelSetVis("D41000a2");//「おいおい」　ハムスターと一緒にしないでくれよ
                while (novelCurrentPageInt < 2) { yield return null; }
                ChieriMotion("f_笑顔口眉ジト目40", 0.1f, 2);

                while (isNovelSetVisIng) { yield return null; }

                //肘つきやめて少しうつぶせ気味
                ChieriMotion("デスク肘つき→起き上がり", 0f, 0);
                yield return new WaitForSeconds(1f);
                ChieriMotion("f_ジト目70笑顔", 0.4f, 2);
                yield return new WaitForSeconds(0.5f);
                ChieriMotion("デスク少しうつ伏せポーズ", 0.4f / girlAnim.speed, 0);
                yield return new WaitForSeconds(0.5f);

                Hukidashi("D41000a03");//もうペットと変わらないね
                yield return new WaitForSeconds(1);
                yield return KeyOrWait(3);

                NovelSetVis("D41000a3");//「き、昨日まで幼馴染だったのになぁ」
                while (isNovelSetVisIng) { yield return null; }
                #endregion

                #region 「あれ？否定しないんだ？」「ペットでいいのかな？」「（攻めるな・・・）」
                ChieriMotion("f_ジト目のみ40", 0.4f, 2);

                Hukidashi("D41000a04");//あれ、否定しないんだ？
                yield return new WaitForSeconds(1);
                yield return KeyOrWait(4);

                ChieriMotion("デスク起き上がりポーズ", 0.4f / girlAnim.speed, 0);
                ChieriMotion("笑顔01口眉", 0.1f, 2);
                ChieriMotionDelay(2f, "f_笑顔口眉ジト目40", 0.1f, 2);

                Hukidashi("D41000a05");//じゃあ私のペットでいいのかな？
                yield return new WaitForSeconds(1);
                yield return KeyOrWait(4);

                NovelSetVis("D41000a4");//「なんか攻めるな・・・」
                while (novelCurrentPageInt < 4) { yield return null; }

                #endregion


                #region 顔悩み上見「ん～・・」
                ChieriMotion("ん？", 0.1f, 2);
                //IK上見
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, new Vector3(0, 1, 0), 0.2f);
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0.1f, 0.05f, 0), 1.5f);
                yield return new WaitForSeconds(1);

                Hukidashi("D41000a06");//ん～・・
                while (isNovelSetVisIng) { yield return null; }
                yield return new WaitForSeconds(1);
                if (hukidasis[0] != null) { yield return KeyOrWait(3); }

                #endregion

                #region 笑顔 IKプレイヤー戻し 「駄目♪」

                ChieriMotion("笑顔01口眉", 0.1f, 2);

                //IKプレイヤー見る
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.2f);
                DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.1f, 0));
                DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

                ChieriMotion("デスク少しうつ伏せポーズ", 0.6f, 0);
                yield return new WaitForSeconds(2);

                ChieriMotion("f_笑顔口眉ジト目40", 0.1f, 2);
                Hukidashi("D41000a07");//駄目
                yield return new WaitForSeconds(1);
                yield return KeyOrWait(3);

                NovelSetVis("D41000a5");//駄目ってどうして？
                while (isNovelSetVisIng) { yield return null; }
                #endregion


                #region 「今日は大事な日」「慣れてもらわないと」 「よくわからない・・」「十分？」「ふーん・・」

                ChieriMotion("笑顔01口眉", 0.2f, 2);

                Hukidashi("D41000a08");//今日は大事な日
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                //IK上見
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, new Vector3(0, 1, 0), 0f);

                ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);

                Hukidashi("D41000a09");//小さい体に慣れてもらうのと
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //IKプレイヤー
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.1f);

                ChieriMotion("f_笑顔口眉ジト目40", 0.2f, 2);

                Hukidashi("D41000a10");//大きい私に慣れてもらわないとね
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                yield return new WaitForSeconds(1);

                NovelSetVis("D41000a6");//大事な日？ よくわからないぞ・・
                ChieriMotion("デスク起き上がりポーズ", 0.3f / girlAnim.speed, 0);
                ChieriMotion("笑顔01口眉", 0.1f, 2);
                ChieriMotionDelay(1f, "f_笑顔口眉ジト目40", 0.2f, 2);
                while (isNovelSetVisIng) { yield return null; }


                ChieriMotion("f_十分？", 0.2f, 2);
                Hukidashi("D41000a11");//十分？
                yield return new WaitForSeconds(1);

                ChieriMotion("f_ふーん・・", 0.2f, 2);
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);
                #endregion

                #region IK「じゃあ例えば私が」「ほら、これだけで戸惑ってる」「明日はそんなんじゃ駄目なんだからね」「明日？」「いいの、とにかく慣れて」
                ChieriMotion("f_ジト目80口スマイル100", 0.2f, 2);
                Hukidashi("D41000a12");//じゃあ例えば私が

                //IKで右手ちょい上げ
                GameObject Chieri_02_IK_RHand_DeskYubisasiPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_02_IK_RHand_DeskYubisasiPosObj") as GameObject;
                IKRHandTargetTrs.localPosition = Chieri_02_IK_RHand_DeskYubisasiPosObj.transform.localPosition;
                IKRHandTargetTrs.localEulerAngles = Chieri_02_IK_RHand_DeskYubisasiPosObj.transform.localEulerAngles;
                SEPlay("swing41_12低い_長い", RHandSphereTrs.gameObject);

                //右手
                DOTweenToIKEfPos(IKRHandEf, 1, 3);
                DOTweenToIKEfRot(IKRHandEf, 1, 3);


                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                NovelSetVis("D41000a7");//え、な、な！？
                while (isNovelSetVisIng) { yield return null; }

                ChieriMotion("f_十分？", 0.2f, 2);
                Hukidashi("D41000a13");//ほら、これだけで
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                ChieriMotion("f_ふーん・・", 0.2f, 2);
                Hukidashi("D41000a14");//そんなんじゃ駄目なんだからね
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                NovelSetVis("D41000a8");//無茶を言う、って、明日？
                while (isNovelSetVisIng) { yield return null; }

                Hukidashi("D41000a15");//いいの、とにかく慣れて
                ChieriMotion("笑顔01口眉", 0.1f, 2);
                ChieriMotionDelay(1f, "f_笑顔口眉ジト目40", 0.2f, 2);
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                #endregion


                break;

            case 1://選択肢b　智恵理が気になってあんまり
                sentakuListNum = 99;

                NovelSetVis("tmpまだなし");
                while (isNovelSetVisIng) { yield return null; }
                goto 選択肢;

                //EventMove("会話4_就寝");
                break;
        }
        #endregion


        #region ■指掴まりイベント

        #region 「それじゃとりあえず」ひとさし指差しにして 指先ピボット設定 プレイヤー前へ差し出す 「はい」「掴まってられるかな」「従うしか無さそうだ」
        Hukidashi("D41010");//それじゃあとりあえず
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("ひとさし指差し", 0.5f, 5);

        yield return new WaitForSeconds(1);

        //指先ピボットオブジェ生成（ゆびさしポーズ時じゃなきゃだめ）
        GameObject
            PivotObj
            = Instantiate(Resources.Load("EventSystem/Sekkin/SekkinPivotObj") as GameObject
            , GameObject.Find("BoneBip001 R hitosashi02").transform
            , false);
        DB.evMoveDelObjList.Add(PivotObj);
        //ピボットでIKRHand逆同期スタート
        Sekkin(PivotObj, IKRHandTargetTrs.gameObject);

        //ピボット操作で右手人差し指プレイヤー目の前へ
        GameObject Chieri_04_IK_YubisasiPivot_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_04_IK_YubisasiPivot_DeskPosObj") as GameObject;
        PivotObj.transform.DOLocalMove(Chieri_04_IK_YubisasiPivot_DeskPosObj.transform.localPosition
            , 3f);
        PivotObj.transform.DORotateQuaternion(Chieri_04_IK_YubisasiPivot_DeskPosObj.transform.rotation
            , 3f);

        yield return new WaitForSeconds(2);


        Hukidashi("D41020");//はい
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1f, "f_笑顔口眉ジト目40", 0.2f, 2);
        Hukidashi("D41030");//私の指に掴まってられるかな？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);


        NovelSetVis("D41000a9");//疑問はあるけど従うしか
        while (isNovelSetVisIng) { yield return null; }

        #endregion


        デバッグ移動:
        #region //デバッグ移動と設定


        //ChieriMotion("f_笑顔口眉ジト目40", 0f, 2);
        //ChieriMotion("デスク起き上がりポーズ", 0f / girlAnim.speed, 0);


        ////IKで右手ちょい上げ
        //GameObject debugChieri_02_IK_RHand_DeskYubisasiPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_02_IK_RHand_DeskYubisasiPosObj") as GameObject;
        //IKRHandTargetTrs.localPosition = debugChieri_02_IK_RHand_DeskYubisasiPosObj.transform.localPosition;
        //IKRHandTargetTrs.localEulerAngles = debugChieri_02_IK_RHand_DeskYubisasiPosObj.transform.localEulerAngles;

        ////右手
        //DOTweenToIKEfPos(IKRHandEf, 1, 0);
        //DOTweenToIKEfRot(IKRHandEf, 1, 0);
        //ChieriMotion("ひとさし指差し", 0f, 5);

        yield return new WaitForSeconds(0.2f);

        ////指先ピボットオブジェ生成
        //PivotObj
        //    = Instantiate(Resources.Load("EventSystem/Sekkin/SekkinPivotObj") as GameObject
        //    , GameObject.Find("BoneBip001 R hitosashi02").transform
        //    , false);
        //ピボットでIKRHand逆同期スタート
        //Sekkin(PivotObj, IKRHandTargetTrs.gameObject);

        ////ピボット操作で右手人差し指プレイヤー目の前へ
        //GameObject debugChieri_04_IK_YubisasiPivot_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_04_IK_YubisasiPivot_DeskPosObj") as GameObject;
        //PivotObj.transform.DOLocalMove(debugChieri_04_IK_YubisasiPivot_DeskPosObj.transform.localPosition
        //    , 0f);
        //PivotObj.transform.DORotateQuaternion(debugChieri_04_IK_YubisasiPivot_DeskPosObj.transform.rotation
        //    , 0f);


        //開幕
        FadeBlack(0, 0);


        #endregion

        goto 初回;

        やりなおし:
        #region やり直し用配置リセット

        isANSystem = false;
        yield return null;

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);


        //プレイヤー 練習1位置に
        CameraObjectsTrs.localPosition = Player_01_DeskUeRensyuu1PosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_01_DeskUeRensyuu1PosObj.transform.localEulerAngles;

        ChieriMotion("f_笑顔口眉ジト目40", 0f, 2);
        ChieriMotion("デスク起き上がりポーズ", 0f, 0);

        //ピボット操作で右手人差し指プレイヤー目の前へ
        PivotObj.transform.localPosition = Chieri_04_IK_YubisasiPivot_DeskPosObj.transform.localPosition;
        PivotObj.transform.rotation = Chieri_04_IK_YubisasiPivot_DeskPosObj.transform.rotation;


        //開幕
        FadeBlack(0, 0);

        #endregion

        初回:

        #region 脚のぼりシステム起動 指つかみ待ちコルーチン起動
        //■■■脚のぼりシステム コルーチン始動
        StartCoroutine(AsinoboriSystem());
        //脚のぼりシステム設定
        AN_isGrapPowerMode = false;

        //rigid監視スタート
        yield return null;//Rigidbody付与待ち
        StartCoroutine(RigidReadSystem());

        playerWindAudioVolumeBorderFloat = 800;

        //掴み待ちコルーチン
        isYubiGrapWaitEvent = true;
        float tmpWaitGrapTime = 0;
        while (isYubiGrapWaitEvent == true)
        {
            //片手掴みでカウント
            if (AN_isRGrap == false && AN_isLGrap == false)
            {
                //少し掴んで離したら
                if (tmpWaitGrapTime >= 1.5f)
                {
                    DelAll_Hukidashi(); yield return null;
                    Hukidashi("D41035");//「離さず」
                }

                tmpWaitGrapTime = 0;
            }

            else if (AN_isRGrap == true || AN_isLGrap == true)
            {
                IEnumerator tmpGrapWaitCor = D4100a();
                StartCoroutine(tmpGrapWaitCor);

                while (AN_isRGrap == true || AN_isLGrap == true)
                {
                    tmpWaitGrapTime += Time.deltaTime * 1;
                    if (isYubiGrapWaitEvent == false) { goto もちあげ; }
                    yield return null;
                }

                StopCoroutine(tmpGrapWaitCor);
            }
            yield return null;
        }

        #endregion

        #region 持ち上げ
        もちあげ://掴み待ち抜ける用
        GameObject Chieri_05_IK_YubisasiPivot_UpPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_05_IK_YubisasiPivot_UpPosObj") as GameObject;
        Tweener tmpYubiDOMoveTweener =
        PivotObj.transform.DOLocalMove(Chieri_05_IK_YubisasiPivot_UpPosObj.transform.localPosition
            , 8f)
            .SetEase(Ease.InOutSine)
            .SetAutoKill(false);
        Tweener tmpYubiDORotateTweener =
        PivotObj.transform.DORotateQuaternion(Chieri_05_IK_YubisasiPivot_UpPosObj.transform.rotation
            , 8f)
            .SetEase(Ease.InOutSine)
            .SetAutoKill(false);




        yield return new WaitForSeconds(3);

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.1f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1f, "f_笑顔口眉ジト目40", 0.2f, 2);
        Hukidashi("D41080");//「高い高い」
        yield return new WaitForSeconds(3);
        NovelSetVis("D41010");//「高い！ 緊張を生む」
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("D41090");//「それにしても」
        yield return new WaitForSeconds(2);
        ChieriMotion("f_本当に小さいね～", 1f, 2);

        #region 顔に寄せ
        GameObject Chieri_08_IK_YubisasiPivot_KaomaePosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_08_IK_YubisasiPivot_KaomaePosObj") as GameObject;
        tmpYubiDOMoveTweener
            .ChangeEndValue(Chieri_08_IK_YubisasiPivot_KaomaePosObj.transform.localPosition
            , 3f
            , true)
            .Restart();

        tmpYubiDORotateTweener
            .ChangeEndValue(Chieri_08_IK_YubisasiPivot_KaomaePosObj.transform.rotation
            , 3f
            , true)
            .Restart();
        #endregion

        yield return new WaitForSeconds(1);
        Hukidashi("D41100");//「随分ちっちゃくなったよねー」
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        Hukidashi("D41110");//「こうしないと顔も見えない」
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        ChieriMotion("笑顔01口眉", 0.05f, 2);
        ChieriMotionDelay(0.5f, "笑顔01口眉_目閉じない", 0.1f, 2);

        NovelSetVis("D41020");//「そっちが縮めたんじゃないか！」
        while (isNovelSetVisIng) { yield return null; }

        #region もちあげ位置に戻し
        tmpYubiDOMoveTweener
            .ChangeEndValue(Chieri_05_IK_YubisasiPivot_UpPosObj.transform.localPosition
            , 3f
            , true)
            .Restart();

        tmpYubiDORotateTweener
            .ChangeEndValue(Chieri_05_IK_YubisasiPivot_UpPosObj.transform.rotation
            , 3f
            , true)
            .Restart();
        #endregion


        ChieriMotion("f_笑顔口眉ジト目40", 0.2f, 2);
        Hukidashi("D41120");//「あれあれ、そんなこと言っていいのかな？」
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1f, "f_笑顔口眉ジト目40", 0.1f, 2);
        Hukidashi("D41130");//「ほーらほーら♪」

        #region もちあげ位置から左
        GameObject Chieri_09_IK_YubisasiPivot_YurasiLPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_09_IK_YubisasiPivot_YurasiLPosObj") as GameObject;

        tmpYubiDOMoveTweener
            .ChangeEndValue(Chieri_09_IK_YubisasiPivot_YurasiLPosObj.transform.localPosition
            , 1f
            , true)
            .Restart();

        tmpYubiDORotateTweener
            .ChangeEndValue(Chieri_09_IK_YubisasiPivot_YurasiLPosObj.transform.rotation
            , 1f
            , true)
            .Restart();
        #endregion
        yield return new WaitForSeconds(1f);

        #region もちあげ位置から→
        GameObject Chieri_10_IK_YubisasiPivot_YurasiRPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_10_IK_YubisasiPivot_YurasiRPosObj") as GameObject;

        tmpYubiDOMoveTweener
            .ChangeEndValue(Chieri_10_IK_YubisasiPivot_YurasiRPosObj.transform.localPosition
            , 1f
            , true)
            .Restart();

        tmpYubiDORotateTweener
            .ChangeEndValue(Chieri_10_IK_YubisasiPivot_YurasiRPosObj.transform.rotation
            , 1f
            , true)
            .Restart();
        #endregion
        yield return new WaitForSeconds(1f);

        #region もちあげ位置に戻し
        tmpYubiDOMoveTweener
            .ChangeEndValue(Chieri_05_IK_YubisasiPivot_UpPosObj.transform.localPosition
            , 0.5f
            , true)
            .Restart();

        tmpYubiDORotateTweener
            .ChangeEndValue(Chieri_05_IK_YubisasiPivot_UpPosObj.transform.rotation
            , 0.5f
            , true)
            .Restart();
        #endregion

        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("D41030");//「馬鹿、やめ！」
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("D41140");//「結構頑張れるんだね」
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        Hukidashi("D41150");//「じゃあその調子で本番」
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("D41040");//「ほ、本番？」

        yield return new WaitForSeconds(1);

        Hukidashi("D41160");//「下は見ないほうがいいかもね」


        ////■やり直し
        //tmpYubiDOMoveTweener.Kill();
        //tmpYubiDORotateTweener.Kill();
        //yield return new WaitForSeconds(1);
        //goto やりなおし;

        #endregion

        #region 椅子ごと移動回転(OnUpdateで主人公回転同期)（デバッグ時はpivotがdebugなの注意）
        GirlTrs.SetParent(ChairTrs, true);

        GameObject Chieri_11_IK_YubisasiPivot_IsuRotatePosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_11_IK_YubisasiPivot_IsuRotatePosObj") as GameObject;
        #region OnUpdate用変数（主人公の回転も同期するため、指の回転増減値を代入（傾かないようZはそのまま）用）
        Transform
            yubiColTrs = GameObject.Find("Hitosashi02_R_coll").transform;

        Vector3
            nowYubiEul = yubiColTrs.eulerAngles,
            prevYubiEul = yubiColTrs.eulerAngles,
            resultYubiEul = nowYubiEul - prevYubiEul;
        #endregion
        PivotObj.transform.DOLocalMove(Chieri_11_IK_YubisasiPivot_IsuRotatePosObj.transform.localPosition
            , 10f)
            .SetEase(Ease.InOutSine)
            .OnUpdate(() =>//主人公の回転も同期するため、指の回転増減値を代入（傾かないようXZはそのまま）
            {
                nowYubiEul = yubiColTrs.eulerAngles;
                resultYubiEul = nowYubiEul - prevYubiEul;

                CameraObjectsTrs.transform.localEulerAngles
            = new Vector3(
                CameraObjectsTrs.transform.localEulerAngles.x,
                CameraObjectsTrs.transform.localEulerAngles.y + resultYubiEul.y,
                CameraObjectsTrs.transform.localEulerAngles.z);

                prevYubiEul = yubiColTrs.eulerAngles;
            });

        PivotObj.transform.DORotateQuaternion(Chieri_11_IK_YubisasiPivot_IsuRotatePosObj.transform.rotation
            , 10f)
            .SetEase(Ease.InOutSine);

        yield return new WaitForSeconds(1);

        GameObject Chair_02_RotatePosObj = Resources.Load("_PosObj/D_Henai_Day2/Chair_02_RotatePosObj") as GameObject;
        ChairTrs.DOLocalMove(Chair_02_RotatePosObj.transform.localPosition
            , 5f)
            .SetEase(Ease.InOutSine);
        ChairTrs.DORotateQuaternion(Chair_02_RotatePosObj.transform.rotation
            , 5f)
            .SetEase(Ease.InOutSine);

        GameObject Chieri_12_IK_LHand_IsuRotatePosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_12_IK_LHand_IsuRotatePosObj") as GameObject;
        IKLHandTargetTrs.localPosition = Chieri_12_IK_LHand_IsuRotatePosObj.transform.localPosition;
        IKLHandTargetTrs.localEulerAngles = Chieri_12_IK_LHand_IsuRotatePosObj.transform.localEulerAngles;
        DOTweenToIKEfPos(IKLHandEf, 1
            , 5f
            , Ease.InOutSine);
        DOTweenToIKEfRot(IKLHandEf, 1
            , 5f
            , Ease.InOutSine);
        #endregion

        #region 「うおわあぁぁあ！」「慣れてるんじゃなかった？」「冗談じゃないもん」「助けてっていってなかった？」

        yield return new WaitForSeconds(2);

        NovelSetVis("D41050");//「うおわあぁぁあ！」
        yield return new WaitForSeconds(5);
        while (isNovelSetVisIng) { yield return null; }

        NovelSetVis("D41060");//「や、たふす」
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("D41170");//「ん？　なあに？」
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("D41180");//「慣れてるんじゃなかった？」
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        NovelSetVis("D41070");//「ば、ばかばか！冗談じゃ済まない！」
        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("f_十分？", 0.2f, 2);
        Hukidashi("D41190");//「冗談じゃないもん」
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);



        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1.5f, "f_笑顔口眉ジト目40", 0.1f, 2);

        #region 顔に寄せ
        GameObject Chieri_13_IK_YubisasiPivot_dousitehosiiPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_13_IK_YubisasiPivot_dousitehosiiPosObj") as GameObject;
        tmpYubiDOMoveTweener
            .ChangeEndValue(Chieri_13_IK_YubisasiPivot_dousitehosiiPosObj.transform.localPosition
            , 3f
            , true)
            .Restart();

        tmpYubiDORotateTweener
            .ChangeEndValue(Chieri_13_IK_YubisasiPivot_dousitehosiiPosObj.transform.rotation
            , 3f
            , true)
            .Restart();
        #endregion

        //IK顔横見
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0f, 0f, 0.03f), 1.5f);

        yield return new WaitForSeconds(2);


        Hukidashi("D41200");//「で、どうして欲しいって？」
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0f, 0f, 0.05f), 1.5f);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1.5f, "f_笑顔口眉ジト目40", 0.1f, 2);
        SHukidashi("D41210");//「助けてっていってなかった？」
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        #endregion

        #region ■選択肢 ぐぬぬ 「助けて降ろして」
        sentakuListNum = 99;//初期化

        Sentakushi("■D41210a");
        Sentakushi("■D41210b");
        //選択肢選ばれるまでループ
        while (sentakuListNum == 99) { yield return null; }
        yield return null;
        bool isTmpGununu = false;
        switch (sentakuListNum)
        {
            #region 無言とぐぬぬ
            case -1://無言
                yield return new WaitForSeconds(1);
                goto ぐぬぬ後;
            case 0://選択肢a ぐぬぬ
                yield return new WaitForSeconds(0.5f);

                NovelSetVis("D41210a");//ぐぬぬ・・
                while (isNovelSetVisIng) { yield return null; }
                isTmpGununu = true;
                ぐぬぬ後:

                //IKプレイヤー見る
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.1f);
                DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0.1f);
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
                DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1f);

                ChieriMotion("f_ジト目40ん？私のハンカチで？", 0.1f, 2);
                Hukidashi("D41210a1");//だんまり？
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //少し顔そむけ
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0f, 0f, 0.05f), 1.5f);

                ChieriMotion("f_ちぇー", 0.3f, 2);
                Hukidashi("D41210a2");//怒ってる？
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                if (isTmpGununu)
                {
                    NovelSetVis("D41210a1");//そうだぞ
                    while (isNovelSetVisIng) { yield return null; }
                }
                yield return new WaitForSeconds(1);

                //よそ見
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, new Vector3(1, 0, 0), 0.1f);

                yield return new WaitForSeconds(1);

                //プレイヤー見
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.1f);

                Hukidashi("D41220");//じゃあ降ろしてあげようかな
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                #region フェード用降ろし
                GameObject Chieri_16_IK_YubisasiPivot_orosiPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_16_IK_YubisasiPivot_orosiPosObj") as GameObject;
                tmpYubiDOMoveTweener
                    .ChangeEndValue(Chieri_16_IK_YubisasiPivot_orosiPosObj.transform.localPosition
                    , 14f
                    , true)
                    .Restart();

                tmpYubiDORotateTweener
                    .ChangeEndValue(Chieri_16_IK_YubisasiPivot_orosiPosObj.transform.rotation
                    , 14f
                    , true)
                    .Restart();
                #endregion

                //暗幕
                FadeBlack(1, 6f);

                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0f, 0f, 0.05f), 0.2f);

                if (isTmpGununu)
                {
                    NovelSetVis("D41210a2");//少しは反省してくれたのか降ろしてくれた
                    while (isNovelSetVisIng) { yield return null; }
                }
                else
                {
                    NovelSetVis("D41210z");//まごまごしていると降ろしてくれた
                    while (isNovelSetVisIng) { yield return null; }
                }

                #endregion
                break;

            case 1://選択肢b 「助けて降ろして」
                yield return new WaitForSeconds(0.5f);
                NovelSetVis("D41210b");//素直が一番
                while (isNovelSetVisIng) { yield return null; }

                //IKプレイヤー見る
                FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0.1f);
                DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0.1f);
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
                DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1f);

                ChieriMotion("笑顔01口眉", 0.1f, 2);
                ChieriMotionDelay(1.5f, "f_笑顔口眉ジト目40", 0.1f, 2);
                Hukidashi("D41210b1");//よしよしじゃあ降ろしてあげるね
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //顔向け早く
                FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0.2f);

                #region フェード用降ろし
                GameObject Chieri_16_IK_YubisasiPivot_orosiPosObj2 = Resources.Load("_PosObj/D_Henai_Day2/Chieri_16_IK_YubisasiPivot_orosiPosObj") as GameObject;
                tmpYubiDOMoveTweener
                    .ChangeEndValue(Chieri_16_IK_YubisasiPivot_orosiPosObj2.transform.localPosition
                    , 14f
                    , true)
                    .Restart();

                tmpYubiDORotateTweener
                    .ChangeEndValue(Chieri_16_IK_YubisasiPivot_orosiPosObj2.transform.rotation
                    , 14f
                    , true)
                    .Restart();
                #endregion


                //暗幕
                FadeBlack(1, 6f);
                NovelSetVis("D41210b1");//悲壮な表情が通じたのか降ろしてくれた
                while (isNovelSetVisIng) { yield return null; }

                break;

        }
        #endregion


        #endregion

        yield return new WaitForSeconds(6);

        #region 設定解除（ペアレント、脚のぼりシステム、接近システムなど）
        GirlTrs.SetParent(GameObjectsTrs, true);
        isANSystem = false;
        isSekkinSystem = false;
        isRigidReadSystem = false;

        //右手
        DOTweenToIKEfPos(IKRHandEf, 0, 0f);
        DOTweenToIKEfRot(IKRHandEf, 0, 0f);
        //右手
        DOTweenToIKEfPos(IKLHandEf, 0, 0f);
        DOTweenToIKEfRot(IKLHandEf, 0, 0f);



        #endregion

        EventMove("練習2_朝地べた", false);

        #region Input操作で実際に掴む
        isRInput = true;
        isRInputDown = true;
        yield return null;
        isRInputDown = false;
        #endregion


        SEPlay(UISEObj, "UI_pin");
        //デバッグ
        Debug.Log(DB.nowEventNum + "終了");
        while (true) { yield return null; };

        yield break;
    }
    #region┗用メソッド
    #region ■指掴んだまま離さないよう促すイベント
    bool isYubiGrapWaitEvent;
    IEnumerator D4100a()
    {
        Debug.Log("0"); yield return new WaitForSeconds(3);

        DelAll_Hukidashi(); yield return null;
        Hukidashi("D41040");//「掴んだ？」
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        Hukidashi("D41050");//「さん」
        yield return new WaitForSeconds(1);

        DelAll_Hukidashi(); yield return null;
        Hukidashi("D41060");//「にー」
        yield return new WaitForSeconds(1);

        DelAll_Hukidashi(); yield return null;
        Hukidashi("D41070");//「いち」
        yield return new WaitForSeconds(1);

        isYubiGrapWaitEvent = false;

        yield break;
    }
    #endregion
    //Sekkinメソッドは汎用性高いのでDataCounterに移動（体験版部分でも使用しているので）

    #endregion
    IEnumerator D4200()//練習2_朝地べた
    {
        if (debugEventMoveFlag == true)
        {
            //プレイヤー大きさ
            //nowPlayerLocalScl = new Vector3(0.05f, 0.05f, 0.05f);
            nowPlayerLocalScale = new Vector3(0.03f, 0.03f, 0.03f);
            //アニメスピード
            girlAnim.speed = 0.3f;

            //暗幕
            FadeBlack(1, 0f);
        }
        EventReset();

        #region 暗幕中設定
        //智恵理ON
        GirlMeshTrs.gameObject.SetActive(true);

        //智恵理0位置ロック解除
        DB.isChieriPosLock = false;
        //アニメスピード
        girlAnim.speed = 0.3f;

        //IKプレイヤー見る
        FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
        DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0);
        FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 0f);
        DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 0);

        ChieriMotion("ATL椅子脚組みやめ直後ポーズ", 0f, 0);
        ChieriMotion("f_笑顔口眉ジト目40", 0.1f, 2);
        ChieriMotion("_noData", 0f, 5);

        //■PosObjで読み込み
        //プレイヤー 練習2地べた位置に
        GameObject Player_02_ZibetaRensyuu2PosObj = Resources.Load("_PosObj/D_Henai_Day2/Player_02_ZibetaRensyuu2PosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player_02_ZibetaRensyuu2PosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player_02_ZibetaRensyuu2PosObj.transform.localEulerAngles;

        //椅子位置
        GameObject Chair_03_ZibetaRensyuPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chair_03_ZibetaRensyuPosObj") as GameObject;
        ChairTrs.localPosition = Chair_03_ZibetaRensyuPosObj.transform.localPosition;
        ChairTrs.localEulerAngles = Chair_03_ZibetaRensyuPosObj.transform.localEulerAngles;

        //智恵理 ATL椅子すわり位置に（ペアレント用にローカル値）
        GameObject ChieriParent_ChairLocalPosObj = Resources.Load("_PosObj/ChieriParent_ChairLocalPosObj") as GameObject;
        GirlTrs.localPosition = ChieriParent_ChairLocalPosObj.transform.localPosition;
        GirlTrs.localEulerAngles = ChieriParent_ChairLocalPosObj.transform.localEulerAngles;
        //智恵理 椅子へペアレント
        GirlTrs.SetParent(ChairTrs, false);
        //yield return null;
        //GirlTrs.SetParent(GameObjectsTrs, true);


        //スピーカー 位置に
        SpeakerTrs.gameObject.SetActive(true);
        GameObject SpeaKer_DeskPosObj = Resources.Load("_PosObj/D_Henai_Day1/SpeaKer_DeskPosObj") as GameObject;
        SpeakerTrs.localPosition = SpeaKer_DeskPosObj.transform.localPosition;
        SpeakerTrs.localEulerAngles = SpeaKer_DeskPosObj.transform.localEulerAngles;

        #region 宿題ペン消しゴムなくし
        //宿題 位置に
        Drill_chieriTrs.gameObject.SetActive(false);

        //プレイヤーの
        //HomeworkObjectsTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);

        //ペンなくし
        SharpenObj.SetActive(false);
        //消しゴム無くし
        KeshigomuObj.SetActive(false);
        #endregion //宿題置き


        //事前Pos群
        GameObject Chair_04_ZensinPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chair_04_ZensinPosObj") as GameObject;
        GameObject KaoyokoYubitate01_IKRHand_Bip001RUpperArmObj = Resources.Load("_PosObj/_ParentPoseObjs/KaoyokoYubitate01_IKRHand_Bip001RUpperArmObj") as GameObject;

        #endregion

        //開幕
        FadeBlack(0, 1f);

        //goto デバッグ移動;

        yield return new WaitForSeconds(1);

        #region 地べたに 降ろしたのに怒ってる？　床が不服？ 椅子ごと主人公へ近づく
        NovelSetVis("D42000");//地べたに・・・。降ろすってこっちかよ！
        while (isNovelSetVisIng) { yield return null; }

        ChieriMotion("f_十分？", 0.1f, 2);
        Hukidashi("D42000");//降ろしたのに怒ってる？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        Hukidashi("D42005");//床が不服？

        #region 椅子ごと主人公へ近づく
        GameObject IKLFoot_AsikumiYameTyokugoPosObj = Resources.Load("_PosObj/D_Henai_Day2/AsaZibeta/IKLFoot_AsikumiYameTyokugoPosObj") as GameObject;
        GameObject IKRFoot_AsikumiYameTyokugoPosObj = Resources.Load("_PosObj/D_Henai_Day2/AsaZibeta/IKRFoot_AsikumiYameTyokugoPosObj") as GameObject;
        GameObject IKLFoot_MaekagamiPosObj = Resources.Load("_PosObj/D_Henai_Day2/AsaZibeta/IKLFoot_MaekagamiPosObj") as GameObject;
        GameObject IKRFoot_MaekagamiPosObj = Resources.Load("_PosObj/D_Henai_Day2/AsaZibeta/IKRFoot_MaekagamiPosObj") as GameObject;

        //まず初期位置でIKON
        IKLFootTargetTrs.localPosition = IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition;
        IKRFootTargetTrs.localPosition = IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition;
        IKLFootTargetTrs.localEulerAngles = IKLFoot_AsikumiYameTyokugoPosObj.transform.localEulerAngles;
        IKRFootTargetTrs.localEulerAngles = IKRFoot_AsikumiYameTyokugoPosObj.transform.localEulerAngles;
        DOTweenToIKEfPos(IKLFootEf, 1, 0);
        DOTweenToIKEfPos(IKRFootEf, 1, 0);
        DOTweenToIKEfRot(IKLFootEf, 1, 0);
        DOTweenToIKEfRot(IKRFootEf, 1, 0);

        yield return null;

        //進んだ位置に足位置移動
        float tmpDurTimeOne = 0.3f;
        IKLFootTargetTrs.DOLocalMoveX(IKLFoot_MaekagamiPosObj.transform.localPosition.x, tmpDurTimeOne / girlAnim.speed);
        IKLFootTargetTrs.DOLocalMoveZ(IKLFoot_MaekagamiPosObj.transform.localPosition.z, tmpDurTimeOne / girlAnim.speed);
        IKRFootTargetTrs.DOLocalMoveX(IKRFoot_MaekagamiPosObj.transform.localPosition.x, tmpDurTimeOne / girlAnim.speed);
        IKRFootTargetTrs.DOLocalMoveZ(IKRFoot_MaekagamiPosObj.transform.localPosition.z, tmpDurTimeOne / girlAnim.speed);
        IKLFootTargetTrs.DOLocalRotate(IKLFoot_MaekagamiPosObj.transform.localEulerAngles, tmpDurTimeOne / girlAnim.speed);
        IKRFootTargetTrs.DOLocalRotate(IKRFoot_MaekagamiPosObj.transform.localEulerAngles, tmpDurTimeOne / girlAnim.speed);

        //ついでにほんの少し浮かして降ろす
        IKLFootTargetTrs.DOLocalMoveY(IKLFoot_MaekagamiPosObj.transform.localPosition.y + 0.001f, (tmpDurTimeOne / 2) / girlAnim.speed)
            .OnComplete(() =>
            {
                IKLFootTargetTrs.DOLocalMoveY(IKLFoot_MaekagamiPosObj.transform.localPosition.y
                    , (tmpDurTimeOne / 2) / girlAnim.speed)
                    .SetEase(Ease.InSine);
            });
        IKRFootTargetTrs.DOLocalMoveY(IKRFoot_MaekagamiPosObj.transform.localPosition.y + 0.001f, (tmpDurTimeOne / 2) / girlAnim.speed)
            .OnComplete(() =>
            {
                IKRFootTargetTrs.DOLocalMoveY(IKRFoot_MaekagamiPosObj.transform.localPosition.y
                    , (tmpDurTimeOne / 2) / girlAnim.speed)
                    .SetEase(Ease.InSine);
            });

        yield return new WaitForSeconds((tmpDurTimeOne / 2) / girlAnim.speed);

        ChieriMotion("ATL椅子前かがみ", 1f, 0);

        //椅子ごと主人公へ近づく
        ChairTrs.DOLocalMove(Chair_04_ZensinPosObj.transform.localPosition
            , 1f / girlAnim.speed);
        ChairTrs.DOLocalRotateQuaternion(Chair_04_ZensinPosObj.transform.rotation
            , 1f / girlAnim.speed);

        #endregion

        #region //旧 椅子ごと主人公へ近づく
        ChieriMotion("ATL椅子前かがみ", 0.5f, 0);

        ChairTrs.DOLocalMove(Chair_04_ZensinPosObj.transform.localPosition
            , 1f / girlAnim.speed);
        ChairTrs.DOLocalRotateQuaternion(Chair_04_ZensinPosObj.transform.rotation
            , 1f / girlAnim.speed);
        #endregion

        SEPlay(ChairSEObj, "ChairMove01", ChairTrs.gameObject);

        yield return new WaitForSeconds(1.5f);
        yield return KeyOrWait(3);
        #endregion

        #region これが実際の大きさなんだよ？ 本当はそんなに小さいのに忘れちゃったかな？ 本当の大きさって・・
        Hukidashi("D42010");//これが実際の大きさなんだよ？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("f_笑顔口眉ジト目40", 0.1f, 2);
        Hukidashi("D42020");//本当はそんなに小さいのに
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1.5f, "f_笑顔口眉ジト目40", 0.1f, 2);
        Hukidashi("D42030");//忘れちゃったかな？
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("ATL椅子前かがみ→ちょいかがみ", 0.5f, 0);

        NovelSetVis("D42010");//本当の大きさって・・
        while (isNovelSetVisIng) { yield return null; }
        #endregion

        #region なにか喋ってるみたいだけど よく聞こえないんだよね 聴こえてないのか？ 椅子ごと元の位置へ
        ChieriMotion("f_十分？", 0.1f, 2);

        Hukidashi("D42040");//なにか喋ってるみたいだけど
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1.5f, "f_笑顔口眉ジト目40", 0.1f, 2);
        Hukidashi("D42050");//よく聞こえないんだよね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);

        NovelSetVis("D42020");//聴こえてないのか？

        #region 椅子ごと元の位置へ

        float tmpDurTimeTwo = 1f;
        //まず足IKそのままで動き始める（IKは前かがみ状態前提）
        ChieriMotion("ATL椅子脚組みやめ直後ポーズ", 1f, 0);
        //椅子ごと元の位置へ
        ChairTrs.DOLocalMove(Chair_03_ZibetaRensyuPosObj.transform.localPosition
            , tmpDurTimeTwo / girlAnim.speed);
        ChairTrs.DOLocalRotateQuaternion(Chair_03_ZibetaRensyuPosObj.transform.rotation
            , tmpDurTimeTwo / girlAnim.speed);

        SEPlay(ChairSEObj, "ChairMove01", ChairTrs.gameObject);

        yield return new WaitForSeconds((tmpDurTimeTwo / 3) / girlAnim.speed);

        //半分くらいでIKで足戻す
        //戻り位置に足移動
        IKLFootTargetTrs.DOLocalMoveX(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.x, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKLFootTargetTrs.DOLocalMoveZ(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.z, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKRFootTargetTrs.DOLocalMoveX(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.x, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKRFootTargetTrs.DOLocalMoveZ(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.z, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKLFootTargetTrs.DOLocalRotate(IKLFoot_AsikumiYameTyokugoPosObj.transform.localEulerAngles, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKRFootTargetTrs.DOLocalRotate(IKRFoot_AsikumiYameTyokugoPosObj.transform.localEulerAngles, (tmpDurTimeTwo / 2) / girlAnim.speed);

        //ついでにほんの少し浮かして降ろす
        IKLFootTargetTrs.DOLocalMoveY(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y + 0.001f, ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
            .OnComplete(() =>
            {
                IKLFootTargetTrs.DOLocalMoveY(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y
                    , ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
                    .SetEase(Ease.InSine);
            });
        IKRFootTargetTrs.DOLocalMoveY(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y + 0.001f, ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
            .OnComplete(() =>
            {
                IKRFootTargetTrs.DOLocalMoveY(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y
                    , ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
                    .SetEase(Ease.InSine);
            });

        yield return new WaitForSeconds((tmpDurTimeTwo / 2) / girlAnim.speed);


        #endregion
        #region //旧 椅子ごと元の位置へ
        ChieriMotion("ATL椅子脚組みやめ直後ポーズ", 1f, 0);

        ChairTrs.DOLocalMove(Chair_03_ZibetaRensyuPosObj.transform.localPosition
            , 1f / girlAnim.speed);
        ChairTrs.DOLocalRotateQuaternion(Chair_03_ZibetaRensyuPosObj.transform.rotation
            , 1f / girlAnim.speed);
        #endregion

        SEPlay(ChairSEObj, "ChairMove01", ChairTrs.gameObject);

        yield return new WaitForSeconds(1.5f);

        while (isNovelSetVisIng) { yield return null; }
        #endregion

        デバッグ移動:
        #region デバッグ設定

        #endregion
        #region ふふ 右足裏見せ
        ChieriMotion("f_ジト目70笑顔", 0.4f, 2);
        yield return new WaitForSeconds(1);

        Hukidashi("D42060");//ふふ
        yield return new WaitForSeconds(2);

        //椅子移動用 足IKオフ（同じ位置に足があるはずなので）
        DOTweenToIKEfPos(IKLFootEf, 0, 0);
        DOTweenToIKEfPos(IKRFootEf, 0, 0);
        DOTweenToIKEfRot(IKLFootEf, 0, 0);
        DOTweenToIKEfRot(IKRFootEf, 0, 0);
        yield return null;

        GameObject Chieri_17_IK_RFoot_KakusiPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_17_IK_RFoot_KakusiPosObj") as GameObject;
        IKRFootTargetTrs.localPosition = Chieri_17_IK_RFoot_KakusiPosObj.transform.localPosition;
        IKRFootTargetTrs.rotation = Chieri_17_IK_RFoot_KakusiPosObj.transform.rotation;

        SEPlay("swing41_12低い_長い", RFootSphereTrs.gameObject);

        //右足
        DOTweenToIKEfPos(IKRFootEf, 1, 3);
        DOTweenToIKEfRot(IKRFootEf, 1, 3);

        yield return new WaitForSeconds(3);
        NovelSetVis("D42030");//へ？
        while (isNovelSetVisIng) { yield return null; }


        ChieriMotion("f_安堵", 0.1f, 2);
        Hukidashi("D42070");//ほら、見えなくなっちゃった
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("D42075");//足で隠れちゃうくらい小さいんだね
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        Hukidashi("D42077");//潰されたらどうしようって思わない？ 
        yield return new WaitForSeconds(1); yield return KeyOrWait(3);
        NovelSetVis("D42040");//「え、何言って……や、やめ……」
        while (isNovelSetVisIng) { yield return null; }
        #endregion

        #region 足よりちっちゃいってことは 足振り上げ ばかやめろ ふみ降ろし
        Hukidashi("D42080");//足よりちっちゃいってことは

        GameObject Chieri_18_IK_RFoot_UkasiPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_18_IK_RFoot_UkasiPosObj") as GameObject;
        IKRFootTargetTrs.DOLocalMove(Chieri_18_IK_RFoot_UkasiPosObj.transform.localPosition
            , 5f);
        IKRFootTargetTrs.DOLocalRotateQuaternion(Chieri_18_IK_RFoot_UkasiPosObj.transform.rotation
            , 5f);
        SEPlay("swing41_12低い_長い", RFootSphereTrs.gameObject);

        yield return new WaitForSeconds(3f);

        Hukidashi("D42090");//いつ踏み潰されてもおかしくないんだよ
        yield return new WaitForSeconds(2f);
        Hukidashi("D42095");//せーの
        yield return new WaitForSeconds(0.5f);
        NovelSetVis("D42050");//ばか馬鹿やめろ！
        yield return new WaitForSeconds(0.5f);

        #region //寸止め
        //GameObject Chieri_19_IK_RFoot_nearPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_19_IK_RFoot_nearPosObj") as GameObject;
        //IKRFootTargetTrs.DOLocalMove(Chieri_19_IK_RFoot_nearPosObj.transform.localPosition
        //    , 1f)
        //    .SetEase(Ease.InOutBack);
        //IKRFootTargetTrs.DOLocalRotateQuaternion(Chieri_19_IK_RFoot_nearPosObj.transform.rotation
        //    , 1f)
        //    .SetEase(Ease.InOutBack );

        //SEPlay("swing41_12低い_長い",RFootSphereTrs.gameObject);

        //yield return new WaitForSeconds(0.5f);

        ////黒フェード
        //FadeBlack(1, 0.3f);

        //while (isNovelSetVisIng) { yield return null; }

        ////黒フェード
        //FadeBlack(0, 2f);

        #endregion
        #region 横に踏み下ろし

        GameObject Chieri_20_IK_RFoot_nearMissPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chieri_20_IK_RFoot_nearMissPosObj") as GameObject;
        IKRFootTargetTrs.DOLocalMove(Chieri_20_IK_RFoot_nearMissPosObj.transform.localPosition
            , 0.6f)
            .SetEase(Ease.InCubic);
        IKRFootTargetTrs.DOLocalRotateQuaternion(Chieri_20_IK_RFoot_nearMissPosObj.transform.rotation
            , 0.6f)
            .SetEase(Ease.InCubic);
        #region 椅子少し近づく
        GameObject Chair_05_HumiPosObj = Resources.Load("_PosObj/D_Henai_Day2/Chair_05_HumiPosObj") as GameObject;
        ChairTrs.DOLocalMove(Chair_05_HumiPosObj.transform.localPosition
            , 1f)
            .SetEase(Ease.InOutBack);
        ChairTrs.DOLocalRotateQuaternion(Chair_05_HumiPosObj.transform.rotation
            , 1f)
            .SetEase(Ease.InOutBack);
        #endregion

        yield return new WaitForSeconds(0.2f);
        SEPlay("swing40_d_16低い", RFootSphereTrs.gameObject, 0.5f);
        yield return new WaitForSeconds(0.2f);
        SEPlay("bosu23_c_37mix_5倍", RFootSphereTrs.gameObject, 2f);
        yield return new WaitForSeconds(0.2f);

        //■揺れ1
        Vector3
            tmpDefCameraPos = CameraAnchorTrs.localPosition,
            tmpFlowCameraPos = new Vector3(0, 1.2f, 0);

        CameraAnchorTrs.DOLocalMove(tmpFlowCameraPos, 0.05f);
        yield return new WaitForSeconds(0.05f);
        CameraAnchorTrs.DOLocalMove(tmpDefCameraPos, 0.5f).SetEase(Ease.OutBounce);

        NovelSetVis("D42060");//！！・・・
        DelAll_Hukidashi();
        yield return new WaitForSeconds(3f);

        #endregion

        #endregion

        #region ほら、危ないでしょ？ 近づき わかってきた？

        Hukidashi("D42100");//ほら、危ないでしょ？
        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(1.5f, "f_笑顔口眉ジト目40", 0.1f, 2);

        #region 椅子ごと主人公へ近づく（踏み降ろし後なので最初と少し違う）
        //まず現在位置でLFootIKON(Rは踏み降ろしの後なのでそのまま)
        LateAction(() =>
        {
            IKLFootTargetTrs.position = GirlLFootTrs.position;
            IKLFootTargetTrs.eulerAngles = GirlLFootTrs.eulerAngles;
            DOTweenToIKEfPos(IKLFootEf, 1, 0);
            DOTweenToIKEfRot(IKLFootEf, 1, 0);
        });
        yield return null;
        //進んだ位置に足位置移動
        tmpDurTimeOne = 0.3f;
        IKLFootTargetTrs.DOLocalMoveX(IKLFoot_MaekagamiPosObj.transform.localPosition.x, tmpDurTimeOne / girlAnim.speed);
        IKLFootTargetTrs.DOLocalMoveZ(IKLFoot_MaekagamiPosObj.transform.localPosition.z, tmpDurTimeOne / girlAnim.speed);
        IKRFootTargetTrs.DOLocalMoveX(IKRFoot_MaekagamiPosObj.transform.localPosition.x, tmpDurTimeOne / girlAnim.speed);
        IKRFootTargetTrs.DOLocalMoveZ(IKRFoot_MaekagamiPosObj.transform.localPosition.z, tmpDurTimeOne / girlAnim.speed);
        IKLFootTargetTrs.DOLocalRotate(IKLFoot_MaekagamiPosObj.transform.localEulerAngles, tmpDurTimeOne / girlAnim.speed);
        IKRFootTargetTrs.DOLocalRotate(IKRFoot_MaekagamiPosObj.transform.localEulerAngles, tmpDurTimeOne / girlAnim.speed);

        //ついでにほんの少し浮かして降ろす
        IKLFootTargetTrs.DOLocalMoveY(IKLFoot_MaekagamiPosObj.transform.localPosition.y + 0.001f, (tmpDurTimeOne / 2) / girlAnim.speed)
            .OnComplete(() =>
            {
                IKLFootTargetTrs.DOLocalMoveY(IKLFoot_MaekagamiPosObj.transform.localPosition.y
                    , (tmpDurTimeOne / 2) / girlAnim.speed)
                    .SetEase(Ease.InSine);
            });
        IKRFootTargetTrs.DOLocalMoveY(IKRFoot_MaekagamiPosObj.transform.localPosition.y + 0.001f, (tmpDurTimeOne / 2) / girlAnim.speed)
            .OnComplete(() =>
            {
                IKRFootTargetTrs.DOLocalMoveY(IKRFoot_MaekagamiPosObj.transform.localPosition.y
                    , (tmpDurTimeOne / 2) / girlAnim.speed)
                    .SetEase(Ease.InSine);
            });

        yield return new WaitForSeconds((tmpDurTimeOne / 2) / girlAnim.speed);

        ChieriMotion("ATL椅子前かがみ", 1f, 0);

        //椅子ごと主人公へ近づく
        ChairTrs.DOLocalMove(Chair_04_ZensinPosObj.transform.localPosition
            , 1f / girlAnim.speed);
        ChairTrs.DOLocalRotateQuaternion(Chair_04_ZensinPosObj.transform.rotation
            , 1f / girlAnim.speed);

        #endregion

        #region //旧 椅子ごと主人公へ近づく
        //ChieriMotion("ATL椅子前かがみ", 0.5f, 0);

        //ChairTrs.DOLocalMove(Chair_04_ZensinPosObj.transform.localPosition
        //    , 1f / girlAnim.speed);
        //ChairTrs.DOLocalRotateQuaternion(Chair_04_ZensinPosObj.transform.rotation
        //    , 1f / girlAnim.speed);

        ////右足もどし
        //DOTweenToIKEfPos(IKRFootEf, 0, 3);
        //DOTweenToIKEfRot(IKRFootEf, 0, 3);
        #endregion

        SEPlay("ChairMove01", ChairTrs.gameObject);


        yield return new WaitForSeconds(1.5f);
        yield return KeyOrWait(3);

        Hukidashi("D42110");//わかってきた？
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        #endregion


        #region 混乱で声が出ない こんなに危ない 踏み潰されないためにはどうすればいいでしょう
        NovelSetVis("D42070");//「え、あ、え」
        while (isNovelSetVisIng) { yield return null; }

        Hukidashi("D42120");//こんなに危ないんだよ
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);


        #region 椅子ごと元の位置へ

        tmpDurTimeTwo = 1f;
        //まず足IKそのままで動き始める（IKは前かがみ状態前提）
        ChieriMotion("ATL椅子脚組みやめ直後ポーズ", 1f, 0);
        //椅子ごと元の位置へ
        ChairTrs.DOLocalMove(Chair_03_ZibetaRensyuPosObj.transform.localPosition
            , tmpDurTimeTwo / girlAnim.speed);
        ChairTrs.DOLocalRotateQuaternion(Chair_03_ZibetaRensyuPosObj.transform.rotation
            , tmpDurTimeTwo / girlAnim.speed);

        SEPlay("ChairMove01", ChairTrs.gameObject);

        yield return new WaitForSeconds((tmpDurTimeTwo / 3) / girlAnim.speed);

        //半分くらいでIKで足戻す
        //戻り位置に足移動
        IKLFootTargetTrs.DOLocalMoveX(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.x, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKLFootTargetTrs.DOLocalMoveZ(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.z, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKRFootTargetTrs.DOLocalMoveX(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.x, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKRFootTargetTrs.DOLocalMoveZ(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.z, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKLFootTargetTrs.DOLocalRotate(IKLFoot_AsikumiYameTyokugoPosObj.transform.localEulerAngles, (tmpDurTimeTwo / 2) / girlAnim.speed);
        IKRFootTargetTrs.DOLocalRotate(IKRFoot_AsikumiYameTyokugoPosObj.transform.localEulerAngles, (tmpDurTimeTwo / 2) / girlAnim.speed);

        //ついでにほんの少し浮かして降ろす
        IKLFootTargetTrs.DOLocalMoveY(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y + 0.001f, ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
            .OnComplete(() =>
            {
                IKLFootTargetTrs.DOLocalMoveY(IKLFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y
                    , ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
                    .SetEase(Ease.InSine);
            });
        IKRFootTargetTrs.DOLocalMoveY(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y + 0.001f, ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
            .OnComplete(() =>
            {
                IKRFootTargetTrs.DOLocalMoveY(IKRFoot_AsikumiYameTyokugoPosObj.transform.localPosition.y
                    , ((tmpDurTimeTwo / 2) / 2) / girlAnim.speed)
                    .SetEase(Ease.InSine);
            });

        yield return new WaitForSeconds((tmpDurTimeTwo / 2) / girlAnim.speed);


        #endregion
        #region //旧 椅子ごと元位置へ
        //ChieriMotion("ATL椅子脚組みやめ直後ポーズ", 1f, 0);
        ////椅子ごと元の位置へ
        //ChairTrs.DOLocalMove(Chair_03_ZibetaRensyuPosObj.transform.localPosition
        //    , 1f / girlAnim.speed);
        //ChairTrs.DOLocalRotateQuaternion(Chair_03_ZibetaRensyuPosObj.transform.rotation
        //    , 1f / girlAnim.speed);

        #endregion

        SEPlay("ChairMove01", ChairTrs.gameObject);



        yield return new WaitForSeconds(0.5f);


        Hukidashi("D42130");//踏み潰されないためには
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotion("ひとさし指差し", 0.5f, 5);

        #region 顔横に指立ての右手IKpos

        IKRHandTargetTrs.localPosition = KaoyokoYubitate01_IKRHand_Bip001RUpperArmObj.transform.localPosition;
        IKRHandTargetTrs.localEulerAngles = KaoyokoYubitate01_IKRHand_Bip001RUpperArmObj.transform.localEulerAngles;

        //右手
        DOTweenToIKEfPos(IKRHandEf, 1, 2);
        DOTweenToIKEfRot(IKRHandEf, 1, 2);

        #endregion

        Hukidashi("D42140");//どうすればいいでしょう？
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        yield return new WaitForSeconds(1f);

        NovelSetVis("D42080");//「ど、どうって」
        while (novelCurrentPageInt < 1) { yield return null; }

        //右手もどし
        DOTweenToIKEfPos(IKRHandEf, 0, 2);
        DOTweenToIKEfRot(IKRHandEf, 0, 2);
        ChieriMotion("f_笑顔口眉ジト目40", 0.1f, 2);
        ChieriMotion("_noData", 0.5f, 5);

        while (isNovelSetVisIng) { yield return null; }

        yield return new WaitForSeconds(1f);

        //椅子移動用 足IKオフ（同じ位置に足があるはずなので）
        DOTweenToIKEfPos(IKLFootEf, 0, 0);
        DOTweenToIKEfPos(IKRFootEf, 0, 0);
        DOTweenToIKEfRot(IKLFootEf, 0, 0);
        DOTweenToIKEfRot(IKRFootEf, 0, 0);
        yield return null;

        ChieriMotion("ATL椅子脚組み1開始", 0.5f, 0);
        SEPlay("swing41_12低い_長い", RFootSphereTrs.gameObject);

        yield return new WaitForSeconds(1f);

        NovelSetVis("D42090");//「お、わ……！」
        while (isNovelSetVisIng) { yield return null; }


        ChieriMotion("笑顔01口眉", 0.1f, 2);
        ChieriMotionDelay(2f, "f_笑顔口眉ジト目40", 0.1f, 2);
        Hukidashi("D42150");//はい、ヒント
        yield return new WaitForSeconds(1f); yield return KeyOrWait(3);

        NovelSetVis("D42100");//ヒントって・・
        while (isNovelSetVisIng) { yield return null; }

        #endregion


        AN_isGrapPowerMode = true;
        AN_isInputToggleMode = true;

        //■脚のぼりシステム コルーチン始動
        StartCoroutine(AsinoboriSystem());
        //rigid監視スタート
        yield return null;//Rigidbody付与待ち
        StartCoroutine(RigidReadSystem());

        //伏せに
        AN_PlayerHuseSphereCollider.enabled = true;
        AN_PlayerNormalCapsuleCollider.enabled = false;


        SEPlay(UISEObj, "UI_pin");
        //デバッグ
        Debug.Log(DB.nowEventNum + "終了");
        while (true)
        {
            if (Input.GetKeyDown(KeyCode.X))
            { ChieriMotion("ATL椅子脚組みやめ直後ポーズ", 0.5f, 0); }
            if (Input.GetKeyDown(KeyCode.V))
            { ChieriMotion("ATL椅子脚組み1開始", 0.5f, 0); }
            if (Input.GetKeyDown(KeyCode.B))
            { ChieriMotion("ATL椅子脚組み1→2", 0.5f, 0); }
            if (Input.GetKeyDown(KeyCode.N))
            { ChieriMotion("ATL椅子脚組み2→3", 0.5f, 0); }
            if (Input.GetKeyDown(KeyCode.M))
            { ChieriMotion("ATL椅子脚組み3→脚組みやめ直後ポーズ", 0.5f, 0); }
            if (Input.GetKeyDown(KeyCode.F))
            { ChieriMotion("ATL椅子前かがみ", 0.5f, 0); }
            if (Input.GetKeyDown(KeyCode.G))
            { ChieriMotion("ATL椅子前かがみ→ちょいかがみ", 0.5f, 0); }
            if (Input.GetKeyDown(KeyCode.H))
            { ChieriMotion("ATL椅子深く座りなおし", 0.5f, 0); }
            if (Input.GetKeyDown(KeyCode.J))
            { ChieriMotion("ATL椅子左足出し", 0.5f, 0); }

            if (Input.GetKeyDown(KeyCode.T))
            {
                CameraObjectsTrs.localPosition = Player_02_ZibetaRensyuu2PosObj.transform.localPosition;
                CameraObjectsTrs.localEulerAngles = Player_02_ZibetaRensyuu2PosObj.transform.localEulerAngles;
            }

            if (Input.GetKeyDown(KeyCode.Y))
            {
                if (AN_PlayerHuseSphereCollider.enabled == true)
                {
                    AN_PlayerHuseSphereCollider.enabled = false;
                    AN_PlayerNormalCapsuleCollider.enabled = true;
                }
                else if (AN_PlayerNormalCapsuleCollider.enabled == true)
                {
                    AN_PlayerHuseSphereCollider.enabled = true;
                    AN_PlayerNormalCapsuleCollider.enabled = false;
                }

            }
            if (Input.GetKeyDown(KeyCode.Comma))
            {
                //縮小
                FadeBlack(0.5f, 1f, false, Ease.InOutElastic, false);
                SEPlay("magic-attack-darkness1", 0.3f);
                yield return new WaitForSeconds(0.5f);
                SEPlay("magic-gravity2", 0.3f);

                Vector3 tmpScale = nowPlayerLocalScale / 1.5f;
                DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x, tmpScale, 3f);

                yield return new WaitForSeconds(1f);

                FadeBlack(0f, 2f, false, Ease.OutQuad, false);

            }
            if (Input.GetKeyDown(KeyCode.Period))
            {
                //拡大
                FadeBlack(0.5f, 1f, false, Ease.InOutElastic, false);
                SEPlay("magic-attack-darkness1", 0.3f);
                yield return new WaitForSeconds(0.5f);
                SEPlay("magic-gravity2", 0.3f);

                Vector3 tmpScale = nowPlayerLocalScale * 1.5f;
                DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x, tmpScale, 3f);

                yield return new WaitForSeconds(1f);

                FadeBlack(0f, 2f, false, Ease.OutQuad, false);

            }


            if (DB.isDebugMode)
            {
                if ((Input.GetAxis(DB.inputDict["移動ポイント前進後退アナログ"]) > 0))
                {
                    //拡大
                    FadeBlack(0.5f, 1f, false, Ease.InOutElastic, false);
                    SEPlay("magic-attack-darkness1", 0.3f);
                    yield return new WaitForSeconds(0.5f);
                    SEPlay("magic-gravity2", 0.3f);

                    Vector3 tmpScale = nowPlayerLocalScale * 1.5f;
                    DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x, tmpScale, 3f);

                    yield return new WaitForSeconds(1f);

                    FadeBlack(0f, 2f, false, Ease.OutQuad, false);

                }
                if (Input.GetAxis(DB.inputDict["移動ポイント前進後退アナログ"]) < 0)
                {
                    //縮小
                    FadeBlack(0.5f, 1f, false, Ease.InOutElastic, false);
                    SEPlay("magic-attack-darkness1", 0.3f);
                    yield return new WaitForSeconds(0.5f);
                    SEPlay("magic-gravity2", 0.3f);

                    Vector3 tmpScale = nowPlayerLocalScale / 1.5f;
                    DOTween.To(() => nowPlayerLocalScale, (x) => nowPlayerLocalScale = x, tmpScale, 3f);

                    yield return new WaitForSeconds(1f);

                    FadeBlack(0f, 2f, false, Ease.OutQuad, false);

                }
            }

            yield return null;

        };


        yield break;
    }

    IEnumerator BAD010()//BAD010 埋め合わせできない
    {
        if (debugEventMoveFlag == true)
        {
            //暗幕
            FadeBlack(1, 1);
        }
        EventReset();

        NovelSetVis("BAD010");//そのご宿題は終わり　→　埋め合わせなんて無理だった
        while (isNovelSetVisIng) { yield return null; }

        #region ■コンティニューセレクト
        GameObject ContinueSelectText = Instantiate(Resources.Load("EventSystem/GameSelect/ContinueSelectText") as GameObject, FadeCanvasObj.transform);
        DB.evMoveDelObjList.Add(ContinueSelectText);

        while (true)
        {
            if (Input.GetKeyDown(KeyCode.V))
            {
                Destroy(ContinueSelectText);

                EventMove("会話1_宿題");
                yield break;
            }
            else if (Input.GetKeyDown(KeyCode.B))
            {
                Destroy(ContinueSelectText);

                EventMove("タイトル");
                yield break;
            }
            yield return null;
        }
        #endregion

        yield break;

    }

    IEnumerator FracturingTest01()//ビル破壊テスト01
    {
        if (debugEventMoveFlag == true)
        {
        }
        EventReset();
        //開幕
        FadeBlack(0, 0f);

        #region 設定
        ////■オブジェクト群と事前設定
        //HwVisLockBool = true;//宿題ロック
        //                     //小物消し
        //GrasstableTrs.gameObject.SetActive(false);
        //DrillTrs.gameObject.SetActive(false);
        //Drill_chieriTrs.gameObject.SetActive(false);
        //SharpenObj.SetActive(false);
        //KeshigomuObj.SetActive(false);
        //HomeworkObjectsTrs.gameObject.SetActive(false);

        //智恵理ゼロ位置解除とアニメスピード
        DB.isChieriPosLock = false;
        girlAnim.speed = 0.4f;

        //大きさ
        nowPlayerLocalScale = new Vector3(0.02f, 0.02f, 0.02f);
        //nowPlayerLocalScl = new Vector3(0.0002f, 0.0002f, 0.0002f);
        //智恵理モーション
        ChieriMotion("かくれおに探し歩きrootポーズ", 0f, 0);

        //智恵理位置
        GameObject Chieri01PosObj = Resources.Load("Debug/FracturingTest01/FracturingTest01/PosObj/Chieri01PosObj") as GameObject;
        GirlTrs.localPosition = Chieri01PosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri01PosObj.transform.localEulerAngles;
        //プレイヤー位置
        GameObject Player01PosObj = Resources.Load("Debug/FracturingTest01/FracturingTest01/PosObj/Player01PosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player01PosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player01PosObj.transform.localEulerAngles;

        #endregion


        //デバッグ起動してなければ起動する
        if (DB.isDebugMode == false) { StartCoroutine(DebugModeSystem()); }
        //足IKガイド表示
        Debug_FracturingTest01Obj.SetActive(true);

        IKLFootTargetTrs.SetParent(Debug_FracturingTest01Obj.transform);
        SEPlay("UI_pin");
        //デバッグ
        Debug.Log(DB.nowEventNum + "終了");
        while (true)
        {
            if (Input.GetKeyDown(KeyCode.V))
            {
                #region IKや位置リセット
                //DOTween用IKリストクリア
                FollowDOMoveFromTrsList.Clear();
                //DOTween自体も全部クリア
                DOTween.Clear();

                //IK系切る
                StartCoroutine(killAll_FainalIK());

                //位置戻し
                GirlTrs.localPosition = Chieri01PosObj.transform.localPosition;
                GirlTrs.localEulerAngles = Chieri01PosObj.transform.localEulerAngles;
                ChieriMotion("かくれおに探し歩きrootポーズ", 0f, 0);

                #endregion
                ChieriMotion("かくれおに跨ぎ原点", 0f, 0);//元はrootでRotもRootNode～～だった
            }
            if (Input.GetKeyDown(KeyCode.B))
            {
                #region IKや位置リセット
                //DOTween用IKリストクリア
                FollowDOMoveFromTrsList.Clear();
                //DOTween自体も全部クリア
                DOTween.Clear();

                //IK系切る
                StartCoroutine(killAll_FainalIK());

                //位置戻し
                GirlTrs.localPosition = Chieri01PosObj.transform.localPosition;
                GirlTrs.localEulerAngles = Chieri01PosObj.transform.localEulerAngles;
                ChieriMotion("かくれおに探し歩きrootポーズ", 0f, 0);
                #endregion
                ChieriMotion("かくれおに探し歩きroot開始", 0f, 0);
            }

            if (Input.GetKeyDown(KeyCode.F))
            {
                #region IKや位置リセット
                //DOTween用IKリストクリア
                FollowDOMoveFromTrsList.Clear();
                //DOTween自体も全部クリア
                DOTween.Clear();

                //IK系切る
                StartCoroutine(killAll_FainalIK());

                //位置戻し
                GirlTrs.localPosition = Chieri01PosObj.transform.localPosition;
                GirlTrs.localEulerAngles = Chieri01PosObj.transform.localEulerAngles;
                ChieriMotion("かくれおに探し歩きrootポーズ", 0f, 0);
                #endregion
                #region IK始動
                //Bend
                FBBIK.solver.leftLegChain.bendConstraint.weight = 0.9f;

                IKLFootTargetTrs.localPosition = F_IK_A.transform.localPosition;
                IKLFootTargetTrs.rotation = F_IK_A.transform.rotation;

                //左足
                DOTweenToIKEfPos(IKLFootEf, 1, 0);
                DOTweenToIKEfRot(IKLFootEf, 1, 0);

                IKLFootTargetTrs.DOLocalMove(F_IK_B.transform.localPosition
                    , 1.5f)
                    .SetEase(Ease.InCubic);
                IKLFootTargetTrs.DORotateQuaternion(F_IK_B.transform.rotation
                    , 1.5f)
                    .SetEase(Ease.InCubic);
                #endregion
            }
            if (Input.GetKeyDown(KeyCode.G))
            {
                #region IKや位置リセット
                //DOTween用IKリストクリア
                FollowDOMoveFromTrsList.Clear();
                //DOTween自体も全部クリア
                DOTween.Clear();

                //IK系切る
                StartCoroutine(killAll_FainalIK());

                //位置戻し
                GirlTrs.localPosition = Chieri01PosObj.transform.localPosition;
                GirlTrs.localEulerAngles = Chieri01PosObj.transform.localEulerAngles;
                ChieriMotion("かくれおに探し歩きrootポーズ", 0f, 0);
                #endregion
                #region IK始動
                //Bend
                FBBIK.solver.leftLegChain.bendConstraint.weight = 0.9f;

                IKLFootTargetTrs.localPosition = G_IK_A.transform.localPosition;
                IKLFootTargetTrs.rotation = G_IK_A.transform.rotation;

                //左足
                DOTweenToIKEfPos(IKLFootEf, 1, 0);
                DOTweenToIKEfRot(IKLFootEf, 1, 0);

                IKLFootTargetTrs.DOLocalMove(G_IK_B.transform.localPosition
                    , 1.5f);
                IKLFootTargetTrs.DORotateQuaternion(G_IK_B.transform.rotation
                    , 1.5f);
                #endregion
            }
            if (Input.GetKeyDown(KeyCode.H))
            {
                if (Debug_FracturingTest01Obj.activeSelf == true)
                { Debug_FracturingTest01Obj.SetActive(false); }
                else { Debug_FracturingTest01Obj.SetActive(true); }
            }
            if (Input.GetKeyDown(KeyCode.N))
            {
                #region IKや位置リセット
                //DOTween用IKリストクリア
                FollowDOMoveFromTrsList.Clear();
                //DOTween自体も全部クリア
                DOTween.Clear();

                //IK系切る
                StartCoroutine(killAll_FainalIK());

                //位置戻し
                GirlTrs.localPosition = Chieri01PosObj.transform.localPosition;
                GirlTrs.localEulerAngles = Chieri01PosObj.transform.localEulerAngles;
                ChieriMotion("かくれおに探し歩きrootポーズ", 0f, 0);
                #endregion
                GameObject[] tmpFObjs
                    = GameObject.FindGameObjectsWithTag("ResetFracturedObject");

                foreach (GameObject f in tmpFObjs)
                { f.GetComponent<FracturedObject>().ResetChunks(); }

            }
            if (Input.GetKeyDown(KeyCode.M))
            {
                GameObject[] tmpFObjs
                    = GameObject.FindGameObjectsWithTag("ResetFracturedObject");

                foreach (GameObject f in tmpFObjs)
                { f.GetComponent<FracturedObject>().ResetChunks(); }

            }
            if (Input.GetKeyDown(KeyCode.K))
            {
                Hukidashi("C5030");
                yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            }
            if (Input.GetKeyDown(KeyCode.L))
            {
                Hukidashi("C5010");

            }
            if (Input.GetKeyDown(KeyCode.I))
            {
                #region 選択肢 えーと おいしかった？
                sentakuListNum = 99;//初期化
                NovelSetVis("■D3030");
                while (isNovelSentakushiWait) { yield return null; }
                Sentakushi("■D3030a", Mathf.Infinity);
                Sentakushi("■D3030b", Mathf.Infinity);
                while (sentakuListNum == 99) { yield return null; }
                yield return null;
                switch (sentakuListNum)
                {
                    case 0://選択肢a
                        NovelSetVis("D3030a");
                        while (novelCurrentPageInt < 1) { yield return null; }
                        yield return new WaitForSeconds(1);
                        Hukidashi("D3030a1");//うん？
                        ChieriMotion("ん？", 0.2f, 2);
                        while (isNovelSetVisIng) { yield return null; }

                        break;
                    case 1://選択肢b
                        NovelSetVis("D3030b");
                        yield return new WaitForSeconds(1);
                        Hukidashi("D3030b1");//おいしかったよ
                        ChieriMotion("笑顔01口眉", 0.1f, 2);
                        ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
                        while (isNovelSetVisIng) { yield return null; }
                        //Hukidashi("D3030b2");//公にも食べさせなきゃ
                        //yield return KeyOrWait(5);

                        while (isNovelSetVisIng) { yield return null; }
                        break;
                }
                #endregion

            }
            if (Input.GetKeyDown(KeyCode.O))
            {
            }
            yield return null;


        };



        Debug.Log("脚のぼりメインイベントコルーチン終了");
        yield return new WaitForSeconds(Mathf.Infinity);

        //終了処理
        //大きさ
        nowPlayerLocalScale = ANstartPrevPlayerSize;

        EventMove();

    }
    IEnumerator FracturingTest02()//ビル破壊テスト02
    {
        if (debugEventMoveFlag == true)
        {
        }
        EventReset();

        #region 暗幕中設定

        //大きさ
        nowPlayerLocalScale = new Vector3(0.01f, 0.01f, 0.01f);
        //nowPlayerLocalScl = new Vector3(0.0002f, 0.0002f, 0.0002f);

        //プレイヤー位置
        GameObject Player01PosObj = Resources.Load("Debug/FracturingTest01/FracturingTest01/PosObj/Player01PosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player01PosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player01PosObj.transform.localEulerAngles;


        #region 智恵理
        //智恵理ゼロ位置とアニメスピード
        DB.isChieriPosLock = false;
        girlAnim.speed = doorAnim.speed = 0.4f;
        //智恵理モーション
        //ChieriMotion("かくれおに探し歩きrootポーズ", 0f, 0);
        //ChieriMotion("ドア入室", 0f, 0); doorAnim.CrossFadeInFixedTime("ドア開き閉じ", 0f, 0);



        //位置
        GameObject Chieri01PosObj = Resources.Load("Debug/FracturingTest01/FracturingTest01/PosObj/Chieri01PosObj") as GameObject;
        GirlTrs.localPosition = Chieri01PosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri01PosObj.transform.localEulerAngles;

        #region SoundObj左足に付与
        //WindnoiseSoundObj付与
        GameObject LFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlLFootTrs);
        DB.evMoveDelObjList.Add(LFootWindnoiseSoundObj);
        LFootWindnoiseSoundObj.name = nameof(LFootWindnoiseSoundObj);
        LFootWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpLFootWindnoiseSound = LFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpLFootWindnoiseSound.aSource.maxDistance = 180;
        tmpLFootWindnoiseSound.pitchMax = 1f;
        tmpLFootWindnoiseSound.pitchUpRateAdjustFloat = 2;
        tmpLFootWindnoiseSound.pitchDownRateAdjustFloat = 100;

        tmpLFootWindnoiseSound.aSource.volume = 0f;
        #endregion
        #region SoundObj右足に付与
        //WindnoiseSoundObj付与
        GameObject RFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRFootTrs);
        DB.evMoveDelObjList.Add(RFootWindnoiseSoundObj);
        RFootWindnoiseSoundObj.name = nameof(RFootWindnoiseSoundObj);
        RFootWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpRFootWindnoiseSound = RFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpRFootWindnoiseSound.aSource.maxDistance = 180;
        tmpRFootWindnoiseSound.pitchMax = 1f;
        tmpRFootWindnoiseSound.pitchUpRateAdjustFloat = 2;
        tmpRFootWindnoiseSound.pitchDownRateAdjustFloat = 100;

        tmpRFootWindnoiseSound.aSource.volume = 0f;
        #endregion

        #endregion

        #region 小物消し
        GrasstableTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);
        Drill_chieriTrs.gameObject.SetActive(false);
        KeshigomuObj.SetActive(false);
        isHomeworkSystem = false;
        CarpetTrs.gameObject.SetActive(false);
        SchoolBagTrs.gameObject.SetActive(false);
        SharpenObj.SetActive(false);
        #endregion

        #region ビル設置
        //■100倍フラクチャーオブジェ（ビルオブジェ）フォルダ取得設置（シーンになければリソースから）
        GameObject FracturedTest02Folder_100 = null;

        if (GameObject.Find("FracturedTest02Folder_100"))
        { FracturedTest02Folder_100 = GameObject.Find("FracturedTest02Folder_100"); }
        else //リソースから
        {
            FracturedTest02Folder_100 =
                Instantiate(Resources.Load("_FractureTest02/FracturedTest02Folder_100") as GameObject
                , GameObjectsTrs, false);
        }

        ////手前のビル取得
        //GameObject temaeObj
        //    = FracturedTest02Folder_100.transform.Find("FracturedObjectBigChunk_temae").gameObject;
        //FracturedObject temaeFracturedObject = temaeObj.GetComponent<FracturedObject>();


        //■1000倍フラクチャーオブジェ（ビルオブジェ）フォルダ取得設置（シーンになければリソースから）
        GameObject FracturedTest02Folder_1000 = null;

        if (GameObject.Find("FracturedTest02Folder_1000"))
        { FracturedTest02Folder_1000 = GameObject.Find("FracturedTest02Folder_1000"); }
        else //リソースから
        {
            FracturedTest02Folder_1000 =
                Instantiate(Resources.Load("_FractureTest02/FracturedTest02Folder_1000") as GameObject
                , GameObjectsTrs, false);
        }

        FracturedTest02Folder_100.SetActive(true);
        FracturedTest02Folder_1000.SetActive(false);

        #endregion

        #region ■隠れ鬼移動システム事前ON（ロードかかるほど重くなったので）
        isSeePointTempOff = true;//ポインタ表示OFF
        KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
        //ローディング待ち
        while (isKOSystemLoading) { yield return null; }
        #endregion

        bool is1000Change = false;
        #endregion

        //開幕
        FadeBlack(0, 2f);

        tmpRFootWindnoiseSound.aSource.volume = 1f;
        tmpLFootWindnoiseSound.aSource.volume = 1f;


        ////デバッグ起動してなければ起動する
        //if (DB.isDebugMode == false) { StartCoroutine(DebugModeSystem()); }
        ////足IKガイド表示
        //Debug_FracturingTest01Obj.SetActive(true);
        //IKLFootTargetTrs.SetParent(Debug_FracturingTest01Obj.transform);


        #region ■隠れ鬼移動システムON
        isSeePointTempOff = false;//ポインタ表示

        //移動場所00オン
        int tmpListInt = KO_KakurePosObjsList.Count - 1;//末尾
        KO_KakurePosObjsList[tmpListInt].SetActive(true);

        //ポイント出現 演出
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[tmpListInt].transform.Find("Frac00Pos").gameObject);
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[tmpListInt].transform.Find("Frac01Pos").gameObject);

        ////歩きスピードにしてモーションも歩きに
        //playerMoveSpeed = 1;
        //isPlayerWalk = true;

        //走りスピードにしてモーションも走りに
        playerMoveSpeed = 4;
        isKO_PlayerWalk = false;

        #region 
        //GameObject tmpObj = KO_KakurePosObjsList[1].transform.Find("IsuMae01Sphere").gameObject;
        //tmpObj.transform.Find("RootNaviEffect").gameObject.SetActive(true);
        //tmpObj.transform.Find("RootNaviEffectGreen").gameObject.SetActive(false);
        //tmpObj.transform.Find("RootNaviEffectStop").gameObject.SetActive(false);
        //tmpObj.GetComponent<CapsuleCollider>().enabled = true;
        #endregion

        #endregion

        //ボタンで切り替え用
        bool isChieriPlayerLookIK = true;

        //デバッグ開始
        Debug.Log("イベント" + DB.nowEventNum + "デバッグボタン受付開始");
        while (true)
        {
            #region //以前の
            //if (Input.GetKeyDown(KeyCode.V))
            //{
            //    #region IKや位置リセット
            //    //DOTween用IKリストクリア
            //    FollowDOMoveFromTrsList.Clear();
            //    //DOTween自体も全部クリア
            //    DOTween.Clear();

            //    //IK系切る
            //    StartCoroutine(killAll_FainalIK());

            //    //位置戻し
            //    GirlTrs.localPosition = Chieri01PosObj.transform.localPosition;
            //    GirlTrs.localEulerAngles = Chieri01PosObj.transform.localEulerAngles;
            //    ChieriMotion("かくれおに探し歩きrootポーズ", 0f, 0);

            //    #endregion
            //    ChieriMotion("かくれおに跨ぎ原点", 0f, 0);//元はrootでRotもRootNode～～だった
            //}
            //if (Input.GetKeyDown(KeyCode.B))
            //{
            //    #region IKや位置リセット
            //    //DOTween用IKリストクリア
            //    FollowDOMoveFromTrsList.Clear();
            //    //DOTween自体も全部クリア
            //    DOTween.Clear();

            //    //IK系切る
            //    StartCoroutine(killAll_FainalIK());

            //    //位置戻し
            //    GirlTrs.localPosition = Chieri01PosObj.transform.localPosition;
            //    GirlTrs.localEulerAngles = Chieri01PosObj.transform.localEulerAngles;
            //    ChieriMotion("かくれおに探し歩きrootポーズ", 0f, 0);
            //    #endregion
            //    ChieriMotion("かくれおに探し歩きroot開始", 0f, 0);
            //}

            //if (Input.GetKeyDown(KeyCode.F))
            //{
            //    #region IKや位置リセット
            //    //DOTween用IKリストクリア
            //    FollowDOMoveFromTrsList.Clear();
            //    //DOTween自体も全部クリア
            //    DOTween.Clear();

            //    //IK系切る
            //    StartCoroutine(killAll_FainalIK());

            //    //位置戻し
            //    GirlTrs.localPosition = Chieri01PosObj.transform.localPosition;
            //    GirlTrs.localEulerAngles = Chieri01PosObj.transform.localEulerAngles;
            //    ChieriMotion("かくれおに探し歩きrootポーズ", 0f, 0);
            //    #endregion
            //    #region IK始動
            //    //Bend
            //    FBBIK.solver.leftLegChain.bendConstraint.weight = 0.9f;

            //    IKLFootTargetTrs.localPosition = F_IK_A.transform.localPosition;
            //    IKLFootTargetTrs.rotation = F_IK_A.transform.rotation;

            //    //左足
            //    DOTweenToIKEfPos(IKLFootEf, 1, 0);
            //    DOTweenToIKEfRot(IKLFootEf, 1, 0);

            //    IKLFootTargetTrs.DOLocalMove(F_IK_B.transform.localPosition
            //        , 1.5f)
            //        .SetEase(Ease.InCubic);
            //    IKLFootTargetTrs.DORotateQuaternion(F_IK_B.transform.rotation
            //        , 1.5f)
            //        .SetEase(Ease.InCubic);
            //    #endregion
            //}
            //if (Input.GetKeyDown(KeyCode.G))
            //{
            //    #region IKや位置リセット
            //    //DOTween用IKリストクリア
            //    FollowDOMoveFromTrsList.Clear();
            //    //DOTween自体も全部クリア
            //    DOTween.Clear();

            //    //IK系切る
            //    StartCoroutine(killAll_FainalIK());

            //    //位置戻し
            //    GirlTrs.localPosition = Chieri01PosObj.transform.localPosition;
            //    GirlTrs.localEulerAngles = Chieri01PosObj.transform.localEulerAngles;
            //    ChieriMotion("かくれおに探し歩きrootポーズ", 0f, 0);
            //    #endregion
            //    #region IK始動
            //    //Bend
            //    FBBIK.solver.leftLegChain.bendConstraint.weight = 0.9f;

            //    IKLFootTargetTrs.localPosition = G_IK_A.transform.localPosition;
            //    IKLFootTargetTrs.rotation = G_IK_A.transform.rotation;

            //    //左足
            //    DOTweenToIKEfPos(IKLFootEf, 1, 0);
            //    DOTweenToIKEfRot(IKLFootEf, 1, 0);

            //    IKLFootTargetTrs.DOLocalMove(G_IK_B.transform.localPosition
            //        , 1.5f);
            //    IKLFootTargetTrs.DORotateQuaternion(G_IK_B.transform.rotation
            //        , 1.5f);
            //    #endregion
            //}
            //if (Input.GetKeyDown(KeyCode.H))
            //{
            //    if (Debug_FracturingTest01Obj.activeSelf == true)
            //    { Debug_FracturingTest01Obj.SetActive(false); }
            //    else { Debug_FracturingTest01Obj.SetActive(true); }
            //}
            //if (Input.GetKeyDown(KeyCode.N))
            //{
            //    #region IKや位置リセット
            //    //DOTween用IKリストクリア
            //    FollowDOMoveFromTrsList.Clear();
            //    //DOTween自体も全部クリア
            //    DOTween.Clear();

            //    //IK系切る
            //    StartCoroutine(killAll_FainalIK());

            //    //位置戻し
            //    GirlTrs.localPosition = Chieri01PosObj.transform.localPosition;
            //    GirlTrs.localEulerAngles = Chieri01PosObj.transform.localEulerAngles;
            //    ChieriMotion("かくれおに探し歩きrootポーズ", 0f, 0);
            //    #endregion
            //    GameObject[] tmpFObjs
            //        = GameObject.FindGameObjectsWithTag("ResetFracturedObject");

            //    foreach (GameObject f in tmpFObjs)
            //    { f.GetComponent<FracturedObject>().ResetChunks(); }

            //}
            //if (Input.GetKeyDown(KeyCode.M))
            //{
            //    GameObject[] tmpFObjs
            //        = GameObject.FindGameObjectsWithTag("ResetFracturedObject");

            //    foreach (GameObject f in tmpFObjs)
            //    { f.GetComponent<FracturedObject>().ResetChunks(); }

            //}
            //if (Input.GetKeyDown(KeyCode.K))
            //{
            //    Hukidashi("C5030");
            //    yield return new WaitForSeconds(1); yield return KeyOrWait(3);
            //}
            //if (Input.GetKeyDown(KeyCode.L))
            //{
            //    Hukidashi("C5010");

            //}
            //if (Input.GetKeyDown(KeyCode.I))
            //{
            //    #region 選択肢 えーと おいしかった？
            //    sentakuListNum = 99;//初期化
            //    NovelSetVis("■D3030");
            //    while (isNovelSentakushiWait) { yield return null; }
            //    Sentakushi("■D3030a", Mathf.Infinity);
            //    Sentakushi("■D3030b", Mathf.Infinity);
            //    while (sentakuListNum == 99) { yield return null; }
            //    yield return null;
            //    switch (sentakuListNum)
            //    {
            //        case 0://選択肢a
            //            NovelSetVis("D3030a");
            //            while (novelCurrentPageInt < 1) { yield return null; }
            //            yield return new WaitForSeconds(1);
            //            Hukidashi("D3030a1");//うん？
            //            ChieriMotion("ん？", 0.2f, 2);
            //            while (isNovelSetVisIng) { yield return null; }

            //            break;
            //        case 1://選択肢b
            //            NovelSetVis("D3030b");
            //            yield return new WaitForSeconds(1);
            //            Hukidashi("D3030b1");//おいしかったよ
            //            ChieriMotion("笑顔01口眉", 0.1f, 2);
            //            ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
            //            while (isNovelSetVisIng) { yield return null; }
            //            //Hukidashi("D3030b2");//公にも食べさせなきゃ
            //            //yield return KeyOrWait(5);

            //            while (isNovelSetVisIng) { yield return null; }
            //            break;
            //    }
            //    #endregion

            //}
            //if (Input.GetKeyDown(KeyCode.O))
            //{
            //}

            #endregion

            #region 02版
            //IKプレイヤー見切り替え
            if (Input.GetKeyDown(KeyCode.I))
            {
                if (isChieriPlayerLookIK == false)
                {
                    isChieriPlayerLookIK = true;
                    //IKプレイヤー見る
                    FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
                    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
                    FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
                    DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);
                }
                else
                {
                    isChieriPlayerLookIK = false;
                    DOTweenToLAIKSEyes(LAIKEyeS, 0, 1);
                    DOTweenToLAIKSHead(LAIKHeadS, 0, 1);
                }
            }
            if (Input.GetKeyDown(KeyCode.V))
            {
                GirlTrs.localPosition = GirlTrs.localEulerAngles = Vector3.zero;
                ChieriMotion("ドア入室", 0f, 0); doorAnim.CrossFadeInFixedTime("ドア開き閉じ", 0f, 0);
            }
            if (Input.GetKeyDown(KeyCode.B))
            {
                GirlTrs.localPosition = GirlTrs.localEulerAngles = Vector3.zero;
                ChieriMotion("ドアからデスク横へ歩く", 0f, 0);
            }
            //リセット
            if (Input.GetKeyDown(KeyCode.N))
            {
                //消して Prefabからクローン
                Destroy(FracturedTest02Folder_100);
                FracturedTest02Folder_100 =
                    Instantiate(Resources.Load("_FractureTest02/FracturedTest02Folder_100") as GameObject
                    , GameObjectsTrs, false);
                Destroy(FracturedTest02Folder_1000);
                FracturedTest02Folder_1000 =
                    Instantiate(Resources.Load("_FractureTest02/FracturedTest02Folder_1000") as GameObject
                    , GameObjectsTrs, false);

                //足跡削除
                foreach (Transform k in chieriFootStepObjFolder.transform)
                { Destroy(k.gameObject); }

                #region //以前のリセット (破片消える仕様になったため 使わなくなった)
                ////FractureObj
                //GameObject[] tmpFObjs
                //    = GameObject.FindGameObjectsWithTag("ResetFracturedObject");
                //foreach (GameObject f in tmpFObjs)
                //{
                //    if (f.GetComponent<FracturedObject>())
                //    { f.GetComponent<FracturedObject>().ResetChunks(); }
                //}

                ////ResetCrashObj群
                //tmpFObjs
                //    = GameObject.FindGameObjectsWithTag("ResetCrashObj");
                //foreach (GameObject f in tmpFObjs)
                //{
                //    if (f.GetComponent<GuardRailCrash>())
                //    { f.GetComponent<GuardRailCrash>().Resets(); }
                //    if (f.GetComponent<CustomFractureActiveTriggerCollider>())
                //    { f.GetComponent<CustomFractureActiveTriggerCollider>().Resets(); }
                //}
                #endregion
                if (is1000Change)
                {
                    FracturedTest02Folder_100.SetActive(false);
                    FracturedTest02Folder_1000.SetActive(true);
                    nowPlayerLocalScale = new Vector3(0.001f, 0.001f, 0.001f);
                }
                else
                {
                    FracturedTest02Folder_100.SetActive(true);
                    FracturedTest02Folder_1000.SetActive(false);
                    nowPlayerLocalScale = new Vector3(0.01f, 0.01f, 0.01f);
                }


            }

            //100倍1000倍チェンジ
            if (Input.GetKeyDown(KeyCode.M))
            {

                //消して Prefabからクローン
                Destroy(FracturedTest02Folder_100);
                FracturedTest02Folder_100 =
                    Instantiate(Resources.Load("_FractureTest02/FracturedTest02Folder_100") as GameObject
                    , GameObjectsTrs, false);
                Destroy(FracturedTest02Folder_1000);
                FracturedTest02Folder_1000 =
                    Instantiate(Resources.Load("_FractureTest02/FracturedTest02Folder_1000") as GameObject
                    , GameObjectsTrs, false);

                //足跡削除
                foreach (Transform k in chieriFootStepObjFolder.transform)
                { Destroy(k.gameObject); }

                #region //以前のリセット
                ////FractureObj
                //GameObject[] tmpFObjs
                //    = GameObject.FindGameObjectsWithTag("ResetFracturedObject");
                //foreach (GameObject f in tmpFObjs)
                //{
                //    if (f.GetComponent<FracturedObject>())
                //    { f.GetComponent<FracturedObject>().ResetChunks(); }
                //}

                ////ResetCrashObj群
                //tmpFObjs
                //    = GameObject.FindGameObjectsWithTag("ResetCrashObj");
                //foreach (GameObject f in tmpFObjs)
                //{
                //    if (f.GetComponent<GuardRailCrash>())
                //    { f.GetComponent<GuardRailCrash>().Resets(); }
                //    if (f.GetComponent<CustomFractureActiveTriggerCollider>())
                //    { f.GetComponent<CustomFractureActiveTriggerCollider>().Resets(); }
                //}
                #endregion

                if (is1000Change == false)
                {
                    is1000Change = true;
                    FracturedTest02Folder_100.SetActive(false);
                    FracturedTest02Folder_1000.SetActive(true);
                    nowPlayerLocalScale = new Vector3(0.001f, 0.001f, 0.001f);
                }
                else
                {
                    is1000Change = false;
                    FracturedTest02Folder_100.SetActive(true);
                    FracturedTest02Folder_1000.SetActive(false);
                    nowPlayerLocalScale = new Vector3(0.01f, 0.01f, 0.01f);
                }

            }

            //イベント動作確認
            if (Input.GetKeyDown(KeyCode.F))
            {
                #region ChieriTimelineTest03Walk
                FadeBlack(1, 0.5f);
                yield return new WaitForSeconds(0.5f);

                DB.isChieriPosLock = false;

                #region 暗幕設定

                #region 智恵理
                GameObject Chieri00_StartPosObj
                    = Resources.Load("_PosObj/0510YokokuCity01Walk/Chieri00_StartPosObj") as GameObject;
                GirlTrs.localPosition = Chieri00_StartPosObj.transform.localPosition;
                GirlTrs.localEulerAngles = Chieri00_StartPosObj.transform.localEulerAngles;
                #endregion


                #endregion

                StartCoroutine(GirlAnimReadSystem());

                FadeBlack(0, 0.5f);

                ChieriMotion("出現見渡し", 0f, 0);
                while (nowGirlAnimClipName != "出現見渡し") { yield return null; }
                while (girlAnimNomTime <= 1) { yield return null; }

                SEPlay("UI_pin");
                yield return KeyOrWait(0);

                ChieriMotion("腰に手を当てる", 0f, 0);
                while (nowGirlAnimClipName != "腰に手を当てる") { yield return null; }
                while (girlAnimNomTime <= 1) { yield return null; }

                SEPlay("UI_pin");
                yield return KeyOrWait(0);

                ChieriMotion("一歩目足上げ", 0f, 0);
                while (nowGirlAnimClipName != "一歩目足上げ") { yield return null; }
                while (girlAnimNomTime <= 1) { yield return null; }

                SEPlay("UI_pin");
                yield return KeyOrWait(0);

                ChieriMotion("一歩目足下ろし", 0f, 0);
                while (nowGirlAnimClipName != "一歩目足下ろし") { yield return null; }
                while (girlAnimNomTime <= 1) { yield return null; }

                SEPlay("UI_pin");
                yield return KeyOrWait(0);

                ChieriMotion("踏み後足上げ", 0f, 0);
                while (nowGirlAnimClipName != "踏み後足上げ") { yield return null; }
                while (girlAnimNomTime <= 1) { yield return null; }

                SEPlay("UI_pin");
                yield return KeyOrWait(0);

                ChieriMotion("歩き出し", 0f, 0);
                while (nowGirlAnimClipName != "歩き出し") { yield return null; }
                while (girlAnimNomTime <= 1) { yield return null; }

                SEPlay("UI_pin");
                yield return KeyOrWait(0);

                FadeBlack(1, 0.5f);
                yield return new WaitForSeconds(0.5f);

                #region 終了暗幕設定
                //位置 もとに
                GirlTrs.localPosition = GirlTrs.localEulerAngles = Vector3.zero;
                #endregion
                FadeBlack(0, 0.5f);

                #endregion


                #region //表情台詞付き歩き
                //ChieriMotion("ドアからデスク横へ歩く", 0f, 0);
                //ChieriMotion("f_笑顔目開き", 0.7f, 2);

                //#region IKプレイヤ見（頭少し下）
                //ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
                //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs, 0f);
                //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);

                //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, 1f);
                //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1f);
                //#endregion


                //StartCoroutine(GirlAnimReadSystem());
                //while (nowGirlAnimClipName != "ドアからデスク横へ歩く") { yield return null; }
                //while (girlAnimNomTime <= 0.5f) { yield return null; }
                //isGirlAnimReadSystem = false;

                ////IKOFF
                //ChieriMotion("まばたき", 0f, 4); blinkTime = 0;
                //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 0f);
                //DOTweenToLAIKSHead(LAIKHeadS, 0, 2f);

                //ChieriMotion("f_はぁ・・怒り眉", 0.7f, 2);
                //Hukidashi("FT0010");//こんなところに
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //NovelSetVis("FractureTest0010");//確かに
                //while (isNovelSetVisIng) { yield return null; }

                //Hukidashi("FT0020");//さて、と
                //yield return new WaitForSeconds(1); yield return KeyOrWait(3);

                //FadeBlack(1, 2);
                //yield return new WaitForSeconds(2);

                //#region リセット

                ////消して Prefabからクローン
                //Destroy(FracturedTest02Folder_100);
                //FracturedTest02Folder_100 =
                //    Instantiate(Resources.Load("_FractureTest02/FracturedTest02Folder_100") as GameObject
                //    , GameObjectsTrs, false);
                //Destroy(FracturedTest02Folder_1000);
                //FracturedTest02Folder_1000 =
                //    Instantiate(Resources.Load("_FractureTest02/FracturedTest02Folder_1000") as GameObject
                //    , GameObjectsTrs, false);

                ////足跡削除
                //foreach (Transform k in chieriFootStepObjFolder.transform)
                //{ Destroy(k.gameObject); }

                //#region //以前のリセット
                //////FractureObj
                ////GameObject[] tmpFObjs
                ////    = GameObject.FindGameObjectsWithTag("ResetFracturedObject");
                ////foreach (GameObject f in tmpFObjs)
                ////{
                ////    if (f.GetComponent<FracturedObject>())
                ////    { f.GetComponent<FracturedObject>().ResetChunks(); }
                ////}

                //////ResetCrashObj群
                ////tmpFObjs
                ////    = GameObject.FindGameObjectsWithTag("ResetCrashObj");
                ////foreach (GameObject f in tmpFObjs)
                ////{
                ////    if (f.GetComponent<GuardRailCrash>())
                ////    { f.GetComponent<GuardRailCrash>().Resets(); }
                ////    if (f.GetComponent<CustomFractureActiveTriggerCollider>())
                ////    { f.GetComponent<CustomFractureActiveTriggerCollider>().Resets(); }
                ////}
                //#endregion

                //if (is1000Change == false)
                //{
                //    is1000Change = true;
                //    FracturedTest02Folder_100.SetActive(false);
                //    FracturedTest02Folder_1000.SetActive(true);
                //    nowPlayerLocalScale = new Vector3(0.001f, 0.001f, 0.001f);
                //}
                //else
                //{
                //    is1000Change = false;
                //    FracturedTest02Folder_100.SetActive(true);
                //    FracturedTest02Folder_1000.SetActive(false);
                //    nowPlayerLocalScale = new Vector3(0.01f, 0.01f, 0.01f);
                //}

                //#endregion

                //FadeBlack(0, 2);
                //ChieriMotion("ドア入室", 0f, 0); doorAnim.CrossFadeInFixedTime("ドア開き閉じ", 0f, 0);

                //yield return new WaitForSeconds(2);
                #endregion
            }

            //タイムラインテスト四つんばい
            if (Input.GetKeyDown(KeyCode.G))
            {
                DB.isChieriPosLock = false;
                GameObject ChieriTimelineTest01YotsunbaiPosObj
                    = Resources.Load("_PosObj/_TimelineTest/ChieriTimelineTest01YotsunbaiPosObj") as GameObject;
                GirlTrs.localPosition = ChieriTimelineTest01YotsunbaiPosObj.transform.localPosition;
                GirlTrs.localEulerAngles = ChieriTimelineTest01YotsunbaiPosObj.transform.localEulerAngles;

                ChieriMotion("ChieriTimelineTest01Yotsunbai", 0, 0);

            }
            //タイムラインテストしゃがみこみ（Sonkyo）
            if (Input.GetKeyDown(KeyCode.H))
            {
                DB.isChieriPosLock = false;
                GameObject ChieriTimelineTest02SonkyoPosObj
                    = Resources.Load("_PosObj/_TimelineTest/ChieriTimelineTest02SonkyoPosObj") as GameObject;
                GirlTrs.localPosition = ChieriTimelineTest02SonkyoPosObj.transform.localPosition;
                GirlTrs.localEulerAngles = ChieriTimelineTest02SonkyoPosObj.transform.localEulerAngles;

                ChieriMotion("ChieriTimelineTest02Sonkyo", 0, 0);

            }

            //鳥テスト
            if (Input.GetKeyDown(KeyCode.K))
            {
                if (GameObject.Find("crow") != null)
                {
                    GameObject crowObj = GameObject.Find("crow");
                    Animator crowAnim = crowObj.GetComponent<Animator>();

                    PlayableDirector crowPD = GameObject.Find("Crows").transform.Find("Timeline").GetComponent<PlayableDirector>();
                    crowPD.Play();
                }
            }


            ////キャラ生成
            //if (Input.GetKeyDown(KeyCode.G))
            //{
            //    //生成
            //    GameObject Mob00Taichi
            //        = Instantiate(Resources.Load("_FractureTest02/MobRun/Mob00Taichi") as GameObject
            //        , GameObjectsTrs, false);
            //    DB.evDelObjList.Add(Mob00Taichi);
            //    Mob00Taichi.name = nameof(Mob00Taichi);
            //    Mob00Taichi.transform.localScale = CameraObjectsTrs.localScale;
            //    Mob00Taichi.transform.Find("Taichi").GetComponent<Animator>().CrossFadeInFixedTime("sprint_00_Re", 0, 0);

            //    #region 移動
            //    //位置
            //    GameObject MobRunStartPosObj
            //        = Resources.Load("_FractureTest02/MobRun/MobRunStartPosObj") as GameObject;
            //    //位置
            //    GameObject MobRunGoalPosObj
            //        = Resources.Load("_FractureTest02/MobRun/MobRunGoalPosObj") as GameObject;

            //    Mob00Taichi.transform.localPosition = MobRunStartPosObj.transform.localPosition;
            //    Mob00Taichi.transform.DOLocalMove(MobRunGoalPosObj.transform.localPosition
            //        , 10)
            //        .SetEase(Ease.Linear)
            //        .OnComplete(() => { if (Mob00Taichi) { Destroy(Mob00Taichi); } });

            //    //方向は設置してから
            //    yield return null;
            //    Mob00Taichi.transform.LookAt(MobRunGoalPosObj.transform.position);


            //    #endregion


            //}


            #endregion

            yield return null;

        };



        Debug.Log("脚のぼりメインイベントコルーチン終了");
        yield return new WaitForSeconds(Mathf.Infinity);

        //終了処理
        //大きさ
        nowPlayerLocalScale = ANstartPrevPlayerSize;

        EventMove();

    }
    IEnumerator CityMapTest00()//都市マップ並べテスト00
    {
        if (debugEventMoveFlag == true)
        {
        }
        EventReset();

        #region 暗幕中設定

        //大きさ
        nowPlayerLocalScale = new Vector3(0.01f, 0.01f, 0.01f);
        //nowPlayerLocalScl = new Vector3(0.0002f, 0.0002f, 0.0002f);

        //プレイヤー位置
        GameObject Player01PosObj = Resources.Load("Debug/FracturingTest01/FracturingTest01/PosObj/Player01PosObj") as GameObject;
        CameraObjectsTrs.localPosition = Player01PosObj.transform.localPosition;
        CameraObjectsTrs.localEulerAngles = Player01PosObj.transform.localEulerAngles;


        #region 智恵理
        //智恵理ゼロ位置とアニメスピード
        DB.isChieriPosLock = true;
        girlAnim.speed = doorAnim.speed = 0.4f;
        //智恵理モーション
        //ChieriMotion("かくれおに探し歩きrootポーズ", 0f, 0);
        //ChieriMotion("ドア入室", 0f, 0); doorAnim.CrossFadeInFixedTime("ドア開き閉じ", 0f, 0);



        //位置
        GameObject Chieri01PosObj = Resources.Load("Debug/FracturingTest01/FracturingTest01/PosObj/Chieri01PosObj") as GameObject;
        GirlTrs.localPosition = Chieri01PosObj.transform.localPosition;
        GirlTrs.localEulerAngles = Chieri01PosObj.transform.localEulerAngles;

        #region SoundObj左足に付与
        //WindnoiseSoundObj付与
        GameObject LFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlLFootTrs);
        DB.evMoveDelObjList.Add(LFootWindnoiseSoundObj);
        LFootWindnoiseSoundObj.name = nameof(LFootWindnoiseSoundObj);
        LFootWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpLFootWindnoiseSound = LFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpLFootWindnoiseSound.aSource.maxDistance = 180;
        tmpLFootWindnoiseSound.pitchMax = 1f;
        tmpLFootWindnoiseSound.pitchUpRateAdjustFloat = 2;
        tmpLFootWindnoiseSound.pitchDownRateAdjustFloat = 100;

        tmpLFootWindnoiseSound.aSource.volume = 0f;
        #endregion
        #region SoundObj右足に付与
        //WindnoiseSoundObj付与
        GameObject RFootWindnoiseSoundObj = Instantiate(Resources.Load("Main/Prefab/SoundObj/WindnoiseSoundObj") as GameObject
            , GirlRFootTrs);
        DB.evMoveDelObjList.Add(RFootWindnoiseSoundObj);
        RFootWindnoiseSoundObj.name = nameof(RFootWindnoiseSoundObj);
        RFootWindnoiseSoundObj.transform.localPosition = Vector3.zero;

        //設定
        WindnoiseSound tmpRFootWindnoiseSound = RFootWindnoiseSoundObj.GetComponent<WindnoiseSound>();
        tmpRFootWindnoiseSound.aSource.maxDistance = 180;
        tmpRFootWindnoiseSound.pitchMax = 1f;
        tmpRFootWindnoiseSound.pitchUpRateAdjustFloat = 2;
        tmpRFootWindnoiseSound.pitchDownRateAdjustFloat = 100;

        tmpRFootWindnoiseSound.aSource.volume = 0f;
        #endregion

        #endregion

        #region 小物消し
        GrasstableTrs.gameObject.SetActive(false);
        DrillTrs.gameObject.SetActive(false);
        Drill_chieriTrs.gameObject.SetActive(false);
        KeshigomuObj.SetActive(false);
        isHomeworkSystem = false;
        CarpetTrs.gameObject.SetActive(false);
        SchoolBagTrs.gameObject.SetActive(false);
        SharpenObj.SetActive(false);
        #endregion

        #region ビル設置
        ////■100倍フラクチャーオブジェ（ビルオブジェ）フォルダ取得設置（シーンになければリソースから）
        //GameObject FracturedTest02Folder_100 = null;

        //if (GameObject.Find("FracturedTest02Folder_100"))
        //{ FracturedTest02Folder_100 = GameObject.Find("FracturedTest02Folder_100"); }
        //else //リソースから
        //{
        //    FracturedTest02Folder_100 =
        //        Instantiate(Resources.Load("_FractureTest02/FracturedTest02Folder_100") as GameObject
        //        , GameObjectsTrs, false);
        //}

        //////手前のビル取得
        ////GameObject temaeObj
        ////    = FracturedTest02Folder_100.transform.Find("FracturedObjectBigChunk_temae").gameObject;
        ////FracturedObject temaeFracturedObject = temaeObj.GetComponent<FracturedObject>();


        ////■1000倍フラクチャーオブジェ（ビルオブジェ）フォルダ取得設置（シーンになければリソースから）
        //GameObject FracturedTest02Folder_1000 = null;

        //if (GameObject.Find("FracturedTest02Folder_1000"))
        //{ FracturedTest02Folder_1000 = GameObject.Find("FracturedTest02Folder_1000"); }
        //else //リソースから
        //{
        //    FracturedTest02Folder_1000 =
        //        Instantiate(Resources.Load("_FractureTest02/FracturedTest02Folder_1000") as GameObject
        //        , GameObjectsTrs, false);
        //}

        //FracturedTest02Folder_100.SetActive(true);
        //FracturedTest02Folder_1000.SetActive(false);

        #endregion

        #region ■隠れ鬼移動システム事前ON（ロードかかるほど重くなったので）
        isSeePointTempOff = true;//ポインタ表示OFF
        KO_KakurePointSerchCorCoroutine = StartCoroutine(KakureOniSystemLoad());
        //ローディング待ち
        while (isKOSystemLoading) { yield return null; }
        #endregion

        bool is1000Change = false;
        #endregion

        //開幕
        FadeBlack(0, 2f);

        tmpRFootWindnoiseSound.aSource.volume = 1f;
        tmpLFootWindnoiseSound.aSource.volume = 1f;


        ////デバッグ起動してなければ起動する
        //if (DB.isDebugMode == false) { StartCoroutine(DebugModeSystem()); }
        ////足IKガイド表示
        //Debug_FracturingTest01Obj.SetActive(true);
        //IKLFootTargetTrs.SetParent(Debug_FracturingTest01Obj.transform);


        #region ■隠れ鬼移動システムON
        isSeePointTempOff = false;//ポインタ表示

        //移動場所00オン
        int tmpListInt = 9;
        KO_KakurePosObjsList[tmpListInt].SetActive(true);

        //ポイント出現 演出
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[tmpListInt].transform.Find("Frac00Pos").gameObject);
        KO_NewPosPointObjVis
            (KO_KakurePosObjsList[tmpListInt].transform.Find("Frac01Pos").gameObject);

        ////歩きスピードにしてモーションも歩きに
        //playerMoveSpeed = 1;
        //isPlayerWalk = true;

        //走りスピードにしてモーションも走りに
        playerMoveSpeed = 4;
        isKO_PlayerWalk = false;

        #region 
        //GameObject tmpObj = KO_KakurePosObjsList[1].transform.Find("IsuMae01Sphere").gameObject;
        //tmpObj.transform.Find("RootNaviEffect").gameObject.SetActive(true);
        //tmpObj.transform.Find("RootNaviEffectGreen").gameObject.SetActive(false);
        //tmpObj.transform.Find("RootNaviEffectStop").gameObject.SetActive(false);
        //tmpObj.GetComponent<CapsuleCollider>().enabled = true;
        #endregion

        #endregion


        //デバッグ開始
        Debug.Log("イベント" + DB.nowEventNum + "デバッグボタン受付開始");
        while (true)
        {

            #region 02版
            if (Input.GetKeyDown(KeyCode.V))
            {
                ChieriMotion("ドア入室", 0f, 0); doorAnim.CrossFadeInFixedTime("ドア開き閉じ", 0f, 0);
            }
            if (Input.GetKeyDown(KeyCode.B))
            {
                ChieriMotion("ドアからデスク横へ歩く", 0f, 0);
            }
            //リセット
            if (Input.GetKeyDown(KeyCode.N))
            {

            }

            //100倍1000倍チェンジ
            if (Input.GetKeyDown(KeyCode.M))
            {



            }

            //表情台詞付き歩き
            if (Input.GetKeyDown(KeyCode.F))
            {

            }

            #endregion

            yield return null;


        };



        Debug.Log("脚のぼりメインイベントコルーチン終了");
        yield return new WaitForSeconds(Mathf.Infinity);

        //終了処理
        //大きさ
        nowPlayerLocalScale = ANstartPrevPlayerSize;

        EventMove();

    }

    IEnumerator UTLTest()//UTLテスト
    {
        if (debugEventMoveFlag == true)
        {
        }

        EventReset();
        HukidashiNovelDistanceChange(0.5f, 0);

        FadeBlack(1, 0);
        #region 暗幕設定
        DB.isChieriPosLock = true;
        //ChieriMotion("座り待機", 0f, 0);

        //プレイヤー大きさ
        nowPlayerLocalScale = DB.playerScale_City01;

        #region //宿題テーブル小物消し
        ////宿題 位置に
        //Drill_chieriTrs.gameObject.SetActive(false);
        //DrillTrs.gameObject.SetActive(false);
        //GrasstableTrs.gameObject.SetActive(false);
        //SharpenObj.gameObject.SetActive(false);
        //KeshigomuObj.SetActive(false);
        #endregion

        #endregion

        ////環境音フェードイン
        //KankyouBGMVolumer(1f, 3f);

        #region PD再生

        ////Prefabにして取り出し（TimelineAssetをスクリプトのみで読み出して再生が難しかったので）
        //GameObject UTLTestAObj
        //    = Instantiate(Resources.Load("Main/Timeline/UTLTest/UTLTestAObj") as GameObject);
        //UTLTestAObj.name = nameof(UTLTestAObj);

        //都市テスト用にヒエラルキーにあるObjのタイムラインを再生
        GameObject UTLTestAObj
            = GameObject.Find("UTLTest_83_TimelineObj");


        PlayableDirector UTLTestA
            = UTLTestAObj.GetComponent<PlayableDirector>();



        #endregion

        //プレイヤーをタイムラインObjと同じ大きさに
        nowPlayerLocalScale = UTLTestAObj.transform.localScale;

        //開幕
        FadeBlack(0, 1);


        #region リセット用オブジェクト読み込み　Fracturedなど
        //FractureObj
        GameObject[] tmpResetObjs
            = GameObject.FindGameObjectsWithTag("ResetFracturedObject");

        List<GameObject>
            cloneResetObjs = new List<GameObject>();

        foreach (GameObject f in tmpResetObjs)
        {
            GameObject tmpObj = Instantiate(f, f.transform.parent);
            tmpObj.SetActive(false);
            cloneResetObjs.Add(tmpObj);
        }

        #endregion




        UTLTestA.Play();

        //コードでやるならここ 　↑↓コメントアウト

        while (isPDStopped == false)
        {
            #region Fracリセット
            if (Input.GetKeyDown(KeyCode.N))
            {
                //削除してクローンからコピペ
                for (int i = 0; i < tmpResetObjs.Length; i++)
                {
                    Destroy(tmpResetObjs[i]);
                    GameObject tmpObj = Instantiate(cloneResetObjs[i], cloneResetObjs[i].transform.parent);
                    tmpObj.SetActive(true);

                    ////コリダー設定など再設定（いらなかった）（なぜかFracObjがActiveOnにならないだけだった）
                    //tmpObj.transform.GetChild(0).GetComponent<CustomFractureActiveTriggerColliderGenerater>().Set();
                    //tmpObj.transform.GetChild(0).GetComponent<CustomFractureDetachEvent>().Set();

                    tmpResetObjs[i] = tmpObj;
                }

                ////ResetCrashObj群
                //tmpFObjs
                //    = GameObject.FindGameObjectsWithTag("ResetCrashObj");
                //foreach (GameObject f in tmpFObjs)
                //{
                //    if (f.GetComponent<GuardRailCrash>())
                //    { f.GetComponent<GuardRailCrash>().Resets(); }
                //    //if (f.GetComponent<CustomFractureActiveTriggerCollider>())
                //    //{ f.GetComponent<CustomFractureActiveTriggerCollider>().Resets(); }
                //}

            }
            if (Input.GetKeyDown(KeyCode.B))
            {
                ChieriMotion("_noData", 0, 0);
                UTLTestA.time = 0;
                UTLTestA.Play();
            }
            #endregion

            yield return null;
        }


        //暗幕
        FadeBlack(1, 1);
        yield return new WaitForSeconds(3);

        isFlowChartEventMove = true;
        EventMove("タイトル", true, true);


        yield break;
    }


    #region 削除
    //IEnumerator yokokuStart()//予告開始(旧)
    //{
    //    if (debugEventMoveFlag == true)
    //    {
    //    }
    //    EventReset();
    //    yield return new WaitForSeconds(0.1f);

    //    //■■■■■■■■■■■■■白幕前提

    //    //黒幕に
    //    FadeBlack(1, 0);
    //    FadeWhite(0, 0);


    //    EventMove("予告 ベッドの下");

    //    yield break;
    //}
    //IEnumerator yokokuBednoShita()//予告 ベッドの下
    //{
    //    if (debugEventMoveFlag == true)
    //    {
    //    }
    //    EventReset();
    //    yield return new WaitForSeconds(0.1f);


    //    //■■■■■■■■■■■■■暗幕前提
    //    //智恵理0位置ロック解除
    //    DB.isChieriPosLock = false; ChieriMotion("立ちスマホ取り出し", 0f, 0);
    //    ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);


    //    //予告用トランスフォーム情報取得
    //    Transform YokokuChieriPossTrs = GameObject.Find("YokokuChieriPoss").transform,
    //              YokokuCameraPossTrs = GameObject.Find("YokokuCameraPoss").transform;
    //    List<Transform> YokokuChieriTrsList = new List<Transform>(),
    //                    YokokuCameraTrsList = new List<Transform>();
    //    foreach (Transform k in YokokuChieriPossTrs)
    //    { YokokuChieriTrsList.Add(k.transform); }
    //    foreach (Transform k in YokokuCameraPossTrs)
    //    { YokokuCameraTrsList.Add(k.transform); }



    //    //予告01位置に
    //    GirlTrs.localPosition = YokokuChieriTrsList[2].transform.localPosition;
    //    GirlTrs.localEulerAngles = YokokuChieriTrsList[2].transform.localEulerAngles;
    //    CameraObjectsTrs.localPosition = YokokuCameraTrsList[2].localPosition;
    //    CameraObjectsTrs.localEulerAngles = YokokuCameraTrsList[2].localEulerAngles;
    //    nowPlayerLocalScale = YokokuCameraTrsList[2].localScale;

    //    //スマホオン
    //    ChieriSumahoObj.SetActive(true);
    //    //スマホ見
    //    FollowDOMove(IKLookAtEyeTargetTrs, ChieriSumahoObj.transform);
    //    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
    //    FollowDOMove(IKLookAtHeadTargetTrs, ChieriSumahoObj.transform);
    //    DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);


    //    //小物消し
    //    if (GameObject.Find("Speaker") != null)
    //    { GameObject.Find("Speaker").SetActive(false); }
    //    if (GameObject.Find("Combined Meshes") != null)
    //    { GameObject.Find("Combined Meshes").SetActive(false); }

    //    HomeworkTrs.gameObject.SetActive(false);
    //    Drill_chieriTrs.gameObject.SetActive(false);

    //    //fog
    //    RenderSettings.fogDensity = 0.001f;


    //    //右下テキスト透明
    //    RightUnderText.color = new Color(1, 1, 1, 0);
    //    yield return null;
    //    //右下テキスト入れ替え 予告
    //    RightUnderText.text = serihuDict["UI1000"];
    //    //表示
    //    RightUnderText.color = new Color(1, 1, 1, 1);

    //    yield return new WaitForSeconds(2);

    //    //サブタイトル
    //    SubTitleVis(true, serihuDict["S0030"]);

    //    yield return new WaitForSeconds(2);

    //    //「えーと今の大きさは」
    //    Hukidashi("Y0110");
    //    yield return new WaitForSeconds(2);

    //    girlAnim.speed = 0.35f;

    //    //■■■■■■■■■■■■■■■フェードイン開幕
    //    FadeWhite(0, 1, Ease.InOutQuad);
    //    FadeBlack(0, 1, Ease.InOutQuad);
    //    yield return new WaitForSeconds(5);

    //    SubTitleVis(false, 2);

    //    //「5.1cm」
    //    Hukidashi("Y0120");
    //    ChieriMotion("立ちスマホしまい", 0.4f, 0);

    //    //目だけに
    //    FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
    //    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
    //    DOTweenToLAIKSHead(LAIKHeadS, 0, 1);
    //    yield return new WaitForSeconds(3);

    //    Destroy(subTitleTextObj);

    //    //スマホオフ
    //    ChieriSumahoObj.SetActive(false);
    //    yield return new WaitForSeconds(3);

    //    //「うーん・・」
    //    Hukidashi("Y0130");
    //    ChieriMotion("監視向き変更開始", 0.4f, 0);
    //    yield return new WaitForSeconds(5);

    //    //「あ、じゃあベッドの足裏？」
    //    Hukidashi("Y0140");
    //    ChieriMotion("片膝立ち宿題促し開始", 0.4f, 0);
    //    //アニメスピードだんだん速く
    //    DOTween.To(() => girlAnim.speed, (x) => girlAnim.speed = x,
    //        0.5f, 3f);
    //    //■暗転
    //    FadeBlack(1, 4.5f, Ease.InOutQuad);
    //    yield return new WaitForSeconds(1f);
    //    SEPlay("bosu23_fire02__goro03_胸山潰し2000倍_長く");
    //    yield return new WaitForSeconds(1.5f);


    //    yield return null;



    //    yield return new WaitForSeconds(2);
    //    DelAll_Hukidashi();
    //    yield return new WaitForSeconds(3);


    //    EventMove("予告 行ってきます");

    //    yield break;
    //}
    //IEnumerator yokokuIttekimasu()//予告 行ってきます
    //{
    //    if (debugEventMoveFlag == true)
    //    {
    //    }
    //    EventReset();
    //    yield return new WaitForSeconds(0.1f);

    //    //智恵理0位置ロック解除
    //    DB.isChieriPosLock = false;

    //    //■■■■■■■■■■■■■暗幕前提

    //    //予告用トランスフォーム情報取得
    //    Transform YokokuChieriPossTrs = GameObject.Find("YokokuChieriPoss").transform,
    //              YokokuCameraPossTrs = GameObject.Find("YokokuCameraPoss").transform;
    //    List<Transform> YokokuChieriTrsList = new List<Transform>(),
    //                    YokokuCameraTrsList = new List<Transform>();
    //    foreach (Transform k in YokokuChieriPossTrs)
    //    { YokokuChieriTrsList.Add(k.transform); }
    //    foreach (Transform k in YokokuCameraPossTrs)
    //    { YokokuCameraTrsList.Add(k.transform); }

    //    ChieriMotion("背比べ待機02", 0f, 0);
    //    ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);

    //    //予告01位置に
    //    GirlTrs.localPosition = YokokuChieriTrsList[1].transform.localPosition;
    //    GirlTrs.localEulerAngles = YokokuChieriTrsList[1].transform.localEulerAngles;
    //    CameraObjectsTrs.localPosition = YokokuCameraTrsList[1].localPosition;
    //    CameraObjectsTrs.localEulerAngles = YokokuCameraTrsList[1].localEulerAngles;
    //    nowPlayerLocalScale = YokokuCameraTrsList[1].localScale;

    //    //プレイヤー見
    //    FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
    //    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
    //    FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
    //    DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

    //    //小物消し
    //    if (GameObject.Find("Speaker") != null)
    //    { GameObject.Find("Speaker").SetActive(false); }

    //    HomeworkTrs.gameObject.SetActive(false);
    //    Drill_chieriTrs.gameObject.SetActive(false);

    //    //fogの強さ
    //    RenderSettings.fogDensity = 0.001f;

    //    //右下テキスト透明
    //    RightUnderText.color = new Color(1, 1, 1, 0);
    //    yield return null;
    //    //右下テキスト入れ替え 予告
    //    RightUnderText.text = serihuDict["UI1000"];
    //    //表示
    //    RightUnderText.color = new Color(1, 1, 1, 1);

    //    yield return new WaitForSeconds(2);

    //    //サブタイトル
    //    SubTitleVis(true, serihuDict["S0040"]);

    //    //「それじゃあ私学校行ってくるから」
    //    Hukidashi("Y0010");
    //    yield return new WaitForSeconds(2);


    //    girlAnim.speed = 0.5f;

    //    //■■■■■■■■■■■■■■■フェードイン開幕
    //    FadeWhite(0, 1, Ease.InOutQuad);
    //    FadeBlack(0, 1, Ease.InOutQuad);
    //    yield return new WaitForSeconds(3);

    //    SubTitleVis(false, 2);

    //    //「お留守番お願いね」
    //    SHukidashi("Y0020");
    //    ChieriMotion("笑顔01口眉", 0.1f, 2);
    //    ChieriMotionDelay(2, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
    //    yield return new WaitForSeconds(3);

    //    Destroy(subTitleTextObj);


    //    #region////選択肢「いってらっしゃい」「俺は逃げる」
    //    Sentakushi("■Y0020a", Mathf.Infinity);
    //    Sentakushi("■Y0020b", Mathf.Infinity);
    //    sentakuListNum = 99;//初期化
    //                        //選択肢選ばれるまでループ
    //    while (sentakuListNum == 99) { yield return null; }
    //    yield return null;
    //    switch (sentakuListNum)
    //    {
    //        case 0://選択肢a
    //            yield return new WaitForSeconds(1f);
    //            ChieriMotion("笑顔01口眉", 0.1f, 2);
    //            ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し

    //            //「うんうん慣れてきた」
    //            Hukidashi("Y0020a1");
    //            yield return KeyOrWait(3);

    //            //「いってきます」
    //            Hukidashi("Y0020a2");
    //            ChieriMotion("笑顔01口眉", 0.1f, 2);
    //            ChieriMotionDelay(1, "笑顔01口眉_目閉じない", 0.1f, 2);//時間差表情戻し
    //            ChieriMotion("立ち髪かきあげ", 0.5f, 0);
    //            ChieriMotionDelay(2, "監視リラックス1開始", 1f, 0);//時間差表情戻し
    //            yield return new WaitForSeconds(3);

    //            break;

    //        case 1://選択肢b
    //            yield return new WaitForSeconds(0.5f);
    //            ChieriMotion("f_あ！ほら！口普通キョトン", 0.2f, 2);
    //            IKLookAtBodyTargetTrs.localPosition = new Vector3(-2.37f, 0, 1.63f);

    //            yield return new WaitForSeconds(2);
    //            ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);
    //            yield return new WaitForSeconds(1);
    //            DOTweenToLAIKSBody(LAIKBodyS, 0.2f, 2);

    //            yield return new WaitForSeconds(1);
    //            Hukidashi("Y0020b2");

    //            yield return new WaitForSeconds(2);
    //            break;
    //    }
    //    #endregion


    //    //■暗転
    //    FadeBlack(1, 1, Ease.InOutQuad);

    //    yield return new WaitForSeconds(2);
    //    //オフ直前 fadeキャンバス移動
    //    GameObject.Find("FadeBlackQuad").transform.localPosition = new Vector3(0, 0, -0.1f);
    //    GameObject.Find("FadeWhiteQuad").transform.localPosition = new Vector3(0, 0, -0.1f);


    //    yield return new WaitForSeconds(2);


    //    //IK消し
    //    DOTweenToLAIKSBody(LAIKBodyS, 0, 0);
    //    DOTweenToLAIKSEyes(LAIKEyeS, 0, 0);
    //    DOTweenToLAIKSHead(LAIKHeadS, 0, 0);

    //    EventMove("予告 転送都市");
    //    yield break;
    //}
    //IEnumerator yokokuTensouToshi()//予告 転送都市
    //{
    //    if (debugEventMoveFlag == true)
    //    {
    //    }
    //    EventReset();
    //    yield return new WaitForSeconds(0.1f);

    //    //智恵理0位置ロック解除
    //    DB.isChieriPosLock = false;
    //    girlAnim.speed = 0.5f;

    //    //都市表示
    //    Combined_MeshesTrs.gameObject.SetActive(true);




    //    //■■■■■■■■■■■■■暗幕前提
    //    ChieriMotion("予告四つん這い近づき→立ち", 0f, 0);
    //    ChieriMotion("笑顔01口眉_目閉じない", 0.1f, 2);


    //    //予告用トランスフォーム情報取得
    //    Transform YokokuChieriPossTrs = GameObject.Find("YokokuChieriPoss").transform,
    //              YokokuCameraPossTrs = GameObject.Find("YokokuCameraPoss").transform;
    //    List<Transform> YokokuChieriTrsList = new List<Transform>(),
    //                    YokokuCameraTrsList = new List<Transform>();
    //    foreach (Transform k in YokokuChieriPossTrs)
    //    { YokokuChieriTrsList.Add(k.transform); }
    //    foreach (Transform k in YokokuCameraPossTrs)
    //    { YokokuCameraTrsList.Add(k.transform); }


    //    yield return null;
    //    //予告 位置に
    //    GirlTrs.localPosition = YokokuChieriTrsList[0].transform.localPosition;
    //    GirlTrs.localEulerAngles = YokokuChieriTrsList[0].transform.localEulerAngles;
    //    CameraObjectsTrs.localPosition = YokokuCameraTrsList[0].localPosition;
    //    CameraObjectsTrs.localEulerAngles = YokokuCameraTrsList[0].localEulerAngles;
    //    nowPlayerLocalScale = YokokuCameraTrsList[0].localScale;


    //    //小物消し
    //    if (GameObject.Find("Speaker") != null)
    //    { GameObject.Find("Speaker").SetActive(false); }
    //    if (GameObject.Find("Grasstable") != null)
    //    { GameObject.Find("Grasstable").SetActive(false); }
    //    HomeworkTrs.gameObject.SetActive(false);
    //    Drill_chieriTrs.gameObject.SetActive(false);
    //    DrillTrs.gameObject.SetActive(false);
    //    KeshigomuObj.SetActive(false);
    //    SharpenObj.SetActive(false);

    //    //fogの強さ
    //    RenderSettings.fogDensity = 0.004f;


    //    //右下テキスト透明
    //    RightUnderText.color = new Color(1, 1, 1, 0);
    //    yield return null;
    //    //右下テキスト入れ替え 予告
    //    RightUnderText.text = serihuDict["UI1000"];
    //    //表示
    //    RightUnderText.color = new Color(1, 1, 1, 1);

    //    //プレイヤー見
    //    FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
    //    DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
    //    FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs);
    //    DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);


    //    //サブタイトル
    //    SubTitleVis(true, serihuDict["S0050"]);

    //    //足音揺れコルーチンスタート
    //    Coroutine
    //        tmpAsiotoYureCor = StartCoroutine(yokokuTensouToshia());

    //    //■■■■■■■■■■■■■■■フェードイン開幕
    //    FadeWhite(0, 2, Ease.InOutQuad);
    //    FadeBlack(0, 2, Ease.InOutQuad);

    //    //「安心して」
    //    Hukidashi("Y0205");
    //    yield return KeyOrWait(6);

    //    SubTitleVis(false, 2);

    //    //「転送したのは建物だけ」
    //    Hukidashi("Y0207");
    //    yield return KeyOrWait(5);
    //    yield return new WaitForSeconds(1f);

    //    //「小学校の頃」
    //    Hukidashi("Y0210");
    //    yield return KeyOrWait(5);

    //    //「アリの観察」
    //    Hukidashi("Y0215");
    //    yield return KeyOrWait(5);


    //    //「こっちでも昔から」
    //    Hukidashi("Y0220");
    //    yield return KeyOrWait(5);

    //    //「最後に処分」
    //    Hukidashi("Y0230");
    //    yield return KeyOrWait(5);
    //    yield return new WaitForSeconds(1f);

    //    //「こっちでいえば数日」
    //    Hukidashi("Y0240");
    //    yield return KeyOrWait(5);

    //    //「変なのかな」
    //    Hukidashi("Y0250");
    //    yield return KeyOrWait(5);
    //    yield return new WaitForSeconds(0.5f);
    //    TereHoho();
    //    ChieriMotion("あはは・・・", 0.1f, 2);
    //    FollowDOMove(IKLookAtHeadTargetTrs, VRCameraTrs, new Vector3(0.05f, -0.15f, 0), 2f);
    //    ChieriMotionDelay(2f, "f_笑顔01口眉下がり_目閉じない", 0.2f, 2);

    //    Destroy(subTitleTextObj);

    //    //「一匹のアリを好きになっちゃった」
    //    Hukidashi("Y0255");
    //    yield return KeyOrWait(5);
    //    yield return new WaitForSeconds(0.5f);

    //    //「「生存した優秀な生態は」」
    //    Hukidashi("Y0260");
    //    StartCoroutine(GirlAnimReadSystem());
    //    while (girlAnimNomTime < 1) { yield return null; }
    //    isGirlAnimReadSystem = false;
    //    yield return KeyOrWait(5);

    //    //「実例のない」
    //    Hukidashi("Y0270");
    //    ChieriMotion("片膝立ち宿題促し開始", 0.4f, 0);
    //    SEPlay("bom32_長く_100倍山側面滑らし_遠く");
    //    FadeBlack(1, 5);
    //    yield return new WaitForSeconds(3);
    //    SEPlay("bom33_goro03_mix_1000倍足音");
    //    CameraObjectsTrs.DOShakePosition(2.0f, 0.012f, 10, 90.0f);
    //    yield return KeyOrWait(5);

    //    //「頑張って生き残って」
    //    Hukidashi("Y0280");
    //    yield return new WaitForSeconds(3);

    //    DelAll_Hukidashi();
    //    yield return new WaitForSeconds(1);
    //    //「星に行こう？」
    //    SEPlay("bom33_goro03_mix_1000倍足音");

    //    Hukidashi("Y0290");
    //    yield return new WaitForSeconds(4);
    //    DelAll_Hukidashi();

    //    //足音揺れコルーチンストップ
    //    StopCoroutine(tmpAsiotoYureCor);


    //    yield return new WaitForSeconds(3);
    //    EventMove("予告終了");



    //    yield break;
    //}
    //IEnumerator yokokuTensouToshia()//足音と揺れ
    //{
    //    SEPlay("bosu31_bom19_mishi_100倍足音_村_遠く", 0.5f);
    //    yield return new WaitForSeconds(1);
    //    CameraObjectsTrs.DOShakePosition(1.0f, 0.001f, 10, 90.0f);

    //    SEPlay("bom32_長く_100倍山側面滑らし_遠く", 0.6f);
    //    yield return new WaitForSeconds(3);
    //    CameraObjectsTrs.DOShakePosition(1.0f, 0.001f, 10, 90.0f);

    //    SEPlay("bom32_長く_100倍山側面滑らし_遠く", 0.7f);
    //    yield return new WaitForSeconds(4);
    //    CameraObjectsTrs.DOShakePosition(1.0f, 0.001f, 10, 90.0f);

    //    SEPlay("bom32_長く_100倍山側面滑らし_遠く", 0.7f);
    //    yield return new WaitForSeconds(2);
    //    CameraObjectsTrs.DOShakePosition(1.0f, 0.001f, 10, 90.0f);

    //    SEPlay("bom32_長く_100倍山側面滑らし");
    //    yield return new WaitForSeconds(2);
    //    CameraObjectsTrs.DOShakePosition(1.0f, 0.001f, 10, 90.0f);

    //    SEPlay("bom32_長く_100倍山側面滑らし_遠く", 0.8f);
    //    yield return new WaitForSeconds(4);
    //    CameraObjectsTrs.DOShakePosition(1.0f, 0.002f, 10, 90.0f);

    //    SEPlay("bom32_長く_100倍山側面滑らし_遠く", 0.8f);
    //    yield return new WaitForSeconds(2);
    //    CameraObjectsTrs.DOShakePosition(1.0f, 0.002f, 10, 90.0f);

    //    SEPlay("bom32_長く_100倍山側面滑らし");
    //    yield return null;
    //    SEPlay("monster-footstep1");
    //    yield return new WaitForSeconds(2);
    //    CameraObjectsTrs.DOShakePosition(2.0f, 0.008f, 10, 90.0f);

    //    SEPlay("bom32_長く_100倍山側面滑らし_遠く");
    //    yield return null;
    //    SEPlay("monster-footstep1");
    //    yield return new WaitForSeconds(3);
    //    CameraObjectsTrs.DOShakePosition(2.0f, 0.010f, 10, 90.0f);

    //    SEPlay("don22_8低い_ゴォオォ");
    //    yield return null;
    //    SEPlay("bom33_goro03_mix_1000倍足音");
    //    yield return new WaitForSeconds(2);

    //    yield break;
    //}

    //IEnumerator ColorTest01()//カラーテスト01
    //{
    //    if (debugEventMoveFlag == true)
    //    {
    //    }
    //    EventReset();

    //    SEPlay("UI_pin");

    //    yield return new WaitForSeconds(1);

    //    FadeWhite(0, 2);
    //    FadeBlack(0, 2);
    //    yield return new WaitForSeconds(2);

    //    SEPlay("UI_pin");
    //    yield return KeyOrWait(1);
    //    SEPlay("UI_pin");

    //    FadeBlack(1, 2);
    //    yield return new WaitForSeconds(2);

    //    EventMove("カラーテスト02");


    //    yield break;
    //}
    //IEnumerator ColorTest02()//カラーテスト02
    //{
    //    if (debugEventMoveFlag == true)
    //    {
    //    }
    //    EventReset();

    //    SEPlay("UI_pin");

    //    yield return new WaitForSeconds(1);

    //    FadeWhite(0, 2);
    //    FadeBlack(0, 2);
    //    yield return new WaitForSeconds(2);

    //    SEPlay("UI_pin");
    //    yield return KeyOrWait(1);
    //    SEPlay("UI_pin");

    //    FadeBlack(1, 2);
    //    yield return new WaitForSeconds(2);

    //    EventMove("カラーテスト01");

    //    yield break;
    //}

    //IEnumerator EditMode()//エディットモード
    //{
    //    if (debugEventMoveFlag == true)
    //    {
    //        ChieriMotion("T-pose", 0f, 0);//デバッグ用アニメ直接再生
    //                                      //タイトルで消した小物復活
    //                                      //HomeworkTrs.gameObject.SetActive(true);
    //        isHwVisLock = false;
    //        DrillTrs.gameObject.SetActive(true);
    //        Drill_chieriTrs.gameObject.SetActive(true);
    //        SharpenObj.gameObject.SetActive(true);
    //        KeshigomuObj.SetActive(true);
    //        GrasstableTrs.gameObject.SetActive(true);
    //        RoomTrs.gameObject.SetActive(true);
    //    }

    //    EventReset();

    //    ////IKプレイヤー見る
    //    //FollowDOMove(IKLookAtEyeTargetTrs, PlayerEyeTargetTrs);
    //    //DOTweenToLAIKSEyes(LAIKEyeS, LAIKSEyesDefWeight, 1);
    //    //FollowDOMove(IKLookAtHeadTargetTrs, PlayerHeadTargetTrs, new Vector3(0, -0.045f, 0));
    //    //DOTweenToLAIKSHead(LAIKHeadS, LAIKSHeadDefWeight, 1);

    //    DB.isChieriPosLock = false;

    //    ////エディットモードテスト
    //    //StartCoroutine(EditModeSystem());

    //    //背比べモードテスト
    //    StartCoroutine(SekurabeMode());

    //    while (true)
    //    {
    //        yield return null;
    //    }

    //}

    #endregion
    // 体験版以降ここまで


}